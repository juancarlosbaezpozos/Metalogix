using HtmlAgilityPack;
using Metalogix.Core.OperationLog;
using Metalogix.DataStructures;
using Metalogix.Permissions;
using Metalogix.SharePoint.Adapters.Authentication;
using Metalogix.SharePoint.Adapters.CSOM2013.Authentication;
using Metalogix.SharePoint.Adapters.Enums;
using Metalogix.SharePoint.Adapters.NWS;
using Metalogix.SharePoint.Adapters.NWS.Properties;
using Metalogix.SharePoint.Adapters.Properties;
using Metalogix.SharePoint.Common;
using Metalogix.SharePoint.Common.Enums;
using Metalogix.SharePoint.Common.Workflow2013;
using Metalogix.Utilities;
using Microsoft.Online.SharePoint.TenantAdministration;
using Microsoft.SharePoint.Client;
using Microsoft.SharePoint.Client.Publishing;
using Microsoft.SharePoint.Client.Taxonomy;
using Microsoft.SharePoint.Client.UserProfiles;
using Microsoft.SharePoint.Client.Utilities;
using Microsoft.SharePoint.Client.Video;
using Microsoft.SharePoint.Client.WebParts;
using Microsoft.SharePoint.Client.Workflow;
using Microsoft.SharePoint.Client.WorkflowServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
using System.Web.Services.Protocols;
using System.Xml;
using System.Xml.Linq;
using System.Xml.XPath;

namespace Metalogix.SharePoint.Adapters.CSOM2013
{
    public class CSOMAdapter : SharePointAdapter, ISharePointReader, ISharePointWriter, IServerHealthMonitor, IMySitesConnector, ISP2013WorkflowAdapter, IMigrationPipeline, ISharePointAdapterCommand
    {
        private class WebPartToEmbed
        {
            private string m_Guid;

            private string m_Zone;

            private string m_sSourceID;

            private string m_sTargetID;

            public string Guid
            {
                get
                {
                    return this.m_Guid;
                }
                set
                {
                    this.m_Guid = value;
                }
            }

            public string ZoneID
            {
                get
                {
                    return this.m_Zone;
                }
                set
                {
                    this.m_Zone = value;
                }
            }

            public string SourceID
            {
                get
                {
                    return this.m_sSourceID;
                }
                set
                {
                    this.m_sSourceID = value;
                }
            }

            public string TargetID
            {
                get
                {
                    return this.m_sTargetID;
                }
                set
                {
                    this.m_sTargetID = value;
                }
            }

            public WebPartToEmbed(string sGuid, string sZone, string sSourceID, string sTargetID)
            {
                this.Guid = sGuid;
                this.ZoneID = sZone;
                this.SourceID = sSourceID;
                this.TargetID = sTargetID;
            }
        }

        private class LanguageTemplatesMissingException : System.Exception
        {
        }

        private enum BatchOperation
        {
            Add,
            Remove
        }

        public const char VALUE_SEPARATOR = ';';

        public const char FIELD_SEPARATOR = '|';

        private const string C_ORPHANED_TERMS = "Orphaned Terms";

        private const string UserAgentString = "Metalogix/20140316 Content Matrix/6.3 (Windows NT 6.1; Win64; x64; rv:6.3.0.1; +http://www.metalogix.com/Products/Content-Matrix.aspx)";

        private const string EnterpriseWikiWebTemplate = "ENTERWIKI";

        private const uint MINIMUM_SHAREPOINT_LIST_VIEW_THRESHOLD = 2000u;

        private const int SLIDE_LIBRARY_TEMPLATE_VALUE = 2100;

        private const int MODERATION_STATUS_APPROVED = 0;

        private const int RETRIES = 5;

        private const int VERSIONS_PER_CHUNK = 500;

        private const string PEOPLE_AND_GROUPS = "PeopleAndGroups";

        private const string TEMPVERSIONSTRING = "Temporary Version - (To be deleted)";

        private const string CommunitySiteTemplate = "Community";

        private const string ORPHANLOOKUP = "OrphanLookup";

        private const string WIDTH_FIELD_ID_2010 = "7e68a0f9-af76-404c-9613-6f82bc6dc28c";

        private const string HIDDEN_WEBPART_ZONE = "wpz";

        private bool? _hasTaxonomySupport;

        private static System.Guid C_HASH_TAGS_TERMSET_GUID = new System.Guid("3CEB0050-69A1-40E7-A427-83E2FAC80C27");

        private static System.Linq.Expressions.Expression<System.Func<Label, object>>[] s_labelAttributesFilter = new System.Linq.Expressions.Expression<System.Func<Label, object>>[]
        {
            (Label label) => (object)label.IsDefaultForLanguage,
            (Label label) => (object)label.Language,
            (Label label) => label.Value
        };

        private static System.Linq.Expressions.Expression<System.Func<Term, object>>[] s_termAttributesFilter = new System.Linq.Expressions.Expression<System.Func<Term, object>>[]
        {
            (Term ta) => (object)ta.Id,
            (Term ta) => ta.Name,
            (Term ta) => ta.Description,
            (Term ta) => (object)ta.IsAvailableForTagging,
            (Term ta) => (object)ta.IsRoot,
            (Term ta) => (object)ta.TermsCount,
            (Term ta) => (object)ta.IsDeprecated,
            (Term ta) => (object)ta.IsKeyword,
            (Term ta) => (object)ta.IsReused,
            (Term ta) => (object)ta.IsPinned,
            (Term ta) => (object)ta.IsPinnedRoot,
            (Term ta) => (object)ta.IsSourceTerm,
            (Term ta) => ta.CustomSortOrder,
            (Term ta) => ta.Owner,
            (Term ta) => ta.Labels.Include(CSOMAdapter.s_labelAttributesFilter),
            (Term ta) => ta.MergedTermIds,
            (Term ta) => ta.CustomProperties
        };

        private static System.Linq.Expressions.Expression<System.Func<TermStore, object>>[] s_termStoreFilter = new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[]
        {
            (TermStore ts) => (object)ts.Id,
            (TermStore ts) => ts.Name,
            (TermStore ts) => (object)ts.IsOnline,
            (TermStore ts) => ts.ContentTypePublishingHub,
            (TermStore ts) => (object)ts.DefaultLanguage,
            (TermStore ts) => (object)ts.WorkingLanguage,
            (TermStore ts) => ts.Languages
        };

        private static System.Linq.Expressions.Expression<System.Func<TermGroup, object>>[] s_termGroupFilter = new System.Linq.Expressions.Expression<System.Func<TermGroup, object>>[]
        {
            (TermGroup g) => (object)g.TermStore.Id,
            (TermGroup g) => (object)g.TermStore.DefaultLanguage,
            (TermGroup g) => (object)g.Id,
            (TermGroup g) => g.Name,
            (TermGroup g) => g.Description,
            (TermGroup g) => (object)g.IsSiteCollectionGroup,
            (TermGroup g) => (object)g.IsSystemGroup
        };

        private static System.Linq.Expressions.Expression<System.Func<TermSet, object>>[] s_termSetFilter = new System.Linq.Expressions.Expression<System.Func<TermSet, object>>[]
        {
            (TermSet s) => (object)s.Id,
            (TermSet s) => s.Name,
            (TermSet s) => (object)s.IsAvailableForTagging,
            (TermSet s) => s.Contact,
            (TermSet s) => s.Description,
            (TermSet s) => (object)s.IsOpenForTermCreation,
            (TermSet s) => s.CustomSortOrder,
            (TermSet s) => s.Owner,
            (TermSet s) => s.TermStore,
            (TermSet s) => (object)s.TermStore.DefaultLanguage,
            (TermSet s) => s.Group,
            (TermSet s) => (object)s.Group.Id,
            (TermSet s) => s.Group.Name,
            (TermSet s) => (object)s.Group.IsSiteCollectionGroup,
            (TermSet s) => (object)s.Group.IsSystemGroup,
            (TermSet s) => s.Stakeholders,
            (TermSet s) => s.Terms,
            (TermSet s) => s.Terms.Include(CSOMAdapter.s_termAttributesFilter)
        };

        private static System.Linq.Expressions.Expression<System.Func<TermSet, object>>[] s_termSetLoadFilter = new System.Linq.Expressions.Expression<System.Func<TermSet, object>>[]
        {
            (TermSet s) => (object)s.Id,
            (TermSet s) => s.Name,
            (TermSet s) => (object)s.IsAvailableForTagging,
            (TermSet s) => s.Contact,
            (TermSet s) => s.Description,
            (TermSet s) => (object)s.IsOpenForTermCreation,
            (TermSet s) => s.CustomSortOrder,
            (TermSet s) => s.Owner,
            (TermSet s) => s.TermStore,
            (TermSet s) => (object)s.TermStore.DefaultLanguage,
            (TermSet s) => s.Group,
            (TermSet s) => (object)s.Group.Id,
            (TermSet s) => s.Group.Name,
            (TermSet s) => (object)s.Group.IsSiteCollectionGroup,
            (TermSet s) => (object)s.Group.IsSystemGroup,
            (TermSet s) => s.Stakeholders,
            (TermSet s) => s.Terms,
            (TermSet s) => s.Terms.Include(CSOMAdapter.s_termAttributesFilter)
        };

        private static System.Linq.Expressions.Expression<System.Func<Term, object>>[] s_termFilter = new System.Linq.Expressions.Expression<System.Func<Term, object>>[]
        {
            (Term t) => (object)t.Id,
            (Term t) => t.Name,
            (Term t) => t.Description,
            (Term t) => (object)t.IsAvailableForTagging,
            (Term t) => (object)t.IsRoot,
            (Term t) => (object)t.TermsCount,
            (Term t) => (object)t.IsDeprecated,
            (Term t) => (object)t.IsKeyword,
            (Term t) => (object)t.IsReused,
            (Term t) => (object)t.IsPinned,
            (Term t) => (object)t.IsPinnedRoot,
            (Term t) => (object)t.IsSourceTerm,
            (Term t) => t.CustomSortOrder,
            (Term t) => t.Owner,
            (Term t) => t.Labels,
            (Term t) => t.MergedTermIds,
            (Term t) => t.CustomProperties,
            (Term t) => t.Terms,
            (Term t) => t.Terms.Include(CSOMAdapter.s_termAttributesFilter),
            (Term t) => t.TermStore,
            (Term t) => (object)t.TermStore.Id,
            (Term t) => (object)t.TermStore.DefaultLanguage,
            (Term t) => t.TermStore.Languages,
            (Term t) => (object)t.TermSet.Id,
            (Term t) => t.TermSet.Name,
            (Term t) => (object)t.TermSet.Group.Id,
            (Term t) => t.TermSet.Group.Name,
            (Term t) => (object)t.TermSet.Group.IsSiteCollectionGroup,
            (Term t) => (object)t.Parent.Id,
            (Term t) => t.Parent.Name,
            (Term t) => (object)t.Parent.TermSet.Id,
            (Term t) => t.Parent.TermSet.Name,
            (Term t) => (object)t.Parent.TermSet.Group.Id,
            (Term t) => t.Parent.TermSet.Group.Name,
            (Term t) => (object)t.Parent.TermSet.Group.IsSiteCollectionGroup,
            (Term t) => (object)t.SourceTerm.Id,
            (Term t) => t.SourceTerm.Name,
            (Term t) => (object)t.SourceTerm.TermSet.Id,
            (Term t) => t.SourceTerm.TermSet.Name,
            (Term t) => (object)t.SourceTerm.TermSet.Group.Id,
            (Term t) => t.SourceTerm.TermSet.Group.Name,
            (Term t) => (object)t.SourceTerm.TermSet.Group.IsSiteCollectionGroup,
            (Term t) => t.ReusedTerms.Include(new System.Linq.Expressions.Expression<System.Func<Term, object>>[]
            {
                (Term rt) => (object)rt.Id,
                (Term rt) => rt.Name,
                (Term rt) => (object)rt.TermSet.Id,
                (Term rt) => rt.TermSet.Name,
                (Term rt) => (object)rt.TermSet.Group.Id,
                (Term rt) => rt.TermSet.Group.Name,
                (Term rt) => (object)rt.TermSet.Group.IsSiteCollectionGroup
            })
        };

        private static System.Linq.Expressions.Expression<System.Func<Term, object>>[] s_termLoadFilter = new System.Linq.Expressions.Expression<System.Func<Term, object>>[]
        {
            (Term t) => (object)t.Id,
            (Term t) => t.Name,
            (Term t) => t.Description,
            (Term t) => (object)t.IsAvailableForTagging,
            (Term t) => (object)t.IsRoot,
            (Term t) => (object)t.TermsCount,
            (Term t) => (object)t.IsDeprecated,
            (Term t) => (object)t.IsKeyword,
            (Term t) => (object)t.IsReused,
            (Term t) => (object)t.IsPinned,
            (Term t) => (object)t.IsPinnedRoot,
            (Term t) => (object)t.IsSourceTerm,
            (Term t) => t.CustomSortOrder,
            (Term t) => t.Owner,
            (Term t) => t.MergedTermIds,
            (Term t) => t.Labels,
            (Term t) => t.CustomProperties,
            (Term t) => t.Terms,
            (Term t) => t.Terms.Include(CSOMAdapter.s_termAttributesFilter),
            (Term t) => t.TermStore,
            (Term t) => (object)t.TermStore.Id,
            (Term t) => (object)t.TermStore.DefaultLanguage,
            (Term t) => t.TermStore.Languages,
            (Term t) => (object)t.TermSet.Id,
            (Term t) => t.TermSet.Name,
            (Term t) => (object)t.TermSet.Group.Id,
            (Term t) => t.TermSet.Group.Name,
            (Term t) => (object)t.TermSet.Group.IsSiteCollectionGroup,
            (Term t) => (object)t.Parent.Id,
            (Term t) => t.Parent.Name,
            (Term t) => (object)t.Parent.TermSet.Id,
            (Term t) => t.Parent.TermSet.Name,
            (Term t) => (object)t.Parent.TermSet.Group.Id,
            (Term t) => t.Parent.TermSet.Group.Name,
            (Term t) => (object)t.Parent.TermSet.Group.IsSiteCollectionGroup,
            (Term t) => (object)t.SourceTerm.Id,
            (Term t) => t.SourceTerm.Name,
            (Term t) => (object)t.SourceTerm.TermSet.Id,
            (Term t) => t.SourceTerm.TermSet.Name,
            (Term t) => (object)t.SourceTerm.TermSet.Group.Id,
            (Term t) => t.SourceTerm.TermSet.Group.Name,
            (Term t) => (object)t.SourceTerm.TermSet.Group.IsSiteCollectionGroup
        };

        private volatile ServerHealthInformation _serverHealth;

        private ServerHealthMonitorSynchronizer _serverHealthSync;

        private string m_sUrl;

        private Credentials m_credentials = new Credentials();

        private string _webId;

        private System.Guid _siteId = System.Guid.Empty;

        private static bool? m_bSupportsPublishing = null;

        private static System.Type s_publishingType = null;

        private Metalogix.SharePoint.Adapters.TimeZoneInformation _timeZone;

        private readonly object _timeZoneLock = new object();

        private object m_oLockNWSAdapter = new object();

        private NWSAdapter m_nwsAdpater;

        private static System.ComponentModel.Int32Converter s_IntConverter = new System.ComponentModel.Int32Converter();

        private static System.ComponentModel.DoubleConverter s_DoubleConverter = new System.ComponentModel.DoubleConverter();

        private static System.Globalization.CultureInfo s_CultureInfo = new System.Globalization.CultureInfo("en-US");

        private static System.Guid EnterPriseKeywordsFieldId = new System.Guid("23f27201-bee3-471e-b2e7-b64fd8b7ca38");

        private System.Collections.Generic.Dictionary<System.Guid, string> _mappedListNames = new System.Collections.Generic.Dictionary<System.Guid, string>();

        private System.Collections.Generic.Dictionary<System.Guid, Web> _mappedWebNames = new System.Collections.Generic.Dictionary<System.Guid, Web>();

        private static readonly string[] FieldsThatSupportEmbedding = new string[]
        {
            "WikiField",
            "PublishingPageContent"
        };

        protected static uint? s_iGetListQueryRowLimit = null;

        private WebPartTemplateResourceManager m_webPartPageTemplateManager;

        private static int PAGES_LIBRARY_TEMPLATE_ID = 850;

        private AdapterData _adapterData;

        private int[] webNotProvisionedErrorCodes = new int[]
        {
            -2146232832,
            -2147217873,
            -2147467259,
            -2130246376
        };

        private static System.Guid PUBLISHINGGUID = new System.Guid("8c6a6980-c3d9-440e-944c-77f93bc65a7e");

        private static System.Guid RECORDSCENTERGUID = new System.Guid("e0a45587-1069-46bd-bf05-8c8db8620b08");

        private static string s_WorkflowListTitle = "Workflows";

        public override string ServerType
        {
            get
            {
                return "Remote Connection";
            }
        }

        public override ExternalizationSupport ExternalizationSupport
        {
            get
            {
                return ExternalizationSupport.NotSupported;
            }
        }

        public override Credentials Credentials
        {
            get
            {
                return this.m_credentials;
            }
            set
            {
                this.m_credentials = value;
                if (this.m_nwsAdpater != null)
                {
                    this.m_nwsAdpater.Credentials = value;
                }
            }
        }

        public override string Url
        {
            get
            {
                return this.m_sUrl;
            }
            set
            {
                if (value == null)
                {
                    throw new System.Exception("Invalid Url. Value cannot be null");
                }
                if (value.ToLower().StartsWith("http://") || value.ToLower().StartsWith("https://"))
                {
                    this.m_sUrl = value;
                }
                else
                {
                    this.m_sUrl = this.Server + CSOMAdapter.GetServerRelativeUrl(value);
                }
                if (this.m_nwsAdpater != null && this.m_nwsAdpater.Url != this.m_sUrl)
                {
                    this.m_nwsAdpater.Url = this.m_sUrl;
                }
            }
        }

        public override System.Net.WebProxy AdapterProxy
        {
            get
            {
                return base.AdapterProxy;
            }
            set
            {
                base.AdapterProxy = value;
                if (this.m_nwsAdpater != null)
                {
                    this.m_nwsAdpater.AdapterProxy = value;
                }
            }
        }

        public override X509CertificateWrapperCollection IncludedCertificates
        {
            get
            {
                return base.IncludedCertificates;
            }
            set
            {
                base.IncludedCertificates = value;
                if (this.m_nwsAdpater != null)
                {
                    this.m_nwsAdpater.IncludedCertificates = value;
                }
            }
        }

        public override Credentials ProxyCredentials
        {
            get
            {
                return base.ProxyCredentials;
            }
            set
            {
                base.ProxyCredentials = value;
                if (this.m_nwsAdpater != null)
                {
                    this.m_nwsAdpater.ProxyCredentials = value;
                }
            }
        }

        public override CookieManager CookieManager
        {
            get
            {
                return base.CookieManager;
            }
            set
            {
                base.CookieManager = value;
                if (this.m_nwsAdpater != null)
                {
                    this.m_nwsAdpater.CookieManager = value;
                }
            }
        }

        public override string WebID
        {
            get
            {
                if (this._webId == null)
                {
                    this.LoadIds();
                }
                return this._webId;
            }
            set
            {
            }
        }

        public System.Guid SiteID
        {
            get
            {
                if (this._siteId == System.Guid.Empty)
                {
                    this.LoadIds();
                }
                return this._siteId;
            }
        }

        public override string Server
        {
            get
            {
                return Utils.GetServerPart(this.Url);
            }
        }

        public override string ServerRelativeUrl
        {
            get
            {
                return CSOMAdapter.GetServerRelativeUrl(this.Url);
            }
        }

        public override ISharePointReader Reader
        {
            get
            {
                return SharePointReader.GetSharePointReader(this);
            }
        }

        public override ISharePointWriter Writer
        {
            get
            {
                if (base.IsReadOnly())
                {
                    return null;
                }
                return SharePointWriter.GetSharePointWriter(this);
            }
        }

        public override string AdapterShortName
        {
            get
            {
                return "CSOM";
            }
        }

        public override string ConnectionTypeDisplayString
        {
            get
            {
                return "Remote Connection (SharePoint Client Side Object Model 2013)";
            }
        }

        public override string ServerUrl
        {
            get
            {
                return Utils.GetServerPart(this.Url);
            }
        }

        public override bool IsPortal2003Connection
        {
            get
            {
                return false;
            }
        }

        private static bool SupportsPublishing
        {
            get
            {
                if (!CSOMAdapter.m_bSupportsPublishing.HasValue)
                {
                    try
                    {
                        CSOMAdapter.LoadPublishingDLL();
                        CSOMAdapter.m_bSupportsPublishing = new bool?(true);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        CSOMAdapter.m_bSupportsPublishing = new bool?(false);
                    }
                }
                return CSOMAdapter.m_bSupportsPublishing.Value;
            }
        }

        public Metalogix.SharePoint.Adapters.TimeZoneInformation TimeZone
        {
            get
            {
                if (this._timeZone == null)
                {
                    lock (this._timeZoneLock)
                    {
                        if (this._timeZone == null)
                        {
                            try
                            {
                                using (ClientContext clientContext = this.GetClientContext())
                                {
                                    Web web = clientContext.Web;
                                    Microsoft.SharePoint.Client.TimeZone timeZone = web.RegionalSettings.TimeZone;
                                    clientContext.Load<Microsoft.SharePoint.Client.TimeZone>(timeZone, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.TimeZone, object>>[]
                                    {
                                        (Microsoft.SharePoint.Client.TimeZone z) => (object)z.Id
                                    });
                                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                                    if (timeZone.Id >= 0)
                                    {
                                        this._timeZone = Metalogix.SharePoint.Adapters.TimeZoneInformation.GetTimeZone(timeZone.Id);
                                    }
                                }
                            }
                            catch (System.Exception ex)
                            {
                                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            }
                            if (this._timeZone == null)
                            {
                                this._timeZone = Metalogix.SharePoint.Adapters.TimeZoneInformation.GetLocalTimeZone();
                            }
                        }
                    }
                }
                return this._timeZone;
            }
        }

        private NWSAdapter NWSAdapter
        {
            get
            {
                lock (this.m_oLockNWSAdapter)
                {
                    if (this.m_nwsAdpater == null)
                    {
                        this.m_nwsAdpater = new NWSAdapter(this.Url, this.Credentials);
                        this.m_nwsAdpater.AdapterProxy = this.AdapterProxy;
                        this.m_nwsAdpater.IncludedCertificates = this.IncludedCertificates;
                        this.m_nwsAdpater.ProxyCredentials = this.ProxyCredentials;
                        this.m_nwsAdpater.CookieManager = this.CookieManager;
                    }
                }
                return this.m_nwsAdpater;
            }
        }

        internal WebPartTemplateResourceManager WebPartPageTemplateManager
        {
            get
            {
                if (this.m_webPartPageTemplateManager == null)
                {
                    this.m_webPartPageTemplateManager = new WebPartTemplateResourceManager(WebPartTemplateResourceLocation.EmbeddedWithinAssembly, base.SharePointVersion, null);
                }
                return this.m_webPartPageTemplateManager;
            }
        }

        internal AdapterData AdapterData
        {
            get
            {
                if (this._adapterData == null)
                {
                    this._adapterData = AdapterData.GetAdapterData(this);
                }
                return this._adapterData;
            }
        }

        public string AddExternalList(string title, string description, string entity, string entityNamespace, string lobInstance, string specificFinder, SharePointAdapter callingAdapter)
        {
            if (callingAdapter == null)
            {
                throw new System.ArgumentException("Calling adapter must be specified.", "callingAdapter");
            }
            if (string.IsNullOrEmpty(entity))
            {
                throw new System.ArgumentException("Entity name must be specified.", "entity");
            }
            if (string.IsNullOrEmpty(entityNamespace))
            {
                throw new System.ArgumentException("Entity namespace must be specified.", "entityNamespace");
            }
            if (string.IsNullOrEmpty(lobInstance))
            {
                throw new System.ArgumentException("Lob instance name must be specified.", "lobInstance");
            }
            string result;
            try
            {
                if (callingAdapter.HasActiveCookieManager && callingAdapter.CookieManager.LockCookie)
                {
                    callingAdapter.CookieManager.AquireCookieLock();
                }
                using (ClientContext clientContext = this.GetClientContext(callingAdapter, false))
                {
                    Web web = clientContext.Web;
                    ListCollection lists = web.Lists;
                    System.Collections.Generic.IDictionary<string, string> dictionary = new System.Collections.Generic.Dictionary<string, string>();
                    dictionary.Add("Entity", entity);
                    dictionary.Add("EntityNamespace", entityNamespace);
                    dictionary.Add("LobSystemInstance", lobInstance);
                    dictionary.Add("SpecificFinder", specificFinder);
                    ListCreationInformation parameters = new ListCreationInformation
                    {
                        Title = title,
                        Description = description,
                        DataSourceProperties = dictionary,
                        TemplateType = 600
                    };
                    List list = lists.Add(parameters);
                    clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List list0) => (object)list0.Id
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
                    result = list.Id.ToString();
                }
            }
            finally
            {
                if (callingAdapter.HasActiveCookieManager && callingAdapter.CookieManager.LockCookie)
                {
                    callingAdapter.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetExternalItems(string entity, string entityNamespace, string operation, string listID)
        {
            if (string.IsNullOrEmpty(listID))
            {
                throw new System.ArgumentException("ListID must be specified.", "listID");
            }
            string result;
            try
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(listID));
                    if (byId == null)
                    {
                        throw new System.Exception(string.Format("Unable to find the list with ID '{0}' on the following URL '{1}'", listID, this.Url));
                    }
                    CamlQuery query = new CamlQuery();
                    System.Linq.IQueryable<ListItem> items = byId.GetItems(query);
                    System.Collections.Generic.IEnumerable<ListItem> enumerable = clientContext.LoadQuery<ListItem>(items);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter();
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    xmlTextWriter.WriteStartElement("SPExternalItemCollection");
                    foreach (ListItem current in enumerable)
                    {
                        xmlTextWriter.WriteStartElement("SPExternalItem");
                        xmlTextWriter.WriteAttributeString("BdcIdentity", (current.FieldValues["BdcIdentity"] != null) ? current.FieldValues["BdcIdentity"].ToString() : string.Empty);
                        xmlTextWriter.WriteAttributeString("Identity", current.Id.ToString());
                        foreach (System.Collections.Generic.KeyValuePair<string, object> current2 in current.FieldValues)
                        {
                            if (string.CompareOrdinal(current2.Key, "BdcIdentity") != 0)
                            {
                                xmlTextWriter.WriteStartElement("SPExternalItemProperty");
                                xmlTextWriter.WriteAttributeString("Name", current2.Key);
                                xmlTextWriter.WriteAttributeString("Value", (current2.Value == null) ? string.Empty : current2.Value.ToString());
                                xmlTextWriter.WriteAttributeString("Identifier", false.ToString());
                                xmlTextWriter.WriteEndElement();
                            }
                        }
                        xmlTextWriter.WriteEndElement();
                    }
                    xmlTextWriter.WriteEndElement();
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetExternalContentTypes()
        {
            throw new System.NotImplementedException();
        }

        public string GetExternalContentTypeOperations(string sExternalContentTypeNamespace, string sExternalContentTypeName)
        {
            throw new System.NotImplementedException();
        }

        public System.Guid CreateExternalList(Web web, string sName, string sDescription, System.Xml.XmlNode listXML)
        {
            if (listXML.Attributes["LobSystemInstance"] == null)
            {
                throw new System.Exception("LobSystemInstance property is not set for the external list.");
            }
            if (listXML.Attributes["EntityNamespace"] == null)
            {
                throw new System.Exception("EntityNamespace property is not set for the external list.");
            }
            if (listXML.Attributes["Entity"] == null)
            {
                throw new System.Exception("Entity property is not set for the external list.");
            }
            if (listXML.Attributes["SpecificFinder"] == null)
            {
                throw new System.Exception("SpecificFinder property is not set for the external list.");
            }
            string innerText = listXML.Attributes["LobSystemInstance"].InnerText;
            string innerText2 = listXML.Attributes["EntityNamespace"].InnerText;
            string innerText3 = listXML.Attributes["Entity"].InnerText;
            string innerText4 = listXML.Attributes["SpecificFinder"].InnerText;
            string g = this.AddExternalList(sName, sDescription, innerText3, innerText2, innerText, innerText4, this);
            return new System.Guid(g);
        }

        public void WriteBCSProperties(System.Xml.XmlWriter xmlWriter, System.Xml.XmlNode dataSource)
        {
            if (dataSource != null)
            {
                System.Xml.XmlNode xmlNode = XmlUtility.RunXPathQuerySelectSingle(dataSource, "//sp:Property[@Name='LobSystemInstance']");
                System.Xml.XmlNode xmlNode2 = XmlUtility.RunXPathQuerySelectSingle(dataSource, "//sp:Property[@Name='EntityNamespace']");
                System.Xml.XmlNode xmlNode3 = XmlUtility.RunXPathQuerySelectSingle(dataSource, "//sp:Property[@Name='Entity']");
                System.Xml.XmlNode xmlNode4 = XmlUtility.RunXPathQuerySelectSingle(dataSource, "//sp:Property[@Name='SpecificFinder']");
                xmlWriter.WriteAttributeString("LobSystemInstance", xmlNode.Attributes["Value"].Value);
                xmlWriter.WriteAttributeString("EntityNamespace", xmlNode2.Attributes["Value"].Value);
                xmlWriter.WriteAttributeString("Entity", xmlNode3.Attributes["Value"].Value);
                xmlWriter.WriteAttributeString("SpecificFinder", xmlNode4.Attributes["Value"].Value);
            }
        }

        private string GetCurrentTargetLanguageOrder(ClientContext context, Web targetWeb)
        {
            string result = string.Empty;
            if (targetWeb.IsMultilingual)
            {
                if (!targetWeb.CurrentUser.IsPropertyAvailable("LoginName"))
                {
                    context.Load<User>(targetWeb.CurrentUser, new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                    {
                        (User user) => user.LoginName
                    });
                    CSOMAdapter.CallExecuteQuery(context, this);
                }
                PeopleManager peopleManager = new PeopleManager(context);
                ClientResult<string> userProfilePropertyFor = peopleManager.GetUserProfilePropertyFor(targetWeb.CurrentUser.LoginName, "SPS-MUILanguages");
                context.Load<Web>(targetWeb, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web web) => web.Url
                });
                CSOMAdapter.CallExecuteQuery(context, this);
                if (userProfilePropertyFor != null)
                {
                    result = userProfilePropertyFor.Value;
                }
            }
            return result;
        }

        private bool SetTargetLanguage(ClientContext context, Web targetWeb, string languageOrder, int languageSettingsMaximumInterval, int languageSettingsRefreshInterval)
        {
            try
            {
                if (!targetWeb.CurrentUser.IsPropertyAvailable("LoginName"))
                {
                    context.Load<User>(targetWeb.CurrentUser, new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                    {
                        (User user) => user.LoginName
                    });
                    CSOMAdapter.CallExecuteQuery(context, this);
                }
                PeopleManager peopleManager = new PeopleManager(context);
                peopleManager.SetSingleValueProfileProperty(targetWeb.CurrentUser.LoginName, "SPS-MUILanguages", languageOrder);
                CSOMAdapter.CallExecuteQuery(context, this);
                return this.IsLanguageChangeReflected(languageOrder, targetWeb.Url, languageSettingsMaximumInterval, languageSettingsRefreshInterval);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, "An error occured while setting target language", null);
            }
            return false;
        }

        private bool IsLanguageChangeReflected(string language, string webUrl, int languageSettingsMaximumInterval, int languageSettingsRefreshInterval)
        {
            int num = (languageSettingsRefreshInterval <= 0) ? 15 : languageSettingsRefreshInterval;
            int num2 = (languageSettingsMaximumInterval <= 0) ? 300 : languageSettingsMaximumInterval;
            System.DateTime now = System.DateTime.Now;
            while (System.DateTime.Now.Subtract(now) < System.TimeSpan.FromMilliseconds((double)(num2 * 1000)))
            {
                string pageUrl = string.Format("{0}/_layouts/15/settings.aspx", webUrl);
                string responseStringFromPost = this.GetResponseStringFromPost(pageUrl, "", string.Empty, null);
                if (this.IsTargetLanguageUpdated(responseStringFromPost, language))
                {
                    return true;
                }
                System.Threading.Thread.Sleep(num * 1000);
            }
            return false;
        }

        private bool IsTargetLanguageUpdated(string htmlContent, string language)
        {
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(htmlContent);
            foreach (HtmlNode current in ((System.Collections.Generic.IEnumerable<HtmlNode>)htmlDocument.DocumentNode.SelectNodes("//script[@type=\"text/javascript\"]")))
            {
                string text = "currentUICultureName:";
                if (current.OuterHtml.Contains(text))
                {
                    string outerHtml = current.OuterHtml;
                    int num = outerHtml.IndexOf("currentUICultureName:", System.StringComparison.InvariantCultureIgnoreCase);
                    if (num > 0)
                    {
                        int num2 = outerHtml.IndexOf("-", num, System.StringComparison.InvariantCultureIgnoreCase);
                        if (num > 0)
                        {
                            string text2 = outerHtml.Substring(num, num2);
                            string value = text2.Substring(text.Length, num2 - num - text.Length).Trim(new char[]
                            {
                                ' ',
                                '"'
                            });
                            if (language.StartsWith(value, System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        private void LoadWebSupportedCultures(OperationReporting opResult)
        {
            string text = string.Empty;
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                this.LoadWebSupportedCultures(clientContext, clientContext.Web);
                if (clientContext.Web.IsMultilingual)
                {
                    string text2 = ",";
                    System.Collections.Generic.IEnumerable<int> supportedUILanguageIds = clientContext.Web.SupportedUILanguageIds;
                    foreach (int current in supportedUILanguageIds)
                    {
                        text = text + current + text2;
                    }
                    text = text.TrimEnd(text2.ToCharArray());
                }
            }
            opResult.LogObjectXml(text);
        }

        private void GetTargetLanguage(OperationReporting opResult)
        {
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web web) => web.CurrentUser
                });
                clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web web) => web.Url,
                    (Web web) => (object)web.IsMultilingual
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                opResult.LogObjectXml(this.GetCurrentTargetLanguageOrder(clientContext, clientContext.Web));
            }
        }

        private void SetTargetLangauge(string commandConfigurationXml, OperationReporting opResult, int languageSettingsMaximumInterval, int languageSettingsRefreshInterval)
        {
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web web) => web.CurrentUser,
                    (Web web) => web.Url
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                opResult.LogObjectXml(this.SetTargetLanguage(clientContext, clientContext.Web, commandConfigurationXml, languageSettingsMaximumInterval, languageSettingsRefreshInterval).ToString());
            }
        }

        private void CopyLanguageResourcesForViews(string commandConfigurationXml, OperationReporting opResult)
        {
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                try
                {
                    ListViewLanguageResourceConfiguration listViewLanguageResourceConfiguration = commandConfigurationXml.Deserialize<ListViewLanguageResourceConfiguration>();
                    if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                    {
                        this.CookieManager.AquireCookieLock();
                    }
                    if (listViewLanguageResourceConfiguration.ViewLanguageResoures.Count > 0)
                    {
                        List list;
                        clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web web) => web.Lists.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                            {
                                (List list3) => list3.Views,
                                (List list4) => list4.Title
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        list = null;
                        foreach (ViewLanguageResource current in listViewLanguageResourceConfiguration.ViewLanguageResoures)
                        {
                            if (list == null || !list.Title.Equals(current.ListTitle, System.StringComparison.OrdinalIgnoreCase))
                            {
                                list = clientContext.Web.Lists.GetByTitle(current.ListTitle);
                                if (list != null)
                                {
                                    try
                                    {
                                        clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                                        {
                                            (List tarList) => tarList.Title
                                        });
                                        View view;
                                        clientContext.Load<ViewCollection>(list.Views, new System.Linq.Expressions.Expression<System.Func<ViewCollection, object>>[]
                                        {
                                            (ViewCollection views) => views.Include(new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                                            {
                                                (View view0) => view0.ServerRelativeUrl
                                            })
                                        });
                                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                                    }
                                    catch (System.Exception ex)
                                    {
                                        string message = string.Format("Error occurred while retrieving list information for list: '{0}'", current.ListTitle);
                                        opResult.LogInformation(message, ex.StackTrace);
                                        continue;
                                    }
                                }
                            }
                            if (list != null)
                            {
                                View view = CSOMAdapter.GetView(list, current.ViewUrl);
                                if (view != null)
                                {
                                    try
                                    {
                                        clientContext.PendingRequest.RequestExecutor.WebRequest.Headers["Accept-Language"] = current.Language;
                                        view.Title = current.ViewTitleResource;
                                        view.Update();
                                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                                    }
                                    catch (System.Exception ex2)
                                    {
                                        string message2 = string.Format("Error occurred while updating language resource for view with title: '{0}'", current.ViewTitleResource);
                                        opResult.LogInformation(message2, ex2.StackTrace);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (System.Exception exception)
                {
                    opResult.LogError(exception, "An error occured while copying language resources for views.");
                }
                finally
                {
                    if (clientContext.PendingRequest.RequestExecutor.WebRequest.Headers["Accept-Language"] != null)
                    {
                        clientContext.PendingRequest.RequestExecutor.WebRequest.Headers.Remove("Accept-Language");
                    }
                    if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                    {
                        this.CookieManager.ReleaseCookieLock();
                    }
                }
            }
        }

        private void AcquireCookieLock()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
        }

        private void ReleaseCookieLock()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.ReleaseCookieLock();
            }
        }

        public void ProvisionPersonalSites(string[] emails)
        {
            if (emails == null)
            {
                throw new System.ArgumentNullException("emails");
            }
            if (emails.Length > 1)
            {
                throw new System.NotSupportedException("There is currently no support for multiple emails.  Please retry request with only one (1) email.");
            }
            try
            {
                this.AcquireCookieLock();
                string email = emails.Single<string>();
                using (ClientContext clientContext = this.GetClientContext())
                {
                    ProfileLoader profileLoader = ProfileLoader.GetProfileLoader(clientContext);
                    profileLoader.CreatePersonalSiteEnqueueBulk(emails);
                    clientContext.ExecuteQuery();
                    this.WaitForPersonalSiteProvisioning(clientContext, email);
                }
                using (ClientContext clientContext2 = this.GetClientContext())
                {
                    Tenant tenant = new Tenant(clientContext2);
                    string personalUrlFromEmail = this.GetPersonalUrlFromEmail(clientContext2, email);
                    CSOMAdapter.AddCurrentUserAsSiteAdmin(personalUrlFromEmail, clientContext2, tenant);
                }
            }
            finally
            {
                this.ReleaseCookieLock();
            }
        }

        private void WaitForPersonalSiteProvisioning(ClientContext context, string email)
        {
            int num = 0;
            string accountNameFromEmail = this.GetAccountNameFromEmail(context, email);
            while (!this.HasPersonalSite(context, accountNameFromEmail))
            {
                if (num > 900000)
                {
                    throw new System.TimeoutException(string.Format("Provisioning personal sites exceeded maxmimum time allowed. (max time: {0})", "15 minutes"));
                }
                System.Threading.Thread.Sleep(60000);
                num += 60000;
            }
        }

        public void RemovePersonalSite(string email)
        {
            try
            {
                this.AcquireCookieLock();
                using (ClientContext clientContext = this.GetClientContext())
                {
                    string accountNameFromEmail = this.GetAccountNameFromEmail(clientContext, email);
                    PeopleManager peopleManager = new PeopleManager(clientContext);
                    PersonProperties propertiesFor = peopleManager.GetPropertiesFor(accountNameFromEmail);
                    clientContext.Load<PersonProperties>(propertiesFor, new System.Linq.Expressions.Expression<System.Func<PersonProperties, object>>[]
                    {
                        (PersonProperties p) => p.PersonalUrl
                    });
                    clientContext.ExecuteQuery();
                    if (propertiesFor != null)
                    {
                        Tenant tenant = new Tenant(clientContext);
                        tenant.RemoveSite(propertiesFor.PersonalUrl.TrimEnd(new char[]
                        {
                            '/'
                        }));
                        clientContext.ExecuteQuery();
                    }
                }
            }
            finally
            {
                this.ReleaseCookieLock();
            }
        }

        public bool HasPersonalSite(string email)
        {
            bool result;
            try
            {
                this.AcquireCookieLock();
                using (ClientContext clientContext = this.GetClientContext())
                {
                    string accountNameFromEmail = this.GetAccountNameFromEmail(clientContext, email);
                    result = this.HasPersonalSite(clientContext, accountNameFromEmail);
                }
            }
            finally
            {
                this.ReleaseCookieLock();
            }
            return result;
        }

        public string GetPersonalSite(string email)
        {
            string result;
            try
            {
                this.AcquireCookieLock();
                using (ClientContext clientContext = this.GetClientContext())
                {
                    string personalUrlFromEmail = this.GetPersonalUrlFromEmail(clientContext, email);
                    if (string.IsNullOrEmpty(personalUrlFromEmail))
                    {
                        result = string.Empty;
                    }
                    else
                    {
                        using (ClientContext clientContext2 = this.GetClientContext(personalUrlFromEmail))
                        {
                            if (!this.IsCurrentUserSiteAdmin(clientContext2))
                            {
                                Tenant tenant = new Tenant(clientContext);
                                CSOMAdapter.AddCurrentUserAsSiteAdmin(personalUrlFromEmail, clientContext, tenant);
                            }
                            result = this.GetSiteXml(clientContext2, false);
                        }
                    }
                }
            }
            finally
            {
                this.ReleaseCookieLock();
            }
            return result;
        }

        private string GetPersonalUrlFromEmail(ClientContext context, string email)
        {
            string accountNameFromEmail = this.GetAccountNameFromEmail(context, email);
            PeopleManager peopleManager = new PeopleManager(context);
            PersonProperties propertiesFor = peopleManager.GetPropertiesFor(accountNameFromEmail);
            context.Load<PersonProperties>(propertiesFor, new System.Linq.Expressions.Expression<System.Func<PersonProperties, object>>[]
            {
                (PersonProperties p) => p.PersonalUrl
            });
            context.ExecuteQuery();
            if (propertiesFor == null)
            {
                return string.Empty;
            }
            return propertiesFor.PersonalUrl.TrimEnd(new char[]
            {
                '/'
            });
        }

        private string GetAccountNameFromEmail(ClientContext context, string email)
        {
            ClientResult<PrincipalInfo> clientResult = Utility.ResolvePrincipal(context, context.Web, email, PrincipalType.User, PrincipalSource.All, null, true);
            context.ExecuteQuery();
            if (clientResult == null || clientResult.Value == null || clientResult.Value.PrincipalId == 0 || clientResult.Value.PrincipalType != PrincipalType.User)
            {
                throw new System.Exception("User with email '" + email + "' does not exists.");
            }
            PrincipalInfo value = clientResult.Value;
            return value.LoginName;
        }

        public string IsWorkflowServicesInstanceAvailable()
        {
            bool value = false;
            using (ClientContext clientContext = this.GetClientContext())
            {
                try
                {
                    WorkflowServicesManager workflowServicesManager = new WorkflowServicesManager(clientContext, clientContext.Web);
                    clientContext.Load<WorkflowServicesManager>(workflowServicesManager, new System.Linq.Expressions.Expression<System.Func<WorkflowServicesManager, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (workflowServicesManager != null)
                    {
                        WorkflowSubscriptionService workflowSubscriptionService = workflowServicesManager.GetWorkflowSubscriptionService();
                        if (workflowSubscriptionService != null)
                        {
                            value = true;
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    value = false;
                }
            }
            return System.Convert.ToString(value);
        }

        // Metalogix.SharePoint.Adapters.CSOM2013.CSOMAdapter
        public string GetSP2013Workflows(string configurationXml)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                System.Guid listGuid = System.Guid.Empty;
                SP2013WorkflowScopeType workflowScopeType = SP2013WorkflowScopeType.List;
                if (!string.IsNullOrEmpty(configurationXml))
                {
                    System.Xml.XmlNode node = XmlUtility.StringToXmlNode(configurationXml);
                    listGuid = node.GetAttributeValueAsGuid(ConfigXMLAttributes.WorkflowListGuid.ToString());
                    workflowScopeType = node.GetAttributeValueAsEnumValue<SP2013WorkflowScopeType>(ConfigXMLAttributes.WorkflowScopeType.ToString());
                }
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Collections.Generic.List<SP2013WorkflowSubscription> result = this.GetWorkflowSubscriptions(clientContext, workflowScopeType, listGuid).ToList<SP2013WorkflowSubscription>();
                    string objectXmlData = SP2013Utils.Serialize<System.Collections.Generic.List<SP2013WorkflowSubscription>>(result);
                    operationReporting.LogObjectXml(objectXmlData);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "GetSP2013Workflows");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }


        private System.Collections.Generic.IList<SP2013WorkflowSubscription> GetWorkflowSubscriptions(ClientContext clientContext, SP2013WorkflowScopeType workflowScopeType, System.Guid listGuid)
        {
            WorkflowServicesManager workflowServicesManager = new WorkflowServicesManager(clientContext, clientContext.Web);
            clientContext.Load<WorkflowServicesManager>(workflowServicesManager, new System.Linq.Expressions.Expression<System.Func<WorkflowServicesManager, object>>[]
            {
                (WorkflowServicesManager svc) => (object)svc.IsConnected
            });
            clientContext.ExecuteQuery();
            if (!workflowServicesManager.IsConnected)
            {
                return new System.Collections.Generic.List<SP2013WorkflowSubscription>();
            }
            WorkflowSubscriptionService workflowSubscriptionService = workflowServicesManager.GetWorkflowSubscriptionService();
            WorkflowSubscriptionCollection workflowSubscriptionCollection = (workflowScopeType == SP2013WorkflowScopeType.List) ? workflowSubscriptionService.EnumerateSubscriptionsByList(listGuid) : workflowSubscriptionService.EnumerateSubscriptions();
            clientContext.Load<WorkflowSubscriptionCollection>(workflowSubscriptionCollection, new System.Linq.Expressions.Expression<System.Func<WorkflowSubscriptionCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            System.Collections.Generic.List<SP2013WorkflowSubscription> list = new System.Collections.Generic.List<SP2013WorkflowSubscription>();
            foreach (WorkflowSubscription current in workflowSubscriptionCollection)
            {
                SP2013WorkflowSubscription sP2013WorkflowSubscription = new SP2013WorkflowSubscription();
                sP2013WorkflowSubscription.Id = current.Id;
                sP2013WorkflowSubscription.Name = current.Name;
                sP2013WorkflowSubscription.DefinitionId = current.DefinitionId;
                sP2013WorkflowSubscription.Enabled = current.Enabled;
                sP2013WorkflowSubscription.EventSourceId = current.EventSourceId;
                sP2013WorkflowSubscription.EventTypes = current.EventTypes.ToList<string>();
                sP2013WorkflowSubscription.ManualStartBypassesActivationLimit = current.ManualStartBypassesActivationLimit;
                sP2013WorkflowSubscription.PropertyDefinitions = (from pair in current.PropertyDefinitions
                                                                  orderby pair.Key
                                                                  select pair into p
                                                                  select new SP2013WorkflowProperty
                                                                  {
                                                                      Name = p.Key,
                                                                      Value = p.Value
                                                                  }).ToArray<SP2013WorkflowProperty>();
                sP2013WorkflowSubscription.AssociatedSP2013WorkflowDefinition = this.GetWorkflowDefinition(current.DefinitionId);
                sP2013WorkflowSubscription.StatusFieldName = current.StatusFieldName;
                SP2013WorkflowSubscription sP2013WorkflowSubscription2 = sP2013WorkflowSubscription;
                List byId = clientContext.Web.Lists.GetById(new System.Guid(current.PropertyDefinitions["HistoryListId"]));
                List byId2 = clientContext.Web.Lists.GetById(new System.Guid(current.PropertyDefinitions["TaskListId"]));
                clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List hl) => (object)hl.Id,
                    (List hl) => hl.Title
                });
                clientContext.Load<List>(byId2, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List tl) => (object)tl.Id,
                    (List tl) => tl.Title
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                sP2013WorkflowSubscription2.HistoryListId = byId.Id.ToString();
                sP2013WorkflowSubscription2.HistoryListTitle = byId.Title;
                sP2013WorkflowSubscription2.TaskListId = byId2.Id.ToString();
                sP2013WorkflowSubscription2.TaskListTitle = byId2.Title;
                list.Add(sP2013WorkflowSubscription2);
            }
            return list;
        }

        private SP2013WorkflowDefinition GetWorkflowDefinition(System.Guid definitionGuid)
        {
            SP2013WorkflowDefinition result;
            using (ClientContext clientContext = this.GetClientContext())
            {
                WorkflowServicesManager workflowServicesManager = new WorkflowServicesManager(clientContext, clientContext.Web);
                WorkflowDeploymentService workflowDeploymentService = workflowServicesManager.GetWorkflowDeploymentService();
                WorkflowDefinition definition = workflowDeploymentService.GetDefinition(definitionGuid);
                clientContext.Load<WorkflowDefinition>(definition, new System.Linq.Expressions.Expression<System.Func<WorkflowDefinition, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                result = this.TransformWorkflowDefinitionToSP2013(definition);
            }
            return result;
        }

        private SP2013WorkflowDefinition TransformWorkflowDefinitionToSP2013(WorkflowDefinition workflowDefinition)
        {
            SP2013WorkflowDefinition sP2013WorkflowDefinition = new SP2013WorkflowDefinition();
            sP2013WorkflowDefinition.Id = workflowDefinition.Id;
            sP2013WorkflowDefinition.Name = workflowDefinition.DisplayName;
            sP2013WorkflowDefinition.Published = workflowDefinition.Published;
            sP2013WorkflowDefinition.Xaml = workflowDefinition.Xaml;
            sP2013WorkflowDefinition.RestrictToScope = ((workflowDefinition.RestrictToScope == null) ? System.Guid.Empty : new System.Guid(workflowDefinition.RestrictToScope));
            sP2013WorkflowDefinition.RestrictToType = (SP2013WorkflowScopeType)System.Enum.Parse(typeof(SP2013WorkflowScopeType), workflowDefinition.RestrictToType);
            sP2013WorkflowDefinition.FormField = workflowDefinition.FormField;
            sP2013WorkflowDefinition.Properties = (from pair in workflowDefinition.Properties
                                                   orderby pair.Key
                                                   select pair into p
                                                   select new SP2013WorkflowProperty
                                                   {
                                                       Name = p.Key,
                                                       Value = p.Value
                                                   }).ToArray<SP2013WorkflowProperty>();
            return sP2013WorkflowDefinition;
        }

        private WorkflowDefinition TransformWorkflowDefinitionFromSP2013(SP2013WorkflowDefinition sp2013WorkflowDefinition, string historyListId, string taskListId, ClientContext clientContext)
        {
            WorkflowDefinition workflowDefinition = new WorkflowDefinition(clientContext)
            {
                DisplayName = sp2013WorkflowDefinition.Name,
                Xaml = sp2013WorkflowDefinition.Xaml,
                RestrictToScope = sp2013WorkflowDefinition.RestrictToScope.ToString(),
                RestrictToType = sp2013WorkflowDefinition.RestrictToType.ToString(),
                FormField = sp2013WorkflowDefinition.FormField
            };
            foreach (SP2013WorkflowProperty current in from p in sp2013WorkflowDefinition.Properties
                                                       where Constants.NecessaryProperties.Contains(p.Name)
                                                       select p)
            {
                workflowDefinition.SetProperty(current.Name, current.Value);
            }
            workflowDefinition.SetProperty("HistoryListId", historyListId);
            workflowDefinition.SetProperty("TaskListId", taskListId);
            return workflowDefinition;
        }

        private WorkflowSubscription TransformWorkflowSubscriptionFromSP2013(SP2013WorkflowSubscription sp2013WorkflowSubscription, System.Guid definitionGuid, ClientContext clientContext)
        {
            WorkflowSubscription workflowSubscription = new WorkflowSubscription(clientContext)
            {
                DefinitionId = definitionGuid,
                Name = sp2013WorkflowSubscription.Name,
                Enabled = sp2013WorkflowSubscription.Enabled,
                ManualStartBypassesActivationLimit = sp2013WorkflowSubscription.ManualStartBypassesActivationLimit,
                EventTypes = sp2013WorkflowSubscription.EventTypes,
                EventSourceId = sp2013WorkflowSubscription.EventSourceId
            };
            foreach (SP2013WorkflowProperty current in from p in sp2013WorkflowSubscription.PropertyDefinitions
                                                       where Constants.NecessaryProperties.Contains(p.Name)
                                                       select p)
            {
                workflowSubscription.SetProperty(current.Name, current.Value);
            }
            workflowSubscription.SetProperty("HistoryListId", sp2013WorkflowSubscription.HistoryListId);
            workflowSubscription.SetProperty("TaskListId", sp2013WorkflowSubscription.TaskListId);
            workflowSubscription.SetProperty("EventSourceId", sp2013WorkflowSubscription.EventSourceId.ToString());
            return workflowSubscription;
        }

        private List GetOrCreateHistoryList(ClientContext clientContext, ListCollection lists, OperationReporting opResult, string historyListTitle)
        {
            List list = null;
            bool flag = false;
            try
            {
                if (string.IsNullOrEmpty(historyListTitle))
                {
                    historyListTitle = "Workflow History";
                }
                list = lists.GetByTitle(historyListTitle);
                clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                flag = true;
                opResult.LogInformation(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowHistoryListNotFound, string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowHistoryListCreation, historyListTitle));
            }
            if (flag)
            {
                ListCreationInformation parameters = new ListCreationInformation
                {
                    Title = historyListTitle,
                    TemplateType = 140
                };
                list = lists.Add(parameters);
                clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            return list;
        }

        private List GetOrCreateTaskList(ClientContext clientContext, Web web, OperationReporting opResult, string taskListTitle)
        {
            List list = null;
            ContentType contentType = null;
            bool flag = false;
            try
            {
                if (string.IsNullOrEmpty(taskListTitle))
                {
                    taskListTitle = "Workflow Tasks";
                }
                list = web.Lists.GetByTitle(taskListTitle);
                clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                contentType = web.AvailableContentTypes.GetById("0x0108003365C4474CAE8C42BCE396314E88E51F");
                clientContext.Load<ContentType>(contentType, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                flag = true;
                opResult.LogInformation(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowTaskListNotFound, string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowTaskListCreation, taskListTitle));
            }
            if (flag)
            {
                ListCreationInformation parameters = new ListCreationInformation
                {
                    Title = taskListTitle,
                    TemplateType = 171
                };
                list = web.Lists.Add(parameters);
                clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List tasklist) => tasklist.Title,
                    (List tasklist) => (object)tasklist.Id,
                    (List tasklist) => tasklist.ContentTypes
                });
                list.ContentTypes.AddExistingContentType(contentType);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            return list;
        }

        public string MigrateSP2013Workflows(string configurationXml)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                System.Collections.Generic.List<SP2013WorkflowSubscription> list = new System.Collections.Generic.List<SP2013WorkflowSubscription>();
                System.Guid guid = System.Guid.Empty;
                if (!string.IsNullOrEmpty(configurationXml))
                {
                    System.Xml.XmlNode node = XmlUtility.StringToXmlNode(configurationXml);
                    guid = node.GetAttributeValueAsGuid(ConfigXMLAttributes.WorkflowListGuid.ToString());
                    string attributeValueAsString = node.GetAttributeValueAsString(ConfigXMLAttributes.WorkflowSubscriptionObjectXml.ToString());
                    if (!string.IsNullOrEmpty(attributeValueAsString))
                    {
                        SP2013WorkflowSubscription item = attributeValueAsString.Deserialize<SP2013WorkflowSubscription>();
                        list.Add(item);
                    }
                }
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    ListCollection lists = web.Lists;
                    clientContext.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[0]);
                    WorkflowServicesManager workflowServicesManager = new WorkflowServicesManager(clientContext, clientContext.Web);
                    WorkflowSubscriptionService workflowSubscriptionService = workflowServicesManager.GetWorkflowSubscriptionService();
                    WorkflowDeploymentService workflowDeploymentService = workflowServicesManager.GetWorkflowDeploymentService();
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    foreach (SP2013WorkflowSubscription current in list)
                    {
                        if (string.IsNullOrEmpty(current.HistoryListId))
                        {
                            List orCreateHistoryList = this.GetOrCreateHistoryList(clientContext, lists, operationReporting, current.HistoryListTitle);
                            current.HistoryListId = orCreateHistoryList.Id.ToString();
                        }
                        if (string.IsNullOrEmpty(current.TaskListId))
                        {
                            List orCreateTaskList = this.GetOrCreateTaskList(clientContext, web, operationReporting, current.TaskListTitle);
                            current.TaskListId = orCreateTaskList.Id.ToString();
                        }
                        if (current.AssociatedSP2013WorkflowDefinition != null)
                        {
                            current.HistoryListId = current.HistoryListId.ToUpperInvariant();
                            current.TaskListId = current.TaskListId.ToUpperInvariant();
                            WorkflowDefinition definition = this.TransformWorkflowDefinitionFromSP2013(current.AssociatedSP2013WorkflowDefinition, current.HistoryListId, current.TaskListId, clientContext);
                            ClientResult<System.Guid> clientResult = workflowDeploymentService.SaveDefinition(definition);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            if (current.AssociatedSP2013WorkflowDefinition.Published)
                            {
                                workflowDeploymentService.PublishDefinition(clientResult.Value);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            System.Guid value = clientResult.Value;
                            WorkflowSubscription subscription = this.TransformWorkflowSubscriptionFromSP2013(current, value, clientContext);
                            System.Guid guid2 = System.Guid.Empty;
                            ClientResult<System.Guid> clientResult2 = (guid == System.Guid.Empty) ? workflowSubscriptionService.PublishSubscription(subscription) : workflowSubscriptionService.PublishSubscriptionForList(subscription, guid);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            if (clientResult2 != null)
                            {
                                guid2 = clientResult2.Value;
                            }
                            operationReporting.LogObjectXml(SP2013Utils.Serialize<string>(guid2.ToString()));
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "CSOM failed to migrate workflow");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string DeleteSP2013Workflows(string configurationXml)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                if (!string.IsNullOrEmpty(configurationXml))
                {
                    SP2013WorkflowDefinition wfDefinitionOptions = configurationXml.Deserialize<SP2013WorkflowDefinition>();
                    if (!string.IsNullOrEmpty(wfDefinitionOptions.Name))
                    {
                        using (ClientContext clientContext = this.GetClientContext())
                        {
                            WorkflowServicesManager workflowServicesManager = new WorkflowServicesManager(clientContext, clientContext.Web);
                            WorkflowDeploymentService workflowDeploymentService = workflowServicesManager.GetWorkflowDeploymentService();
                            if (workflowDeploymentService != null)
                            {
                                WorkflowDefinitionCollection workflowDefinitionCollection = workflowDeploymentService.EnumerateDefinitions(false);
                                if (workflowDefinitionCollection != null)
                                {
                                    clientContext.Load<WorkflowDefinitionCollection>(workflowDefinitionCollection, new System.Linq.Expressions.Expression<System.Func<WorkflowDefinitionCollection, object>>[0]);
                                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                                    WorkflowDefinition workflowDefinition = workflowDefinitionCollection.FirstOrDefault((WorkflowDefinition wf) => wf.DisplayName.Equals(wfDefinitionOptions.Name, System.StringComparison.InvariantCultureIgnoreCase));
                                    if (workflowDefinition != null)
                                    {
                                        workflowDeploymentService.DeleteDefinition(new System.Guid(workflowDefinition.Id.ToString("D")));
                                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "Unable to delete Nintex workflow");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        private TermStore LoadTermStore(TaxonomySession session, System.Guid termStoreId, bool throws = false)
        {
            if (session == null)
            {
                throw new System.ArgumentNullException("session", "No taxonomy session");
            }
            if (termStoreId.Equals(System.Guid.Empty))
            {
                throw new System.ArgumentNullException("termStoreId", "Term store ID is empty GUID");
            }
            TermStore termStore = session.TermStores.GetById(termStoreId);
            session.Context.Load<TermStore>(termStore, CSOMAdapter.s_termStoreFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(session.Context, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                termStore = null;
            }
            if (termStore == null && throws)
            {
                throw new System.Exception("Unable to access term store '{" + termStoreId + "}'. Please ensure enough permissions have been granted to the term store and its related service for the migrating account.");
            }
            return termStore;
        }

        private TermStore LoadTermStore(TaxonomySession session, string termStoreName)
        {
            if (session == null)
            {
                throw new System.ArgumentNullException("session", "No taxonomy session");
            }
            if (string.IsNullOrEmpty(termStoreName))
            {
                throw new System.ArgumentNullException("termStoreName", "Term store name is null or empty");
            }
            TermStore byName = session.TermStores.GetByName(termStoreName);
            session.Context.Load<TermStore>(byName, CSOMAdapter.s_termStoreFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(session.Context, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return byName;
        }

        private TermGroup LoadTermGroup(TermGroup termGroup)
        {
            if (termGroup == null)
            {
                throw new System.ArgumentNullException("termGroup", "Term group cannot be null");
            }
            termGroup.Context.Load<TermGroup>(termGroup, CSOMAdapter.s_termGroupFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(termGroup.Context, this);
                string arg_36_0 = termGroup.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return termGroup;
        }

        private TermGroup LoadTermGroup(TermStore termStore, string groupName)
        {
            if (termStore == null)
            {
                throw new System.ArgumentNullException("termStore", "Term store cannot be null");
            }
            if (string.IsNullOrEmpty(groupName))
            {
                throw new System.ArgumentNullException("groupName", "Group name is null or empty");
            }
            TermGroup byName = termStore.Groups.GetByName(groupName);
            termStore.Context.Load<TermGroup>(byName, CSOMAdapter.s_termGroupFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                string arg_5B_0 = byName.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return byName;
        }

        private TermSet LoadTermSet(TermGroup termGroup, System.Guid termSetId, string termSetName)
        {
            TermSet termSet = this.LoadTermSet(termGroup, termSetId);
            if (termSet == null)
            {
                termSet = this.LoadTermSet(termGroup, termSetName);
            }
            return termSet;
        }

        private TermSet LoadTermSet(TermGroup termGroup, System.Guid termSetId)
        {
            if (termGroup.IsSystemGroup || termSetId.Equals(System.Guid.Empty))
            {
                return null;
            }
            TermSet byId = termGroup.TermSets.GetById(termSetId);
            termGroup.Context.Load<TermSet>(byId, CSOMAdapter.s_termSetLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(termGroup.Context, this);
                string arg_48_0 = byId.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return byId;
        }

        private TermSet LoadTermSet(TermGroup termGroup, string termSetName)
        {
            if (string.IsNullOrEmpty(termSetName))
            {
                return null;
            }
            TermSet byName = termGroup.TermSets.GetByName(termSetName);
            termGroup.Context.Load<TermSet>(byName, CSOMAdapter.s_termSetLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(termGroup.Context, this);
                string arg_3A_0 = byName.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return byName;
        }

        private TermSet LoadTermSet(TermStore termStore, System.Guid termSetId)
        {
            if (termStore == null)
            {
                throw new System.ArgumentNullException("termStore", "Term store cannot be null");
            }
            if (termSetId.Equals(System.Guid.Empty))
            {
                throw new System.ArgumentNullException("termSetId", "Term set ID cannot be empty GUID");
            }
            TermSet termSet = termStore.GetTermSet(termSetId);
            termSet.Context.Load<TermSet>(termSet, CSOMAdapter.s_termSetLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(termSet.Context, this);
                string arg_5C_0 = termSet.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return termSet;
        }

        private TermSet LoadTermSet(TermSetItem tsi)
        {
            if (tsi == null)
            {
                throw new System.ArgumentNullException("tsi", "Term set item cannot be null");
            }
            TermSet termSet = (tsi as TermSet) ?? (tsi as Term).TermSet;
            tsi.Context.Load<TermSet>(termSet, CSOMAdapter.s_termSetLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(tsi.Context, this);
                string arg_4C_0 = termSet.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return termSet;
        }

        private TermSet LoadTermSet(TermSetItem tsi, System.Xml.XmlWriter xmlWriter, string termSetName)
        {
            if (tsi == null)
            {
                throw new System.ArgumentNullException("tsi", "Term set item cannot be null");
            }
            TermSet termSet = (tsi as TermSet) ?? (tsi as Term).TermSet;
            tsi.Context.Load<TermSet>(termSet, CSOMAdapter.s_termSetLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(tsi.Context, this);
                string arg_4C_0 = termSet.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                this.LogTaxonomyError(xmlWriter, string.Format("LoadTermSet - Error loading or adding TermSet '{0}'", termSetName), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, exceptionMessageAndDetail.HResult);
                termSet = null;
            }
            return termSet;
        }

        private TermSet LoadTermSet(TaxonomySession session, string termSetId)
        {
            if (session == null)
            {
                throw new System.ArgumentNullException("session", "No taxonomy session");
            }
            if (string.IsNullOrEmpty(termSetId))
            {
                throw new System.ArgumentNullException("termSetId", "Term set ID is null or empty");
            }
            TermStoreCollection termStores = session.TermStores;
            session.Context.Load<TermStoreCollection>(termStores, new System.Linq.Expressions.Expression<System.Func<TermStoreCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(session.Context, this);
            System.Guid termSetId2 = new System.Guid(termSetId);
            foreach (TermStore current in termStores)
            {
                TermSet termSet = this.LoadTermSet(current, termSetId2);
                if (termSet != null)
                {
                    return termSet;
                }
            }
            return null;
        }

        private TermSet LoadOrphanedTermSet(TermStore termStore)
        {
            TermSet termSet = this.LoadTermSet(termStore.OrphanedTermsTermSet);
            if (termSet == null)
            {
                throw new System.Exception("Cannot find Orphaned Terms set from the System group");
            }
            return termSet;
        }

        private Term LoadTerm(Term term)
        {
            if (term == null)
            {
                throw new System.ArgumentNullException("term", "Term cannot be null");
            }
            term.Context.Load<Term>(term, CSOMAdapter.s_termLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(term.Context, this);
                string arg_36_0 = term.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return term;
        }

        private Term LoadTerm(TermSet parentSet, System.Guid termId)
        {
            if (parentSet == null)
            {
                throw new System.ArgumentNullException("parentSet", "Parent term set cannot be null");
            }
            if (termId.Equals(System.Guid.Empty))
            {
                throw new System.ArgumentNullException("termId", "Term ID is empty GUID");
            }
            Term term = parentSet.GetTerm(termId);
            term.Context.Load<Term>(term, CSOMAdapter.s_termLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(term.Context, this);
                string arg_5C_0 = term.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            return term;
        }

        private Term LoadTerm(TermStore termStore, System.Guid termId)
        {
            if (termStore == null)
            {
                throw new System.ArgumentNullException("termStore", "Term store cannot be null");
            }
            if (termId.Equals(System.Guid.Empty))
            {
                throw new System.ArgumentNullException("termId", "Term ID is empty GUID");
            }
            Term term = termStore.GetTerm(termId);
            term.Context.Load<Term>(term, CSOMAdapter.s_termLoadFilter);
            try
            {
                CSOMAdapter.CallExecuteQuery(term.Context, this);
                string arg_5C_0 = term.Name;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return null;
            }
            if (term.IsReused)
            {
                term = this.LoadTerm(term.SourceTerm.TermSet, term.SourceTerm.Id);
            }
            return term;
        }

        private Term LoadOrphanedTerm(TermStore termStore, System.Guid termGuid)
        {
            return this.LoadTerm(this.LoadOrphanedTermSet(termStore), termGuid);
        }

        private Term LoadSourceTerm(TermStore termStore, System.Xml.XmlNode termXmlNode, ClientContext clientContext)
        {
            if (termStore == null)
            {
                throw new System.ArgumentNullException("termStore", "Term store cannot be null");
            }
            if (termXmlNode == null)
            {
                throw new System.ArgumentNullException("xTerm", "No XML term node");
            }
            System.Xml.XmlNode xmlNode = termXmlNode.SelectSingleNode(string.Format("{0}/{1}", TaxonomyClassType.SPSourceTerm.ToString(), TaxonomyClassType.SPTerm.ToString()));
            if (xmlNode == null)
            {
                return null;
            }
            System.Guid guidAtt = XmlAdapterUtility.getGuidAtt(xmlNode, TaxonomyFields.Id);
            string att = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermGroupName);
            bool flag = false;
            bool.TryParse(XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.IsSiteCollectionGroup), out flag);
            TermGroup termGroup;
            if (flag)
            {
                termGroup = termStore.GetSiteCollectionGroup(clientContext.Site, true);
                CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                termGroup = this.LoadTermGroup(termGroup);
            }
            else
            {
                termGroup = this.LoadTermGroup(termStore, att);
            }
            if (termGroup == null)
            {
                return null;
            }
            System.Guid guidAtt2 = XmlAdapterUtility.getGuidAtt(xmlNode, TaxonomyFields.TermSetId);
            string att2 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermSetName);
            TermSet termSet = this.LoadTermSet(termGroup, guidAtt2, att2);
            if (termSet == null)
            {
                return null;
            }
            return this.LoadTerm(termSet, guidAtt);
        }

        private Term LoadParentTerm(TermStore termStore, System.Xml.XmlNode xTerm, ClientContext clientContext)
        {
            if (termStore == null)
            {
                throw new System.ArgumentNullException("termStore", "Term store cannot be null");
            }
            if (xTerm == null)
            {
                throw new System.ArgumentNullException("termNode", "No XML term node");
            }
            System.Xml.XmlNode xmlNode = xTerm.SelectSingleNode(string.Format("{0}/{1}", TaxonomyClassType.SPParentTerm.ToString(), TaxonomyClassType.SPTerm.ToString()));
            if (xmlNode == null)
            {
                return null;
            }
            System.Guid guidAtt = XmlAdapterUtility.getGuidAtt(xmlNode, TaxonomyFields.Id);
            string att = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermGroupName);
            bool flag = false;
            bool.TryParse(XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.IsSiteCollectionGroup), out flag);
            TermGroup termGroup;
            if (flag)
            {
                termGroup = termStore.GetSiteCollectionGroup(clientContext.Site, true);
                CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                termGroup = this.LoadTermGroup(termGroup);
            }
            else
            {
                termGroup = this.LoadTermGroup(termStore, att);
            }
            if (termGroup == null)
            {
                return null;
            }
            System.Guid guidAtt2 = XmlAdapterUtility.getGuidAtt(xmlNode, TaxonomyFields.TermSetId);
            string att2 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermSetName);
            TermSet termSet = this.LoadTermSet(termGroup, guidAtt2, att2);
            if (termSet == null)
            {
                return null;
            }
            return this.LoadTerm(termSet, guidAtt);
        }

        private bool HasTaxonomySupport()
        {
            if (!this._hasTaxonomySupport.HasValue)
            {
                try
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession.GetTaxonomySession(clientContext);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        this._hasTaxonomySupport = new bool?(true);
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    this._hasTaxonomySupport = new bool?(false);
                }
            }
            return this._hasTaxonomySupport.Value;
        }

        public string GetReferencedTaxonomyFullXml(string xml)
        {
            if (!this.HasTaxonomySupport())
            {
                return null;
            }
            if (xml == null)
            {
                return string.Empty;
            }
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement("ReferencedTermAndTermSetCollection");
                using (ClientContext clientContext = this.GetClientContext())
                {
                    TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(xml);
                    foreach (System.Xml.XmlNode xNode in xmlNode.ChildNodes)
                    {
                        System.Guid guidAtt = XmlAdapterUtility.getGuidAtt(xNode, TaxonomyFields.TermStoreId);
                        if (!guidAtt.Equals(System.Guid.Empty))
                        {
                            TermStore termStore = this.LoadTermStore(taxonomySession, guidAtt, true);
                            string att = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.Value);
                            if (string.IsNullOrEmpty(att))
                            {
                                System.Guid guidAtt2 = XmlAdapterUtility.getGuidAtt(xNode, TaxonomyFields.AnchorId);
                                if (guidAtt2.Equals(System.Guid.Empty))
                                {
                                    System.Guid guidAtt3 = XmlAdapterUtility.getGuidAtt(xNode, TaxonomyFields.TermSetId);
                                    if (!guidAtt3.Equals(System.Guid.Empty))
                                    {
                                        TermSet termSet = this.LoadTermSet(termStore, guidAtt3);
                                        if (termSet != null)
                                        {
                                            this.SerializeTermSet(xmlWriter, termSet, true, true, true);
                                        }
                                    }
                                }
                                else
                                {
                                    Term term = this.LoadTerm(termStore, guidAtt2);
                                    if (term != null)
                                    {
                                        this.SerializeTerm(xmlWriter, term, true, false);
                                    }
                                }
                            }
                            else
                            {
                                string[] array = att.Split(new char[]
                                {
                                    ';'
                                });
                                for (int i = 0; i < array.Length; i++)
                                {
                                    string text = array[i];
                                    System.Guid termId = new System.Guid(text.Split(new char[]
                                    {
                                        '|'
                                    })[1]);
                                    Term term2 = this.LoadTerm(termStore, termId);
                                    if (term2 != null)
                                    {
                                        this.SerializeTerm(xmlWriter, term2, true, true);
                                    }
                                }
                            }
                        }
                    }
                }
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                xml = stringBuilder.ToString();
                result = xml;
            }
            return result;
        }

        public string AddReferencedTaxonomyData(string xml)
        {
            if (!this.HasTaxonomySupport())
            {
                return null;
            }
            TaxonomyStatistics stats = new TaxonomyStatistics();
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyReportingElements.Result.ToString());
                using (ClientContext clientContext = this.GetClientContext())
                {
                    TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(xml);
                    System.Xml.XmlNodeList xmlNodeList = xmlNode.SelectNodes(string.Format("./{0}", TaxonomyClassType.SPTermSet.ToString()));
                    if (xmlNodeList != null)
                    {
                        foreach (System.Xml.XmlNode xNode in xmlNodeList)
                        {
                            this.AddReferencedTermSet(xmlWriter, taxonomySession, xNode, stats, clientContext);
                        }
                    }
                    System.Collections.Generic.List<System.Xml.XmlNode> list = new System.Collections.Generic.List<System.Xml.XmlNode>();
                    xmlNodeList = xmlNode.SelectNodes(string.Format("./{0}", TaxonomyClassType.SPTerm.ToString()));
                    if (xmlNodeList != null)
                    {
                        foreach (System.Xml.XmlNode item in xmlNodeList)
                        {
                            list.Add(item);
                        }
                    }
                    int i = 0;
                    while (i < list.Count)
                    {
                        if (!this.AddReferencedTerm(xmlWriter, taxonomySession, list, i, stats, clientContext))
                        {
                            list.Remove(list[i]);
                        }
                        else
                        {
                            i++;
                        }
                    }
                }
                this.LogTaxonomyStatistics(xmlWriter, stats);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                result = stringBuilder.ToString();
            }
            return result;
        }

        private void AddReferencedTermSet(System.Xml.XmlWriter xWriter, TaxonomySession session, System.Xml.XmlNode xNode, TaxonomyStatistics stats, ClientContext clientContext)
        {
            try
            {
                string att = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.TermStoreId);
                TermStore termStore = this.LoadTermStore(session, new System.Guid(att), true);
                string att2 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.TermGroupName);
                TermGroup termGroup = this.LoadTermGroup(termStore, att2);
                if (termGroup == null)
                {
                    System.Xml.XmlNode groupNode = xNode.SelectSingleNode(TaxonomyClassType.SPTermGroup.ToString());
                    termGroup = this.AddTermGroup(termStore, groupNode, xWriter, stats, clientContext);
                    if (termGroup == null)
                    {
                        return;
                    }
                }
                this.AddTermSet(termGroup, xNode, xWriter, stats, clientContext);
            }
            catch (System.Exception ex)
            {
                Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                string att3 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.Name);
                this.LogTaxonomyError(xWriter, string.Format("Error when copying term set '{0}'", att3), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
            }
        }

        private bool AddReferencedTerm(System.Xml.XmlWriter xWriter, TaxonomySession session, System.Collections.Generic.List<System.Xml.XmlNode> xTerms, int index, TaxonomyStatistics stats, ClientContext clientContext)
        {
            System.Xml.XmlNode xmlNode = xTerms[index];
            try
            {
                string att = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermStoreId);
                TermStore termStore = this.LoadTermStore(session, new System.Guid(att), true);
                string att2 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermGroupName);
                TermGroup termGroup = this.LoadTermGroup(termStore, att2);
                if (termGroup == null)
                {
                    bool result = false;
                    return result;
                }
                string att3 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermSetId);
                TermSet termSet = this.LoadTermSet(termGroup, new System.Guid(att3));
                if (termSet == null)
                {
                    bool result = false;
                    return result;
                }
                string att4 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.Id);
                Term term = this.LoadTerm(termSet, new System.Guid(att4));
                if (term != null)
                {
                    bool result = false;
                    return result;
                }
                string att5 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.ParentTermId);
                if (string.IsNullOrEmpty(att5))
                {
                    this.AddTerm(termSet, xmlNode, xWriter, stats, false, clientContext);
                }
                else
                {
                    Term term2 = this.LoadTerm(termSet, new System.Guid(att5));
                    if (term2 != null)
                    {
                        this.AddTerm(term2, xmlNode, xWriter, stats, false, clientContext);
                    }
                    else
                    {
                        if (!this.AddParentRecursive(xmlNode, termSet, xTerms, xWriter, stats, clientContext))
                        {
                            bool result = false;
                            return result;
                        }
                        term2 = this.LoadTerm(termSet, new System.Guid(att5));
                        this.AddTerm(term2, xmlNode, xWriter, stats, true, clientContext);
                    }
                }
            }
            catch (System.Exception ex)
            {
                Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                string att6 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.Name);
                this.LogTaxonomyError(xWriter, string.Format("Error when copying term '{0}'", att6), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
            }
            return true;
        }

        private bool AddParentRecursive(System.Xml.XmlNode xRoot, TermSet parentSet, System.Collections.Generic.List<System.Xml.XmlNode> listTerms, System.Xml.XmlWriter xWriter, TaxonomyStatistics stats, ClientContext clientContext)
        {
            System.Xml.XmlNodeList nodesToCheck = xRoot.ParentNode.SelectNodes("./SPTerm");
            string att = XmlAdapterUtility.getAtt(xRoot, TaxonomyFields.ParentTermId);
            System.Xml.XmlNode xmlNode = XmlUtility.MatchFirstAttributeValue("Id", att, nodesToCheck);
            if (xmlNode == null)
            {
                listTerms.Remove(xRoot);
                return false;
            }
            att = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.ParentTermId);
            if (string.IsNullOrEmpty(att))
            {
                if (this.AddTerm(parentSet, xmlNode, xWriter, stats, false, clientContext))
                {
                    listTerms.Remove(xmlNode);
                    return true;
                }
                listTerms.Remove(xmlNode);
                return false;
            }
            else
            {
                System.Guid termId = new System.Guid(att);
                Term term = this.LoadTerm(parentSet, termId);
                if (term == null)
                {
                    if (!this.AddParentRecursive(xmlNode, parentSet, listTerms, xWriter, stats, clientContext))
                    {
                        listTerms.Remove(xmlNode);
                        return false;
                    }
                    term = this.LoadTerm(parentSet, termId);
                    if (this.AddTerm(term, xmlNode, xWriter, stats, false, clientContext))
                    {
                        listTerms.Remove(xmlNode);
                        return true;
                    }
                    listTerms.Remove(xmlNode);
                    return false;
                }
                else
                {
                    if (this.AddTerm(term, xmlNode, xWriter, stats, false, clientContext))
                    {
                        listTerms.Remove(xmlNode);
                        return true;
                    }
                    listTerms.Remove(xmlNode);
                    return false;
                }
            }
        }

        private void WriteValueAsManagedMetadata(TaxonomyField field, string val, ListItem item)
        {
            if (!this.HasTaxonomySupport())
            {
                throw new System.Exception("Taxonomy not supported by CSOM 2013 adapter.");
            }
            if (field == null)
            {
                throw new System.ArgumentNullException("field", "Field cannot be null");
            }
            if (item == null)
            {
                throw new System.ArgumentNullException("item", "List item cannot be null");
            }
            string typeAsString = field.TypeAsString;
            if (typeAsString != "TaxonomyFieldType" && typeAsString != "TaxonomyFieldTypeMulti")
            {
                throw new System.Exception("Not a taxonomy field type.");
            }
            if (string.IsNullOrEmpty(val))
            {
                field.ValidateSetValue(item, null);
                return;
            }
            if (!field.AllowMultipleValues)
            {
                TaxonomyFieldValue taxValue = this.ParseTaxonomyFieldValue(field, val);
                field.SetFieldValueByValue(item, taxValue);
                return;
            }
            TaxonomyFieldValueCollection taxonomyFieldValueCollection = this.ParseTaxonomyFieldValueCollection(field, val);
            field.SetFieldValueByValueCollection(item, taxonomyFieldValueCollection);
            if (field.IsKeyword)
            {
                item.ParseAndSetFieldValue(field.InternalName, field.GetValidatedString(taxonomyFieldValueCollection).Value);
            }
        }

        private TaxonomyFieldValueCollection ParseTaxonomyFieldValueCollection(TaxonomyField field, string val)
        {
            if (field == null)
            {
                throw new System.ArgumentNullException("field", "Taxonomy Field cannot be null");
            }
            if (string.IsNullOrEmpty(val))
            {
                throw new System.ArgumentNullException("val", "Value cannot be null or empty");
            }
            TaxonomyFieldValueCollection taxonomyFieldValueCollection = new TaxonomyFieldValueCollection(field.Context, string.Empty, field);
            string text = "";
            string[] array = val.Trim(new char[]
            {
                ';'
            }).Split(new char[]
            {
                ';'
            });
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i].Trim().Length > 0)
                {
                    TaxonomyFieldValue taxonomyFieldValue = this.ParseTaxonomyFieldValue(field, array[i]);
                    text += string.Format("{0}{1}{2}{3}", new object[]
                    {
                        taxonomyFieldValue.Label,
                        '|',
                        taxonomyFieldValue.TermGuid,
                        ';'
                    });
                }
            }
            text = text.TrimEnd(new char[]
            {
                ';'
            }).Trim();
            if (text.Length > 0)
            {
                taxonomyFieldValueCollection.PopulateFromLabelGuidPairs(text);
            }
            return taxonomyFieldValueCollection;
        }

        private TaxonomyFieldValue ParseTaxonomyFieldValue(TaxonomyField field, string val)
        {
            if (field == null)
            {
                throw new System.ArgumentNullException("field", "Taxonomy Field cannot be null");
            }
            if (string.IsNullOrEmpty(val))
            {
                throw new System.ArgumentNullException("val", "Value cannot be null or empty");
            }
            TaxonomyFieldValue taxonomyFieldValue = new TaxonomyFieldValue();
            string[] array = val.Trim(new char[]
            {
                ';'
            }).Split(new char[]
            {
                '|'
            });
            if (array.Length != 2)
            {
                throw new System.Exception("Taxonomy value should always have the format label|guid: " + val);
            }
            taxonomyFieldValue.Label = array[0];
            taxonomyFieldValue.TermGuid = array[1];
            return taxonomyFieldValue;
        }

        public string AddTermstoreLanguages(string termStoreId, string xml)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyReportingElements.Result.ToString());
                using (ClientContext clientContext = this.GetClientContext())
                {
                    try
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        bool flag = false;
                        TermStore termStore = this.LoadTermStore(taxonomySession, new System.Guid(termStoreId), true);
                        System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(xml);
                        foreach (System.Xml.XmlNode xmlNode2 in xmlNode.ChildNodes)
                        {
                            int num = int.Parse(xmlNode2.FirstChild.Value);
                            if (!termStore.Languages.Contains(num))
                            {
                                termStore.AddLanguage(num);
                                flag = true;
                            }
                        }
                        if (flag)
                        {
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        this.LogTaxonomyWarning(xmlWriter, "Unable to add term store languages.", Utils.GetExceptionMessageOnly(ex));
                    }
                }
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                result = stringBuilder.ToString();
            }
            return result;
        }

        public string AddTermGroup(string termStoreId, string xml, bool includeGroup)
        {
            TaxonomyStatistics stats = new TaxonomyStatistics();
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyReportingElements.Result.ToString());
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(xml);
                    string att = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.Name);
                    try
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        TermStore termStore = this.LoadTermStore(taxonomySession, new System.Guid(termStoreId), true);
                        TermGroup termGroup = this.AddTermGroup(termStore, xmlNode, xmlWriter, stats, clientContext);
                        if (termGroup != null && includeGroup)
                        {
                            this.SerializeTermGroup(xmlWriter, termStore, termGroup, false, null);
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                        this.LogTaxonomyError(xmlWriter, string.Format("Error adding Group '{0}'", att), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
                    }
                }
                this.LogTaxonomyStatistics(xmlWriter, stats);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                result = stringBuilder.ToString();
            }
            return result;
        }

        private TermGroup AddTermGroup(TermStore termStore, System.Xml.XmlNode groupNode, System.Xml.XmlWriter xWriter, TaxonomyStatistics stats, ClientContext clientContext)
        {
            if (groupNode == null)
            {
                return null;
            }
            bool flag = false;
            System.Guid guid = groupNode.GetAttributeValueAsGuid(TaxonomyFields.Id.ToString());
            string attributeValueAsString = groupNode.GetAttributeValueAsString(TaxonomyFields.Name.ToString());
            string attributeValueAsString2 = groupNode.GetAttributeValueAsString(TaxonomyFields.Description.ToString());
            bool attributeValueAsBoolean = groupNode.GetAttributeValueAsBoolean(TaxonomyFields.IsSystemGroup.ToString());
            bool attributeValueAsBoolean2 = groupNode.GetAttributeValueAsBoolean(TaxonomyFields.IsSiteCollectionGroup.ToString());
            bool attributeValueAsBoolean3 = groupNode.GetAttributeValueAsBoolean(TaxonomyFields.Skip.ToString());
            try
            {
                TermGroup termGroup = null;
                if (guid == System.Guid.Empty)
                {
                    guid = System.Guid.NewGuid();
                }
                if (!attributeValueAsBoolean2)
                {
                    termGroup = this.LoadTermGroup(termStore, attributeValueAsString);
                }
                else
                {
                    termGroup = termStore.GetSiteCollectionGroup(clientContext.Site, false);
                    CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                    if (!termGroup.IsPropertyAvailable("Id"))
                    {
                        termGroup = null;
                    }
                }
                if (termGroup == null && !attributeValueAsBoolean)
                {
                    if (!attributeValueAsBoolean2)
                    {
                        termGroup = termStore.CreateGroup(attributeValueAsString, guid);
                    }
                    else
                    {
                        termGroup = termStore.GetSiteCollectionGroup(clientContext.Site, true);
                    }
                    flag = true;
                }
                TermGroup result;
                if (termGroup == null)
                {
                    this.LogTaxonomyError(xWriter, "AddTermGroup Group Safeguard. Unable to create or find group. Any related term sets and terms in this group will not be added.", string.Format("group = null, groupName = '{0}', isSystemGroup = {1}, isSiteCollectionGroup = {2}.", attributeValueAsString, attributeValueAsBoolean.ToString(), attributeValueAsBoolean2.ToString()), string.Empty, 0);
                    result = null;
                    return result;
                }
                termGroup = this.LoadTermGroup(termGroup);
                if (!attributeValueAsBoolean3)
                {
                    bool flag2 = false;
                    if (!string.Equals(termGroup.Description, attributeValueAsString2))
                    {
                        termGroup.Description = attributeValueAsString2;
                        CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                        termGroup = this.LoadTermGroup(termGroup);
                        flag2 = true;
                    }
                    if (flag)
                    {
                        stats.GroupsAdded++;
                    }
                    else if (flag2)
                    {
                        stats.GroupsUpdated++;
                    }
                }
                System.Xml.XmlNode xmlNode = groupNode.SelectSingleNode(TaxonomyClassType.SPTermSetCollection.ToString());
                if (xmlNode != null)
                {
                    foreach (System.Xml.XmlNode termSetNode in xmlNode.ChildNodes)
                    {
                        this.AddTermSet(termGroup, termSetNode, xWriter, stats, clientContext);
                    }
                    foreach (System.Xml.XmlNode xSet in xmlNode.ChildNodes)
                    {
                        this.ResetTermSetOpenForTermCreation(termGroup, xSet, xWriter);
                    }
                }
                CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                termGroup = this.LoadTermGroup(termGroup);
                result = termGroup;
                return result;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                this.LogTaxonomyError(xWriter, string.Format("AddTermGroup - Error adding Group '{0}'", attributeValueAsString), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
            }
            return null;
        }

        private void ResetTermSetOpenForTermCreation(TermGroup termGroup, System.Xml.XmlNode xSet, System.Xml.XmlWriter xWriter)
        {
            TermSet termSet = null;
            try
            {
                System.Guid guidAtt = XmlAdapterUtility.getGuidAtt(xSet, TaxonomyFields.Id);
                bool boolAtt = XmlAdapterUtility.getBoolAtt(xSet, TaxonomyFields.IsOpenForTermCreation);
                termSet = this.LoadTermSet(termGroup, guidAtt);
                if (termSet != null && boolAtt != termSet.IsOpenForTermCreation)
                {
                    termSet.IsOpenForTermCreation = boolAtt;
                    termSet.TermStore.CommitAll();
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                this.LogTaxonomyWarning(xWriter, string.Format("Unable to reset IsOpenForTermCreation for TermSet '{0}' in Group '{1}'", (termSet != null) ? termSet.Name : string.Empty, termGroup.Name), Utils.GetExceptionMessageOnly(ex));
            }
        }

        public string AddTermSet(string termSetXml)
        {
            TaxonomyStatistics stats = new TaxonomyStatistics();
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyReportingElements.Result.ToString());
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(termSetXml);
                    System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode(TaxonomyClassType.SPTermSet.ToString());
                    string att = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermStoreId);
                    string att2 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.TermGroupName);
                    string att3 = XmlAdapterUtility.getAtt(xmlNode, TaxonomyFields.Name);
                    try
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        TermStore termStore = this.LoadTermStore(taxonomySession, new System.Guid(att), true);
                        TermGroup termGroup = this.LoadTermGroup(termStore, att2);
                        TermSet termSet = this.AddTermSet(termGroup, xmlNode, xmlWriter, stats, clientContext);
                        if (termSet != null)
                        {
                            this.SerializeTermSet(xmlWriter, termSet, true, false, false);
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                        this.LogTaxonomyError(xmlWriter, string.Format("Error adding Termset '{0}' in Group '{1}'", att3, att2), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
                    }
                }
                this.LogTaxonomyStatistics(xmlWriter, stats);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                result = stringBuilder.ToString();
            }
            return result;
        }

        private TermSet AddTermSet(TermGroup termGroup, System.Xml.XmlNode termSetNode, System.Xml.XmlWriter xWriter, TaxonomyStatistics stats, ClientContext clientContext)
        {
            System.Guid guid = termSetNode.GetAttributeValueAsGuid(TaxonomyFields.Id.ToString());
            string attributeValueAsString = termSetNode.GetAttributeValueAsString(TaxonomyFields.Name.ToString());
            bool attributeValueAsBoolean = termSetNode.GetAttributeValueAsBoolean(TaxonomyFields.Skip.ToString());
            bool flag = false;
            if (guid == System.Guid.Empty)
            {
                guid = System.Guid.NewGuid();
            }
            TermSet termSet = this.LoadTermSet(termGroup, guid, attributeValueAsString);
            if (termSet != null)
            {
                termSet.Context.Load<TermSet>(termSet, CSOMAdapter.s_termSetFilter);
                CSOMAdapter.CallExecuteQuery(termSet.Context, this);
            }
            else if (!termGroup.IsSystemGroup)
            {
                termSet = termGroup.CreateTermSet(attributeValueAsString, guid, termGroup.TermStore.DefaultLanguage);
                if (termSet != null)
                {
                    termSet = this.LoadTermSet(termSet, xWriter, attributeValueAsString);
                    flag = true;
                }
            }
            if (termSet == null)
            {
                this.LogTaxonomyError(xWriter, "AddTermSet TermSet Safeguard. Unable to create or find termset. Any related terms in this termset will not be added.", string.Format("termSet = null, Group = '{0}', termSetName = '{1}'", termGroup.Name, attributeValueAsString), string.Empty, 0);
                return null;
            }
            bool flag2 = !termGroup.IsSystemGroup || (termGroup.IsSystemGroup && !string.Equals(attributeValueAsString, "Orphaned Terms", System.StringComparison.OrdinalIgnoreCase));
            if (flag2 && termSet != null && termSet.Id != CSOMAdapter.C_HASH_TAGS_TERMSET_GUID)
            {
                termSet.IsOpenForTermCreation = true;
                termSet.TermStore.CommitAll();
                if (!attributeValueAsBoolean)
                {
                    string attributeValueAsString2 = termSetNode.GetAttributeValueAsString(TaxonomyFields.Description.ToString());
                    string attributeValueAsString3 = termSetNode.GetAttributeValueAsString(TaxonomyFields.Contact.ToString());
                    bool attributeValueAsBoolean2 = termSetNode.GetAttributeValueAsBoolean(TaxonomyFields.IsAvailableForTagging.ToString());
                    string text = this.EnsureTaxonomyUser(termSetNode.GetAttributeValueAsString(TaxonomyFields.Owner.ToString()));
                    string attributeValueAsString4 = termSetNode.GetAttributeValueAsString(TaxonomyFields.CustomSortOrder.ToString());
                    bool flag3 = flag || (termSet.Description ?? string.Empty) != attributeValueAsString2 || (termSet.Contact ?? string.Empty) != attributeValueAsString3 || termSet.IsAvailableForTagging != attributeValueAsBoolean2 || (!string.IsNullOrEmpty(text) && (termSet.Owner ?? string.Empty) != text) || (termSet.CustomSortOrder ?? string.Empty) != attributeValueAsString4;
                    if (flag3)
                    {
                        termSet.Description = attributeValueAsString2;
                        termSet.Contact = attributeValueAsString3;
                        termSet.IsAvailableForTagging = attributeValueAsBoolean2;
                        if (!string.IsNullOrEmpty(text))
                        {
                            termSet.Owner = text;
                        }
                        termSet.CustomSortOrder = attributeValueAsString4;
                        termSet.TermStore.CommitAll();
                    }
                    int num = this.AddTermSetStakeholders(xWriter, termSet, attributeValueAsString, termSetNode);
                    if (flag)
                    {
                        stats.TermSetsAdded++;
                    }
                    else if (flag3 || num > 0)
                    {
                        stats.TermSetsUpdated++;
                    }
                }
            }
            System.Xml.XmlNode xmlNode = termSetNode.SelectSingleNode(TaxonomyClassType.SPTermCollection.ToString());
            if (xmlNode != null)
            {
                foreach (System.Xml.XmlNode termNode in xmlNode.ChildNodes)
                {
                    this.AddTerm(termSet, termNode, xWriter, stats, true, clientContext);
                }
            }
            CSOMAdapter.CallExecuteQuery(termSet.Context, this);
            termSet = this.LoadTermSet(termSet);
            return termSet;
        }

        private string EnsureTaxonomyUser(string userName)
        {
            int iDFromUser = this.AdapterData.GetIDFromUser(userName);
            string result = string.Empty;
            if (iDFromUser != -1)
            {
                result = this.AdapterData.GetUserFromID(iDFromUser);
            }
            return result;
        }

        private int AddTermSetStakeholders(System.Xml.XmlWriter xWriter, TermSet termSet, string termSetName, System.Xml.XmlNode xSet)
        {
            int num = 0;
            System.Xml.XmlNode xmlNode = xSet.SelectSingleNode(TaxonomyClassType.SPStakeholderCollection.ToString());
            if (xmlNode != null)
            {
                foreach (System.Xml.XmlNode xmlNode2 in xmlNode.ChildNodes)
                {
                    if (xmlNode2.FirstChild != null)
                    {
                        string text = this.EnsureTaxonomyUser(xmlNode2.FirstChild.Value);
                        if (!string.IsNullOrEmpty(text))
                        {
                            bool flag = false;
                            foreach (string current in termSet.Stakeholders)
                            {
                                if (string.Equals(current, text, System.StringComparison.OrdinalIgnoreCase))
                                {
                                    flag = true;
                                    break;
                                }
                            }
                            if (!flag)
                            {
                                try
                                {
                                    termSet.AddStakeholder(text);
                                    num++;
                                }
                                catch (System.Exception ex)
                                {
                                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                    this.LogTaxonomyWarning(xWriter, string.Format("Error Adding Stakeholder '{0}' to TermSet '{1}'", text, termSetName), Utils.GetExceptionMessageOnly(ex));
                                }
                            }
                        }
                    }
                }
                if (num > 0)
                {
                    CSOMAdapter.CallExecuteQuery(termSet.Context, this);
                }
            }
            return num;
        }

        public string AddTerm(string xml)
        {
            TaxonomyStatistics stats = new TaxonomyStatistics();
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyReportingElements.Result.ToString());
                using (ClientContext clientContext = this.GetClientContext())
                {
                    TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(xml);
                    System.Xml.XmlNode xNode = xmlDocument.SelectSingleNode(TaxonomyClassType.SPTerm.ToString());
                    string att = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.TermStoreId);
                    string att2 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.TermGroupName);
                    string att3 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.TermSetName);
                    string att4 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.TermSetId);
                    string att5 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.Name);
                    string att6 = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.ParentTermId);
                    try
                    {
                        TermStore termStore = this.LoadTermStore(taxonomySession, new System.Guid(att), true);
                        TermGroup termGroup = this.LoadTermGroup(termStore, att2);
                        TermSet termSet = this.LoadTermSet(termGroup, new System.Guid(att4), att3);
                        TermSetItem termSetItem = null;
                        if (!string.IsNullOrEmpty(att6))
                        {
                            termSetItem = this.LoadTerm(termSet, new System.Guid(att6));
                        }
                        Term term = this.CreateTerm(termSetItem ?? termSet, att5, System.Guid.NewGuid(), stats);
                        if (term != null)
                        {
                            this.SerializeTerm(xmlWriter, term, true, false);
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                        this.LogTaxonomyError(xmlWriter, string.Format("AddTerm (termXml) - Error adding Term '{0}' in TermSet '{1}' of Group '{2}'", att5, att3, att2), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
                    }
                }
                this.LogTaxonomyStatistics(xmlWriter, stats);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                result = stringBuilder.ToString();
            }
            return result;
        }

        private bool AddTerm(TermSetItem item, System.Xml.XmlNode termNode, System.Xml.XmlWriter xWriter, TaxonomyStatistics stats, bool checkExists, ClientContext clientContext)
        {
            System.Guid attributeValueAsGuid = termNode.GetAttributeValueAsGuid(TaxonomyFields.Id.ToString());
            string attributeValueAsString = termNode.GetAttributeValueAsString(TaxonomyFields.Name.ToString());
            bool attributeValueAsBoolean = termNode.GetAttributeValueAsBoolean(TaxonomyFields.IsReused.ToString());
            bool attributeValueAsBoolean2 = termNode.GetAttributeValueAsBoolean(TaxonomyFields.IsSourceTerm.ToString());
            bool attributeValueAsBoolean3 = termNode.GetAttributeValueAsBoolean(TaxonomyFields.Skip.ToString());
            TermSet termSet = this.LoadTermSet(item);
            if (termSet == null)
            {
                this.LogTaxonomyError(xWriter, string.Format("Could not load the TermSet object to add the Term='{0}' [Id='{1}'], tsi.Name='{2}', IsReused={3}, IsSourceTerm={4}", new object[]
                {
                    attributeValueAsString,
                    attributeValueAsGuid.ToString(),
                    item.Name,
                    attributeValueAsBoolean.ToString(),
                    attributeValueAsBoolean2.ToString()
                }), "Could not load the TermSet object to add the Term", string.Empty, 0);
                return false;
            }
            if (item is Term)
            {
                this.LoadTerm(item as Term);
            }
            try
            {
                if (!termSet.IsOpenForTermCreation)
                {
                    item.TermStore.CommitAll();
                    termSet = this.LoadTermSet(termSet);
                }
                if (!termSet.IsOpenForTermCreation)
                {
                    termSet.IsOpenForTermCreation = true;
                    termSet.TermStore.CommitAll();
                }
                Term term = null;
                if (checkExists)
                {
                    if (item is TermSet)
                    {
                        termSet.Context.Load<TermSet>(item as TermSet, CSOMAdapter.s_termSetFilter);
                    }
                    else
                    {
                        termSet.Context.Load<Term>(item as Term, CSOMAdapter.s_termFilter);
                    }
                    CSOMAdapter.CallExecuteQuery(termSet.Context, this);
                    foreach (Term current in item.Terms)
                    {
                        if (current.Id == attributeValueAsGuid)
                        {
                            term = this.LoadTerm(current);
                            break;
                        }
                    }
                }
                bool flag = false;
                if (term != null)
                {
                    if (attributeValueAsBoolean && !attributeValueAsBoolean2)
                    {
                        Term term2 = this.LoadSourceTerm(termSet.TermStore, termNode, clientContext);
                        if (term2 != null && term.IsSourceTerm && !term2.IsSourceTerm)
                        {
                            term.ReassignSourceTerm(term2);
                            CSOMAdapter.CallExecuteQuery(termSet.Context, this);
                        }
                    }
                }
                else if ((term = this.FindOrCreateTerm(item, termNode, stats, ref flag, clientContext)) == null)
                {
                    this.LogTaxonomyError(xWriter, "Unable to create or find term. Any related terms in this term will not be added.", string.Format("term = null, IsReused = {0}, IsSourceTerm = {1}, TermName = '{2}'.", attributeValueAsBoolean.ToString(), attributeValueAsBoolean2.ToString(), attributeValueAsString), string.Empty, 0);
                    bool result = false;
                    return result;
                }
                CSOMAdapter.CallExecuteQuery(term.Context, this);
                term.Context.Load<Term>(term, CSOMAdapter.s_termFilter);
                CSOMAdapter.CallExecuteQuery(term.Context, this);
                if (!attributeValueAsBoolean3)
                {
                    string attributeValueAsString2 = termNode.GetAttributeValueAsString(TaxonomyFields.CustomSortOrder.ToString());
                    bool attributeValueAsBoolean4 = termNode.GetAttributeValueAsBoolean(TaxonomyFields.IsAvailableForTagging.ToString());
                    string text = this.EnsureTaxonomyUser(termNode.GetAttributeValueAsString(TaxonomyFields.Owner.ToString()));
                    bool attributeValueAsBoolean5 = termNode.GetAttributeValueAsBoolean(TaxonomyFields.IsDeprecated.ToString());
                    string attributeValueAsString3 = termNode.GetAttributeValueAsString(TaxonomyFields.Description.ToString());
                    bool flag2 = flag;
                    if (!flag2)
                    {
                        flag2 = (term.IsAvailableForTagging != attributeValueAsBoolean4);
                        if (!flag2 && !string.IsNullOrEmpty(text))
                        {
                            flag2 = ((term.Owner ?? string.Empty) != text);
                        }
                        if (!flag2)
                        {
                            flag2 = (term.IsDeprecated != attributeValueAsBoolean5);
                        }
                        if (!flag2)
                        {
                            flag2 = (term.TermSet.Id != CSOMAdapter.C_HASH_TAGS_TERMSET_GUID && (term.CustomSortOrder ?? string.Empty) != attributeValueAsString2);
                        }
                        if (!flag2)
                        {
                            flag2 = this.IsChangedTermDescription(term, termNode);
                        }
                    }
                    if (flag2)
                    {
                        if (!this.SetTermDescriptions(term, termNode))
                        {
                            term.SetDescription(attributeValueAsString3, termSet.TermStore.DefaultLanguage);
                        }
                        if (term.TermSet.Id != CSOMAdapter.C_HASH_TAGS_TERMSET_GUID)
                        {
                            term.CustomSortOrder = attributeValueAsString2;
                        }
                        term.IsAvailableForTagging = attributeValueAsBoolean4;
                        if (!string.IsNullOrEmpty(text))
                        {
                            term.Owner = text;
                        }
                        term.Deprecate(attributeValueAsBoolean5);
                        term.TermStore.CommitAll();
                    }
                    bool flag3 = this.SetTermLabels(term, termNode);
                    bool flag4 = this.SetTermProps(term, termNode);
                    if (flag)
                    {
                        stats.TermsAdded++;
                    }
                    else if (flag4 || flag3 || flag2)
                    {
                        stats.TermsUpdated++;
                    }
                }
                int attributeValueAsInt = termNode.GetAttributeValueAsInt(TaxonomyFields.TermsCount.ToString());
                if (attributeValueAsInt > 0)
                {
                    System.Xml.XmlNode xmlNode = termNode.SelectSingleNode(TaxonomyClassType.SPTermCollection.ToString());
                    if (xmlNode != null)
                    {
                        foreach (System.Xml.XmlNode termNode2 in xmlNode.ChildNodes)
                        {
                            this.AddTerm(term, termNode2, xWriter, stats, true, clientContext);
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                this.LogTaxonomyError(xWriter, string.Format("AddTerm - Error adding Term='{0}' [Id='{1}'], tsi.Name='{2}', TermSet='{3}', Group='{4}', IsReused={5}, IsSourceTerm={6}", new object[]
                {
                    attributeValueAsString,
                    attributeValueAsGuid.ToString(),
                    item.Name,
                    termSet.Name,
                    termSet.Group.Name,
                    attributeValueAsBoolean.ToString(),
                    attributeValueAsBoolean2.ToString()
                }), exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
                bool result = false;
                return result;
            }
            return true;
        }

        private Term FindOrCreateTerm(TermSetItem item, System.Xml.XmlNode termNode, TaxonomyStatistics stats, ref bool isAdded, ClientContext clientContext)
        {
            TermSet parentSet = this.LoadTermSet(item);
            TermStore termStore = item.TermStore;
            Term term = null;
            System.Guid attributeValueAsGuid = termNode.GetAttributeValueAsGuid(TaxonomyFields.Id.ToString());
            bool attributeValueAsBoolean = termNode.GetAttributeValueAsBoolean(TaxonomyFields.IsReused.ToString());
            bool attributeValueAsBoolean2 = termNode.GetAttributeValueAsBoolean(TaxonomyFields.IsSourceTerm.ToString());
            if (attributeValueAsBoolean && !attributeValueAsBoolean2)
            {
                Term term2 = this.LoadSourceTerm(termStore, termNode, clientContext);
                if (term2 != null)
                {
                    if (!term2.IsSourceTerm && term2.Id == attributeValueAsGuid)
                    {
                        Term term3 = this.LoadOrphanedTerm(termStore, attributeValueAsGuid);
                        if (term3 != null)
                        {
                            term3.ReassignSourceTerm(term2);
                            termStore.CommitAll();
                            stats.TermsReassignedFromOrphanedTerms++;
                        }
                    }
                    term = (term2.MergedTermIds.Contains(attributeValueAsGuid) ? term2 : this.ReuseTerm(item, term2));
                }
                else
                {
                    TermSetItem item2 = this.FindParent(item, termNode, clientContext);
                    string attributeValueAsString = termNode.GetAttributeValueAsString(TaxonomyFields.Name.ToString());
                    term = this.CreateTerm(item2, attributeValueAsString, attributeValueAsGuid);
                    isAdded = true;
                }
                return term;
            }
            if (attributeValueAsBoolean)
            {
                Term term4 = this.LoadOrphanedTerm(termStore, attributeValueAsGuid);
                if (term4 != null)
                {
                    TermCollection reusedTerms = term4.ReusedTerms;
                    termStore.Context.Load<TermCollection>(reusedTerms, new System.Linq.Expressions.Expression<System.Func<TermCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                    if (reusedTerms.AreItemsAvailable && reusedTerms.Count > 0)
                    {
                        Term term5 = reusedTerms[0];
                        term4.ReassignSourceTerm(term5);
                        termStore.CommitAll();
                        stats.TermsReassignedFromOrphanedTerms++;
                        term = this.ReuseTerm(item, term5);
                        termStore.CommitAll();
                    }
                }
                if (term == null)
                {
                    Term term6 = this.LoadTerm(termStore, attributeValueAsGuid);
                    if (term6 != null)
                    {
                        termStore.Context.Load<Term>(term6, CSOMAdapter.s_termFilter);
                        CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                        if (term6.MergedTermIds.Contains(attributeValueAsGuid))
                        {
                            term = term6;
                        }
                        else
                        {
                            term = this.ReuseTerm(item, term6);
                            termStore.CommitAll();
                            term = this.LoadTerm(term);
                            if (term.IsSourceTerm && !term6.IsSourceTerm)
                            {
                                term.ReassignSourceTerm(term6);
                                termStore.CommitAll();
                                stats.TermsReassigned++;
                            }
                        }
                    }
                }
            }
            if (term == null)
            {
                term = this.LoadTerm(parentSet, attributeValueAsGuid);
            }
            if (term == null)
            {
                TermSetItem item3 = this.FindParent(item, termNode, clientContext);
                string attributeValueAsString2 = termNode.GetAttributeValueAsString(TaxonomyFields.Name.ToString());
                term = this.CreateTerm(item3, attributeValueAsString2, attributeValueAsGuid);
                isAdded = true;
            }
            return term;
        }

        private TermSetItem FindParent(TermSetItem item, System.Xml.XmlNode xNode, ClientContext clientContext)
        {
            TermSetItem termSetItem = item;
            string att = XmlAdapterUtility.getAtt(xNode, TaxonomyFields.ParentTermId);
            if (!string.IsNullOrEmpty(att))
            {
                if (item.Id != new System.Guid(att))
                {
                    termSetItem = this.LoadParentTerm(item.TermStore, xNode, clientContext);
                }
            }
            else
            {
                System.Guid guidAtt = XmlAdapterUtility.getGuidAtt(xNode, TaxonomyFields.TermSetId);
                if (item.Id != guidAtt)
                {
                    termSetItem = this.LoadTermSet(item.TermStore, guidAtt);
                }
            }
            return termSetItem ?? item;
        }

        private bool IsChangedTermDescription(Term term, System.Xml.XmlNode xNode)
        {
            System.Xml.XmlNode xmlNode = xNode.SelectSingleNode(TaxonomyClassType.SPDescriptionCollection.ToString());
            if (xmlNode != null)
            {
                System.Collections.Generic.IEnumerable<int> languages = term.TermStore.Languages;
                foreach (System.Xml.XmlNode xNode2 in xmlNode.ChildNodes)
                {
                    string att = XmlAdapterUtility.getAtt(xNode2, TaxonomyFields.Value);
                    int intAtt = XmlAdapterUtility.getIntAtt(xNode2, TaxonomyFields.Language);
                    if (languages.Contains(intAtt))
                    {
                        string text = term.GetDescription(intAtt).Value ?? string.Empty;
                        if (!string.IsNullOrEmpty(term.Description) && string.IsNullOrEmpty(text))
                        {
                            text = term.Description;
                        }
                        if (att != text)
                        {
                            return true;
                        }
                    }
                }
                return false;
            }
            return false;
        }

        private bool SetTermDescriptions(Term term, System.Xml.XmlNode xNode)
        {
            bool result = false;
            System.Xml.XmlNode xmlNode = xNode.SelectSingleNode(TaxonomyClassType.SPDescriptionCollection.ToString());
            if (xmlNode != null)
            {
                System.Collections.Generic.IEnumerable<int> languages = term.TermStore.Languages;
                foreach (System.Xml.XmlNode xNode2 in xmlNode.ChildNodes)
                {
                    string att = XmlAdapterUtility.getAtt(xNode2, TaxonomyFields.Value);
                    int intAtt = XmlAdapterUtility.getIntAtt(xNode2, TaxonomyFields.Language);
                    if (languages.Contains(intAtt))
                    {
                        string b = term.GetDescription(intAtt).Value ?? string.Empty;
                        if (att != b)
                        {
                            term.SetDescription(att, intAtt);
                            result = true;
                        }
                    }
                }
            }
            return result;
        }

        private bool SetTermLabels(Term term, System.Xml.XmlNode xNode)
        {
            bool result = false;
            System.Collections.Generic.IEnumerable<int> languages = term.TermStore.Languages;
            System.Xml.XmlNode xmlNode = xNode.SelectSingleNode(TaxonomyClassType.SPLabelCollection.ToString());
            foreach (System.Xml.XmlNode xNode2 in xmlNode.ChildNodes)
            {
                string att = XmlAdapterUtility.getAtt(xNode2, TaxonomyFields.Value);
                int intAtt = XmlAdapterUtility.getIntAtt(xNode2, TaxonomyFields.Language);
                bool boolAtt = XmlAdapterUtility.getBoolAtt(xNode2, TaxonomyFields.IsDefaultForLanguage);
                Label label = null;
                foreach (Label current in term.Labels)
                {
                    if (current.Value == att && intAtt == current.Language)
                    {
                        label = current;
                        break;
                    }
                }
                if (label == null && languages.Contains(intAtt))
                {
                    label = term.CreateLabel(att, intAtt, boolAtt);
                    term.TermStore.CommitAll();
                    result = true;
                }
            }
            return result;
        }

        private bool SetTermProps(Term term, System.Xml.XmlNode xNode)
        {
            bool result = false;
            System.Collections.Generic.IDictionary<string, string> customProperties = term.CustomProperties;
            System.Xml.XmlNode xmlNode = xNode.SelectSingleNode(TaxonomyClassType.SPCustomProperties.ToString());
            foreach (System.Xml.XmlNode xNode2 in xmlNode.ChildNodes)
            {
                string att = XmlAdapterUtility.getAtt(xNode2, TaxonomyFields.Key);
                string att2 = XmlAdapterUtility.getAtt(xNode2, TaxonomyFields.Value);
                if (!customProperties.ContainsKey(att) || customProperties[att] != att2)
                {
                    term.SetCustomProperty(att, att2);
                    term.TermStore.CommitAll();
                    result = true;
                }
            }
            return result;
        }

        private Term CreateTerm(TermSetItem item, string termName, System.Guid termGuid)
        {
            Term term = item.CreateTerm(termName, item.TermStore.DefaultLanguage, termGuid);
            item.TermStore.CommitAll();
            CSOMAdapter.CallExecuteQuery(item.Context, this);
            return this.LoadTerm(term);
        }

        private Term CreateTerm(TermSetItem item, string termName, System.Guid termGuid, TaxonomyStatistics stats)
        {
            TermSet termSet = this.LoadTermSet(item);
            if (!termSet.IsOpenForTermCreation)
            {
                item.TermStore.CommitAll();
                termSet = this.LoadTermSet(item.TermStore, termSet.Id);
            }
            if (!termSet.IsOpenForTermCreation)
            {
                termSet.IsOpenForTermCreation = true;
                termSet.TermStore.CommitAll();
            }
            foreach (Term current in item.Terms)
            {
                if (string.Equals(current.Name, termName))
                {
                    Term result = current;
                    return result;
                }
                foreach (Label current2 in current.Labels)
                {
                    if (string.Equals(current2.Value, termName))
                    {
                        Term result = current2.Term;
                        return result;
                    }
                }
            }
            Term result2 = this.CreateTerm(item, termName, termGuid);
            stats.TermsAdded++;
            return result2;
        }

        public string AddReusedTerms(string termStoreId, string xml)
        {
            TaxonomyStatistics stats = new TaxonomyStatistics();
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyReportingElements.Result.ToString());
                try
                {
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(xml);
                    System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode(TaxonomyClassType.ParentTermCollection.ToString());
                    if (xmlNode != null)
                    {
                        using (ClientContext clientContext = this.GetClientContext())
                        {
                            TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                            TermStore termStore = this.LoadTermStore(taxonomySession, new System.Guid(termStoreId), true);
                            foreach (System.Xml.XmlNode xTerm in xmlNode)
                            {
                                this.ProcessReusedTerm(termStore, xTerm, xmlWriter, stats, clientContext);
                            }
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    Metalogix.SharePoint.Adapters.ExceptionDetail exceptionMessageAndDetail = Utils.GetExceptionMessageAndDetail(ex);
                    this.LogTaxonomyError(xmlWriter, "AddReusedTerms - Error synchronising dependency terms", exceptionMessageAndDetail.Message, exceptionMessageAndDetail.Detail, 0);
                }
                this.LogTaxonomyStatistics(xmlWriter, stats);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                result = stringBuilder.ToString();
            }
            return result;
        }

        private Term ReuseTerm(TermSetItem tsi, Term sourceTerm)
        {
            bool isDeprecated = sourceTerm.IsDeprecated;
            if (isDeprecated)
            {
                sourceTerm.Deprecate(false);
                CSOMAdapter.CallExecuteQuery(sourceTerm.Context, this);
            }
            Term result = tsi.ReuseTerm(sourceTerm, false);
            if (isDeprecated)
            {
                sourceTerm.Deprecate(true);
                sourceTerm.TermStore.CommitAll();
            }
            CSOMAdapter.CallExecuteQuery(sourceTerm.Context, this);
            return result;
        }

        private void ProcessReusedTerm(TermStore termStore, System.Xml.XmlNode xTerm, System.Xml.XmlWriter xWriter, TaxonomyStatistics stats, ClientContext clientContext)
        {
            if (xTerm == null)
            {
                return;
            }
            string attributeValueAsString = xTerm.GetAttributeValueAsString(TaxonomyFields.TermGroupName.ToString());
            bool attributeValueAsBoolean = xTerm.GetAttributeValueAsBoolean(TaxonomyFields.IsSiteCollectionGroup.ToString());
            TermGroup termGroup;
            if (attributeValueAsBoolean)
            {
                termGroup = termStore.GetSiteCollectionGroup(clientContext.Site, false);
                termStore.Context.Load<TermGroup>(termGroup, CSOMAdapter.s_termGroupFilter);
                CSOMAdapter.CallExecuteQuery(termStore.Context, this);
                if (!termGroup.IsPropertyAvailable("Id"))
                {
                    termGroup = null;
                }
            }
            else
            {
                termGroup = this.LoadTermGroup(termStore, attributeValueAsString);
            }
            if (termGroup == null)
            {
                System.Xml.XmlNode groupNode = xTerm.SelectSingleNode(TaxonomyClassType.SPTermGroup.ToString());
                termGroup = this.AddTermGroup(termStore, groupNode, xWriter, stats, clientContext);
                if (termGroup == null)
                {
                    throw new System.Exception("ProcessReusedTerm : group is null. Unable to continue.");
                }
            }
            System.Guid guidAtt = XmlAdapterUtility.getGuidAtt(xTerm, TaxonomyFields.TermSetId);
            TermSet termSet = this.LoadTermSet(termGroup, guidAtt);
            if (termSet == null)
            {
                System.Xml.XmlNode termSetNode = xTerm.SelectSingleNode(TaxonomyClassType.SPTermSet.ToString());
                termSet = this.AddTermSet(termGroup, termSetNode, xWriter, stats, clientContext);
                if (termSet == null)
                {
                    throw new System.Exception("ProcessReusedTerm : termSet is null. Unable to continue.");
                }
            }
            System.Xml.XmlNode xmlNode = xTerm.SelectSingleNode(TaxonomyClassType.DependencyCollection.ToString());
            if (xmlNode != null)
            {
                foreach (System.Xml.XmlNode xTerm2 in xmlNode)
                {
                    this.ProcessReusedTerm(termStore, xTerm2, xWriter, stats, clientContext);
                }
            }
            bool boolAtt = XmlAdapterUtility.getBoolAtt(xTerm, TaxonomyFields.IsRoot);
            if (boolAtt)
            {
                this.AddTerm(termSet, xTerm, xWriter, stats, true, clientContext);
                return;
            }
            Term item = this.LoadParentTerm(termStore, xTerm, clientContext);
            this.AddTerm(item, xTerm, xWriter, stats, true, clientContext);
        }

        private void LogTaxonomyStatistics(System.Xml.XmlWriter xWriter, TaxonomyStatistics stats)
        {
            xWriter.WriteStartElement(TaxonomyReportingElements.Statistics.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.GroupsAdded.ToString(), stats.GroupsAdded.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.GroupsUpdated.ToString(), stats.GroupsUpdated.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.TermSetsAdded.ToString(), stats.TermSetsAdded.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.TermSetsUpdated.ToString(), stats.TermSetsUpdated.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.TermsAdded.ToString(), stats.TermsAdded.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.TermsUpdated.ToString(), stats.TermsUpdated.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.TermsReassigned.ToString(), stats.TermsReassigned.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.TermsReassignedFromOrphanedTerms.ToString(), stats.TermsReassignedFromOrphanedTerms.ToString());
            xWriter.WriteEndElement();
        }

        private void LogTaxonomyError(System.Xml.XmlWriter xWriter, string message, string detail, string stack, int hResult = 0)
        {
            xWriter.WriteStartElement(TaxonomyReportingElements.Error.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.Message.ToString(), message ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.Detail.ToString(), detail ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.Stack.ToString(), stack ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.HResult.ToString(), hResult.ToString());
            xWriter.WriteEndElement();
        }

        private void LogTaxonomyWarning(System.Xml.XmlWriter xWriter, string message, string detail)
        {
            xWriter.WriteStartElement(TaxonomyReportingElements.Warning.ToString());
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.Message.ToString(), message ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyReportingAttributes.Detail.ToString(), detail ?? string.Empty);
            xWriter.WriteEndElement();
        }

        public string GetTermStores()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyClassType.SPTermStoreCollection.ToString());
                if (this.HasTaxonomySupport())
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        TermStore termStore = taxonomySession.GetDefaultSiteCollectionTermStore();
                        clientContext.Load<TermStore>(termStore, new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[0]);
                        try
                        {
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            System.Guid arg_65_0 = termStore.Id;
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            termStore = null;
                        }
                        TermStore termStore2 = taxonomySession.GetDefaultKeywordsTermStore();
                        clientContext.Load<TermStore>(termStore2, new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[0]);
                        try
                        {
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            System.Guid arg_A5_0 = termStore2.Id;
                        }
                        catch (System.Exception ex2)
                        {
                            CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            termStore2 = null;
                        }
                        clientContext.Load<TaxonomySession>(taxonomySession, new System.Linq.Expressions.Expression<System.Func<TaxonomySession, object>>[]
                        {
                            (TaxonomySession sess) => sess.TermStores.Include(CSOMAdapter.s_termStoreFilter)
                        });
                        try
                        {
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        catch (System.Exception ex3)
                        {
                            CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            throw new System.Exception("Unable to access term stores: " + ex3.Message + ". Please ensure enough permissions have been granted to the term store and its related service for the migrating account.");
                        }
                        foreach (TermStore current in taxonomySession.TermStores)
                        {
                            this.SerializeTermStore(xmlWriter, current, termStore != null && current.Id.Equals(termStore.Id), termStore2 != null && current.Id.Equals(termStore2.Id));
                        }
                    }
                }
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                string text = stringBuilder.ToString();
                result = text;
            }
            return result;
        }

        public string GetTermGroups(string termStoreId)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyClassType.SPTermGroupCollection.ToString());
                if (this.HasTaxonomySupport())
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        System.Guid storeId = new System.Guid(termStoreId);
                        clientContext.Load<TaxonomySession>(taxonomySession, new System.Linq.Expressions.Expression<System.Func<TaxonomySession, object>>[]
                        {
                            (TaxonomySession sess) => from ts in sess.TermStores.Include(new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[]
                                {
                                    (TermStore ts) => (object)ts.Id,
                                    (TermStore ts) => ts.Name,
                                    (TermStore ts) => ts.Groups.Include(CSOMAdapter.s_termGroupFilter)
                                })
                                where ts.Id == storeId
                                select ts
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (taxonomySession.TermStores.Count == 0)
                        {
                            throw new System.Exception("Term store '{" + termStoreId + "}' not found.");
                        }
                        TermStore termStore = taxonomySession.TermStores[0];
                        TermGroup siteCollectionGroup = termStore.GetSiteCollectionGroup(clientContext.Site, false);
                        clientContext.Load<TermGroup>(siteCollectionGroup, new System.Linq.Expressions.Expression<System.Func<TermGroup, object>>[0]);
                        clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                        {
                            (Site st) => (object)st.Id
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        string text = null;
                        string b = null;
                        if (siteCollectionGroup.IsPropertyAvailable("Name") && clientContext.Site.IsPropertyAvailable("Id"))
                        {
                            text = clientContext.Site.Id.ToString();
                            b = siteCollectionGroup.Name;
                        }
                        foreach (TermGroup current in termStore.Groups)
                        {
                            this.SerializeTermGroup(xmlWriter, termStore, current, false, string.Equals(current.Name, b) ? text : null);
                        }
                    }
                }
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                string text2 = stringBuilder.ToString();
                result = text2;
            }
            return result;
        }

        [System.Obsolete("GetTermSets is deprecated, it's never called", false)]
        public string GetTermSets(string groupId)
        {
            throw new System.NotImplementedException();
        }

        [System.Obsolete("GetTermsFromTermSetItem is deprecated, it's never called", false)]
        public string GetTermsFromTermSetItem(string itemId)
        {
            throw new System.NotImplementedException();
        }

        public string GetTermSetCollection(string termStoreId, string termGroupId)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(TaxonomyClassType.SPTermSetCollection.ToString());
                if (this.HasTaxonomySupport())
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        System.Guid groupId = new System.Guid(termGroupId);
                        clientContext.Load<TaxonomySession>(taxonomySession, new System.Linq.Expressions.Expression<System.Func<TaxonomySession, object>>[]
                        {
                            (TaxonomySession sess) => from ts in sess.TermStores.Include(new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[]
                                {
                                    (TermStore ts) => (object)ts.Id,
                                    (TermStore ts) => from g in ts.Groups.Include(new System.Linq.Expressions.Expression<System.Func<TermGroup, object>>[]
                                        {
                                            (TermGroup g) => (object)g.Id,
                                            (TermGroup g) => g.TermSets.Include(CSOMAdapter.s_termSetFilter)
                                        })
                                        where g.Id == groupId
                                        select g
                                })
                                where ts.Id == new System.Guid(termStoreId)
                                select ts
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (taxonomySession.TermStores.Count == 0 || taxonomySession.TermStores[0].Groups.Count == 0)
                        {
                            throw new System.Exception("Term group '{" + termGroupId + "}' not found.");
                        }
                        TermGroup termGroup = taxonomySession.TermStores[0].Groups[0];
                        foreach (TermSet current in termGroup.TermSets)
                        {
                            this.SerializeTermSet(xmlWriter, current, false, false, false);
                        }
                    }
                }
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                string text = stringBuilder.ToString();
                result = text;
            }
            return result;
        }

        public string GetTermCollectionFromTermSet(string sTermStoreId, string sTermGroupId, string sTermSetId)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                if (!this.HasTaxonomySupport())
                {
                    xmlWriter.WriteStartElement(TaxonomyClassType.SPTermCollection.ToString());
                    xmlWriter.WriteEndElement();
                }
                else
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        System.Guid setId = new System.Guid(sTermSetId);
                        clientContext.Load<TaxonomySession>(taxonomySession, new System.Linq.Expressions.Expression<System.Func<TaxonomySession, object>>[]
                        {
                            (TaxonomySession sess) => from st in sess.TermStores.Include(new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[]
                                {
                                    (TermStore st) => (object)st.Id,
                                    (TermStore st) => from g in st.Groups.Include(new System.Linq.Expressions.Expression<System.Func<TermGroup, object>>[]
                                        {
                                            (TermGroup g) => (object)g.Id,
                                            (TermGroup g) => from ts in g.TermSets.Include(CSOMAdapter.s_termSetFilter)
                                                where ts.Id == setId
                                                select ts
                                        })
                                        where g.Id == new System.Guid(sTermGroupId)
                                        select g
                                })
                                where st.Id == new System.Guid(sTermStoreId)
                                select st
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (taxonomySession.TermStores.Count == 0 || taxonomySession.TermStores[0].Groups.Count == 0 || taxonomySession.TermStores[0].Groups[0].TermSets.Count == 0)
                        {
                            throw new System.Exception("Term set '{" + sTermSetId + "}' not found.");
                        }
                        TermSet termSet = taxonomySession.TermStores[0].Groups[0].TermSets[0];
                        this.SerializeTermCollection(xmlWriter, termSet.Terms, true, true);
                    }
                }
                xmlWriter.Flush();
                string text = stringBuilder.ToString();
                result = text;
            }
            return result;
        }

        public string GetTermCollectionFromTerm(string sTermStoreId, string sTermGroupId, string sTermSetId, string sTermId)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                if (!this.HasTaxonomySupport())
                {
                    xmlWriter.WriteStartElement(TaxonomyClassType.SPTermCollection.ToString());
                    xmlWriter.WriteEndElement();
                }
                else
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        System.Guid termId = new System.Guid(sTermId);
                        clientContext.Load<TaxonomySession>(taxonomySession, new System.Linq.Expressions.Expression<System.Func<TaxonomySession, object>>[]
                        {
                            (TaxonomySession sess) => from st in sess.TermStores.Include(new System.Linq.Expressions.Expression<System.Func<TermStore, object>>[]
                                {
                                    (TermStore st) => (object)st.Id,
                                    (TermStore st) => from g in st.Groups.Include(new System.Linq.Expressions.Expression<System.Func<TermGroup, object>>[]
                                        {
                                            (TermGroup g) => (object)g.Id,
                                            (TermGroup g) => from ts in g.TermSets.Include(CSOMAdapter.s_termSetFilter)
                                                where ts.Id == new System.Guid(sTermSetId)
                                                select ts
                                        })
                                        where g.Id == new System.Guid(sTermGroupId)
                                        select g
                                })
                                where st.Id == new System.Guid(sTermStoreId)
                                select st
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (taxonomySession.TermStores.Count == 0 || taxonomySession.TermStores[0].Groups.Count == 0 || taxonomySession.TermStores[0].Groups[0].TermSets.Count == 0)
                        {
                            throw new System.Exception("Term set '{" + sTermSetId + "}' not found.");
                        }
                        TermSet parentSet = taxonomySession.TermStores[0].Groups[0].TermSets[0];
                        Term term = this.LoadTerm(parentSet, termId);
                        if (term == null)
                        {
                            throw new System.Exception("Term '{" + sTermId + "}' not found.");
                        }
                        this.SerializeTermCollection(xmlWriter, term.Terms, true, true);
                    }
                }
                xmlWriter.Flush();
                string text = stringBuilder.ToString();
                result = text;
            }
            return result;
        }

        public string GetTermsFromTermSet(string termSetId, bool recursive)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            string result;
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                if (!this.HasTaxonomySupport())
                {
                    xmlWriter.WriteStartElement(TaxonomyClassType.SPTermCollection.ToString());
                    xmlWriter.WriteEndElement();
                }
                else
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TaxonomySession taxonomySession = TaxonomySession.GetTaxonomySession(clientContext);
                        TermSet termSet = this.LoadTermSet(taxonomySession, termSetId);
                        if (termSet == null)
                        {
                            throw new System.Exception("Term set '{" + termSetId + "}' not found");
                        }
                        this.SerializeTermCollection(xmlWriter, termSet.GetAllTerms(), true, false);
                    }
                }
                xmlWriter.Flush();
                string text = stringBuilder.ToString();
                result = text;
            }
            return result;
        }

        private void SerializeTermStore(System.Xml.XmlWriter xWriter, TermStore termStore, bool isDefTermStore, bool isDefKTermStore)
        {
            if (termStore == null)
            {
                return;
            }
            xWriter.WriteStartElement(TaxonomyClassType.SPTermStore.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Id.ToString(), termStore.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Name.ToString(), termStore.Name);
            xWriter.WriteAttributeString(TaxonomyFields.IsOnline.ToString(), termStore.IsOnline.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.ContentTypePublishingHub.ToString(), termStore.ContentTypePublishingHub ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.IsDefaultSiteCollectionTermStore.ToString(), isDefTermStore.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsDefaultKeywordsTermStore.ToString(), isDefKTermStore.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.DefaultLanguage.ToString(), termStore.DefaultLanguage.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.WorkingLanguage.ToString(), termStore.WorkingLanguage.ToString());
            xWriter.WriteStartElement(TaxonomyClassType.SPLanguageCollection.ToString());
            foreach (int current in termStore.Languages)
            {
                xWriter.WriteElementString(TaxonomyFields.LCID.ToString(), current.ToString());
            }
            xWriter.WriteEndElement();
            xWriter.WriteEndElement();
        }

        private void SerializeTermGroup(System.Xml.XmlWriter xWriter, TermStore termStore, TermGroup termGroup, bool query, string siteId = null)
        {
            if (termGroup == null)
            {
                return;
            }
            if (query)
            {
                termGroup.Context.Load<TermGroup>(termGroup, CSOMAdapter.s_termGroupFilter);
                CSOMAdapter.CallExecuteQuery(termGroup.Context, this);
            }
            xWriter.WriteStartElement(TaxonomyClassType.SPTermGroup.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Id.ToString(), termGroup.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Name.ToString(), termGroup.Name);
            xWriter.WriteAttributeString(TaxonomyFields.TermStoreId.ToString(), termStore.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Description.ToString(), termGroup.Description ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.IsSiteCollectionGroup.ToString(), termGroup.IsSiteCollectionGroup.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsSystemGroup.ToString(), termGroup.IsSystemGroup.ToString());
            xWriter.WriteStartElement(TaxonomyClassType.SPSiteCollectionAccessIds.ToString());
            if (!string.IsNullOrEmpty(siteId))
            {
                xWriter.WriteElementString(TaxonomyFields.Id.ToString(), siteId);
            }
            xWriter.WriteEndElement();
            xWriter.WriteEndElement();
        }

        private void SerializeTermSet(System.Xml.XmlWriter xWriter, TermSet termSet, bool query, bool includeGroup, bool recursive)
        {
            if (termSet == null)
            {
                return;
            }
            if (query)
            {
                termSet.Context.Load<TermSet>(termSet, CSOMAdapter.s_termSetFilter);
                CSOMAdapter.CallExecuteQuery(termSet.Context, this);
            }
            xWriter.WriteStartElement(TaxonomyClassType.SPTermSet.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Id.ToString(), termSet.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Name.ToString(), termSet.Name);
            xWriter.WriteAttributeString(TaxonomyFields.TermStoreId.ToString(), termSet.TermStore.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.TermGroupId.ToString(), termSet.Group.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.TermGroupName.ToString(), termSet.Group.Name);
            xWriter.WriteAttributeString(TaxonomyFields.IsSiteCollectionGroup.ToString(), termSet.Group.IsSiteCollectionGroup.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsAvailableForTagging.ToString(), termSet.IsAvailableForTagging.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Contact.ToString(), termSet.Contact ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.Description.ToString(), termSet.Description ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.IsOpenForTermCreation.ToString(), termSet.IsOpenForTermCreation.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.CustomSortOrder.ToString(), termSet.CustomSortOrder ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.Owner.ToString(), Utils.ConvertClaimStringUserToWinOrFormsUser(termSet.Owner) ?? string.Empty);
            xWriter.WriteStartElement(TaxonomyClassType.SPStakeholderCollection.ToString());
            foreach (string current in termSet.Stakeholders)
            {
                xWriter.WriteElementString(TaxonomyFields.User.ToString(), Utils.ConvertClaimStringUserToWinOrFormsUser(current));
            }
            xWriter.WriteEndElement();
            if (includeGroup)
            {
                this.SerializeTermGroup(xWriter, termSet.TermStore, termSet.Group, true, null);
            }
            if (recursive)
            {
                this.SerializeTermCollection(xWriter, termSet.Terms, true, true);
            }
            xWriter.WriteEndElement();
        }

        private void SerializeTerm(System.Xml.XmlWriter xWriter, Term term, bool query, bool recursive)
        {
            if (term == null)
            {
                return;
            }
            if (query)
            {
                term.Context.Load<Term>(term, CSOMAdapter.s_termFilter);
                CSOMAdapter.CallExecuteQuery(term.Context, this);
            }
            string text = term.GetDescription(term.TermStore.DefaultLanguage).Value;
            text = (string.IsNullOrEmpty(text) ? term.Description : text);
            xWriter.WriteStartElement(TaxonomyClassType.SPTerm.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Id.ToString(), term.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.Name.ToString(), term.Name);
            xWriter.WriteAttributeString(TaxonomyFields.Description.ToString(), text);
            xWriter.WriteAttributeString(TaxonomyFields.IsAvailableForTagging.ToString(), term.IsAvailableForTagging.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsRoot.ToString(), term.IsRoot.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsDeprecated.ToString(), term.IsDeprecated.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsKeyword.ToString(), term.IsKeyword.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsReused.ToString(), term.IsReused.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsPinned.ToString(), term.IsPinned.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsPinnedRoot.ToString(), term.IsPinnedRoot.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsSourceTerm.ToString(), term.IsSourceTerm.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.CustomSortOrder.ToString(), term.CustomSortOrder ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.Owner.ToString(), Utils.ConvertClaimStringUserToWinOrFormsUser(term.Owner) ?? string.Empty);
            xWriter.WriteAttributeString(TaxonomyFields.TermsCount.ToString(), term.TermsCount.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.TermSetId.ToString(), term.TermSet.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.TermGroupName.ToString(), term.TermSet.Group.Name.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.TermGroupId.ToString(), term.TermSet.Group.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.TermStoreId.ToString(), term.TermStore.Id.ToString());
            xWriter.WriteAttributeString(TaxonomyFields.IsSiteCollectionGroup.ToString(), term.TermSet.Group.IsSiteCollectionGroup.ToString());
            string text2 = null;
            try
            {
                text2 = ((term.Parent == null) ? null : term.Parent.Id.ToString());
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            xWriter.WriteAttributeString(TaxonomyFields.ParentTermId.ToString(), text2 ?? string.Empty);
            xWriter.WriteStartElement(TaxonomyClassType.SPDescriptionCollection.ToString());
            foreach (int current in term.TermStore.Languages)
            {
                string value = term.GetDescription(current).Value ?? string.Empty;
                if (!string.IsNullOrEmpty(value))
                {
                    xWriter.WriteStartElement(TaxonomyClassType.SPDescription.ToString());
                    xWriter.WriteAttributeString(TaxonomyFields.Language.ToString(), current.ToString());
                    xWriter.WriteAttributeString(TaxonomyFields.Value.ToString(), value);
                    xWriter.WriteEndElement();
                }
            }
            xWriter.WriteEndElement();
            xWriter.WriteStartElement(TaxonomyClassType.SPLabelCollection.ToString());
            foreach (Label current2 in term.Labels)
            {
                xWriter.WriteStartElement(TaxonomyClassType.SPLabel.ToString());
                xWriter.WriteAttributeString(TaxonomyFields.IsDefaultForLanguage.ToString(), current2.IsDefaultForLanguage.ToString());
                xWriter.WriteAttributeString(TaxonomyFields.Language.ToString(), current2.Language.ToString());
                xWriter.WriteAttributeString(TaxonomyFields.Value.ToString(), current2.Value);
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
            xWriter.WriteStartElement(TaxonomyClassType.SPMergedTermIds.ToString());
            foreach (System.Guid current3 in term.MergedTermIds)
            {
                xWriter.WriteElementString(TaxonomyFields.Id.ToString(), current3.ToString());
            }
            xWriter.WriteEndElement();
            xWriter.WriteStartElement(TaxonomyClassType.SPReusedTermCollection.ToString());
            foreach (Term current4 in term.ReusedTerms)
            {
                this.SerializeDependentTerm(xWriter, current4);
            }
            xWriter.WriteEndElement();
            xWriter.WriteStartElement(TaxonomyClassType.SPSourceTerm.ToString());
            Term sourceTerm = term.SourceTerm;
            if (sourceTerm != null)
            {
                this.SerializeDependentTerm(xWriter, sourceTerm);
            }
            xWriter.WriteEndElement();
            xWriter.WriteStartElement(TaxonomyClassType.SPParentTerm.ToString());
            if (!string.IsNullOrEmpty(text2))
            {
                this.SerializeDependentTerm(xWriter, term.Parent);
            }
            xWriter.WriteEndElement();
            xWriter.WriteStartElement(TaxonomyClassType.SPCustomProperties.ToString());
            foreach (System.Collections.Generic.KeyValuePair<string, string> current5 in term.CustomProperties)
            {
                xWriter.WriteStartElement(TaxonomyFields.Property.ToString());
                xWriter.WriteAttributeString(TaxonomyFields.Key.ToString(), current5.Key);
                xWriter.WriteAttributeString(TaxonomyFields.Value.ToString(), current5.Value);
                xWriter.WriteEndElement();
            }
            xWriter.WriteEndElement();
            if (recursive && term.TermsCount > 0)
            {
                this.SerializeTermCollection(xWriter, term.Terms, true, true);
            }
            xWriter.WriteEndElement();
        }

        private void SerializeDependentTerm(System.Xml.XmlWriter xmlWriter, Term term)
        {
            xmlWriter.WriteStartElement(TaxonomyClassType.SPTerm.ToString());
            xmlWriter.WriteAttributeString(TaxonomyFields.Id.ToString(), term.Id.ToString());
            xmlWriter.WriteAttributeString(TaxonomyFields.Name.ToString(), term.Name);
            xmlWriter.WriteAttributeString(TaxonomyFields.TermSetId.ToString(), term.TermSet.Id.ToString());
            xmlWriter.WriteAttributeString(TaxonomyFields.TermSetName.ToString(), term.TermSet.Name);
            xmlWriter.WriteAttributeString(TaxonomyFields.TermGroupId.ToString(), term.TermSet.Group.Id.ToString());
            xmlWriter.WriteAttributeString(TaxonomyFields.TermGroupName.ToString(), term.TermSet.Group.Name);
            xmlWriter.WriteAttributeString(TaxonomyFields.IsSiteCollectionGroup.ToString(), term.TermSet.Group.IsSiteCollectionGroup.ToString());
            xmlWriter.WriteEndElement();
        }

        private void SerializeTermCollection(System.Xml.XmlWriter xWriter, TermCollection terms, bool query, bool recursive)
        {
            if (terms == null)
            {
                return;
            }
            if (query)
            {
                terms.Context.Load<TermCollection>(terms, new System.Linq.Expressions.Expression<System.Func<TermCollection, object>>[]
                {
                    (TermCollection ts) => ts.Include(CSOMAdapter.s_termFilter)
                });
                CSOMAdapter.CallExecuteQuery(terms.Context, this);
            }
            xWriter.WriteStartElement(TaxonomyClassType.SPTermCollection.ToString());
            foreach (Term current in terms)
            {
                this.SerializeTerm(xWriter, current, false, recursive);
            }
            xWriter.WriteEndElement();
        }

        private string UpdateEnterPriseKeywordTermSetId(ClientContext ctx, Field field, string fieldSchemaXml)
        {
            if (!this.HasTaxonomySupport())
            {
                return fieldSchemaXml;
            }
            TaxonomyField taxonomyField = field as TaxonomyField;
            if (taxonomyField != null)
            {
                ctx.Load<TaxonomyField>(taxonomyField, new System.Linq.Expressions.Expression<System.Func<TaxonomyField, object>>[]
                {
                    (TaxonomyField fld) => (object)fld.TermSetId,
                    (TaxonomyField fld) => fld.SchemaXml
                });
                CSOMAdapter.CallExecuteQuery(ctx, this);
                System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(fieldSchemaXml);
                System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode(".//Property[Name='TermSetId']/Value");
                xmlNode2.InnerText = taxonomyField.TermSetId.ToString("D");
                return xmlNode.OuterXml;
            }
            return fieldSchemaXml;
        }

        private ClientContext GetClientContext()
        {
            return this.GetClientContext(this, false);
        }

        private ClientContext GetClientContext(bool isMicrosoftCustomer)
        {
            return this.GetClientContext(this, isMicrosoftCustomer);
        }

        private ClientContext GetClientContext(string sUrl)
        {
            return this.GetClientContext(sUrl, this, false);
        }

        private ClientContext GetClientContext(SharePointAdapter callingAdapter, bool isMicrosoftCustomer = false)
        {
            return this.GetClientContext(callingAdapter.Url, callingAdapter, isMicrosoftCustomer);
        }

        private ClientContext GetClientContext(string sUrl, SharePointAdapter callingAdapter, bool isMicrosoftCustomer = false)
        {
            return this.GetClientContext(sUrl, callingAdapter.Credentials, callingAdapter.CookieManager, callingAdapter.AdapterProxy, callingAdapter.IncludedCertificates, callingAdapter.AuthenticationInitializerType == typeof(Office365StandADFSInitializer), isMicrosoftCustomer);
        }

        private ClientContext GetClientContext(string sUrl, Credentials credentials, CookieManager cookieManager, System.Net.WebProxy proxy, X509CertificateWrapperCollection includedCertificates, bool isOffice365Connection, bool isMicrosoftCustomer)
        {
            bool bCookieManagerIsActive = cookieManager != null && cookieManager.IsActive;
            ClientContext clientContext = new ClientContext(sUrl);
            clientContext.RequestTimeout = AdapterConfigurationVariables.WebServiceTimeoutTime;
            bool cookiesHandledByCSOM = false;
            if (credentials != null)
            {
                O365CSOMAuthenticationManager o365CSOMAuthenticationManager = cookieManager as O365CSOMAuthenticationManager;
                if (bCookieManagerIsActive && o365CSOMAuthenticationManager != null)
                {
                    cookiesHandledByCSOM = true;
                    clientContext.Credentials = o365CSOMAuthenticationManager.O365Credentials;
                }
                else if (bCookieManagerIsActive && typeof(FormsAuthenticationManager).IsAssignableFrom(cookieManager.GetType()))
                {
                    cookiesHandledByCSOM = true;
                    clientContext.AuthenticationMode = ClientAuthenticationMode.FormsAuthentication;
                    FormsAuthenticationLoginInfo formsAuthenticationLoginInfo = new FormsAuthenticationLoginInfo(credentials.UserName, credentials.Password.ToInsecureString());
                    clientContext.FormsAuthenticationLoginInfo = formsAuthenticationLoginInfo;
                }
                else
                {
                    clientContext.Credentials = credentials.NetworkCredentials;
                }
            }
            clientContext.ExecutingWebRequest += delegate (object sender, WebRequestEventArgs e)
            {
                if (bCookieManagerIsActive && !cookiesHandledByCSOM)
                {
                    e.WebRequestExecutor.RequestHeaders.Add(System.Net.HttpRequestHeader.Cookie, cookieManager.GetCookieString());
                }
                if (proxy != null && proxy.Address != null && !string.IsNullOrEmpty(proxy.Address.AbsoluteUri))
                {
                    e.WebRequestExecutor.WebRequest.Proxy = proxy;
                }
                if (includedCertificates != null)
                {
                    includedCertificates.CopyCertificatesToCollection(e.WebRequestExecutor.WebRequest.ClientCertificates);
                }
                e.WebRequestExecutor.WebRequest.UserAgent = (isMicrosoftCustomer ? "Metalogix/20140316 Content Matrix/6.3 (Windows NT 6.1; Win64; x64; rv:6.3.0.1; +http://www.metalogix.com/Products/Content-Matrix.aspx)".Insert("Metalogix/20140316 Content Matrix/6.3 (Windows NT 6.1; Win64; x64; rv:6.3.0.1; +http://www.metalogix.com/Products/Content-Matrix.aspx)".LastIndexOf(")", System.StringComparison.Ordinal), "; FastTrack") : "Metalogix/20140316 Content Matrix/6.3 (Windows NT 6.1; Win64; x64; rv:6.3.0.1; +http://www.metalogix.com/Products/Content-Matrix.aspx)");
            };
            return clientContext;
        }

        private static void CallExecuteQuery(ClientRuntimeContext ctx, SharePointAdapter callingAdapter)
        {
            bool flag = callingAdapter.CookieManager != null && callingAdapter.CookieManager.IsActive && !typeof(FormsAuthenticationManager).IsAssignableFrom(callingAdapter.CookieManager.GetType());
            System.Collections.Generic.Dictionary<string, object> privateFieldData = CSOMAdapter.GetPrivateFieldData(ctx.PendingRequest, false);
            try
            {
                ctx.ExecuteQueryWithIncrementalRetry(AdapterConfigurationVariables.CSOMMaximumExecuteQueryRetries, 30000);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (!flag || ex is ServerException)
                {
                    throw;
                }
                callingAdapter.CookieManager.UpdateCookie();
                CSOMAdapter.SetPrivateFieldData(ctx.PendingRequest, privateFieldData);
                ctx.ExecuteQueryWithIncrementalRetry(AdapterConfigurationVariables.CSOMMaximumExecuteQueryRetries, 30000);
            }
        }

        private static System.Collections.Generic.Dictionary<string, object> GetPrivateFieldData(object o, bool bGetDeepData)
        {
            System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic;
            if (bGetDeepData)
            {
                bindingFlags |= System.Reflection.BindingFlags.FlattenHierarchy;
            }
            System.Reflection.FieldInfo[] fields = o.GetType().GetFields(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);
            System.Collections.Generic.Dictionary<string, object> dictionary = new System.Collections.Generic.Dictionary<string, object>(fields.Length);
            System.Reflection.FieldInfo[] array = fields;
            for (int i = 0; i < array.Length; i++)
            {
                System.Reflection.FieldInfo fieldInfo = array[i];
                dictionary.Add(fieldInfo.Name, fieldInfo.GetValue(o));
            }
            return dictionary;
        }

        private static void SetPrivateFieldData(object o, System.Collections.Generic.Dictionary<string, object> data)
        {
            System.Type type = o.GetType();
            foreach (System.Collections.Generic.KeyValuePair<string, object> current in data)
            {
                System.Reflection.FieldInfo field = type.GetField(current.Key, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.FlattenHierarchy);
                if (field != null)
                {
                    field.SetValue(o, current.Value);
                }
            }
        }

        public static void LogExceptionDetails(System.Exception ex, string methodName, string category = null)
        {
            Utils.LogExceptionDetails(ex, methodName, "Metalogix.SharePoint.Adapters.CSOM2013.CSOMAdapter", category);
        }

        public static void LogMessageDetails(string message, string methodName, string category = null)
        {
            Utils.LogMessageDetails(message, methodName, "Metalogix.SharePoint.Adapters.CSOM2013.CSOMAdapter", category);
        }

        public CSOMAdapter()
        {
            this._serverHealth = new ServerHealthInformation();
            this._serverHealthSync = new ServerHealthMonitorSynchronizer();
            this._serverHealthSync.Start();
        }

        public CSOMAdapter(string sSiteUrl, Credentials credentials) : this()
        {
            this.m_sUrl = sSiteUrl;
            this.m_credentials = credentials;
        }

        public CSOMAdapter(Web web) : this()
        {
            this.m_sUrl = web.Url;
        }

        public override string GetServerVersion()
        {
            return this.GetSharePointVersion().ToString();
        }

        private static string GetServerRelativeUrl(string sUrl)
        {
            if (!sUrl.ToLower().StartsWith("http://") && !sUrl.ToLower().StartsWith("https://"))
            {
                return sUrl;
            }
            int num = sUrl.IndexOf("/", 8);
            if (num < 0)
            {
                return "";
            }
            return sUrl.Substring(num);
        }

        private void LoadIds()
        {
            using (ClientContext clientContext = this.GetClientContext())
            {
                clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web w) => (object)w.Id
                });
                clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                {
                    (Site s) => (object)s.Id
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                this._webId = clientContext.Web.Id.ToString();
                this._siteId = clientContext.Site.Id;
            }
        }

        public override SharePointAdapter Clone()
        {
            CSOMAdapter cSOMAdapter = new CSOMAdapter();
            cSOMAdapter.CloneFrom(this, true);
            return cSOMAdapter;
        }

        public override SharePointAdapter CloneForNewSiteCollection()
        {
            CSOMAdapter cSOMAdapter = new CSOMAdapter();
            cSOMAdapter.CloneFrom(this, false);
            return cSOMAdapter;
        }

        public void CloneFrom(CSOMAdapter newAdapter, bool bIncludeSiteCollectionSpecificProperties)
        {
            this.IsReadOnlyAdapter = newAdapter.IsReadOnlyAdapter;
            base.IsDataLimitExceededForContentUnderMgmt = newAdapter.IsDataLimitExceededForContentUnderMgmt;
            this.m_sUrl = newAdapter.m_sUrl;
            this.m_credentials = newAdapter.m_credentials;
            base.AzureAdGraphCredentials = newAdapter.AzureAdGraphCredentials;
            this.AdapterProxy = newAdapter.AdapterProxy;
            this.ProxyCredentials = newAdapter.ProxyCredentials;
            this.IncludedCertificates = newAdapter.IncludedCertificates;
            base.SetSharePointVersion((newAdapter.SharePointVersion != null) ? newAdapter.SharePointVersion.Clone() : null);
            this._serverHealth = newAdapter._serverHealth;
        }

        public string GetSystemInfo()
        {
            return new SystemInfo().ToXmlString();
        }

        public string GetSharePointVersion()
        {
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    if (clientContext.IsSharePointOnline())
                    {
                        result = System.Convert.ToString(SharePointVersion.SharePointOnlineVersion);
                    }
                    else
                    {
                        result = clientContext.ServerVersion.ToString();
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = string.Empty;
            }
            return result;
        }

        private static void LoadPublishingDLL()
        {
            CSOMAdapter.s_publishingType = typeof(PublishingPage);
        }

        protected override void Dispose(bool bDisposing)
        {
            base.Dispose(bDisposing);
            if (bDisposing)
            {
                this._serverHealthSync.Dispose();
                this._serverHealthSync = null;
                lock (this.m_oLockNWSAdapter)
                {
                    if (this.m_nwsAdpater != null)
                    {
                        this.m_nwsAdpater.Dispose();
                    }
                }
            }
        }

        public override void CheckConnection()
        {
            if (!base.CredentialsAreDefault)
            {
                if (this.Credentials.Password.IsNullOrEmpty())
                {
                    goto IL_112;
                }
            }
            try
            {
                try
                {
                    string text;
                    string text2;
                    WebServiceUtils.TestRemoteSharepoint(this, out text, out text2);
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (ex.Message.Contains("timed out") || ex.Message.Contains("resolved"))
                    {
                        throw new ServerProblem(ex.Message);
                    }
                    throw new NoSharePoint("Could not connect to remote SharePoint server: '" + this.Url + "'. " + ex.Message);
                }
                if (base.SharePointVersion.IsSharePoint2013OrLater)
                {
                    this.GetWeb(false);
                    this.ServerAdapterConfiguration.Load();
                    return;
                }
                if (base.SharePointVersion.VersionNumberString == "0.0.0.0")
                {
                    throw new NoSharePoint("Could not find site on the remote SharePoint server: '" + this.Url + "'. ");
                }
                throw new System.NotSupportedException(Metalogix.SharePoint.Adapters.NWS.Properties.Resources.Older_SharePoint_Detected);
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex2 is System.UnauthorizedAccessException)
                {
                    throw new System.UnauthorizedAccessException("Access Denied");
                }
                throw;
            }
            IL_112:
            if (string.IsNullOrEmpty(this.Credentials.UserName))
            {
                throw new System.UnauthorizedAccessException("A username is required");
            }
            throw new System.UnauthorizedAccessException("A password is required");
        }

        public string GetUserFromProfile()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string loginName;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    User owner = clientContext.Site.Owner;
                    clientContext.Load<User>(owner, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
                    clientContext.ExecuteQuery();
                    loginName = owner.LoginName;
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return loginName;
        }

        public string GetUserProfiles(string siteURL, string loginName, out string errors)
        {
            errors = string.Empty;
            return this.NWSAdapter.GetUserProfiles(siteURL, loginName, out errors);
        }

        public string GetAudiences()
        {
            return null;
        }

        public string BeginCompilingAllAudiences()
        {
            return string.Empty;
        }

        public string DeleteAudience(string sAudienceName)
        {
            return string.Empty;
        }

        public string DeleteAllAudiences(string inputXml)
        {
            return string.Empty;
        }

        public string AddOrUpdateAudience(string sAudienceXml, AddAudienceOptions options)
        {
            return null;
        }

        public string GetMySiteData(string siteURL)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                xmlTextWriter.WriteStartElement("MySiteData");
                using (ClientContext clientContext = this.GetClientContext(siteURL, this, false))
                {
                    TenantSetting tenantSetting = TenantSettingManager.GetTenantSetting(clientContext.Url);
                    xmlTextWriter.WriteAttributeString("MySiteHostUrl", tenantSetting.MySiteHostPath);
                    xmlTextWriter.WriteAttributeString("PersonalSiteFormat", tenantSetting.MySitePersonalFormat);
                    xmlTextWriter.WriteEndElement();
                }
                result = stringWriter.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string SetUserProfile(string siteURL, string userLoginName, string propertyXml, bool createIfNotFound)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            using (ClientContext clientContext = this.GetClientContext())
            {
                try
                {
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    System.Xml.XmlNode xmlNode = null;
                    if (propertyXml != null)
                    {
                        xmlDocument = new System.Xml.XmlDocument();
                        xmlDocument.LoadXml(propertyXml);
                        xmlNode = xmlDocument.DocumentElement;
                    }
                    PeopleManager peopleManager = new PeopleManager(clientContext);
                    string propertyName = "AccountName";
                    ClientResult<string> userProfilePropertyFor = peopleManager.GetUserProfilePropertyFor(userLoginName, propertyName);
                    clientContext.ExecuteQuery();
                    if (peopleManager == null || string.IsNullOrEmpty(userProfilePropertyFor.Value))
                    {
                        stringBuilder.AppendLine(string.Format("SetUserProfile -> profile is null, unable to obtain user profile for user '{0}'", userLoginName));
                        string result = stringBuilder.ToString();
                        return result;
                    }
                    if (xmlNode == null)
                    {
                        stringBuilder.AppendLine("SetUserProfile -> properties (xml) is null.");
                        string result = stringBuilder.ToString();
                        return result;
                    }
                    if (xmlNode != null)
                    {
                        CSOMAdapter.UpdateO365UserProfileProperties(clientContext, xmlNode, peopleManager, userLoginName, stringBuilder);
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    stringBuilder.AppendLine("Failed to set User Profile properties with message: " + ex.ToString());
                    string result = stringBuilder.ToString();
                    return result;
                }
                finally
                {
                    if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                    {
                        this.CookieManager.ReleaseCookieLock();
                    }
                }
            }
            return stringBuilder.ToString();
        }

        private static void UpdateO365UserProfileProperties(ClientContext ctx, System.Xml.XmlNode properties, PeopleManager peopleManager, string userLoginName, System.Text.StringBuilder sbErrors)
        {
            try
            {
                foreach (System.Xml.XmlNode xmlNode in properties.ChildNodes)
                {
                    bool flag = xmlNode.Attributes["IsMultivalued"] != null && xmlNode.Attributes["IsMultivalued"].Value.Equals("True", System.StringComparison.InvariantCultureIgnoreCase);
                    bool flag2 = xmlNode.Attributes["IsUserEditable"] != null && xmlNode.Attributes["IsUserEditable"].Value.Equals("True", System.StringComparison.InvariantCultureIgnoreCase);
                    string propertyValue = string.Empty;
                    try
                    {
                        if (!(xmlNode.Name == "QuickLinks") && xmlNode.Attributes.Count != 0)
                        {
                            if (flag2)
                            {
                                if (flag)
                                {
                                    System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
                                    System.Xml.XmlNodeList xmlNodeList = xmlNode.SelectNodes("Value");
                                    foreach (System.Xml.XmlNode xmlNode2 in xmlNodeList)
                                    {
                                        list.Add(xmlNode2.InnerText);
                                    }
                                    peopleManager.SetMultiValuedProfileProperty(userLoginName, xmlNode.Name, list);
                                }
                                else
                                {
                                    System.Xml.XmlNode xmlNode3 = xmlNode.SelectSingleNode("ChoiceList");
                                    if (xmlNode.Attributes["Type"] != null && xmlNode.Attributes["Type"].Value == "timezone" && properties.SelectSingleNode("SPS-RegionalSettings-FollowWeb") == null)
                                    {
                                        peopleManager.SetSingleValueProfileProperty(userLoginName, "SPS-RegionalSettings-Initialized", "True");
                                        peopleManager.SetSingleValueProfileProperty(userLoginName, "SPS-RegionalSettings-FollowWeb", "False");
                                    }
                                    if (xmlNode3 != null)
                                    {
                                        propertyValue = xmlNode.SelectSingleNode("Value").InnerText;
                                    }
                                    else
                                    {
                                        propertyValue = xmlNode.InnerText;
                                    }
                                    peopleManager.SetSingleValueProfileProperty(userLoginName, xmlNode.Name, propertyValue);
                                }
                            }
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        sbErrors.AppendLine(string.Format("Problem adding value '{0}' to user profile property '{1}' : {2}", xmlNode.Name, xmlNode.Name, ex.ToString()));
                    }
                }
                ctx.ExecuteQuery();
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                sbErrors.AppendLine("Failed to set User Profile properties with message: " + ex2.ToString());
            }
        }

        public string ValidateUserInfo(string sUserIdentifier, bool bCanBeDomainGroup)
        {
            throw new System.NotImplementedException();
        }

        public string GetPortalListingGroups()
        {
            return null;
        }

        public string GetPortalListingIDs()
        {
            return null;
        }

        public string GetPortalListings(string sIDList)
        {
            return null;
        }

        public string FindAlerts()
        {
            throw new System.NotImplementedException();
        }

        public string GetAlerts(string sListID, int sItemID)
        {
            throw new System.NotImplementedException();
        }

        public string AddAlerts(string sSiteUrl, string sWebId, string sAlertXML)
        {
            throw new System.NotImplementedException();
        }

        public string StoragePointAvailable(string inputXml)
        {
            return bool.FalseString;
        }

        public string GetStoragePointProfileConfiguration(string sSharePointPath)
        {
            throw new System.NotSupportedException(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.NotSupportedByAdapter, System.Environment.NewLine, "GetStoragePointProfileConfiguration", this.AdapterShortName));
        }

        public string StoragePointProfileConfigured(string sSharePointPath)
        {
            throw new System.NotSupportedException(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.NotSupportedByAdapter, System.Environment.NewLine, "StoragePointProfileConfigured", this.AdapterShortName));
        }

        public string GetWebApplications()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.CreateElement("WebApplicationCollection");
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Tenant tenant = new Tenant(clientContext);
                    clientContext.Load<Tenant>(tenant, new System.Linq.Expressions.Expression<System.Func<Tenant, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    TenantSetting tenantSetting = TenantSettingManager.GetTenantSetting(clientContext.Url);
                    string mySiteHostPath = tenantSetting.MySiteHostPath;
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
                    using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, new System.Xml.XmlWriterSettings
                    {
                        OmitXmlDeclaration = true
                    }))
                    {
                        xmlWriter.WriteStartElement("WebApplicationCollection");
                        xmlWriter.WriteStartElement("WebApplication");
                        xmlWriter.WriteAttributeString("IsDefault", "True");
                        xmlWriter.WriteAttributeString("Name", tenant.RootSiteUrl);
                        xmlWriter.WriteAttributeString("URL", tenant.RootSiteUrl);
                        xmlWriter.WriteAttributeString("MaximumFileSize", "50");
                        foreach (System.Collections.Generic.KeyValuePair<string, bool> current in tenantSetting.ManagedPathCollection)
                        {
                            xmlWriter.WriteStartElement("Path");
                            xmlWriter.WriteAttributeString("IsWildcard", current.Value.ToString());
                            xmlWriter.WriteString(current.Key);
                            xmlWriter.WriteEndElement();
                        }
                        xmlWriter.WriteEndElement();
                        xmlWriter.WriteStartElement("WebApplication");
                        xmlWriter.WriteAttributeString("IsDefault", "False");
                        xmlWriter.WriteAttributeString("IsMySitePortal", "True");
                        xmlWriter.WriteAttributeString("Name", mySiteHostPath);
                        xmlWriter.WriteAttributeString("URL", mySiteHostPath);
                        xmlWriter.WriteAttributeString("MaximumFileSize", "50");
                        xmlWriter.WriteStartElement("Path");
                        xmlWriter.WriteAttributeString("IsWildcard", "True");
                        xmlWriter.WriteString(tenantSetting.MySiteManagedPath);
                        xmlWriter.WriteEndElement();
                        xmlWriter.WriteEndElement();
                        xmlWriter.WriteEndElement();
                    }
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetLanguagesAndWebTemplates()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                using (System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter))
                {
                    xmlTextWriter.WriteStartElement("LanguageCollection");
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        TenantSetting tenantSetting = TenantSettingManager.GetTenantSetting(clientContext.Url);
                        foreach (System.Collections.Generic.KeyValuePair<int, string> current in tenantSetting.LanguageCollection)
                        {
                            xmlTextWriter.WriteStartElement("Language");
                            xmlTextWriter.WriteAttributeString("Name", current.Value);
                            xmlTextWriter.WriteAttributeString("LCID", System.Convert.ToString(current.Key));
                            this.GetWebTemplateXml(xmlTextWriter, clientContext, System.Convert.ToUInt32(current.Key));
                            xmlTextWriter.WriteEndElement();
                        }
                    }
                    xmlTextWriter.WriteEndElement();
                    xmlTextWriter.Flush();
                    xmlTextWriter.Close();
                }
                result = stringWriter.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetWebTemplateXml(System.Xml.XmlTextWriter xmlWriter, ClientContext ctx, uint lcid)
        {
            xmlWriter.WriteStartElement("ExperienceVersion");
            xmlWriter.WriteAttributeString("Version", "15");
            this.GetWebTemplates(ctx, xmlWriter, lcid);
            xmlWriter.WriteEndElement();
        }

        public string GetSiteQuotaTemplates()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
            xmlTextWriter.WriteStartElement("SiteQuotaTemplates");
            xmlTextWriter.WriteEndElement();
            return stringBuilder.ToString();
        }

        public string SearchForDocument(string sSearchTerm, string sOptionsXml)
        {
            throw new System.NotImplementedException("Search analysis functionality is not available with this type of connection");
        }

        public string FindUniquePermissions()
        {
            throw new System.NotImplementedException();
        }

        public string CorrectDefaultPageVersions(string sListID, string sFolder, string sListItemXML)
        {
            return string.Empty;
        }

        public string AnalyzeChurn(System.DateTime pivotDate, string sListID, int iItemID, bool bRecursive)
        {
            throw new System.NotImplementedException("Database analysis functionality is not available with this type of connection");
        }

        private void CreateSiteCollectionWithIncrementalRetry(ClientContext ctx, Tenant tenant, SiteCreationProperties siteCreationData, int retryCount, int delay = 30000)
        {
            SpoOperation spoOperation = tenant.CreateSite(siteCreationData);
            int i = 0;
            int num = delay;
            while (i < retryCount)
            {
                try
                {
                    ctx.Load<SpoOperation>(spoOperation, new System.Linq.Expressions.Expression<System.Func<SpoOperation, object>>[0]);
                    ctx.ExecuteQuery();
                    spoOperation.WaitUntilOperationCompleted();
                    break;
                }
                catch (ServerException ex)
                {
                    if (ex == null || string.IsNullOrEmpty(ex.Message))
                    {
                        throw;
                    }
                    string message = ex.Message;
                    if (!message.StartsWith("A site already exists at url", System.StringComparison.InvariantCultureIgnoreCase) && !message.Contains("There is a RemoveSite work item"))
                    {
                        throw;
                    }
                    System.Diagnostics.Trace.WriteLine(string.Format("CSOM request frequency exceeded usage limits. Sleeping for {0} seconds before retrying.", num));
                    System.Threading.Thread.Sleep(num);
                    i++;
                    num *= 2;
                }
            }
        }

        private bool IsSiteCollectionExists(ClientContext ctx, Tenant tenant, string siteCollectionURL)
        {
            bool result;
            try
            {
                Site siteByUrl = tenant.GetSiteByUrl(siteCollectionURL);
                ctx.Load<Site>(siteByUrl, new System.Linq.Expressions.Expression<System.Func<Site, object>>[0]);
                ctx.ExecuteQuery();
                result = true;
            }
            catch (ServerException ex)
            {
                System.Diagnostics.Trace.WriteLine(string.Format("The Site Collection with url '{0}' does not exists. Error '{1}'", siteCollectionURL, ex.ToString()));
                result = false;
            }
            return result;
        }

        public string AddSiteCollection(string webApp, string siteCollectionXML, AddSiteCollectionOptions addSiteCollOptions)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result = string.Empty;
            string text = string.Empty;
            string text2 = string.Empty;
            bool flag = false;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(siteCollectionXML);
                System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                using (ClientContext ctx = this.GetClientContext())
                {
                    string value = firstChild.Attributes["ServerRelativeUrl"].Value;
                    string value2 = firstChild.Attributes["Title"].Value;
                    string text3 = (firstChild.Attributes["Description"] != null) ? firstChild.Attributes["Description"].Value : null;
                    text2 = text3;
                    string owner = firstChild.Attributes["Owner"].Value;
                    string value3 = firstChild.Attributes["Language"].Value;
                    System.Convert.ToInt32(firstChild.Attributes["WebTemplateID"].Value);
                    System.Convert.ToInt32(firstChild.Attributes["WebTemplateConfig"].Value);
                    string template = null;
                    if (firstChild.Attributes["WebTemplateName"] != null)
                    {
                        template = firstChild.Attributes["WebTemplateName"].Value;
                    }
                    long storageMaximumLevel = 0L;
                    if (firstChild.Attributes["StorageQuota"] != null)
                    {
                        storageMaximumLevel = System.Convert.ToInt64(firstChild.Attributes["StorageQuota"].Value);
                    }
                    double userCodeMaximumLevel = 0.0;
                    if (firstChild.Attributes["ResourceQuota"] != null)
                    {
                        userCodeMaximumLevel = (double)System.Convert.ToInt64(firstChild.Attributes["ResourceQuota"].Value);
                    }
                    if (firstChild.Attributes["IsMySite"] != null)
                    {
                        flag = System.Convert.ToBoolean(firstChild.Attributes["IsMySite"].Value);
                    }
                    text = webApp + value;
                    Tenant tenant = new Tenant(ctx);
                    if (flag)
                    {
                        string value4 = firstChild.Attributes["Name"].Value;
                        if (!this.HasPersonalSite(ctx, owner))
                        {
                            string[] emailIDs = new string[]
                            {
                                value4
                            };
                            ProfileLoader profileLoader = ProfileLoader.GetProfileLoader(ctx);
                            profileLoader.CreatePersonalSiteEnqueueBulk(emailIDs);
                            ctx.ExecuteQuery();
                            System.Func<bool> methodToRetry = () => this.HasPersonalSite(ctx, owner);
                            CSOMExtensions.ExecuteWithRetry(methodToRetry, addSiteCollOptions.TenantPersonalSiteCreationWaitInterval, addSiteCollOptions.TenantPersonalSiteCreationRetryCount);
                        }
                        CSOMAdapter.AddCurrentUserAsSiteAdmin(text, ctx, tenant);
                    }
                    else
                    {
                        bool flag2 = this.IsSiteCollectionExists(ctx, tenant, text);
                        if (addSiteCollOptions.Overwrite && flag2)
                        {
                            this.DeleteSiteCollection(value, webApp);
                            flag2 = false;
                        }
                        if (!flag2)
                        {
                            SiteCreationProperties siteCreationProperties = new SiteCreationProperties();
                            siteCreationProperties.CompatibilityLevel = 15;
                            siteCreationProperties.Url = text;
                            siteCreationProperties.Template = template;
                            siteCreationProperties.Title = value2;
                            siteCreationProperties.Owner = owner;
                            siteCreationProperties.StorageMaximumLevel = storageMaximumLevel;
                            siteCreationProperties.UserCodeMaximumLevel = userCodeMaximumLevel;
                            siteCreationProperties.Lcid = System.Convert.ToUInt32(value3);
                            this.CreateSiteCollectionWithIncrementalRetry(ctx, tenant, siteCreationProperties, AdapterConfigurationVariables.CSOMMaximumExecuteQueryRetries, 30000);
                        }
                    }
                    if (addSiteCollOptions.CopySiteAdmins)
                    {
                        CSOMAdapter.MigrateSiteCollectionAdmins(text, ctx, firstChild, tenant);
                    }
                }
                using (ClientContext clientContext = this.GetClientContext(text, this, false))
                {
                    if (addSiteCollOptions.CopyFeatures)
                    {
                        this.CopySiteFeatures(clientContext, firstChild, addSiteCollOptions.MergeFeatures);
                    }
                    Web web = clientContext.Web;
                    if (addSiteCollOptions.CopyAssociatedGroupSettings)
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web cWeb) => (object)cWeb.Id,
                            (Web cWeb) => cWeb.AllProperties,
                            (Web cWeb) => cWeb.ServerRelativeUrl,
                            (Web cWeb) => cWeb.RootFolder,
                            (Web cWeb) => cWeb.WebTemplate,
                            (Web cWeb) => cWeb.SiteGroups,
                            (Web cWeb) => cWeb.AssociatedOwnerGroup,
                            (Web cWeb) => cWeb.AssociatedMemberGroup,
                            (Web cWeb) => cWeb.AssociatedVisitorGroup,
                            (Web cWeb) => cWeb.Url
                        });
                    }
                    else
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web cWeb) => (object)cWeb.Id,
                            (Web cWeb) => cWeb.AllProperties,
                            (Web cWeb) => cWeb.ServerRelativeUrl,
                            (Web cWeb) => cWeb.RootFolder,
                            (Web cWeb) => cWeb.WebTemplate,
                            (Web cWeb) => cWeb.Url
                        });
                    }
                    clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                    {
                        (Site s) => s.ServerRelativeUrl
                    });
                    clientContext.Load<Web>(clientContext.Site.RootWeb, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web cWeb) => cWeb.WebTemplate
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (addSiteCollOptions.Overwrite)
                    {
                        this.ClearDefaultSiteData(clientContext, web);
                    }
                    int attributeValueAsInt = firstChild.GetAttributeValueAsInt("Locale");
                    this.UpdateWebProperties(clientContext, web, firstChild, addSiteCollOptions, attributeValueAsInt, null);
                    result = this.GetSiteXml(clientContext, false);
                    if (!string.IsNullOrEmpty(text2))
                    {
                        Web web2 = clientContext.Web;
                        web2.Description = text2;
                        web2.Update();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private static void AddCurrentUserAsSiteAdmin(string siteCollectionURL, ClientContext ctx, Tenant tenant)
        {
            ctx.Load<User>(ctx.Web.CurrentUser, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
            ctx.ExecuteQuery();
            string loginName = ctx.Web.CurrentUser.LoginName;
            int num = 3;
            for (int i = 1; i <= num; i++)
            {
                try
                {
                    tenant.SetSiteAdmin(siteCollectionURL, loginName, true);
                    ctx.Load<Tenant>(tenant, new System.Linq.Expressions.Expression<System.Func<Tenant, object>>[0]);
                    ctx.ExecuteQuery();
                    break;
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (i >= num)
                    {
                        throw new System.Exception(string.Format("An error occurred while adding user '{0}' as site collection admin in personal site '{1}'", loginName, siteCollectionURL), ex);
                    }
                }
            }
        }

        private void CopySiteFeatures(ClientContext ctx, System.Xml.XmlNode siteXml, bool mergeFeatures)
        {
            ctx.Load<Site>(ctx.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
            {
                (Site s) => s.Features
            });
            ctx.Load<Web>(ctx.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
            {
                (Web w) => w.WebTemplate,
                (Web w) => w.Features
            });
            ctx.ExecuteQuery();
            string sFeatureGuids = (siteXml.Attributes["SiteCollFeatures"] != null) ? siteXml.Attributes["SiteCollFeatures"].Value : "";
            this.AddFeatures(ctx.Site.Features, ctx, sFeatureGuids, mergeFeatures, false);
            string sFeatureGuids2 = (siteXml.Attributes["SiteFeatures"] != null) ? siteXml.Attributes["SiteFeatures"].Value : "";
            this.AddFeatures(ctx.Web.Features, ctx, sFeatureGuids2, mergeFeatures, string.Equals(ctx.Web.WebTemplate, "ENTERWIKI", System.StringComparison.OrdinalIgnoreCase));
        }

        private static void MigrateSiteCollectionAdmins(string siteCollectionURL, ClientContext ctx, System.Xml.XmlNode siteXML, Tenant tenant)
        {
            char[] separator = new char[]
            {
                ';'
            };
            string[] array = (siteXML.Attributes["SiteCollectionAdministrators"] != null) ? siteXML.Attributes["SiteCollectionAdministrators"].Value.Split(separator) : null;
            string[] array2 = array;
            for (int i = 0; i < array2.Length; i++)
            {
                string text = array2[i];
                if (!string.IsNullOrEmpty(text))
                {
                    try
                    {
                        tenant.SetSiteAdmin(siteCollectionURL, text, true);
                        ctx.Load<Tenant>(tenant, new System.Linq.Expressions.Expression<System.Func<Tenant, object>>[0]);
                        ctx.ExecuteQuery();
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                }
            }
        }

        public string DeleteSiteCollection(string siteURL, string webApp)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string siteCollectionURL = string.Empty;
            try
            {
                using (ClientContext ctx = this.GetClientContext())
                {
                    siteCollectionURL = webApp + siteURL;
                    Tenant tenant = new Tenant(ctx);
                    SpoOperation spoOperation = tenant.RemoveSite(siteCollectionURL);
                    ctx.Load<SpoOperation>(spoOperation, new System.Linq.Expressions.Expression<System.Func<SpoOperation, object>>[0]);
                    ctx.ExecuteQuery();
                    System.Action completionAction = delegate
                    {
                        SpoOperation clientObject = tenant.RemoveDeletedSite(siteCollectionURL);
                        ctx.Load<SpoOperation>(clientObject, new System.Linq.Expressions.Expression<System.Func<SpoOperation, object>>[0]);
                        ctx.ExecuteQuery();
                    };
                    spoOperation.WaitUntilOperationCompleted(completionAction);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string UpdateSiteCollectionSettings(string siteXml, UpdateSiteCollectionOptions updateSiteCollectionOptions)
        {
            if (!string.IsNullOrEmpty(siteXml))
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
                try
                {
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(siteXml);
                    bool attributeValueAsBoolean = xmlDocument.DocumentElement.GetAttributeValueAsBoolean("EmptyRecycleBin");
                    if (attributeValueAsBoolean)
                    {
                        this.DeleteItemsFromRecycleBin();
                    }
                }
                finally
                {
                    if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                    {
                        this.CookieManager.ReleaseCookieLock();
                    }
                }
            }
            return string.Empty;
        }

        public string SetDocumentParsing(bool bParserEnabled)
        {
            return string.Empty;
        }

        public string ConfigureStoragePointFileShareEndpointAndProfile(string sNetworkPath, string sSharePointPath)
        {
            throw new System.NotSupportedException(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.NotSupportedByAdapter, System.Environment.NewLine, "ConfigureStoragePointFileShareEndpointAndProfile", this.AdapterShortName));
        }

        public string CatalogDocumentToStoragePointFileShareEndpoint(string sNetworkPath, string sListID, string sFolder, string sListItemXml, AddDocumentOptions options)
        {
            throw new System.NotSupportedException(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.NotSupportedByAdapter, System.Environment.NewLine, "CatalogDocumentToStoragePointFileShareEndpoint", this.AdapterShortName));
        }

        public string GetServerHealth()
        {
            if (!this._serverHealthSync.CanRefresh())
            {
                return this._serverHealth.ToXml();
            }
            this._serverHealthSync.Reset();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    try
                    {
                        clientContext.ExecutingWebRequest += new System.EventHandler<WebRequestEventArgs>(this.OnClientContextExecutingWebRequest);
                        clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web web) => web.Title
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        System.Threading.Thread.Sleep(2000);
                        result = this._serverHealth.ToXml();
                    }
                    finally
                    {
                        clientContext.ExecutingWebRequest -= new System.EventHandler<WebRequestEventArgs>(this.OnClientContextExecutingWebRequest);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void WaitUntilWebRequestHasResponse(System.Net.HttpWebRequest request)
        {
            for (int i = 0; i < request.Timeout; i += 1000)
            {
                System.Threading.Thread.Sleep(1000);
                if (request.HaveResponse)
                {
                    return;
                }
            }
        }

        private void OnClientContextExecutingWebRequest(object sender, WebRequestEventArgs e)
        {
            this.GetSharePointHealthScoreFromWebRequestExecutorAsync(e.WebRequestExecutor);
        }

        private void GetSharePointHealthScoreFromWebRequestExecutorAsync(WebRequestExecutor executor)
        {
            System.Action<WebRequestExecutor> action = new System.Action<WebRequestExecutor>(this.GetSharePointHealthScoreFromWebRequestExecutorAsyncDelegate);
            action.BeginInvoke(executor, delegate (System.IAsyncResult ar)
            {
            }, null);
        }

        private void GetSharePointHealthScoreFromWebRequestExecutorAsyncDelegate(WebRequestExecutor executor)
        {
            this.WaitUntilWebRequestHasResponse(executor.WebRequest);
            this._serverHealth.HealthScore = this.GetSharePointHealthScoreFromHeaders(executor.ResponseHeaders);
        }

        private int? GetSharePointHealthScoreFromHeaders(System.Net.WebHeaderCollection headers)
        {
            if (!headers.HasKeys())
            {
                return null;
            }
            string text = headers.Get("X-SharePointHealthScore");
            int value;
            if (string.IsNullOrEmpty(text) || !int.TryParse(text, out value))
            {
                return null;
            }
            return new int?(value);
        }

        private bool HasPersonalSite(ClientContext ctx, string accountName)
        {
            PeopleManager peopleManager = new PeopleManager(ctx);
            ClientResult<string> userProfilePropertyFor = peopleManager.GetUserProfilePropertyFor(accountName, "SPS-PersonalSiteInstantiationState");
            ctx.ExecuteQuery();
            return userProfilePropertyFor != null && !string.IsNullOrWhiteSpace(userProfilePropertyFor.Value) && int.Parse(userProfilePropertyFor.Value) == 2;
        }

        public string ExecuteCommand(string commandName, string commandConfigurationXml)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                if (string.IsNullOrEmpty(commandName))
                {
                    operationReporting.LogError(Metalogix.SharePoint.Adapters.Properties.Resources.CommandNameIsNull, string.Empty, string.Empty, 0, 0);
                }
                else
                {
                    switch (commandName.GetValueAsEnumValue<SharePointAdapterCommands>())
                    {
                        case SharePointAdapterCommands.Unknown:
                            operationReporting.LogError(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.InvalidCommandName, commandName), string.Empty, string.Empty, 0, 0);
                            goto IL_10C;
                        case SharePointAdapterCommands.GetListByName:
                            this.GetListByTitle(commandConfigurationXml, operationReporting);
                            goto IL_10C;
                        case SharePointAdapterCommands.SetColumnDefaultSettings:
                            this.SetColumnDefaultSettings(commandConfigurationXml, operationReporting);
                            goto IL_10C;
                        case SharePointAdapterCommands.SetCurrentUserLanguage:
                            {
                                string[] array = commandConfigurationXml.Split(new char[]
                                {
                                '#'
                                });
                                this.SetTargetLangauge(array[0], operationReporting, (int)System.Convert.ToInt16(array[1]), (int)System.Convert.ToInt16(array[2]));
                                goto IL_10C;
                            }
                        case SharePointAdapterCommands.GetCurrentUserLanguage:
                            this.GetTargetLanguage(operationReporting);
                            goto IL_10C;
                        case SharePointAdapterCommands.CopyLanguageResourcesForViews:
                            this.CopyLanguageResourcesForViews(commandConfigurationXml, operationReporting);
                            goto IL_10C;
                        case SharePointAdapterCommands.GetSupportedWebCultures:
                            this.LoadWebSupportedCultures(operationReporting);
                            goto IL_10C;
                    }
                    operationReporting.LogError(null, string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.CommandNotImplemented, commandName, this.AdapterShortName));
                }
                IL_10C:;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.ErrorInCommandExecution, commandName, this.AdapterShortName));
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        private void GetListByTitle(string commandConfigurationXml, OperationReporting opResult)
        {
            GetListByNameConfiguration getListByNameConfiguration = commandConfigurationXml.Deserialize<GetListByNameConfiguration>();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(stringWriter);
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    List byTitle = web.Lists.GetByTitle(getListByNameConfiguration.ListTitle);
                    web.Context.Load<List>(byTitle, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List l) => (object)l.AllowContentTypes,
                        (List l) => (object)l.BaseTemplate,
                        (List l) => (object)l.BaseType,
                        (List l) => (object)l.ContentTypesEnabled,
                        (List l) => (object)l.Created,
                        (List l) => l.Description,
                        (List l) => l.DocumentTemplateUrl,
                        (List l) => (object)l.DraftVersionVisibility,
                        (List l) => (object)l.EnableAttachments,
                        (List l) => (object)l.EnableFolderCreation,
                        (List l) => (object)l.EnableMinorVersions,
                        (List l) => (object)l.EnableModeration,
                        (List l) => (object)l.EnableVersioning,
                        (List l) => l.Fields,
                        (List l) => (object)l.ForceCheckout,
                        (List l) => (object)l.HasExternalDataSource,
                        (List l) => (object)l.HasUniqueRoleAssignments,
                        (List l) => (object)l.Hidden,
                        (List l) => (object)l.Id,
                        (List l) => (object)l.ItemCount,
                        (List l) => (object)l.LastItemModifiedDate,
                        (List l) => (object)l.MultipleDataList,
                        (List l) => (object)l.NoCrawl,
                        (List l) => (object)l.OnQuickLaunch,
                        (List l) => (object)l.TemplateFeatureId,
                        (List l) => l.Title,
                        (List l) => l.Views,
                        (List l) => (object)l.IsCatalog
                    });
                    web.Context.Load<Folder>(byTitle.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
                    {
                        (Folder folder) => folder.Name,
                        (Folder folder) => folder.ServerRelativeUrl,
                        (Folder folder) => folder.WelcomePage,
                        (Folder folder) => folder.Properties
                    });
                    web.Context.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web0) => web0.ServerRelativeUrl,
                        (Web web1) => (object)web1.Id,
                        (Web web2) => web2.Url
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.GetListXML(clientContext, web, byTitle, xmlWriter, true);
                }
                opResult.LogObjectXml(stringWriter.ToString());
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
        }

        private void AddFile(string folderUrl, string fileData, string fileName)
        {
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                Folder folderByServerRelativeUrl = clientContext.Web.GetFolderByServerRelativeUrl(folderUrl);
                FileCreationInformation parameters = new FileCreationInformation
                {
                    Content = System.Text.Encoding.UTF8.GetBytes(fileData),
                    Url = fileName,
                    Overwrite = true
                };
                Microsoft.SharePoint.Client.File clientObject = folderByServerRelativeUrl.Files.Add(parameters);
                clientContext.Load<Microsoft.SharePoint.Client.File>(clientObject, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
        }

        private byte[] GetFileContents(string listServerRelativeUrl, string fileRelativeUrl)
        {
            try
            {
                return this.Reader.GetDocument(null, listServerRelativeUrl, fileRelativeUrl, 1);
            }
            catch (System.Exception ex)
            {
                if (!ex.Message.Contains("File does not exist") && !ex.Message.Contains("File Not Found"))
                {
                    throw;
                }
            }
            return null;
        }

        private void UpdateListItems(ListItem listItem)
        {
            if (base.SharePointVersion.IsSharePointOnline)
            {
                listItem.SystemUpdate();
                return;
            }
            listItem.Update();
        }

        public bool IsPublishingPage(ListItem item)
        {
            return item != null && item.ParentList.BaseTemplate == CSOMAdapter.PAGES_LIBRARY_TEMPLATE_ID;
        }

        private string GetServerRelativePath(Web web, string parentFolder)
        {
            string text = web.ServerRelativeUrl.Trim(new char[]
            {
                '/'
            });
            return (text.Length > 0 && parentFolder.ToLower().StartsWith(text.ToLower())) ? parentFolder.Trim(new char[]
            {
                '/'
            }).Substring(text.Length + 1) : parentFolder;
        }

        private bool isValidGuid(string guid)
        {
            try
            {
                new System.Guid(guid);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                return false;
            }
            return true;
        }

        public string GetFolders(string listId, string itemIds, string parentFolderPath)
        {
            bool flag = false;
            string result = "";
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string text = "";
            System.Collections.Generic.List<string> list = null;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    string[] array = string.IsNullOrEmpty(itemIds) ? new string[0] : itemIds.Split(new char[]
                    {
                        ','
                    });
                    list = new System.Collections.Generic.List<string>(array);
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(listId));
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web w) => w.ServerRelativeUrl
                    });
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (!parentFolderPath.StartsWith("/"))
                    {
                        parentFolderPath = "/" + parentFolderPath;
                    }
                    text = this.GetServerRelativePath(web, parentFolderPath);
                    CamlQuery camlQuery = new CamlQuery();
                    camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<ViewFields>").Append("<FieldRef Name=\"FileDirRef\"/><FieldRef Name=\"FileLeafRef\"/>").Append("<FieldRef Name=\"ContentTypeId\"/>").Append("<FieldRef Name=\"Author\"/><FieldRef Name=\"Editor\"/>").Append("<FieldRef Name=\"Created\"/><FieldRef Name=\"Modified\"/>").Append("</ViewFields>").Append("<Query>").Append("<Where>").Append("<Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">1</Value></Eq>").Append("</Where>").Append("</Query>").Append("</View>").ToString();
                    if (!string.IsNullOrEmpty(text))
                    {
                        if (!text.StartsWith("/"))
                        {
                            text = "/" + text;
                        }
                        camlQuery.FolderServerRelativeUrl = text;
                    }
                    ListItemCollection items = byId.GetItems(camlQuery);
                    byId.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                    {
                        (ListItemCollection folders) => folders.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                        {
                            (ListItem folder) => (object)folder.Id,
                            (ListItem folder) => folder["FileLeafRef"],
                            (ListItem folder) => folder["FileDirRef"],
                            (ListItem folder) => folder["ContentTypeId"],
                            (ListItem folder) => folder["Editor"],
                            (ListItem folder) => folder["Author"],
                            (ListItem folder) => folder["Created"],
                            (ListItem folder) => folder["Modified"],
                            (ListItem folder) => (object)folder.HasUniqueRoleAssignments
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(byId.Context, this);
                    xmlTextWriter.WriteStartElement("Folders");
                    foreach (ListItem current in items)
                    {
                        if (current != null && (array.Length == 0 || list.Contains(current.Id.ToString())))
                        {
                            this.WriteFolderXml(xmlTextWriter, current);
                        }
                    }
                    xmlTextWriter.WriteEndElement();
                    result = stringBuilder.ToString();
                }
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.ServerErrorCode != -2147024860)
                {
                    throw;
                }
                flag = true;
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            if (flag)
            {
                result = this.GetFoldersViaPaging(listId, list, text);
            }
            return result;
        }

        private string GetFoldersViaPaging(string listId, System.Collections.Generic.List<string> idList, string serverRelativePath)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    List byId = clientContext.Web.Lists.GetById(new System.Guid(listId));
                    System.Collections.Generic.List<ListItemCollection> list = new System.Collections.Generic.List<ListItemCollection>();
                    uint maxItemsPerThrottledOperation = this.GetMaxItemsPerThrottledOperation();
                    CamlQuery camlQuery = new CamlQuery();
                    camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<Query>").Append("<OrderBy Override=\"TRUE\">").Append("<FieldRef Name=\"FileDirRef\" Ascending=\"TRUE\"/>").Append("<FieldRef Name=\"FileLeafRef\" Ascending=\"TRUE\"/>").Append("</OrderBy>").Append("</Query>").Append("<ViewFields>").Append("<FieldRef Name=\"FileDirRef\"/><FieldRef Name=\"FileLeafRef\"/>").Append("<FieldRef Name=\"ContentTypeId\"/><FieldRef Name=\"FSObjType\"/>").Append("<FieldRef Name=\"Author\"/><FieldRef Name=\"Editor\"/>").Append("<FieldRef Name=\"Created\"/><FieldRef Name=\"Modified\"/>").Append("</ViewFields>").AppendFormat("<RowLimit>{0}</RowLimit>", maxItemsPerThrottledOperation).Append("</View>").ToString();
                    camlQuery.FolderServerRelativeUrl = serverRelativePath;
                    do
                    {
                        ListItemCollection items = byId.GetItems(camlQuery);
                        byId.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                        {
                            (ListItemCollection folders) => folders.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem folder) => (object)folder.Id,
                                (ListItem folder) => folder["FileLeafRef"],
                                (ListItem folder) => folder["FileDirRef"],
                                (ListItem folder) => folder["ContentTypeId"],
                                (ListItem folder) => folder["FSObjType"],
                                (ListItem folder) => folder["Editor"],
                                (ListItem folder) => folder["Author"],
                                (ListItem folder) => folder["Created"],
                                (ListItem folder) => folder["Modified"],
                                (ListItem folder) => (object)folder.HasUniqueRoleAssignments
                            }),
                            (ListItemCollection folders) => folders.ListItemCollectionPosition
                        });
                        CSOMAdapter.CallExecuteQuery(byId.Context, this);
                        int arg_61A_0 = items.Count;
                        list.Add(items);
                        camlQuery.ListItemCollectionPosition = items.ListItemCollectionPosition;
                    }
                    while (camlQuery.ListItemCollectionPosition != null);
                    xmlTextWriter.WriteStartElement("Folders");
                    foreach (ListItemCollection current in list)
                    {
                        foreach (ListItem current2 in current)
                        {
                            if (current2 != null && current2["FSObjType"].ToString() == "1" && (idList.Count == 0 || idList.Contains(current2.Id.ToString())))
                            {
                                this.WriteFolderXml(xmlTextWriter, current2);
                            }
                        }
                    }
                    xmlTextWriter.WriteEndElement();
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void WriteFolderXml(System.Xml.XmlTextWriter xmlTextWriter, ListItem folderItem)
        {
            xmlTextWriter.WriteStartElement("Folder");
            xmlTextWriter.WriteAttributeString("ID", folderItem.Id.ToString());
            xmlTextWriter.WriteAttributeString("FileLeafRef", folderItem["FileLeafRef"].ToString());
            xmlTextWriter.WriteAttributeString("FileDirRef", folderItem["FileDirRef"].ToString());
            xmlTextWriter.WriteAttributeString("ContentTypeId", folderItem["ContentTypeId"].ToString());
            if (folderItem["Editor"] != null)
            {
                string value = folderItem["Editor"].ToString();
                xmlTextWriter.WriteAttributeString("Editor", value);
            }
            if (folderItem["Author"] != null)
            {
                string value2 = folderItem["Author"].ToString();
                xmlTextWriter.WriteAttributeString("Author", value2);
            }
            xmlTextWriter.WriteAttributeString("Created", Utils.FormatDate(this.ConvertLocalTimeToUtc((System.DateTime)folderItem["Created"])));
            xmlTextWriter.WriteAttributeString("Modified", Utils.FormatDate(this.ConvertLocalTimeToUtc((System.DateTime)folderItem["Modified"])));
            xmlTextWriter.WriteAttributeString("HasUniquePermissions", folderItem.HasUniqueRoleAssignments.ToString());
            xmlTextWriter.WriteEndElement();
        }

        public string GetFolder(string sListID, string folderName, string sParentFolder, List list, uint throttleLimit = 5000u)
        {
            Web parentWeb = list.ParentWeb;
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
            if (!sParentFolder.StartsWith("/"))
            {
                sParentFolder = "/" + sParentFolder;
            }
            string serverRelativePath = this.GetServerRelativePath(parentWeb, sParentFolder);
            xmlTextWriter.WriteStartElement("Folders");
            ListItem listItem;
            if ((long)list.ItemCount >= (long)((ulong)throttleLimit))
            {
                listItem = this.GetFolderByUrl(list.Context, folderName, serverRelativePath, list, true);
            }
            else
            {
                CamlQuery camlQuery = new CamlQuery();
                camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<Query>").Append("<Where><And>").Append("<Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">1</Value></Eq>").AppendFormat("<Eq><FieldRef Name=\"FileLeafRef\"/><Value Type=\"Text\">{0}</Value></Eq>", folderName).Append("</And></Where>").Append("</Query>").Append("</View>").ToString();
                if (!string.IsNullOrEmpty(serverRelativePath))
                {
                    camlQuery.FolderServerRelativeUrl = serverRelativePath;
                }
                listItem = null;
                ListItemCollection items = list.GetItems(camlQuery);
                list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                {
                    (ListItemCollection folders) => folders.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem folder) => (object)folder.Id,
                        (ListItem folder) => folder["FileLeafRef"],
                        (ListItem folder) => folder["FileDirRef"],
                        (ListItem folder) => folder["ContentTypeId"],
                        (ListItem folder) => folder["Editor"],
                        (ListItem folder) => folder["Author"],
                        (ListItem folder) => folder["Created"],
                        (ListItem folder) => folder["Modified"],
                        (ListItem folder) => (object)folder.HasUniqueRoleAssignments
                    })
                });
                CSOMAdapter.CallExecuteQuery(list.Context, this);
                if (items.Count == 1)
                {
                    listItem = items[0];
                }
            }
            if (listItem != null)
            {
                xmlTextWriter.WriteStartElement("Folder");
                xmlTextWriter.WriteAttributeString("ID", listItem.Id.ToString());
                xmlTextWriter.WriteAttributeString("FileLeafRef", listItem["FileLeafRef"].ToString());
                xmlTextWriter.WriteAttributeString("FileDirRef", listItem["FileDirRef"].ToString());
                xmlTextWriter.WriteAttributeString("ContentTypeId", listItem["ContentTypeId"].ToString());
                string value = listItem["Editor"].ToString();
                xmlTextWriter.WriteAttributeString("Editor", value);
                string value2 = listItem["Author"].ToString();
                xmlTextWriter.WriteAttributeString("Author", value2);
                xmlTextWriter.WriteAttributeString("Created", Utils.FormatDate(this.ConvertLocalTimeToUtc((System.DateTime)listItem["Created"])));
                xmlTextWriter.WriteAttributeString("Modified", Utils.FormatDate(this.ConvertLocalTimeToUtc((System.DateTime)listItem["Modified"])));
                xmlTextWriter.WriteAttributeString("HasUniquePermissions", listItem.HasUniqueRoleAssignments.ToString());
                xmlTextWriter.WriteEndElement();
            }
            xmlTextWriter.WriteEndElement();
            return stringBuilder.ToString();
        }

        private ListItem GetFolderByUrl(ClientRuntimeContext context, string folderName, string fullFolderPath, List list, bool loadAdditionalFields)
        {
            ListItem result = null;
            try
            {
                Folder folderByServerRelativeUrl = list.ParentWeb.GetFolderByServerRelativeUrl(Utils.JoinUrl(fullFolderPath, folderName));
                if (loadAdditionalFields)
                {
                    context.Load<ListItem>(folderByServerRelativeUrl.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem folder) => (object)folder.Id,
                        (ListItem folder) => folder["FileLeafRef"],
                        (ListItem folder) => folder["FileDirRef"],
                        (ListItem folder) => folder["ContentTypeId"],
                        (ListItem folder) => folder["Editor"],
                        (ListItem folder) => folder["Author"],
                        (ListItem folder) => folder["Created"],
                        (ListItem folder) => folder["Modified"],
                        (ListItem folder) => (object)folder.HasUniqueRoleAssignments
                    });
                }
                else
                {
                    context.Load<ListItem>(folderByServerRelativeUrl.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem folder) => (object)folder.Id
                    });
                }
                CSOMAdapter.CallExecuteQuery(context, this);
                if (folderByServerRelativeUrl != null)
                {
                    result = folderByServerRelativeUrl.ListItemAllFields;
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return result;
        }

        public string GetListItemIDs(string sListID, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    string serverRelativePath = this.GetServerRelativePath(web, sParentFolder);
                    Folder folderByServerRelativeUrl = web.GetFolderByServerRelativeUrl(serverRelativePath);
                    clientContext.Load<Folder>(folderByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    string query = Utils.BuildQuery(null, sParentFolder, bRecursive, false, itemTypes, new string[]
                    {
                        "ID"
                    });
                    bool value = true;
                    bool value2 = true;
                    bool flag;
                    ListItemCollection[] listItems = this.GetListItems(byId, query, null, new bool?(value2), new bool?(bRecursive), folderByServerRelativeUrl, "", new bool?(value), null, out flag, false);
                    System.Collections.IEnumerable arg_120_0;
                    if (listItems.Length <= 1 || flag)
                    {
                        System.Collections.IEnumerable enumerable = this.MergeAllItemCollections(listItems, flag, new string[]
                        {
                            "ID"
                        });
                        arg_120_0 = enumerable;
                    }
                    else
                    {
                        arg_120_0 = listItems[0];
                    }
                    System.Collections.IEnumerable enumerable2 = arg_120_0;
                    foreach (ListItem listItem in enumerable2)
                    {
                        string value3 = listItem.Id.ToString();
                        if (stringBuilder.Length > 0)
                        {
                            stringBuilder.Append(",");
                        }
                        stringBuilder.Append(value3);
                    }
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetListItems(string sListID, string sIDs, string sFields, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes, string sListSettings, GetListItemOptions getOptions)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string listItemsInternal;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    listItemsInternal = this.GetListItemsInternal(sListID, sIDs, sFields, sParentFolder, bRecursive, itemTypes, web, sListSettings, getOptions, this, clientContext);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return listItemsInternal;
        }

        public string GetListItemsByQuery(string listID, string fields, string query, string listSettings, GetListItemOptions getOptions)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    List list;
                    System.Xml.XmlNode listXml;
                    this.GetListDataForItemRead(clientContext.Web, listID, listSettings, out list, out listXml);
                    bool bSortOrderViolated;
                    ListItemCollection[] listItemCollections = this.GetListItemCollections(list, query, true, fields, null, out bSortOrderViolated, true);
                    result = this.SerializeListItems(list, listXml, listItemCollections, bSortOrderViolated, fields, getOptions, clientContext);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetListItemVersions(string listID, int itemID, string fieldsXml, string configurationXml)
        {
            int num = 0;
            if (!string.IsNullOrEmpty(configurationXml))
            {
                System.Xml.XmlNode node = XmlUtility.StringToXmlNode(configurationXml);
                num = node.GetAttributeValueAsInt(XmlAttributeNames.NoOfLatestVersionsToGet.ToString());
            }
            if (num < 0)
            {
                throw new System.ArgumentOutOfRangeException("noOfLatestVersionsToGet", "value is less than zero");
            }
            System.Collections.Generic.List<string> fieldList;
            System.Xml.XmlNode xmlItemNode;
            VersionDataTrackingTable versionDataTrackingTable;
            this.GetListItemVersion(listID, itemID, fieldsXml, out fieldList, out xmlItemNode, out versionDataTrackingTable);
            this.GetListItemVersionFileInformation(fieldList, xmlItemNode, versionDataTrackingTable);
            System.Collections.IEnumerable enumerableVersionData;
            if (num > 0)
            {
                System.Collections.Generic.List<System.Data.DataRow> numberOfLatestItemVersions = this.NWSAdapter.GetNumberOfLatestItemVersions(num, versionDataTrackingTable);
                enumerableVersionData = numberOfLatestItemVersions;
            }
            else
            {
                enumerableVersionData = versionDataTrackingTable.Rows;
            }
            return this.ConstructListItemVersionXml(fieldList, xmlItemNode, enumerableVersionData);
        }

        private void GetListItemVersion(string listID, int itemID, string fields, out System.Collections.Generic.List<string> fieldList, out System.Xml.XmlNode xmlItemNode, out VersionDataTrackingTable versionDataTable)
        {
            System.Xml.XmlNode listXMLCSOM = this.NWSAdapter.GetListXMLCSOM(listID);
            System.Xml.XmlNodeList xmlFieldCollection;
            CSOMAdapter.GetFieldCollection(fields, out fieldList, out xmlFieldCollection);
            string listItems = this.GetListItems(listID, itemID, fields, fieldList, this, listXMLCSOM, xmlFieldCollection);
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(listItems);
            xmlItemNode = xmlDocument.SelectSingleNode("//ListItem");
            this.NWSAdapter.GetListItemVersionsCSOM(xmlFieldCollection, itemID, listID, xmlItemNode, out versionDataTable);
        }

        private static void GetFieldCollection(string fields, out System.Collections.Generic.List<string> fieldList, out System.Xml.XmlNodeList xmlFieldCollection)
        {
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(fields);
            xmlFieldCollection = xmlDocument.SelectNodes("/Fields/Field");
            fieldList = new System.Collections.Generic.List<string>();
            foreach (System.Xml.XmlNode xmlNode in xmlFieldCollection)
            {
                string value = xmlNode.Attributes["Name"].Value;
                if (!fieldList.Contains(value))
                {
                    fieldList.Add(value);
                }
            }
        }

        private string GetListItems(string listID, int itemID, string fields, System.Collections.Generic.List<string> fieldList, CSOMAdapter callingAdapter, System.Xml.XmlNode listXml, System.Xml.XmlNodeList xmlFieldCollection)
        {
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("ListItems");
            string itemNodeXML = this.GetItemNodeXML(listID, itemID, fields, fieldList, callingAdapter, listXml);
            System.Xml.XmlNode xmlNode = this.ConvertXmlToNode(itemNodeXML);
            this.NWSAdapter.FillItemXML(xmlTextWriter, xmlNode.Attributes, xmlFieldCollection, listID, new GetListItemOptions(), false);
            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Flush();
            xmlTextWriter.Close();
            return stringWriter.ToString();
        }

        private System.Xml.XmlNode ConvertXmlToNode(string xml)
        {
            if (string.IsNullOrEmpty(xml))
            {
                return null;
            }
            System.Xml.XmlNode result;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(xml);
                result = xmlDocument.DocumentElement.ChildNodes[0];
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception("Converting an XML string to node failed. The input string is:\n '" + xml + "'.", ex);
            }
            return result;
        }

        private string GetItemNodeXML(string listID, int itemID, string fields, System.Collections.Generic.List<string> fieldList, CSOMAdapter callingAdapter, System.Xml.XmlNode listXml)
        {
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("ListItems");
            using (ClientContext clientContext = this.GetClientContext(callingAdapter, false))
            {
                List byId = clientContext.Web.Lists.GetById(new System.Guid(listID));
                clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List list) => (object)list.Id,
                    (List list) => list.Title
                });
                ListItem itemById = byId.GetItemById(itemID);
                clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(listXml.OuterXml);
                System.Xml.XmlNamespaceManager xmlNamespaceManager = new System.Xml.XmlNamespaceManager(xmlDocument.NameTable);
                xmlNamespaceManager.AddNamespace("tns", "http://schemas.microsoft.com/sharepoint/soap/");
                this.GetItemXml(fields, fieldList, listXml, xmlTextWriter, clientContext, byId, itemById, new GetListItemOptions(), xmlNamespaceManager);
                xmlTextWriter.WriteEndElement();
            }
            return stringWriter.ToString();
        }

        private void GetItemXml(string fields, System.Collections.Generic.List<string> fieldList, System.Xml.XmlNode listXml, System.Xml.XmlWriter xmlWriter, ClientContext ctx, List targetList, ListItem item, GetListItemOptions getOptions, System.Xml.XmlNamespaceManager xmlNameSpaceManager = null)
        {
            if (item != null)
            {
                if (fieldList == null)
                {
                    fieldList = new System.Collections.Generic.List<string>();
                    foreach (string current in item.FieldValues.Keys)
                    {
                        string item2 = current.StartsWith("ows_") ? current.Substring(4) : current;
                        fieldList.Add(item2);
                    }
                }
                System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> list = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                foreach (string current2 in fieldList)
                {
                    string value = XmlUtility.EncodeNameStartChars(current2);
                    list.Add(new System.Collections.Generic.KeyValuePair<string, string>(current2, value));
                }
                this.GetItemXML(targetList, xmlWriter, list, item, true, null, listXml, getOptions, ctx, string.IsNullOrEmpty(fields), xmlNameSpaceManager);
            }
        }

        private void GetListItemVersionFileInformation(System.Collections.Generic.List<string> fieldList, System.Xml.XmlNode xmlItemNode, VersionDataTrackingTable versionDataTable)
        {
            if (xmlItemNode.Attributes["EncodedAbsUrl"] != null)
            {
                if (!fieldList.Contains("_CheckinComment"))
                {
                    fieldList.Add("_CheckinComment");
                }
                if (!fieldList.Contains("Editor"))
                {
                    fieldList.Add("Editor");
                }
                if (!fieldList.Contains("_IsCurrentVersion"))
                {
                    fieldList.Add("_IsCurrentVersion");
                }
                if (!fieldList.Contains("_UIVersionString"))
                {
                    fieldList.Add("_UIVersionString");
                }
                if (!fieldList.Contains("_UIVersion"))
                {
                    fieldList.Add("_UIVersion");
                }
                if (!fieldList.Contains("Modified"))
                {
                    fieldList.Add("Modified");
                }
                string sServerRelativeUrl = "/" + xmlItemNode.Attributes["FileRef"].Value;
                string fileProperties = this.GetFileProperties(sServerRelativeUrl);
                if (fileProperties != null)
                {
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(fileProperties);
                    if (xmlNode != null)
                    {
                        System.Xml.XmlNodeList xmlNodeList = xmlNode.SelectNodes("//Version");
                        char[] trimChars = new char[]
                        {
                            '@'
                        };
                        for (int i = xmlNodeList.Count - 1; i >= 0; i--)
                        {
                            System.Xml.XmlNode xmlNode2 = xmlNodeList[i];
                            string value = xmlNode2.Attributes["Comments"].Value;
                            string value2 = xmlNode2.Attributes["CreatedBy"].Value;
                            string value3 = xmlNode2.Attributes["VersionNumber"].Value.StartsWith("@") ? "True" : "False";
                            string value4 = xmlNode2.Attributes["VersionNumber"].Value.TrimStart(trimChars);
                            string text = xmlNode2.Attributes["VersionString"].Value.TrimStart(trimChars);
                            versionDataTable.SetValue(text, "_CheckinComment", value, false);
                            versionDataTable.SetValue(text, "Editor", value2, false);
                            versionDataTable.SetValue(text, "_IsCurrentVersion", value3, false);
                            versionDataTable.SetValue(text, "_UIVersionString", text, false);
                            versionDataTable.SetValue(text, "_UIVersion", value4, false);
                            versionDataTable.SetValue(text, "_VersionNumber", value4, false);
                        }
                    }
                }
            }
        }

        private string GetFileProperties(string sServerRelativeUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                xmlTextWriter.WriteStartElement("File");
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl(sServerRelativeUrl);
                    clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    FileVersionCollection versions = fileByServerRelativeUrl.Versions;
                    clientContext.Load<FileVersionCollection>(versions, new System.Linq.Expressions.Expression<System.Func<FileVersionCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["Author"]
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    FieldUserValue fieldUserValue = (FieldUserValue)fileByServerRelativeUrl.ListItemAllFields["Author"];
                    User byId = web.SiteUsers.GetById(fieldUserValue.LookupId);
                    clientContext.Load<User>(byId, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    string loginName = byId.LoginName;
                    xmlTextWriter.WriteStartElement("Version");
                    xmlTextWriter.WriteAttributeString("VersionNumber", "@" + fileByServerRelativeUrl.UIVersion);
                    xmlTextWriter.WriteAttributeString("VersionString", fileByServerRelativeUrl.UIVersionLabel);
                    xmlTextWriter.WriteAttributeString("Url", fileByServerRelativeUrl.ServerRelativeUrl);
                    xmlTextWriter.WriteAttributeString("Created", fileByServerRelativeUrl.TimeCreated.ToString());
                    xmlTextWriter.WriteAttributeString("CreatedBy", loginName);
                    xmlTextWriter.WriteAttributeString("Comments", fileByServerRelativeUrl.CheckInComment);
                    xmlTextWriter.WriteEndElement();
                    if (versions.Count > 0)
                    {
                        foreach (FileVersion current in versions)
                        {
                            clientContext.Load<FileVersion>(current, new System.Linq.Expressions.Expression<System.Func<FileVersion, object>>[0]);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            string value = "";
                            if (current.IsPropertyAvailable("CreatedBy"))
                            {
                                clientContext.Load<User>(current.CreatedBy, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                                User createdBy = current.CreatedBy;
                                value = createdBy.LoginName;
                            }
                            xmlTextWriter.WriteStartElement("Version");
                            xmlTextWriter.WriteAttributeString("VersionNumber", current.ID.ToString());
                            xmlTextWriter.WriteAttributeString("VersionString", current.VersionLabel);
                            xmlTextWriter.WriteAttributeString("Url", current.Url);
                            xmlTextWriter.WriteAttributeString("Created", current.Created.ToString());
                            xmlTextWriter.WriteAttributeString("CreatedBy", value);
                            xmlTextWriter.WriteAttributeString("Comments", current.CheckInComment);
                            xmlTextWriter.WriteEndElement();
                        }
                    }
                }
                xmlTextWriter.Flush();
                xmlTextWriter.Close();
                result = stringWriter.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private string ConstructListItemVersionXml(System.Collections.Generic.List<string> fieldList, System.Xml.XmlNode xmlItemNode, System.Collections.IEnumerable enumerableVersionData)
        {
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("ListItems");
            foreach (System.Data.DataRow dataRow in enumerableVersionData)
            {
                if (object.Equals(dataRow["_VersionNumber"], dataRow["_UIVersion"]))
                {
                    System.Collections.Generic.Dictionary<string, string> dictionary = new System.Collections.Generic.Dictionary<string, string>();
                    xmlTextWriter.WriteStartElement("ListItem");
                    xmlTextWriter.WriteAttributeString("IsExternalized", false.ToString());
                    xmlTextWriter.WriteAttributeString("_VersionNumber", dataRow["_VersionNumber"] as string);
                    foreach (string current in fieldList)
                    {
                        if (dataRow.Table.Columns.Contains(current))
                        {
                            string sFieldValue = dataRow[current] as string;
                            if (!dictionary.ContainsKey(current))
                            {
                                this.WriteVersionCell(xmlTextWriter, current, sFieldValue);
                                dictionary.Add(current, null);
                            }
                        }
                    }
                    foreach (string current2 in fieldList)
                    {
                        if (!dictionary.ContainsKey(current2) && xmlItemNode.Attributes[current2] != null && !current2.Equals("ContentType", System.StringComparison.InvariantCultureIgnoreCase))
                        {
                            xmlTextWriter.WriteAttributeString(xmlItemNode.Attributes[current2].Name, xmlItemNode.Attributes[current2].Value);
                            dictionary.Add(current2, null);
                        }
                    }
                    xmlTextWriter.WriteEndElement();
                }
            }
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private void WriteVersionCell(System.Xml.XmlWriter xWriter, string sFieldName, string sFieldValue)
        {
            if (sFieldName == "_Level")
            {
                xWriter.WriteAttributeString("_VersionLevel", sFieldValue);
            }
            else if (sFieldName == "_UIVersionString")
            {
                xWriter.WriteAttributeString("_VersionString", sFieldValue);
            }
            xWriter.WriteAttributeString(sFieldName, sFieldValue);
        }

        private string GetListItemsInternal(string sListID, string sIDs, string sFields, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes, Web web, string sListSettings, GetListItemOptions getOptions, CSOMAdapter callingAdapter, ClientContext ctx)
        {
            bool flag = sIDs != null && sIDs.Length > 0;
            if (flag)
            {
                string[] array = sIDs.Split(new char[]
                {
                    ','
                });
                if (array.Length == 1)
                {
                    return this.GetListItemInternal(sListID, array[0], sFields, sParentFolder, bRecursive, itemTypes, web, sListSettings, getOptions, this, ctx);
                }
            }
            List list;
            System.Xml.XmlNode listXml;
            this.GetListDataForItemRead(web, sListID, sListSettings, out list, out listXml);
            bool bSortOrderViolated;
            ListItemCollection[] listItemCollections = this.GetListItemCollections(list, listXml, sIDs, sParentFolder, bRecursive, itemTypes, sFields, out bSortOrderViolated, true);
            return this.SerializeListItems(list, listXml, listItemCollections, bSortOrderViolated, sFields, getOptions, ctx);
        }

        private void GetListDataForItemRead(Web web, string sListID, string sListSettings, out List targetList, out System.Xml.XmlNode listXml)
        {
            targetList = web.Lists.GetById(new System.Guid(sListID));
            listXml = null;
            if (!string.IsNullOrEmpty(sListSettings))
            {
                listXml = XmlUtility.StringToXmlNode(sListSettings);
                return;
            }
            targetList.Context.Load<List>(targetList, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
            {
                (List l) => (object)l.BaseTemplate,
                (List l) => l.Fields
            });
            CSOMAdapter.CallExecuteQuery(targetList.Context, this);
        }

        private string SerializeListItems(List targetList, System.Xml.XmlNode listXml, ListItemCollection[] itemCollections, bool bSortOrderViolated, string sFields, GetListItemOptions getOptions, ClientContext ctx)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
            System.Collections.Generic.List<string> list = null;
            if (!string.IsNullOrEmpty(sFields))
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(sFields);
                System.Xml.XmlNodeList xmlNodeList = xmlDocument.SelectNodes("./Fields/Field");
                list = new System.Collections.Generic.List<string>(xmlNodeList.Count);
                foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
                {
                    list.Add(xmlNode.Attributes["Name"].Value);
                }
            }
            System.Collections.IEnumerable enumerable;
            if (itemCollections.Length == 1 && !bSortOrderViolated)
            {
                enumerable = itemCollections[0];
            }
            else
            {
                enumerable = this.MergeAllItemCollections(itemCollections, bSortOrderViolated, new string[]
                {
                    "ID"
                });
            }
            if (itemCollections.Length > 0)
            {
                if (list == null)
                {
                    list = new System.Collections.Generic.List<string>();
                    ListItemCollection listItemCollection = itemCollections[0];
                    if (listItemCollection.Count > 0)
                    {
                        ListItem listItem = listItemCollection[0];
                        foreach (string current in listItem.FieldValues.Keys)
                        {
                            list.Add(current.StartsWith("ows_") ? current.Substring(4) : current);
                        }
                    }
                }
                System.Collections.Hashtable htExternalization = null;
                System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> list2 = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                foreach (string current2 in list)
                {
                    list2.Add(new System.Collections.Generic.KeyValuePair<string, string>(current2, XmlUtility.EncodeNameStartChars(current2)));
                }
                xmlTextWriter.WriteStartElement("ListItems");
                foreach (ListItem item in enumerable)
                {
                    this.GetItemXML(targetList, xmlTextWriter, list2, item, true, htExternalization, listXml, getOptions, ctx, string.IsNullOrEmpty(sFields), null);
                }
                xmlTextWriter.WriteEndElement();
            }
            return stringBuilder.ToString();
        }

        private string GetListItemInternal(string sListID, string sID, string sFields, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes, Web web, string sListSettings, GetListItemOptions getOptions, CSOMAdapter callingAdapter, ClientContext ctx)
        {
            System.DateTime arg_05_0 = System.DateTime.Now;
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
            List byId = web.Lists.GetById(new System.Guid(sListID));
            System.Xml.XmlNode listXml = null;
            if (!string.IsNullOrEmpty(sListSettings))
            {
                listXml = XmlUtility.StringToXmlNode(sListSettings);
            }
            ListItem itemById = byId.GetItemById(sID);
            this.LoadListItemDataForXMLWriting(itemById);
            CSOMAdapter.CallExecuteQuery(byId.Context, this);
            System.Collections.Generic.List<string> list = null;
            if (!string.IsNullOrEmpty(sFields))
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(sFields);
                System.Xml.XmlNodeList xmlNodeList = xmlDocument.SelectNodes("./Fields/Field");
                list = new System.Collections.Generic.List<string>(xmlNodeList.Count);
                foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
                {
                    list.Add(xmlNode.Attributes["Name"].Value);
                }
            }
            xmlTextWriter.WriteStartElement("ListItems");
            this.GetItemXml(sFields, list, listXml, xmlTextWriter, ctx, byId, itemById, getOptions, null);
            xmlTextWriter.WriteEndElement();
            return stringBuilder.ToString();
        }

        private ListItemCollection[] GetListItemCollections(List list, System.Xml.XmlNode listXml, string sIDs, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes, string sFields, out bool bOrderingViolated, bool includeHasUniqueRoles = false)
        {
            if (this.GetListBaseTemplate(listXml, list) == 108)
            {
                itemTypes |= ListItemQueryType.Folder;
            }
            string query = Utils.BuildQuery(sIDs, sParentFolder, bRecursive, false, itemTypes, new string[]
            {
                "ID"
            });
            return this.GetListItemCollections(list, query, bRecursive, sFields, sParentFolder, out bOrderingViolated, includeHasUniqueRoles);
        }

        private ListItemCollection[] GetListItemCollections(List list, string query, bool bRecursive, string sFields, string sParentFolder, out bool bOrderingViolated, bool includeHasUniqueRoles = false)
        {
            string viewFields = this.MapFieldsStringToCamlQueryViewFields(sFields);
            return this.GetListItems(list, query, viewFields, new bool?(true), new bool?(bRecursive), null, sParentFolder, null, null, out bOrderingViolated, includeHasUniqueRoles);
        }

        private int GetListBaseTemplate(System.Xml.XmlNode listXml, List list)
        {
            if (listXml != null)
            {
                return int.Parse(listXml.Attributes["BaseTemplate"].Value);
            }
            return list.BaseTemplate;
        }

        private ListItemCollection GetListItemCollection(List list, string sIDs, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes, string sFields, SharePointAdapter callingAdapter)
        {
            itemTypes = ((list.BaseTemplate == 108) ? (itemTypes | ListItemQueryType.Folder) : itemTypes);
            CamlQuery query = this.BuildListItemQuery(sIDs, sParentFolder, bRecursive, itemTypes, sFields);
            ListItemCollection items = list.GetItems(query);
            list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(list.Context, callingAdapter);
            return items;
        }

        private CamlQuery BuildListItemQuery(string sIDs, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes, string sFields)
        {
            CamlQuery listQuery = CSOMAdapter.GetListQuery();
            string text = listQuery.ViewXml;
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.ReleaseCookieLock();
            }
            string text2 = "";
            try
            {
                text2 = NWSAdapter.BuildQuery(sIDs, sParentFolder, bRecursive, false, itemTypes, new string[]
                {
                    "FileDirRef",
                    "ID"
                });
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
            }
            if (!string.IsNullOrEmpty(text2))
            {
                text = text.Insert(listQuery.ViewXml.IndexOf("<ExpandUserField>"), "<Query>" + text2 + "</Query>");
            }
            if (!string.IsNullOrEmpty(sFields))
            {
                text = text.Insert(listQuery.ViewXml.IndexOf("<ExpandUserField>"), "<ViewFields>" + this.MapFieldsStringToCamlQueryViewFields(sFields) + "</ViewFields>");
            }
            if (!listQuery.ViewXml.Contains("<RowLimit>"))
            {
                text = text.Insert(listQuery.ViewXml.IndexOf("</View>") + 1, "<RowLimit>" + CSOMAdapter.s_iGetListQueryRowLimit.Value.ToString() + "</RowLimit>");
            }
            listQuery.DatesInUtc = true;
            listQuery.ViewXml = text;
            return listQuery;
        }

        public string IsListContainsInfoPathOrAspxItem(string listId)
        {
            System.Guid id = new System.Guid(listId);
            string result = "False";
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    List byId = clientContext.Web.Lists.GetById(id);
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    clientContext.ExecuteQuery();
                    uint maxItemsPerThrottledOperation = this.GetMaxItemsPerThrottledOperation();
                    CamlQuery camlQuery = new CamlQuery
                    {
                        ViewXml = new System.Text.StringBuilder().Append("<View Scope='RecursiveAll'>").Append("<ViewFields>").Append("<FieldRef Name=\"File_x0020_Type\"/><FieldRef Name=\"HTML_x0020_File_x0020_Type\"/>").Append("</ViewFields>").AppendFormat("<RowLimit>{0}</RowLimit>", maxItemsPerThrottledOperation).Append("</View>").ToString()
                    };
                    while (true)
                    {
                        ListItemCollection items = byId.GetItems(camlQuery);
                        if (items != null)
                        {
                            byId.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
                            byId.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                            {
                                (ListItemCollection items0) => items0.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                                {
                                    (ListItem item) => item["File_x0020_Type"],
                                    (ListItem item) => item["HTML_x0020_File_x0020_Type"]
                                })
                            });
                            CSOMAdapter.CallExecuteQuery(byId.Context, this);
                            bool flag = items.ToList<ListItem>().Any((ListItem item) => System.Convert.ToString(item.FieldValues["File_x0020_Type"]).Equals("aspx") || System.Convert.ToString(item.FieldValues["HTML_x0020_File_x0020_Type"]).StartsWith("InfoPath"));
                            if (flag)
                            {
                                break;
                            }
                            camlQuery.ListItemCollectionPosition = items.ListItemCollectionPosition;
                        }
                        if (camlQuery.ListItemCollectionPosition == null)
                        {
                            goto IL_2A2;
                        }
                    }
                    result = "True";
                    IL_2A2:;
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = "True";
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private ListItemCollection[] GetListItems(List list, string query, string viewFields, bool? datesInUtc, bool? expandReccurence, Folder folder, string parentFolderPath, bool? itemIdQuery, int? meetingInstanceId, out bool orderingViolated, bool includeHasUniqueRoles = false)
        {
            orderingViolated = false;
            CamlQuery camlQuery = CSOMAdapter.BuildCamlQueryObject(query, viewFields, datesInUtc, expandReccurence, folder, parentFolderPath, itemIdQuery, meetingInstanceId, 0u);
            if (!CSOMAdapter.s_iGetListQueryRowLimit.HasValue)
            {
                CSOMAdapter.s_iGetListQueryRowLimit = new uint?(4294967295u);
            }
            bool flag = false;
            ListItemCollection items;
            try
            {
                items = list.GetItems(camlQuery);
                list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
                list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                {
                    (ListItemCollection collection) => collection.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem item) => item.ContentType
                    })
                });
                if (includeHasUniqueRoles)
                {
                    list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                    {
                        (ListItemCollection col) => col.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                        {
                            (ListItem item) => (object)item.HasUniqueRoleAssignments
                        })
                    });
                }
                CSOMAdapter.CallExecuteQuery(list.Context, this);
                int arg_216_0 = items.Count;
                ListItemCollection[] array = new ListItemCollection[]
                {
                    items
                };
                ListItemCollection[] result = array;
                return result;
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.ServerErrorCode != -2147024860)
                {
                    throw;
                }
                flag = true;
            }
            if (flag)
            {
                try
                {
                    if (!Utils.GetQueryIsUsingThresholdApprovedSorting(query))
                    {
                        string[] queryOrderByFields = Utils.GetQueryOrderByFields(query);
                        query = Utils.ReplaceOrderByInQuery(query, new string[]
                        {
                            "FileDirRef",
                            "FileLeafRef"
                        });
                        viewFields = Utils.EnsureFieldRefsIncludesFields(viewFields, queryOrderByFields);
                        orderingViolated = true;
                    }
                    System.Collections.Generic.List<ListItemCollection> list2 = new System.Collections.Generic.List<ListItemCollection>();
                    uint maxItemsPerThrottledOperation = this.GetMaxItemsPerThrottledOperation();
                    camlQuery = CSOMAdapter.BuildCamlQueryObjectForQueryThrottled(expandReccurence, folder, parentFolderPath, itemIdQuery, meetingInstanceId, maxItemsPerThrottledOperation);
                    do
                    {
                        ListItemCollection items2 = list.GetItems(camlQuery);
                        list.Context.Load<ListItemCollection>(items2, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
                        list.Context.Load<ListItemCollection>(items2, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                        {
                            (ListItemCollection items5) => items5.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem item) => (object)item.Id,
                                (ListItem item) => item["FileLeafRef"],
                                (ListItem item) => item["FileDirRef"],
                                (ListItem item) => item.ContentType,
                                (ListItem item) => item["ContentTypeId"],
                                (ListItem item) => item["FSObjType"],
                                (ListItem item) => item["Editor"],
                                (ListItem item) => item["Author"],
                                (ListItem item) => item["Created"],
                                (ListItem item) => item["Modified"]
                            })
                        });
                        if (includeHasUniqueRoles)
                        {
                            list.Context.Load<ListItemCollection>(items2, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                            {
                                (ListItemCollection col) => col.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                                {
                                    (ListItem item) => (object)item.HasUniqueRoleAssignments
                                }),
                                (ListItemCollection col) => col.ListItemCollectionPosition
                            });
                        }
                        CSOMAdapter.CallExecuteQuery(list.Context, this);
                        int arg_8A9_0 = items2.Count;
                        list2.Add(items2);
                        camlQuery.ListItemCollectionPosition = items2.ListItemCollectionPosition;
                    }
                    while (camlQuery.ListItemCollectionPosition != null);
                    ListItemCollection[] result = list2.ToArray();
                    return result;
                }
                catch (ServerException ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (ex2.ServerErrorCode == -2147024860)
                    {
                        string message = "Failed to fetch list items due to item count exceededing ListView threshold. Consider connecting as site collection administrator or increasing the list view threshold in the Web Application of this list.";
                        throw new System.Exception(message, ex2);
                    }
                    throw;
                }
            }
            return null;
        }

        private static CamlQuery BuildCamlQueryObjectForQueryThrottled(bool? expandReccurence, Folder folder, string parentFolderPath, bool? itemIdQuery, int? meetingInstanceId, uint rowLimit)
        {
            CamlQuery camlQuery = new CamlQuery();
            camlQuery.ViewXml = new System.Text.StringBuilder().Append((expandReccurence.HasValue && expandReccurence.Value) ? "<View Scope='RecursiveAll'>" : "<View>").Append("<Query>").Append("<OrderBy Override=\"TRUE\">").Append("<FieldRef Name=\"FileDirRef\" Ascending=\"TRUE\"/>").Append("<FieldRef Name=\"FileLeafRef\" Ascending=\"TRUE\"/>").Append("</OrderBy>").Append("</Query>").AppendFormat("<ItemIdQuery>{0}</ItemIdQuery>", (itemIdQuery.HasValue && itemIdQuery.Value).ToString()).Append("<ViewFields>").Append("<FieldRef Name=\"FileDirRef\"/><FieldRef Name=\"FileLeafRef\"/>").Append("<FieldRef Name=\"ContentTypeId\"/><FieldRef Name=\"FSObjType\"/>").Append("<FieldRef Name=\"Author\"/><FieldRef Name=\"Editor\"/>").Append("<FieldRef Name=\"Created\"/><FieldRef Name=\"Modified\"/>").Append("</ViewFields>").AppendFormat("<MeetingInstanceId>{0}</MeetingInstanceId>", meetingInstanceId.HasValue ? meetingInstanceId.Value : -2).AppendFormat("<RowLimit>{0}</RowLimit>", rowLimit).Append("</View>").ToString();
            if (folder != null)
            {
                camlQuery.FolderServerRelativeUrl = folder.ServerRelativeUrl;
            }
            else if (!string.IsNullOrEmpty(parentFolderPath))
            {
                camlQuery.FolderServerRelativeUrl = (parentFolderPath.StartsWith("/", System.StringComparison.OrdinalIgnoreCase) ? "" : "/") + parentFolderPath;
            }
            return camlQuery;
        }

        private ListItemCollection[] GetFullListItemCollectionsNoMetaData(List list, out bool bSortOrderViolated)
        {
            string query = Utils.BuildQuery(null, null, false, false, ListItemQueryType.ListItem | ListItemQueryType.Folder, null);
            string viewFields = "<FieldRef Name=\"ID\"></FieldRef>" + ((list.BaseType == BaseType.DocumentLibrary) ? "<FieldRef Name=\"FileRef\"></FieldRef>" : "");
            return this.GetListItems(list, query, viewFields, null, null, null, null, null, null, out bSortOrderViolated, false);
        }

        private ListItemCollection[] GetFullListItemCollections(List list, out bool bSortOrderViolated)
        {
            string query = Utils.BuildQuery(null, null, false, false, ListItemQueryType.ListItem | ListItemQueryType.Folder, null);
            return this.GetListItems(list, query, null, null, null, null, null, null, null, out bSortOrderViolated, false);
        }

        private ListItem GetItemByID(List list, int iID, bool bFullFields, bool bDatesInUtc)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            ListItem result;
            try
            {
                CamlQuery camlQuery = new CamlQuery();
                camlQuery.ViewXml = "<View Scope='RecursiveAll'>";
                CamlQuery expr_32 = camlQuery;
                expr_32.ViewXml = expr_32.ViewXml + "<Query><Where><Eq><FieldRef Name=\"ID\"></FieldRef><Value Type=\"Integer\">" + iID.ToString() + "</Value></Eq></Where></Query>";
                if (!bFullFields)
                {
                    CamlQuery expr_57 = camlQuery;
                    expr_57.ViewXml += "<ViewFields><FieldRef Name=\"ID\"></FieldRef></ViewFields>";
                }
                if (!CSOMAdapter.s_iGetListQueryRowLimit.HasValue)
                {
                    CSOMAdapter.s_iGetListQueryRowLimit = new uint?(4294967295u);
                }
                uint? num = new uint?(2000u);
                num = new uint?(CSOMAdapter.s_iGetListQueryRowLimit.Value);
                CamlQuery expr_A1 = camlQuery;
                expr_A1.ViewXml = expr_A1.ViewXml + "<RowLimit>" + num.ToString() + "</RowLimit>";
                CamlQuery expr_C9 = camlQuery;
                expr_C9.ViewXml += "</View>";
                camlQuery.DatesInUtc = bDatesInUtc;
                ListItemCollection items = list.GetItems(camlQuery);
                list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(list.Context, this);
                if (items.Count != 1)
                {
                    result = null;
                }
                else
                {
                    result = items[0];
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = null;
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetItemXML(List targetList, System.Xml.XmlWriter xWriter, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> fieldNamesRequested, ListItem item, bool bDatesInUtc, System.Collections.Hashtable htExternalization, System.Xml.XmlNode listXml, GetListItemOptions getOptions, ClientRuntimeContext ctx, bool appendContentTypeAttr, System.Xml.XmlNamespaceManager xmlNameSpaceManager = null)
        {
            xWriter.WriteStartElement("ListItem");
            bool flag = getOptions != null && getOptions.IncludePermissionsInheritance;
            if (flag)
            {
                xWriter.WriteAttributeString("HasUniquePermissions", item.HasUniqueRoleAssignments.ToString());
            }
            foreach (System.Collections.Generic.KeyValuePair<string, string> current in fieldNamesRequested)
            {
                try
                {
                    string key = current.Key;
                    string value = current.Value;
                    object obj = item[key];
                    if (obj != null)
                    {
                        System.Xml.XmlNode fieldSchemaNode = this.GetFieldSchemaNode(key, key, listXml, targetList, ctx, xmlNameSpaceManager);
                        xWriter.WriteAttributeString(value, this.GetFieldValue(obj, fieldSchemaNode, targetList.ParentWeb, bDatesInUtc, this));
                    }
                    else
                    {
                        xWriter.WriteAttributeString(value, "");
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
            if (!this.IsSurveyList(targetList, listXml) && appendContentTypeAttr)
            {
                if (fieldNamesRequested.SingleOrDefault((System.Collections.Generic.KeyValuePair<string, string> s) => s.Key.Equals("ContentType", System.StringComparison.InvariantCultureIgnoreCase)).Equals(default(System.Collections.Generic.KeyValuePair<string, string>)))
                {
                    if (!item.IsObjectPropertyInstantiated("ContentType"))
                    {
                        string contentTypeNameForItem = this.GetContentTypeNameForItem(ctx, item);
                        xWriter.WriteAttributeString("ContentType", contentTypeNameForItem);
                    }
                    else
                    {
                        xWriter.WriteAttributeString("ContentType", item.ContentType.Name);
                    }
                }
            }
            xWriter.WriteEndElement();
        }

        private bool IsSurveyList(List targetList, System.Xml.XmlNode listXml)
        {
            int num;
            if (listXml != null)
            {
                num = listXml.GetAttributeValueAsInt("BaseTemplate");
            }
            else
            {
                if (!targetList.IsPropertyAvailable("BaseTemplate"))
                {
                    targetList.ParentWeb.Context.Load<List>(targetList, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List tl) => (object)tl.BaseTemplate
                    });
                    CSOMAdapter.CallExecuteQuery(targetList.ParentWeb.Context, this);
                }
                num = targetList.BaseTemplate;
            }
            return num == 102;
        }

        private string GetContentTypeNameForItem(ClientRuntimeContext ctx, ListItem item)
        {
            ctx.Load<ContentType>(item.ContentType, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
            {
                (ContentType f) => f.Name
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            if (item.ContentType.IsPropertyAvailable("Name"))
            {
                return item.ContentType.Name;
            }
            ctx.Load<ContentTypeCollection>(item.ParentList.ContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
            {
                (ContentTypeCollection collection) => collection.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                {
                    (ContentType type) => type.StringId,
                    (ContentType type) => type.Name
                })
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            return item.ParentList.ContentTypes.First((ContentType type) => item["ContentTypeId"].ToString().StartsWith(type.StringId)).Name;
        }

        public string GetAttachments(string sListID, int iItemID)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    ListItem itemById = web.Lists.GetById(new System.Guid(sListID)).GetItemById(iItemID);
                    clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem i) => i.AttachmentFiles
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    AttachmentCollection attachmentFiles = itemById.AttachmentFiles;
                    xmlTextWriter.WriteStartElement("Attachments");
                    foreach (Attachment current in attachmentFiles)
                    {
                        xmlTextWriter.WriteStartElement("Attachment");
                        xmlTextWriter.WriteAttributeString("LeafName", current.FileName);
                        xmlTextWriter.WriteAttributeString("IsExternalized", false.ToString());
                        xmlTextWriter.WriteEndElement();
                    }
                    xmlTextWriter.WriteEndElement();
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetListItemFileInfo(System.Xml.XmlNode listItemXml, out int iItemId, out string creationUser, out string modificationUser, out System.DateTime createdOn, out System.DateTime modifiedOn)
        {
            iItemId = -1;
            if (listItemXml.Attributes["ID"] != null)
            {
                iItemId = System.Convert.ToInt32(listItemXml.Attributes["ID"].Value);
            }
            creationUser = ((listItemXml.Attributes["Author"] == null) ? null : listItemXml.Attributes["Author"].Value);
            modificationUser = ((listItemXml.Attributes["Editor"] == null) ? null : listItemXml.Attributes["Editor"].Value);
            createdOn = ((listItemXml.Attributes["Created"] == null) ? System.DateTime.UtcNow : Utils.ParseDateAsUtc(listItemXml.Attributes["Created"].Value));
            modifiedOn = ((listItemXml.Attributes["Modified"] == null) ? System.DateTime.UtcNow : Utils.ParseDateAsUtc(listItemXml.Attributes["Modified"].Value));
        }

        private void GetVersionInfo(System.Xml.XmlNode listItemXml, out string sLevel, out string sVersionString, out CheckinType checkInType, out string sCheckInComments)
        {
            sLevel = ((listItemXml.Attributes["_VersionLevel"] == null) ? "1" : listItemXml.Attributes["_VersionLevel"].Value);
            checkInType = ((sLevel == "2") ? CheckinType.MinorCheckIn : CheckinType.MajorCheckIn);
            sCheckInComments = ((listItemXml.Attributes["_CheckinComment"] != null) ? listItemXml.Attributes["_CheckinComment"].Value : "");
            sVersionString = ((listItemXml.Attributes["_VersionString"] == null) ? "1.0" : listItemXml.Attributes["_VersionString"].Value);
        }

        public string HasUniquePermissions(string listID, int listItemID)
        {
            throw new System.NotSupportedException(Metalogix.SharePoint.Adapters.Properties.Resources.HasUniquePermissionsNotNecessary);
        }

        public byte[] GetDocument(string sDocID, string sFileDirRef, string sFileLeafRef, int iLevel)
        {
            byte[] result;
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                string text = UrlUtils.ConcatUrls(new string[]
                {
                    sFileDirRef,
                    sFileLeafRef
                });
                if (string.IsNullOrEmpty(text))
                {
                    throw new System.IO.FileNotFoundException("File does not exist at given location.", sFileLeafRef);
                }
                text = UrlUtils.EnsureLeadingSlash(text);
                FileLevel fileLevel = (FileLevel)System.Enum.Parse(typeof(FileLevel), iLevel.ToString());
                Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(text);
                clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File f) => f.ServerRelativeUrl,
                    (Microsoft.SharePoint.Client.File f) => f.Versions,
                    (Microsoft.SharePoint.Client.File f) => (object)f.Exists,
                    (Microsoft.SharePoint.Client.File f) => (object)f.Level
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                if (!fileByServerRelativeUrl.Exists)
                {
                    throw new System.Exception("File does not exist");
                }
                if (fileByServerRelativeUrl.Level == fileLevel)
                {
                    FileInformation fileInformation = Microsoft.SharePoint.Client.File.OpenBinaryDirect(clientContext, fileByServerRelativeUrl.ServerRelativeUrl);
                    System.IO.Stream stream = fileInformation.Stream;
                    byte[] array = this.ConvertStreamToByteArray(stream);
                    result = array;
                }
                else
                {
                    foreach (FileVersion current in fileByServerRelativeUrl.Versions)
                    {
                        if (current.IsCurrentVersion)
                        {
                            result = this.GetDocumentVersion(sDocID, sFileDirRef, sFileLeafRef, current.ID);
                            return result;
                        }
                    }
                    result = null;
                }
            }
            return result;
        }

        public byte[] GetDocumentVersion(string sDocID, string sFileDirRef, string sFileLeafRef, int iVersion)
        {
            return this.NWSAdapter.GetDocumentVersion(sDocID, sFileDirRef, sFileLeafRef, iVersion);
        }

        public byte[] GetDocumentBlobRef(string sDocID, string sFileDirRef, string sFileLeafRef, int iLevel)
        {
            throw new System.NotSupportedException();
        }

        public byte[] GetDocumentVersionBlobRef(string sDocID, string sFileDirRef, string sFileLeafRef, int iVersion)
        {
            throw new System.NotSupportedException();
        }

        public string HasDocument(string sDocumentServerRelativeUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl(sDocumentServerRelativeUrl);
                    try
                    {
                        clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (fileByServerRelativeUrl != null && fileByServerRelativeUrl.Exists)
                        {
                            result = bool.TrueString;
                            return result;
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                }
                result = bool.FalseString;
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetDocumentId(string sDocUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string documentId;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    documentId = this.GetDocumentId(sDocUrl, clientContext);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return documentId;
        }

        private string GetDocumentId(string sDocUrl, ClientContext ctx)
        {
            string result = null;
            if (!sDocUrl.StartsWith("/"))
            {
                sDocUrl = "/" + sDocUrl;
            }
            Web web = ctx.Web;
            Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl(sDocUrl);
            try
            {
                ctx.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
                if (fileByServerRelativeUrl != null && fileByServerRelativeUrl.Exists)
                {
                    result = fileByServerRelativeUrl.ListItemAllFields["UniqueId"].ToString().ToUpper();
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = null;
            }
            return result;
        }

        public string GetFiles(string sFolderPath, ListItemQueryType itemTypes)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    Folder folder;
                    try
                    {
                        folder = web.GetFolderByServerRelativeUrl(sFolderPath ?? this.ServerRelativeUrl);
                        clientContext.Load<Folder>(folder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        folder = null;
                    }
                    if (folder == null)
                    {
                        result = null;
                    }
                    else
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                        xmlTextWriter.WriteStartElement("FolderContent");
                        if ((itemTypes & ListItemQueryType.ListItem) == ListItemQueryType.ListItem)
                        {
                            xmlTextWriter.WriteStartElement("Files");
                            System.Collections.Generic.IEnumerable<Microsoft.SharePoint.Client.File> enumerable;
                            try
                            {
                                enumerable = clientContext.LoadQuery<Microsoft.SharePoint.Client.File>(folder.Files.Include(new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                                {
                                    (Microsoft.SharePoint.Client.File f) => f.Author,
                                    (Microsoft.SharePoint.Client.File f) => (object)f.CustomizedPageStatus,
                                    (Microsoft.SharePoint.Client.File f) => f.ModifiedBy,
                                    (Microsoft.SharePoint.Client.File f) => f.Name,
                                    (Microsoft.SharePoint.Client.File f) => (object)f.TimeCreated,
                                    (Microsoft.SharePoint.Client.File f) => (object)f.TimeLastModified,
                                    (Microsoft.SharePoint.Client.File f) => f.ServerRelativeUrl
                                }));
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            catch (System.Exception arg)
                            {
                                System.Diagnostics.Trace.WriteLine(string.Format("Exception occurred while loading file properties. Error: '{0}'", arg));
                                enumerable = this.RetryLoadFileProperties(folder, clientContext);
                            }
                            if (enumerable != null)
                            {
                                foreach (Microsoft.SharePoint.Client.File current in enumerable)
                                {
                                    this.AddFileToXml(xmlTextWriter, current);
                                }
                            }
                            xmlTextWriter.WriteEndElement();
                        }
                        if ((itemTypes & ListItemQueryType.Folder) == ListItemQueryType.Folder)
                        {
                            xmlTextWriter.WriteStartElement("Folders");
                            System.Collections.Generic.IEnumerable<Folder> enumerable2 = clientContext.LoadQuery<Folder>(folder.Folders.Include(new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
                            {
                                (Folder f) => f.Name,
                                (Folder f) => f.ServerRelativeUrl,
                                (Folder f) => f.Properties
                            }));
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            foreach (Folder current2 in enumerable2)
                            {
                                CSOMAdapter.AddFolderToXml(xmlTextWriter, current2);
                            }
                            xmlTextWriter.WriteEndElement();
                        }
                        xmlTextWriter.WriteEndElement();
                        result = stringBuilder.ToString();
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private System.Collections.Generic.IEnumerable<Microsoft.SharePoint.Client.File> RetryLoadFileProperties(Folder folderRequested, ClientContext context)
        {
            System.Collections.Generic.IEnumerable<Microsoft.SharePoint.Client.File> result = null;
            try
            {
                result = context.LoadQuery<Microsoft.SharePoint.Client.File>(folderRequested.Files.Include(new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File f) => (object)f.CustomizedPageStatus,
                    (Microsoft.SharePoint.Client.File f) => f.Name,
                    (Microsoft.SharePoint.Client.File f) => (object)f.TimeCreated,
                    (Microsoft.SharePoint.Client.File f) => (object)f.TimeLastModified,
                    (Microsoft.SharePoint.Client.File f) => f.ServerRelativeUrl
                }));
                CSOMAdapter.CallExecuteQuery(context, this);
            }
            catch (System.Exception arg)
            {
                System.Diagnostics.Trace.WriteLine(string.Format("Exception occurred while retry loading file properties. Error: '{0}'", arg));
            }
            return result;
        }

        private static void AddFolderToXml(System.Xml.XmlTextWriter xWriter, Folder folder)
        {
            xWriter.WriteStartElement("Folder");
            xWriter.WriteAttributeString("Name", folder.Name);
            xWriter.WriteAttributeString("Url", folder.ServerRelativeUrl);
            if (folder.Properties.IsPropertyAvailable("vti_listname"))
            {
                xWriter.WriteAttributeString("ParentListId", folder.Properties["vti_listname"].ToString());
            }
            xWriter.WriteEndElement();
        }

        private void AddFileToXml(System.Xml.XmlTextWriter xWriter, Microsoft.SharePoint.Client.File file)
        {
            xWriter.WriteStartElement("File");
            xWriter.WriteAttributeString("Author", (file.Author != null && file.Author.IsObjectPropertyInstantiated("LoginName")) ? file.Author.LoginName : "");
            xWriter.WriteAttributeString("CustomizedPageStatus", file.CustomizedPageStatus.ToString());
            xWriter.WriteAttributeString("ModifiedBy", (file.ModifiedBy != null && file.ModifiedBy.IsObjectPropertyInstantiated("LoginName")) ? file.ModifiedBy.LoginName : "");
            xWriter.WriteAttributeString("Name", file.Name);
            xWriter.WriteAttributeString("TimeCreated", Utils.FormatDate(file.TimeCreated));
            xWriter.WriteAttributeString("TimeLastModified", Utils.FormatDate(file.TimeLastModified));
            string value = "";
            bool flag = false;
            if (file.ListItemAllFields == null || file.ListItemAllFields.ServerObjectIsNull != false)
            {
                flag = true;
            }
            else
            {
                value = file.ListItemAllFields["UniqueId"].ToString();
            }
            if (flag)
            {
                value = System.Guid.Empty.ToString();
            }
            xWriter.WriteAttributeString("UniqueId", value);
            xWriter.WriteAttributeString("Url", StandardizedUrl.StandardizeUrl(this, file.ServerRelativeUrl).WebRelative);
            xWriter.WriteEndElement();
        }

        private static CamlQuery BuildCamlQueryObject(string query, string viewFields, bool? datesInUtc, bool? expandReccurence, Folder folder, string parentFolderPath, bool? itemIdQuery, int? meetingInstanceId, uint rowLimit)
        {
            if (!CSOMAdapter.s_iGetListQueryRowLimit.HasValue)
            {
                CSOMAdapter.s_iGetListQueryRowLimit = new uint?(4294967295u);
            }
            CamlQuery camlQuery = new CamlQuery();
            if (datesInUtc.HasValue)
            {
                camlQuery.DatesInUtc = datesInUtc.Value;
            }
            if (folder != null)
            {
                camlQuery.FolderServerRelativeUrl = folder.ServerRelativeUrl;
            }
            else if (!string.IsNullOrEmpty(parentFolderPath))
            {
                camlQuery.FolderServerRelativeUrl = (parentFolderPath.StartsWith("/") ? "" : "/") + parentFolderPath;
            }
            camlQuery.ViewXml = new System.Text.StringBuilder().Append((expandReccurence.HasValue && expandReccurence.Value) ? "<View Scope='RecursiveAll'>" : "<View>").Append("<ExpandUserField>False</ExpandUserField>").Append("<IncludeMandatoryColumns>False</IncludeMandatoryColumns>").AppendFormat("<Query>{0}</Query>", query ?? "").AppendFormat("<ItemIdQuery>{0}</ItemIdQuery>", (itemIdQuery.HasValue && itemIdQuery.Value).ToString()).Append(string.IsNullOrEmpty(viewFields) ? "" : string.Format("<ViewFields>{0}</ViewFields>", viewFields)).AppendFormat("<MeetingInstanceId>{0}</MeetingInstanceId>", meetingInstanceId.HasValue ? meetingInstanceId.Value : -2).AppendFormat("<RowLimit>{0}</RowLimit>", (rowLimit == 0u) ? CSOMAdapter.s_iGetListQueryRowLimit.Value : rowLimit).Append("</View>").ToString();
            return camlQuery;
        }

        private uint GetMaxItemsPerThrottledOperation()
        {
            uint result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                    {
                        (Site s) => (object)s.MaxItemsPerThrottledOperation
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    result = clientContext.Site.MaxItemsPerThrottledOperation;
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = 2000u;
            }
            return result;
        }

        private string GetDeletedUserLoginName(Web web, int userId)
        {
            string result = string.Empty;
            try
            {
                CamlQuery query = new CamlQuery
                {
                    ViewXml = string.Format("<View><Query><Where><And><Eq><FieldRef Name='ID' /><Value Type='Counter'>{0}</Value></Eq><Eq><FieldRef Name='Deleted' /><Value Type='Boolean'>1</Value></Eq></And></Where></Query><ViewFields>  <FieldRef Name='Name' /></ViewFields></View>", userId)
                };
                ListItemCollection items = web.SiteUserInfoList.GetItems(query);
                web.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
                web.Context.ExecuteQuery();
                if (items != null && items[0] != null && items.Count > 0)
                {
                    result = System.Convert.ToString(items[0]["Name"]);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return result;
        }

        private string GetUserLoginName(Web web, int userId, string userName)
        {
            string text = this.AdapterData.GetUserFromID(userId);
            if (!string.IsNullOrEmpty(text))
            {
                return text;
            }
            text = this.GetDeletedUserLoginName(web, userId);
            if (!string.IsNullOrEmpty(text))
            {
                this.AdapterData.AddUserMapping(text, userId);
                return text;
            }
            return userName;
        }

        private string GetFieldValue(object objectValue, System.Xml.XmlNode fieldNode, Web web, bool bDatesInUtc, CSOMAdapter callingAdapter)
        {
            string text = null;
            string value = fieldNode.Attributes["Type"].Value;
            string value2 = fieldNode.Attributes["Name"].Value;
            string key;
            switch (key = value)
            {
                case "DateTime":
                case "PublishingScheduleStartDateFieldType":
                case "PublishingScheduleEndDateFieldType":
                    {
                        System.DateTime dateTime = (System.DateTime)objectValue;
                        if (bDatesInUtc)
                        {
                            dateTime = Utils.MakeTrueUTCDateTime(dateTime);
                        }
                        else
                        {
                            dateTime = this.ConvertLocalTimeToUtc(dateTime);
                        }
                        text = Utils.FormatDate(dateTime);
                        return text;
                    }
                case "User":
                case "UserMulti":
                    {
                        if (objectValue.GetType().IsAssignableFrom(typeof(FieldUserValue[])))
                        {
                            text = "";
                            FieldUserValue[] array = (FieldUserValue[])objectValue;
                            for (int i = 0; i < array.Length; i++)
                            {
                                FieldUserValue fieldUserValue = array[i];
                                string userLoginName = this.GetUserLoginName(web, fieldUserValue.LookupId, fieldUserValue.LookupValue);
                                if (string.IsNullOrEmpty(text))
                                {
                                    text = userLoginName;
                                }
                                else
                                {
                                    text = text + "," + userLoginName;
                                }
                            }
                            return text;
                        }
                        FieldUserValue fieldUserValue2 = (FieldUserValue)objectValue;
                        if (fieldUserValue2.LookupValue == "***")
                        {
                            text = "";
                            return text;
                        }
                        text = this.GetUserLoginName(web, fieldUserValue2.LookupId, fieldUserValue2.LookupValue);
                        return text;
                    }
                case "Lookup":
                case "LookupMulti":
                    {
                        System.Collections.Generic.IEnumerable<FieldLookupValue> enumerable = objectValue as System.Collections.Generic.IEnumerable<FieldLookupValue>;
                        if (enumerable != null)
                        {
                            string text2 = null;
                            foreach (FieldLookupValue current in enumerable)
                            {
                                string text3 = current.LookupId.ToString();
                                if (string.IsNullOrEmpty(text2))
                                {
                                    text2 = text3;
                                }
                                else
                                {
                                    text2 = text2 + ";#" + text3;
                                }
                            }
                            text = text2;
                            return text;
                        }
                        string text4 = (fieldNode.Attributes["List"] != null) ? fieldNode.Attributes["List"].Value : "";
                        bool flag = fieldNode.Attributes["FromBaseType"] != null && fieldNode.Attributes["FromBaseType"].Value.Equals("true", System.StringComparison.OrdinalIgnoreCase);
                        if (objectValue.GetType().IsAssignableFrom(typeof(FieldLookupValue)))
                        {
                            FieldLookupValue fieldLookupValue = (FieldLookupValue)objectValue;
                            if (flag && (string.IsNullOrEmpty(text4) || !Utils.IsGUID(text4)))
                            {
                                text = fieldLookupValue.LookupValue;
                                return text;
                            }
                            if (Utils.IsGuid(text4))
                            {
                                text = fieldLookupValue.LookupId.ToString();
                                return text;
                            }
                            text = fieldLookupValue.LookupValue;
                            return text;
                        }
                        else
                        {
                            text = objectValue.ToString();
                            string[] array2 = text.Split(new string[]
                            {
                            ";#"
                            }, System.StringSplitOptions.None);
                            if (array2.Length > 1)
                            {
                                if (flag && (string.IsNullOrEmpty(text4) || !Utils.IsGUID(text4)))
                                {
                                    text = array2[1];
                                }
                                else if (this.isValidGuid(text4))
                                {
                                    text = array2[0];
                                }
                                else
                                {
                                    text = array2[1];
                                }
                            }
                            if ((value2 == "FileRef" || value2 == "FileDirRef") && text != null && text.StartsWith("/"))
                            {
                                text = text.TrimStart(new char[]
                                {
                                '/'
                                });
                                return text;
                            }
                            return text;
                        }
                        break;
                    }
                case "Number":
                    if (objectValue.GetType() == typeof(int))
                    {
                        text = CSOMAdapter.s_IntConverter.ConvertToString(null, CSOMAdapter.s_CultureInfo, objectValue);
                        return text;
                    }
                    if (objectValue.GetType() == typeof(double))
                    {
                        text = CSOMAdapter.s_DoubleConverter.ConvertToString(null, CSOMAdapter.s_CultureInfo, objectValue);
                        return text;
                    }
                    return text;
                case "Calculated":
                    {
                        string value3 = fieldNode.Attributes["ResultType"].Value;
                        text = objectValue.ToString();
                        int num2 = text.IndexOf(";#");
                        if (num2 >= 0)
                        {
                            text = text.Substring(num2 + 2);
                        }
                        if (value3 == "DateTime")
                        {
                            System.DateTime dateTime2;
                            if (System.DateTime.TryParse(text, out dateTime2))
                            {
                                if (bDatesInUtc)
                                {
                                    dateTime2 = Utils.MakeTrueUTCDateTime(dateTime2);
                                }
                                else
                                {
                                    dateTime2 = this.ConvertLocalTimeToUtc(dateTime2);
                                }
                                text = Utils.FormatDate(dateTime2);
                                return text;
                            }
                            text = "";
                            return text;
                        }
                        else
                        {
                            if (!(value3 == "Number"))
                            {
                                return text;
                            }
                            int num3;
                            if (int.TryParse(text, out num3))
                            {
                                text = CSOMAdapter.s_IntConverter.ConvertToString(null, CSOMAdapter.s_CultureInfo, num3);
                                return text;
                            }
                            double num4;
                            if (double.TryParse(text, out num4))
                            {
                                text = CSOMAdapter.s_DoubleConverter.ConvertToString(null, CSOMAdapter.s_CultureInfo, num4);
                                return text;
                            }
                            return text;
                        }
                        break;
                    }
                case "Text":
                case "Note":
                case "URL":
                    if (typeof(FieldUrlValue).IsAssignableFrom(objectValue.GetType()))
                    {
                        FieldUrlValue fieldUrlValue = (FieldUrlValue)objectValue;
                        text = fieldUrlValue.Url + ", " + fieldUrlValue.Description;
                        return text;
                    }
                    text = XmlExtensions.ReplaceInvalidEscapeCharInXmlAttributeValue(objectValue.ToString());
                    return text;
                case "Computed":
                case "GridChoice":
                    text = objectValue.ToString();
                    return text;
                case "MultiChoice":
                    {
                        string[] array3 = objectValue as string[];
                        int num5 = array3.Count<string>();
                        text = "";
                        if (num5 == 1)
                        {
                            text = array3[0];
                            return text;
                        }
                        if (num5 > 1)
                        {
                            text = array3[0];
                            for (int j = 1; j <= num5 - 1; j++)
                            {
                                text = text + ", " + array3[j];
                            }
                            return text;
                        }
                        return text;
                    }
                case "TaxonomyFieldType":
                    {
                        TaxonomyFieldValue taxonomyFieldValue = objectValue as TaxonomyFieldValue;
                        text = ((taxonomyFieldValue != null) ? taxonomyFieldValue.Serialize() : objectValue.ToString());
                        return text;
                    }
                case "TaxonomyFieldTypeMulti":
                    {
                        TaxonomyFieldValueCollection taxonomyFieldValueCollection = objectValue as TaxonomyFieldValueCollection;
                        text = ((taxonomyFieldValueCollection != null) ? taxonomyFieldValueCollection.Serialize() : objectValue.ToString());
                        return text;
                    }
            }
            if (objectValue != null)
            {
                if (typeof(System.DateTime).IsAssignableFrom(objectValue.GetType()))
                {
                    System.DateTime dateTime3 = (System.DateTime)objectValue;
                    if (bDatesInUtc)
                    {
                        dateTime3 = Utils.MakeTrueUTCDateTime(dateTime3);
                    }
                    else
                    {
                        dateTime3 = this.ConvertLocalTimeToUtc(dateTime3);
                    }
                    text = Utils.FormatDate(dateTime3);
                }
                else
                {
                    text = objectValue.ToString();
                    if (!string.Equals("HTML", value, System.StringComparison.InvariantCultureIgnoreCase))
                    {
                        int num6 = text.IndexOf(";#");
                        if (num6 > 0)
                        {
                            text = text.Substring(num6 + 2);
                        }
                    }
                    else
                    {
                        text = XmlExtensions.ReplaceInvalidEscapeCharInXmlAttributeValue(text);
                    }
                }
            }
            return text;
        }

        private System.DateTime ConvertLocalTimeToUtc(System.DateTime dtValue)
        {
            return this.TimeZone.LocalTimeToUtc(dtValue);
        }

        private System.DateTime ConvertUtcToLocalTime(System.DateTime dtValue)
        {
            return this.TimeZone.UtcToLocalTime(dtValue);
        }

        private byte[] ConvertStreamToByteArray(System.IO.Stream stream)
        {
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            stream.CopyTo(memoryStream);
            return memoryStream.ToArray();
        }

        private System.Collections.Generic.List<ListItem> MergeAllItemCollections(ListItemCollection[] itemCollections, bool bSortItems, string[] fieldSortOrder)
        {
            if (itemCollections == null)
            {
                return null;
            }
            int num = 0;
            for (int i = 0; i < itemCollections.Length; i++)
            {
                ListItemCollection listItemCollection = itemCollections[i];
                num += listItemCollection.Count;
            }
            System.Collections.Generic.List<ListItem> list = new System.Collections.Generic.List<ListItem>(num);
            for (int j = 0; j < itemCollections.Length; j++)
            {
                ListItemCollection listItemCollection2 = itemCollections[j];
                foreach (ListItem current in listItemCollection2)
                {
                    list.Add(current);
                }
            }
            if (bSortItems && fieldSortOrder != null && fieldSortOrder.Length > 0)
            {
                list.Sort(delegate (ListItem source, ListItem target)
                {
                    for (int k = 0; k < fieldSortOrder.Length; k++)
                    {
                        object obj = source[fieldSortOrder[k]];
                        object obj2 = target[fieldSortOrder[k]];
                        System.IComparable comparable = obj as System.IComparable;
                        System.IComparable comparable2 = obj2 as System.IComparable;
                        int num2 = 0;
                        if (comparable != null)
                        {
                            num2 = comparable.CompareTo(obj2);
                        }
                        else if (comparable2 != null)
                        {
                            num2 = -1 * comparable2.CompareTo(obj);
                        }
                        if (num2 != 0)
                        {
                            return num2;
                        }
                    }
                    return 0;
                });
            }
            return list;
        }

        private void LoadListItemDataForXMLWriting(ListItem item)
        {
            item.Context.Load<ListItem>(item, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
            {
                (ListItem i) => i,
                (ListItem i) => (object)i.HasUniqueRoleAssignments
            });
        }

        public string AddListItem(string sListId, string sParentFolderPath, string slistItemXML, string[] attachementNames, byte[][] attachmentContents, string listSettingsXml, AddListItemOptions itemOptions)
        {
            bool isExceptionOccurred = false;
            System.Xml.XmlNode xmlNode = null;
            if (!string.IsNullOrEmpty(listSettingsXml))
            {
                xmlNode = XmlUtility.StringToXmlNode(listSettingsXml);
            }
            if (this.GetTargetIsMultipleDataList(xmlNode))
            {
                return this.NWSAdapter.AddListItem(sListId, sParentFolderPath, slistItemXML, attachementNames, attachmentContents, listSettingsXml, itemOptions);
            }
            System.Xml.XmlNode xmlNode2 = XmlUtility.StringToXmlNode(slistItemXML);
            System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> list = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
            list.Add(new System.Collections.Generic.KeyValuePair<string, string>("ID", "ID"));
            list.Add(new System.Collections.Generic.KeyValuePair<string, string>("Modified", "Modified"));
            list.Add(new System.Collections.Generic.KeyValuePair<string, string>("FileRef", "FileRef"));
            list.Add(new System.Collections.Generic.KeyValuePair<string, string>("FSObjType", "FSObjType"));
            list.Add(new System.Collections.Generic.KeyValuePair<string, string>("UniqueId", "UniqueId"));
            ListItem listItem = null;
            List list2 = null;
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    ListItem listItem2 = null;
                    bool initialVersion = itemOptions.InitialVersion;
                    ListCollection lists = clientContext.Web.Lists;
                    list2 = lists.GetById(new System.Guid(sListId));
                    clientContext.Load<List>(list2, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List lista) => (object)lista.BaseTemplate,
                        (List listb) => (object)listb.BaseType,
                        (List listc) => listc.RootFolder.ServerRelativeUrl,
                        (List listd) => listd.Title,
                        (List liste) => liste.ContentTypes.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                        {
                            (ContentType c) => c.Id,
                            (ContentType c) => c.Name
                        }),
                        (List listf) => (object)listf.EnableModeration,
                        (List listg) => (object)listg.EnableVersioning,
                        (List listh) => (object)listh.EnableMinorVersions,
                        (List listi) => (object)listi.DraftVersionVisibility,
                        (List listj) => (object)listj.Id
                    });
                    if (xmlNode == null)
                    {
                        list2.Context.Load<FieldCollection>(list2.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                        {
                            (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                            {
                                (Field field) => field.SchemaXml
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    int num;
                    if (xmlNode != null)
                    {
                        num = System.Convert.ToInt32(xmlNode.Attributes["BaseType"].Value);
                    }
                    else
                    {
                        num = System.Convert.ToInt32(list2.BaseType);
                    }
                    int num2 = 0;
                    if (itemOptions.ParentID.HasValue)
                    {
                        num2 = itemOptions.ParentID.Value;
                    }
                    bool flag = xmlNode2.Attributes["ContentType"] != null && xmlNode2.Attributes["ContentType"].Value == "Message";
                    bool flag2 = xmlNode2.Attributes["FSObjType"] != null && xmlNode2.Attributes["FSObjType"].Value == "1";
                    string text = (xmlNode2.Attributes["Title"] != null) ? xmlNode2.Attributes["Title"].Value : "";
                    if (flag2 && xmlNode2.Attributes["FileLeafRef"] != null)
                    {
                        text = xmlNode2.Attributes["FileLeafRef"].Value;
                    }
                    int num3;
                    if (num == System.Convert.ToInt32(BaseType.Issue) && xmlNode2.Attributes["IssueID"] != null && !string.IsNullOrEmpty(xmlNode2.Attributes["IssueID"].Value))
                    {
                        num3 = System.Convert.ToInt32(xmlNode2.Attributes["IssueID"].Value);
                    }
                    else if (xmlNode2.Attributes["ID"] != null)
                    {
                        num3 = System.Convert.ToInt32(xmlNode2.Attributes["ID"].Value);
                    }
                    else
                    {
                        num3 = -1;
                    }
                    ListItem listItem3 = null;
                    if (this.GetListBaseTemplate(xmlNode, list2) == 108 && num2 != 0)
                    {
                        listItem3 = list2.GetItemById(num2);
                        clientContext.Load<ListItem>(listItem3, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                    }
                    int num4 = flag2 ? 1 : 0;
                    CamlQuery camlQuery = new CamlQuery();
                    if (flag2)
                    {
                        camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<Query>").Append("<Where><And>").Append("<Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">" + num4 + "</Value></Eq>").AppendFormat("<Eq><FieldRef Name=\"FileLeafRef\"/><Value Type=\"Text\">{0}</Value></Eq>", text).Append("</And></Where>").Append("</Query>").Append("</View>").ToString();
                    }
                    else
                    {
                        camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<Query>").Append("<Where><And>").Append("<Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">" + num4 + "</Value></Eq>").AppendFormat("<Eq><FieldRef Name=\"ID\"/><Value Type=\"Text\">{0}</Value></Eq>", num3).Append("</And></Where>").Append("</Query>").Append("</View>").ToString();
                    }
                    if (!string.IsNullOrEmpty(sParentFolderPath))
                    {
                        camlQuery.FolderServerRelativeUrl = UrlUtils.ConcatUrls(new string[]
                        {
                            this.GetListRootFolderServerRelativeUrl(xmlNode, list2),
                            sParentFolderPath
                        });
                    }
                    ListItemCollection items = list2.GetItems(camlQuery);
                    clientContext.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (items.Count == 1)
                    {
                        listItem2 = items[0];
                        if (flag2)
                        {
                            num3 = listItem2.Id;
                        }
                    }
                    if (itemOptions.PreserveID && num3 > 0 && itemOptions.PredictedNextAvailableID > 0 && itemOptions.PredictedNextAvailableID < num3)
                    {
                        this.IncrementItemIDsWithCSOM(clientContext, list2, num3 - itemOptions.PredictedNextAvailableID);
                    }
                    if (num3 >= 0 && (flag2 || !initialVersion))
                    {
                        listItem = listItem2;
                    }
                    bool flag3 = listItem == null || (listItem != null && itemOptions.Overwrite);
                    if (flag3 && listItem != null)
                    {
                        listItem.DeleteObject();
                        listItem = null;
                    }
                    if (flag3)
                    {
                        if (list2.BaseTemplate == 108)
                        {
                            if (num2 == 0)
                            {
                                listItem = Utility.CreateNewDiscussion(clientContext, list2, text);
                                if (xmlNode2.Attributes["BestAnswerId"] != null)
                                {
                                    listItem["BestAnswerId"] = xmlNode2.Attributes["BestAnswerId"].Value;
                                }
                            }
                            else
                            {
                                listItem = Utility.CreateNewDiscussionReply(clientContext, listItem3);
                            }
                            listItem.Update();
                        }
                        if (listItem == null)
                        {
                            ListItemCreationInformation listItemCreationInformation = new ListItemCreationInformation();
                            if (flag2)
                            {
                                listItemCreationInformation.UnderlyingObjectType = FileSystemObjectType.Folder;
                                listItemCreationInformation.LeafName = text;
                            }
                            if (!string.IsNullOrEmpty(sParentFolderPath))
                            {
                                listItemCreationInformation.FolderUrl = camlQuery.FolderServerRelativeUrl;
                            }
                            listItem = list2.AddItem(listItemCreationInformation);
                            if (list2.BaseTemplate == 880)
                            {
                                this.UpdateMemberProperty(xmlNode2, listItem, clientContext);
                            }
                            string text2 = (xmlNode2.Attributes["HTML_x0020_File_x0020_Type"] != null) ? xmlNode2.Attributes["HTML_x0020_File_x0020_Type"].Value : string.Empty;
                            if (flag2 && text2.Equals("SharePoint.DocumentSet", System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                ContentType documentSetContentType = this.GetDocumentSetContentType(clientContext, list2, xmlNode2);
                                listItem["ContentTypeId"] = documentSetContentType.Id.ToString();
                            }
                            listItem.Update();
                        }
                    }
                    this.LoadDataForAddListItemReadBack(listItem, list);
                    System.Collections.ArrayList arrayList = new System.Collections.ArrayList();
                    if (!flag2 && list2.EnableVersioning && !flag)
                    {
                        this.LoadDataForListItemVersionIncrementing(listItem);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (flag3)
                        {
                            string obj = (xmlNode2.Attributes["_VersionString"] == null) ? "1.0" : xmlNode2.Attributes["_VersionString"].Value;
                            if (!listItem["_UIVersionString"].Equals(obj))
                            {
                                flag3 = false;
                                arrayList.Add(listItem["_UIVersionString"]);
                            }
                        }
                        this.IncrementListItemVersions(list2, xmlNode2, listItem, flag3, this, ref arrayList, clientContext);
                    }
                    this.UpdateListItemData(list2.ParentWeb, list2, xmlNode, listItem, xmlNode2, attachementNames, attachmentContents, itemOptions, false, clientContext);
                    clientContext.Load<ListItem>(listItem, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                    if (arrayList.Count > 0 && !flag2 && list2.EnableVersioning && !flag)
                    {
                        Microsoft.SharePoint.Client.File fileByServerRelativeUrl = list2.ParentWeb.GetFileByServerRelativeUrl(listItem["FileRef"].ToString());
                        this.DeleteTempListItemVersions(fileByServerRelativeUrl, arrayList, clientContext);
                    }
                    if (clientContext.HasPendingRequest)
                    {
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                isExceptionOccurred = true;
                if (ex.ServerErrorCode == -2147024809)
                {
                    string arg = string.Format("The discussion entry with ID value '{0}' is already in use. As a result this discussion entry and all its replies will not be migrated to the target.", itemOptions.ParentID);
                    string text3 = "The List View Threshold value on the source is greater than the value on the target and as a result the migration of this list's items has failed.The List View Threshold value cannot be changed in SharePoint Online environments, and exceeding this value is not recommended by Microsoft.Please consider reducing the total number of lookup, People and group, and Managed Metadata columns before attempting to remigrate this content.";
                    string text4 = string.Format("{0}The error might be due to the below reasons: {0}1. {1}{0}2. {2}", System.Environment.NewLine, arg, text3);
                    throw new System.Exception((this.GetListBaseTemplate(xmlNode, list2) == 108) ? text4 : text3, ex);
                }
                throw;
            }
            finally
            {
                this.ResetListVersionSettings(isExceptionOccurred, list2);
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
            xmlTextWriter.WriteStartElement("ListItems");
            using (ClientContext clientContext2 = this.GetClientContext())
            {
                this.GetItemXML(list2, xmlTextWriter, list, listItem, false, null, xmlNode, new GetListItemOptions(), clientContext2, false, null);
            }
            xmlTextWriter.WriteEndElement();
            return stringBuilder.ToString();
        }

        private bool UpdateMemberProperty(System.Xml.XmlNode itemXML, ListItem newListItem, ClientContext clientContext)
        {
            try
            {
                string attributeValueAsString = itemXML.GetAttributeValueAsString("Member");
                if (!string.IsNullOrEmpty(attributeValueAsString))
                {
                    int iDFromUser = this.GetIDFromUser(attributeValueAsString);
                    if (iDFromUser != -1)
                    {
                        newListItem["Member"] = iDFromUser;
                        newListItem.Update();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        return true;
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return false;
        }

        private void ResetListVersionSettings(bool isExceptionOccurred, List targetList)
        {
            try
            {
                if (isExceptionOccurred && targetList != null)
                {
                    bool flag = false;
                    if (!targetList.IsPropertyAvailable("EnableVersioning") && !targetList.IsPropertyAvailable("EnableMinorVersions"))
                    {
                        targetList.Context.Load<List>(targetList, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List t) => (object)t.EnableVersioning,
                            (List t) => (object)t.EnableMinorVersions
                        });
                        flag = true;
                    }
                    else if (!targetList.IsPropertyAvailable("EnableVersioning"))
                    {
                        targetList.Context.Load<List>(targetList, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List t) => (object)t.EnableVersioning
                        });
                        flag = true;
                    }
                    else if (!targetList.IsPropertyAvailable("EnableMinorVersions"))
                    {
                        targetList.Context.Load<List>(targetList, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List t) => (object)t.EnableMinorVersions
                        });
                        flag = true;
                    }
                    if (flag)
                    {
                        CSOMAdapter.CallExecuteQuery(targetList.Context, this);
                    }
                    bool enableVersioning = targetList.EnableVersioning;
                    bool enableMinorVersions = targetList.EnableMinorVersions;
                    if (enableVersioning || enableMinorVersions)
                    {
                        targetList.EnableVersioning = enableVersioning;
                        targetList.EnableMinorVersions = enableMinorVersions;
                        targetList.Update();
                        CSOMAdapter.CallExecuteQuery(targetList.Context, this);
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
        }

        private void IncrementItemIDsWithCSOM(ClientContext ctx, List targetList, int incrementCount)
        {
            try
            {
                bool flag = false;
                for (int i = 0; i < incrementCount; i++)
                {
                    if (i % 500 == 0 && i != 0)
                    {
                        ctx.ExecuteQuery();
                    }
                    targetList.ReserveListItemId();
                    flag = true;
                }
                if (flag)
                {
                    ctx.ExecuteQuery();
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception("Failed to increment item IDs: " + ex.InnerException);
            }
        }

        private bool GetTargetIsMultipleDataList(System.Xml.XmlNode listNode)
        {
            if (listNode == null)
            {
                return false;
            }
            System.Xml.XmlAttribute xmlAttribute = listNode.Attributes["MultipleDataList"];
            bool flag;
            return xmlAttribute != null && bool.TryParse(xmlAttribute.Value, out flag) && flag;
        }

        private string GetListRootFolderServerRelativeUrl(System.Xml.XmlNode listNode, List list)
        {
            if (listNode != null)
            {
                return UrlUtils.EnsureLeadingSlash(UrlUtils.ConcatUrls(new string[]
                {
                    listNode.Attributes["DirName"].Value,
                    listNode.Attributes["Name"].Value
                }));
            }
            return list.RootFolder.ServerRelativeUrl;
        }

        private void IncrementListItemVersions(List list, System.Xml.XmlNode itemXML, ListItem targetItem, bool bAdding, SharePointAdapter callingAdapter, ref System.Collections.ArrayList tempVersions, ClientContext clientContext)
        {
            if (!list.EnableVersioning || itemXML.Attributes["_UIVersionString"] == null)
            {
                return;
            }
            int num = (int)System.Convert.ToDouble(itemXML.Attributes["_UIVersionString"].Value, CSOMAdapter.s_CultureInfo);
            int num2 = (targetItem["_UIVersionString"] == null) ? 0 : ((int)System.Convert.ToDouble(targetItem["_UIVersionString"], CSOMAdapter.s_CultureInfo));
            int num3 = num - num2 - 1;
            if (num3 > 0)
            {
                for (int i = 0; i < num3; i++)
                {
                    targetItem["Modified"] = targetItem["Modified"];
                    targetItem.Update();
                    tempVersions.Add(string.Format("{0}.0", num2 + i + 1));
                    if (list.EnableModeration)
                    {
                        targetItem["_ModerationStatus"] = 0;
                        targetItem.Update();
                    }
                    if (i % 500 == 0)
                    {
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
        }

        private void DeleteTempListItemVersions(Microsoft.SharePoint.Client.File targetFile, System.Collections.ArrayList tempVersions, ClientContext clientContext)
        {
            clientContext.Load<FileVersionCollection>(targetFile.Versions, new System.Linq.Expressions.Expression<System.Func<FileVersionCollection, object>>[]
            {
                (FileVersionCollection i) => i.Include(new System.Linq.Expressions.Expression<System.Func<FileVersion, object>>[]
                {
                    (FileVersion p) => p.VersionLabel
                })
            });
            clientContext.ExecuteQuery();
            string targetItemStartVersionIndex = targetFile.Versions[0].VersionLabel;
            string[] array = new string[tempVersions.Count];
            tempVersions.CopyTo(array);
            System.Collections.Generic.IEnumerable<string> enumerable = from versionLabel in array
                                                                        where System.Convert.ToDouble(versionLabel) >= System.Convert.ToDouble(targetItemStartVersionIndex)
                                                                        select versionLabel;
            if (enumerable.Any<string>())
            {
                int num = 0;
                foreach (string current in enumerable)
                {
                    targetFile.Versions.DeleteByLabel(current);
                    num++;
                    if (num % 500 == 0)
                    {
                        try
                        {
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name + "_Inner", null);
                        }
                    }
                }
                try
                {
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
                catch (System.Exception ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        private void UpdateListItemData(Web currentWeb, List list, System.Xml.XmlNode listXML, ListItem targetItem, System.Xml.XmlNode itemXML, string[] attachmentNames, byte[][] attachmentContents, IUpdateListItemOptions options, bool bConvertToFolder, ClientContext clientContext)
        {
            string attributeValueAsString = itemXML.GetAttributeValueAsString("_ModerationComments");
            int num;
            string text;
            string text2;
            System.DateTime dateTime;
            System.DateTime dateTime2;
            this.GetListItemFileInfo(itemXML, out num, out text, out text2, out dateTime, out dateTime2);
            bool enableVersioning = list.EnableVersioning;
            bool enableModeration = list.EnableModeration;
            bool enableMinorVersions = list.EnableMinorVersions;
            DraftVisibilityType draftVersionVisibility = list.DraftVersionVisibility;
            if (itemXML.Attributes != null)
            {
                string text3 = (itemXML.Attributes["_UIVersionString"] == null) ? "1.0" : itemXML.Attributes["_UIVersionString"].Value;
                if (text3.Equals("1.0") && enableVersioning)
                {
                    list.EnableVersioning = false;
                    list.Update();
                }
            }
            if (itemXML.GetAttributeValueAsString("HTML_x0020_File_x0020_Type").Equals("SharePoint.DocumentSet", System.StringComparison.InvariantCultureIgnoreCase) && options.PreserveSharePointDocumentIDs)
            {
                this.UpdateItemMetadata(list, listXML, targetItem, itemXML, bConvertToFolder, clientContext, options.PreserveSharePointDocumentIDs);
            }
            else
            {
                this.UpdateItemMetadata(list, listXML, targetItem, itemXML, bConvertToFolder);
            }
            targetItem.Update();
            if (enableVersioning && !list.EnableVersioning)
            {
                list.EnableVersioning = true;
                list.EnableMinorVersions = enableMinorVersions;
                list.Update();
            }
            targetItem.Context.Load<ListItem>(targetItem, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
            {
                (ListItem item) => item["_UIVersionString"],
                (ListItem item) => item["_UIVersion"]
            });
            if (!enableModeration)
            {
                if (enableVersioning)
                {
                    list.EnableVersioning = false;
                    list.Update();
                }
            }
            else if (itemXML.Attributes["FSObjType"] != null && itemXML.Attributes["FSObjType"].Value.Equals("1") && enableModeration && list.BaseType == BaseType.DocumentLibrary && itemXML.Attributes["_ModerationStatus"].Value.Equals("0"))
            {
                list.EnableModeration = false;
                list.Update();
            }
            else if (enableModeration && list.BaseType != BaseType.DocumentLibrary)
            {
                targetItem["_ModerationStatus"] = itemXML.Attributes["_ModerationStatus"].Value;
                targetItem["_ModerationComments"] = attributeValueAsString;
            }
            if (list.BaseType == BaseType.DocumentLibrary && enableModeration && itemXML.GetAttributeValueAsString("FSObjType").Equals("1"))
            {
                targetItem["_ModerationComments"] = attributeValueAsString;
            }
            if (!string.IsNullOrEmpty(text))
            {
                this.SetUserFieldFromLogin(targetItem, "Author", text);
            }
            if (!string.IsNullOrEmpty(text2))
            {
                this.SetUserFieldFromLogin(targetItem, "Editor", text2);
            }
            targetItem["Created"] = dateTime;
            targetItem["Modified"] = dateTime2;
            if (list.BaseTemplate == 108 && itemXML.Attributes["MemberLookup"] != null)
            {
                targetItem["MemberLookup"] = itemXML.GetAttributeValueAsString("MemberLookup");
            }
            targetItem.Update();
            if (list.BaseType == BaseType.DocumentLibrary && list.EnableModeration && itemXML.GetAttributeValueAsString("FSObjType").Equals("1") && itemXML.GetAttributeValueAsString("_ModerationStatus").Equals("1"))
            {
                targetItem["_ModerationStatus"] = itemXML.Attributes["_ModerationStatus"].Value;
                targetItem["_ModerationComments"] = attributeValueAsString;
                targetItem.Update();
            }
            bool flag = attachmentNames != null && attachmentNames.Length > 0;
            if (flag)
            {
                if (enableVersioning)
                {
                    list.EnableVersioning = false;
                    list.Update();
                }
                CSOMAdapter.CallExecuteQuery(currentWeb.Context, this);
                this.AddListItemAttachments(attachmentNames, attachmentContents, list, targetItem);
                targetItem = list.GetItemById(targetItem.Id);
                targetItem.Context.Load<ListItem>(targetItem, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                {
                    (ListItem item) => item["_UIVersionString"],
                    (ListItem item) => item["_UIVersion"]
                });
                if (list.BaseTemplate == 108)
                {
                    CSOMAdapter.CallExecuteQuery(targetItem.Context, this);
                }
                if (!string.IsNullOrEmpty(text2))
                {
                    this.SetUserFieldFromLogin(targetItem, "Editor", text2);
                }
                targetItem["Modified"] = dateTime2;
                if (enableModeration && list.BaseType != BaseType.DocumentLibrary)
                {
                    targetItem["_ModerationStatus"] = itemXML.Attributes["_ModerationStatus"].Value;
                    targetItem["_ModerationComments"] = attributeValueAsString;
                }
                targetItem.Update();
            }
            if (enableModeration && !list.EnableModeration)
            {
                list.EnableModeration = true;
                list.DraftVersionVisibility = draftVersionVisibility;
                list.Update();
            }
            if (enableVersioning && !list.EnableVersioning)
            {
                list.EnableVersioning = true;
                list.EnableMinorVersions = enableMinorVersions;
                list.Update();
            }
        }

        private void AddListItemAttachments(string[] attachmentNames, byte[][] attachmentContents, List list, ListItem targetItem)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.ReleaseCookieLock();
            }
            try
            {
                this.NWSAdapter.AddListItemAttachments(attachmentNames, attachmentContents, list.Id.ToString(), targetItem.Id.ToString());
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
            }
        }

        public string UpdateListItem(string sListID, string sParentFolder, int iItemID, string sListItemXML, string[] attachmentNames, byte[][] attachmentContents, UpdateListItemOptions updateOptions)
        {
            bool isExceptionOccurred = false;
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            List list = null;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    ListCollection lists = clientContext.Web.Lists;
                    clientContext.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
                    {
                        (ListCollection listsx) => from listf in listsx.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                            {
                                (List list0) => (object)list0.BaseTemplate,
                                (List list1) => (object)list1.BaseType,
                                (List list2) => list2.RootFolder.ServerRelativeUrl,
                                (List list3) => list3.Title,
                                (List list4) => (object)list4.EnableModeration,
                                (List list5) => list5.ContentTypes,
                                (List list6) => (object)list6.EnableVersioning,
                                (List list7) => (object)list7.EnableMinorVersions,
                                (List list8) => (object)list8.DraftVersionVisibility,
                                (List list9) => (object)list9.Id
                            })
                            where listf.Id == new System.Guid(sListID)
                            select listf
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (lists.Count != 1)
                    {
                        throw new System.Exception("List could not be retrieved");
                    }
                    list = lists[0];
                    clientContext.Load<FieldCollection>(list.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                    {
                        (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                        {
                            (Field field) => field.TypeAsString,
                            (Field field) => field.InternalName,
                            (Field field) => field.SchemaXml,
                            (Field field) => (object)field.ReadOnlyField,
                            (Field field) => (object)field.Required,
                            (Field field) => (object)field.FieldTypeKind,
                            (Field field) => field.DefaultValue
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sListItemXML);
                    ListItem itemById = list.GetItemById(iItemID);
                    clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (xmlNode.Name.Equals(XmlElementNames.UpdateListItemRoleInheritance.ToString()))
                    {
                        bool attributeValueAsBoolean = xmlNode.GetAttributeValueAsBoolean(XmlAttributeNames.UniquePermissions.ToString());
                        return this.UpdateListItemRoleInheritance(itemById, attributeValueAsBoolean, clientContext);
                    }
                    this.UpdateListItemData(list.ParentWeb, list, null, itemById, xmlNode, attachmentNames, attachmentContents, updateOptions, false, clientContext);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    bool flag = attachmentNames != null && attachmentNames.Length > 0;
                    if (flag)
                    {
                        this.AddListItemAttachments(attachmentNames, attachmentContents, list, itemById);
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                isExceptionOccurred = true;
            }
            finally
            {
                this.ResetListVersionSettings(isExceptionOccurred, list);
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return this.GetListItems(sListID, iItemID.ToString(), null, null, true, ListItemQueryType.ListItem | ListItemQueryType.Folder, null, new GetListItemOptions());
        }

        private string UpdateListItemRoleInheritance(ListItem listItem, bool breakInheritance, ClientContext clientContext)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                if (breakInheritance)
                {
                    listItem.BreakRoleInheritance(true, false);
                }
                else
                {
                    listItem.ResetRoleInheritance();
                }
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "Failed to update list item role inheritance");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        private void UpdateItemMetadata(List spList, System.Xml.XmlNode listXML, ListItem spListItem, System.Xml.XmlNode itemXML, bool bConvertToFolder)
        {
            this.UpdateItemMetadata(spList, listXML, spListItem, itemXML, bConvertToFolder, null, false);
        }

        private void UpdateItemMetadata(List spList, System.Xml.XmlNode listXML, ListItem spListItem, System.Xml.XmlNode itemXML, bool bConvertToFolder, ClientContext clientContext, bool bPreserveSharePointDocumentID)
        {
            bool flag = false;
            FileSystemObjectType fileSystemObjectType = FileSystemObjectType.File;
            try
            {
                fileSystemObjectType = spListItem.FileSystemObjectType;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (spList.BaseTemplate == 108)
                {
                    fileSystemObjectType = FileSystemObjectType.Folder;
                }
            }
            if ((fileSystemObjectType == FileSystemObjectType.Folder && string.Equals(itemXML.GetAttributeValueAsString("ProgId"), "OneNote.Notebook", System.StringComparison.OrdinalIgnoreCase)) || string.Equals(itemXML.GetAttributeValueAsString("HTML_x0020_File_x0020_Type"), "OneNote.Notebook", System.StringComparison.OrdinalIgnoreCase))
            {
                spListItem["HTML_x0020_File_x0020_Type"] = "OneNote.Notebook";
            }
            else if (fileSystemObjectType == FileSystemObjectType.Folder && string.Equals(itemXML.GetAttributeValueAsString("ProgId"), "SharePoint.DocumentSet", System.StringComparison.InvariantCultureIgnoreCase))
            {
                spListItem["HTML_x0020_File_x0020_Type"] = "SharePoint.DocumentSet";
            }
            else if (fileSystemObjectType == FileSystemObjectType.Folder && string.Equals(itemXML.GetAttributeValueAsString("ProgId"), "SharePoint.VideoSet", System.StringComparison.InvariantCultureIgnoreCase))
            {
                spListItem["HTML_x0020_File_x0020_Type"] = "SharePoint.VideoSet";
            }
            string b;
            string b2;
            this.GetAllDayEventFields(spList, listXML, itemXML, out b, out b2);
            bPreserveSharePointDocumentID = (bPreserveSharePointDocumentID && this.DocumentIDFeatureEnabled(spList, spListItem, clientContext));
            System.Collections.Generic.List<System.Xml.XmlNode> fieldSchemaNodes = this.GetFieldSchemaNodes(listXML, spList);
            foreach (System.Xml.XmlNode current in fieldSchemaNodes)
            {
                if (current.Attributes["Name"] != null && current.Attributes["Type"] != null)
                {
                    string value = current.Attributes["Name"].Value;
                    string value2 = current.Attributes["Type"].Value;
                    bool bFieldReadOnly = false;
                    XmlUtility.GetBooleanAttributeFromXml(current, "ReadOnly", out bFieldReadOnly);
                    bool flag2 = false;
                    XmlUtility.GetBooleanAttributeFromXml(current, "Required", out flag2);
                    string text = (current.Attributes["DefaultValue"] != null) ? current.Attributes["DefaultValue"].Value : null;
                    if (!(value == "ContentType"))
                    {
                        try
                        {
                            bool flag3 = bConvertToFolder && value.Equals("FSObjType", System.StringComparison.OrdinalIgnoreCase) && spList.BaseTemplate == 2100;
                            if (flag3)
                            {
                                try
                                {
                                    spListItem[value] = FileSystemObjectType.Folder;
                                }
                                catch (System.Exception ex2)
                                {
                                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                    throw new System.Exception(("The folder '" + itemXML.Attributes["Title"] != null) ? itemXML.Attributes["Title"].Value : ("' could not be created properly in slide library '" + spList.Title + "'. Message: " + ex2.Message), ex2);
                                }
                            }
                            else if (value == "ContentTypeId" && spList.BaseTemplate != 108)
                            {
                                this.SetContentTypeID(spList, spListItem, current, itemXML);
                            }
                            else if (Utils.IsWritableColumn(value, bFieldReadOnly, value2, spList.BaseTemplate, fileSystemObjectType == FileSystemObjectType.Folder, current.Attributes["BdcField"] != null, false) || (bPreserveSharePointDocumentID && (value.Equals("_dlc_DocId") || value.Equals("_dlc_DocIdUrl"))) || string.Equals(value, "SharedWithUsers", System.StringComparison.OrdinalIgnoreCase))
                            {
                                System.Xml.XmlAttribute xmlAttribute = itemXML.Attributes[value];
                                if (xmlAttribute != null)
                                {
                                    try
                                    {
                                        if (value == b || (value == b2 && value2 == "DateTime"))
                                        {
                                            if (!string.IsNullOrEmpty(xmlAttribute.Value))
                                            {
                                                System.DateTime dateTime = Utils.ParseDateAsUtc(xmlAttribute.Value);
                                                spListItem[value] = dateTime;
                                            }
                                        }
                                        else
                                        {
                                            object obj = this.CastStringToFieldType(xmlAttribute.Value, value2, current);
                                            if ((obj == null || obj.ToString().Equals(string.Empty)) && spListItem.FieldValues.ContainsKey(value))
                                            {
                                                object obj2 = spListItem[value];
                                                if (obj2 != null && !obj2.ToString().Equals(string.Empty))
                                                {
                                                    flag = true;
                                                }
                                            }
                                            if (flag || (obj != null && !obj.ToString().Equals("")))
                                            {
                                                flag = false;
                                                if (value.Equals("WikiField", System.StringComparison.InvariantCultureIgnoreCase))
                                                {
                                                    obj = Utils.ConvertHtmlLinkToWikiLink(obj);
                                                }
                                                spListItem[value] = obj;
                                                if (value2 == "TaxonomyFieldType" || value2 == "TaxonomyFieldTypeMulti")
                                                {
                                                    string noteFieldId = current.SelectSingleNode(".//Property[Name='TextField']/Value").InnerText;
                                                    System.Xml.XmlNode xmlNode = fieldSchemaNodes.FirstOrDefault((System.Xml.XmlNode node) => noteFieldId.Equals(node.GetAttributeValueAsString("ID"), System.StringComparison.InvariantCultureIgnoreCase));
                                                    if (xmlNode != null)
                                                    {
                                                        spListItem[xmlNode.Attributes["Name"].Value] = obj;
                                                    }
                                                }
                                            }
                                        }
                                        continue;
                                    }
                                    catch (System.Exception ex3)
                                    {
                                        CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                        throw new System.Exception("Source Value: " + xmlAttribute.Value + ", Exception: " + ex3.Message);
                                    }
                                }
                                if (!flag2)
                                {
                                    if (string.IsNullOrEmpty(text))
                                    {
                                        continue;
                                    }
                                }
                                try
                                {
                                    if (spListItem[value] == null && fileSystemObjectType != FileSystemObjectType.Folder)
                                    {
                                        object obj3 = this.CastStringToFieldType((text == null) ? "" : text, value2, current);
                                        if (obj3 != null)
                                        {
                                            spListItem[value] = obj3;
                                        }
                                    }
                                }
                                catch (PropertyOrFieldNotInitializedException ex4)
                                {
                                    CSOMAdapter.LogExceptionDetails(ex4, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                    object obj4 = this.CastStringToFieldType((text == null) ? "" : text, value2, current);
                                    if (obj4 != null)
                                    {
                                        spListItem[value] = obj4;
                                    }
                                }
                            }
                        }
                        catch (System.Exception ex5)
                        {
                            CSOMAdapter.LogExceptionDetails(ex5, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            throw new System.Exception(string.Concat(new string[]
                            {
                                "Error setting field data: Target Field Name: ",
                                value,
                                ", Target Type: ",
                                value2,
                                ", ",
                                ex5.Message
                            }));
                        }
                    }
                }
            }
        }

        private bool DocumentIDFeatureEnabled(List spList, ListItem spListItem, ClientContext clientContext)
        {
            bool result;
            try
            {
                if (clientContext == null)
                {
                    result = false;
                }
                else if (spList.BaseType != BaseType.DocumentLibrary)
                {
                    result = false;
                }
                else
                {
                    Site site = clientContext.Site;
                    FeatureCollection features = site.Features;
                    clientContext.Load<FeatureCollection>(features, new System.Linq.Expressions.Expression<System.Func<FeatureCollection, object>>[]
                    {
                        (FeatureCollection features1) => from feature in features1
                            where feature.DefinitionId == FeatureGuids.SharePointDocumentId
                            select feature
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    result = (features.Count > 0);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = false;
            }
            return result;
        }

        public string DeleteItems(string sListID, bool bDeleteAllItems, string sIDs)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (bDeleteAllItems)
                    {
                        bool flag;
                        ListItemCollection[] fullListItemCollectionsNoMetaData = this.GetFullListItemCollectionsNoMetaData(byId, out flag);
                        ListItemCollection[] array = fullListItemCollectionsNoMetaData;
                        for (int i = 0; i < array.Length; i++)
                        {
                            ListItemCollection items = array[i];
                            this.DeleteAllListItems(items, byId);
                        }
                    }
                    else if (!string.IsNullOrEmpty(sIDs))
                    {
                        this.DeleteItemsByIDs(byId, sIDs.Split(new char[]
                        {
                            ','
                        }));
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void DeleteAllListItems(ListItemCollection items, List list)
        {
            BaseType baseType = list.BaseType;
            ClientRuntimeContext clientRuntimeContext = null;
            System.Collections.Generic.List<int> list2 = new System.Collections.Generic.List<int>();
            foreach (ListItem current in items)
            {
                list2.Insert(0, current.Id);
            }
            foreach (int current2 in list2)
            {
                try
                {
                    ListItem byId = items.GetById(current2);
                    if (clientRuntimeContext == null)
                    {
                        clientRuntimeContext = byId.Context;
                    }
                    try
                    {
                        if (baseType == BaseType.DocumentLibrary && byId.FileSystemObjectType == FileSystemObjectType.File && byId.File.CheckOutType != CheckOutType.None)
                        {
                            byId.File.UndoCheckOut();
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                    byId.DeleteObject();
                }
                catch (System.Exception ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
            if (clientRuntimeContext != null)
            {
                CSOMAdapter.CallExecuteQuery(clientRuntimeContext, this);
            }
        }

        protected void DeleteItemsByIDs(List list, string[] sIDsToDelete)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            int num = 0;
            for (int i = 0; i < sIDsToDelete.Length; i++)
            {
                string text = sIDsToDelete[i];
                stringBuilder.Append((stringBuilder.Length > 0) ? "," : "");
                stringBuilder.Append(text.ToString());
                num++;
                if (num >= 50)
                {
                    bool flag;
                    ListItemCollection[] listItemCollections = this.GetListItemCollections(list, null, stringBuilder.ToString(), null, true, ListItemQueryType.ListItem | ListItemQueryType.Folder, "<FieldRef Name=\"ID\"></FieldRef>", out flag, false);
                    if (listItemCollections != null && listItemCollections.Length > 0)
                    {
                        ListItemCollection[] array = listItemCollections;
                        for (int j = 0; j < array.Length; j++)
                        {
                            ListItemCollection items = array[j];
                            this.DeleteAllListItems(items, list);
                        }
                    }
                    stringBuilder = new System.Text.StringBuilder();
                    num = 0;
                }
            }
            if (stringBuilder.Length > 0)
            {
                bool flag2;
                ListItemCollection[] listItemCollections = this.GetListItemCollections(list, null, stringBuilder.ToString(), null, true, ListItemQueryType.ListItem | ListItemQueryType.Folder, "<FieldRef Name=\"ID\"></FieldRef>", out flag2, false);
                if (listItemCollections != null && listItemCollections.Length > 0)
                {
                    ListItemCollection[] array2 = listItemCollections;
                    for (int k = 0; k < array2.Length; k++)
                    {
                        ListItemCollection items2 = array2[k];
                        this.DeleteAllListItems(items2, list);
                    }
                }
            }
        }

        public string DeleteItem(string sListID, int iListItemID)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    ListItem itemById = byId.GetItemById(iListItemID);
                    clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (itemById != null)
                    {
                        itemById.DeleteObject();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string UpdateListItemStatus(bool bPublish, bool bCheckin, bool bApprove, string sItemXML, string sListXML, string sItemID, string sCheckinComment, string sPublishComment, string sApprovalComment)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sItemXML);
                    System.Xml.XmlNode xmlNode2 = XmlUtility.StringToXmlNode(sListXML);
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl("/" + xmlNode.Attributes["FileRef"].Value);
                    clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (bCheckin && !bPublish && !bApprove && fileByServerRelativeUrl.CheckOutType != CheckOutType.None)
                    {
                        if (xmlNode2.Attributes["EnableVersioning"].Value == "True" && xmlNode2.Attributes["EnableMinorVersions"].Value == "True")
                        {
                            this.CheckInFile(fileByServerRelativeUrl, sCheckinComment, CheckinType.MinorCheckIn);
                        }
                        else
                        {
                            this.CheckInFile(fileByServerRelativeUrl, sCheckinComment, CheckinType.MajorCheckIn);
                        }
                    }
                    if (bPublish)
                    {
                        bool flag = false;
                        if (fileByServerRelativeUrl.CheckOutType == CheckOutType.None)
                        {
                            this.CheckOutFile(fileByServerRelativeUrl);
                            flag = true;
                        }
                        if (fileByServerRelativeUrl.CheckOutType != CheckOutType.None || flag)
                        {
                            if (xmlNode2.Attributes["EnableVersioning"].Value == "True" && xmlNode2.Attributes["EnableMinorVersions"].Value == "True")
                            {
                                this.CheckInFile(fileByServerRelativeUrl, sCheckinComment, CheckinType.MinorCheckIn);
                                fileByServerRelativeUrl.Publish(sPublishComment);
                            }
                            else
                            {
                                this.CheckInFile(fileByServerRelativeUrl, sPublishComment, CheckinType.MajorCheckIn);
                            }
                        }
                    }
                    if (bApprove)
                    {
                        bool flag2 = false;
                        if (fileByServerRelativeUrl.CheckOutType == CheckOutType.None)
                        {
                            this.CheckOutFile(fileByServerRelativeUrl);
                            flag2 = true;
                        }
                        if (fileByServerRelativeUrl.CheckOutType != CheckOutType.None || flag2)
                        {
                            this.CheckInFile(fileByServerRelativeUrl, sCheckinComment, CheckinType.MinorCheckIn);
                        }
                        fileByServerRelativeUrl.Approve(sApprovalComment);
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string AddDocument(string sListID, string sFolder, string sListItemXML, byte[] fileContents, string listSettingsXml, AddDocumentOptions options)
        {
            bool overwrite = options.Overwrite;
            if (this.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web5) => web5.Title,
                        (Web web6) => web6.ServerRelativeUrl
                    });
                    System.Xml.XmlNode xmlNode = null;
                    if (!string.IsNullOrEmpty(listSettingsXml))
                    {
                        xmlNode = XmlUtility.StringToXmlNode(listSettingsXml);
                    }
                    System.Xml.XmlNode xmlNode2 = XmlUtility.StringToXmlNode(sListItemXML);
                    System.Xml.XmlNode xmlNode3 = XmlUtility.StringToXmlNode(sListItemXML);
                    string value = xmlNode3.Attributes["FileLeafRef"].Value;
                    System.DateTime dateTime = (xmlNode3.Attributes["Modified"] == null) ? System.DateTime.UtcNow : Utils.ParseDateAsUtc(xmlNode3.Attributes["Modified"].Value);
                    dateTime = this.ConvertUtcToLocalTime(dateTime);
                    string attributeValueAsString = xmlNode2.GetAttributeValueAsString("ContentTypeId");
                    string text;
                    string text2;
                    CheckinType checkinType;
                    string text3;
                    this.GetVersionInfo(xmlNode2, out text, out text2, out checkinType, out text3);
                    List byId = clientContext.Web.Lists.GetById(new System.Guid(sListID));
                    System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> list;
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List list0) => (object)list0.BaseTemplate,
                        (List list1) => (object)list1.BaseType,
                        (List list2) => (object)list2.Id,
                        (List list3) => list3.RootFolder.ServerRelativeUrl,
                        (List list4) => list4.Title,
                        (List list5) => (object)list5.EnableModeration,
                        (List list6) => (object)list6.EnableVersioning,
                        (List list7) => (object)list7.EnableMinorVersions,
                        (List list8) => (object)list8.DraftVersionVisibility,
                        (List list9) => (object)list9.ForceCheckout,
                        (List list11) => list11.ContentTypes.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                        {
                            (ContentType c) => c.Id,
                            (ContentType c) => c.Name
                        })
                    });
                    if (xmlNode == null)
                    {
                        byId.Context.Load<FieldCollection>(byId.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                        {
                            (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                            {
                                (Field field) => field.SchemaXml
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(byId.Context, this);
                    }
                    string text4 = UrlUtils.ConcatUrls(new string[]
                    {
                        this.GetListRootFolderServerRelativeUrl(xmlNode, byId),
                        sFolder
                    });
                    Folder folderByServerRelativeUrl = web.GetFolderByServerRelativeUrl(text4);
                    string sFullFilePath = UrlUtils.ConcatUrls(new string[]
                    {
                        text4,
                        value
                    });
                    string sLowerCaseFullFilePath = sFullFilePath.ToLower();
                    clientContext.Load<Folder>(folderByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
                    {
                        (Folder folder) => folder.ServerRelativeUrl
                    });
                    Microsoft.SharePoint.Client.File file = null;
                    FileCollection files = folderByServerRelativeUrl.Files;
                    clientContext.Load<FileCollection>(files, new System.Linq.Expressions.Expression<System.Func<FileCollection, object>>[]
                    {
                        (FileCollection files0) => from filex in files0.Include(new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                            {
                                (Microsoft.SharePoint.Client.File file0) => (object)file0.Exists,
                                (Microsoft.SharePoint.Client.File file1) => (object)file1.CheckOutType,
                                (Microsoft.SharePoint.Client.File file2) => (object)file2.ListItemAllFields.Id,
                                (Microsoft.SharePoint.Client.File file3) => file3.Name,
                                (Microsoft.SharePoint.Client.File file4) => file4.ListItemAllFields
                            })
                            where filex.ServerRelativeUrl == sFullFilePath || filex.ServerRelativeUrl == sLowerCaseFullFilePath
                            select filex
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (files.Count == 1)
                    {
                        file = files[0];
                    }
                    if (file != null && overwrite)
                    {
                        file.DeleteObject();
                        file = null;
                    }
                    bool flag = file == null;
                    bool flag2 = true;
                    if (byId.EnableVersioning && !byId.ForceCheckout)
                    {
                        byId.ForceCheckout = true;
                        byId.Update();
                        flag2 = false;
                    }
                    bool flag3 = Utils.IsDocumentWikiPage(xmlNode2, "");
                    bool flag4 = byId.BaseTemplate == 212;
                    bool isVideoFile = false;
                    bool flag5 = false;
                    if (flag)
                    {
                        if (flag3)
                        {
                            file = folderByServerRelativeUrl.Files.AddTemplateFile(UrlUtils.ConcatUrls(new string[]
                            {
                                text4,
                                value
                            }), TemplateFileType.WikiPage);
                        }
                        else
                        {
                            if (flag4)
                            {
                                string text5 = folderByServerRelativeUrl.ServerRelativeUrl.Remove(0, web.ServerRelativeUrl.Length).TrimStart(new char[]
                                {
                                    '/'
                                });
                                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                                {
                                    this.CookieManager.ReleaseCookieLock();
                                }
                                try
                                {
                                    this.NWSAdapter.AddMeetingWorkspacePage(UrlUtils.ConcatUrls(new string[]
                                    {
                                        text5,
                                        value
                                    }), overwrite, this);
                                }
                                finally
                                {
                                    if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                                    {
                                        this.CookieManager.AquireCookieLock();
                                    }
                                }
                                Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl(UrlUtils.ConcatUrls(new string[]
                                {
                                    text4,
                                    value
                                }));
                                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                                System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                                xmlTextWriter.WriteStartElement("ListItems");
                                list = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                                list.Add(new System.Collections.Generic.KeyValuePair<string, string>("ID", "ID"));
                                list.Add(new System.Collections.Generic.KeyValuePair<string, string>("Modified", "Modified"));
                                list.Add(new System.Collections.Generic.KeyValuePair<string, string>("FileRef", "FileRef"));
                                list.Add(new System.Collections.Generic.KeyValuePair<string, string>("FileLeafRef", "FileLeafRef"));
                                list.Add(new System.Collections.Generic.KeyValuePair<string, string>("GUID", "GUID"));
                                this.LoadDataForAddListItemReadBack(fileByServerRelativeUrl.ListItemAllFields, list);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                                this.GetItemXML(byId, xmlTextWriter, list, fileByServerRelativeUrl.ListItemAllFields, true, null, xmlNode, new GetListItemOptions(), clientContext, false, null);
                                xmlTextWriter.WriteEndElement();
                                result = stringBuilder.ToString();
                                return result;
                            }
                            if (Utils.IsVideoFile(byId.BaseTemplate.ToString(), attributeValueAsString, null))
                            {
                                isVideoFile = true;
                                flag5 = (base.SharePointVersion.IsSharePoint2013OrLater && attributeValueAsString.StartsWith("0x0101009148F5A04DDD49CBA7127AADA5FB792B00291D173ECE694D56B19D111489C4369D") && xmlNode2.Attributes["VideoRenditionLabel"] == null && xmlNode2.Attributes["VideoRenditionBitRate"] == null);
                                this.UploadVideo(fileContents, this, byId, clientContext, value, options.FileChunkSizeInMB, ref text4, ref file, flag5);
                            }
                            else
                            {
                                FileCreationInformation fileCreationInformation = new FileCreationInformation();
                                fileCreationInformation.Content = new byte[0];
                                fileCreationInformation.Url = UrlUtils.ConcatUrls(new string[]
                                {
                                    text4,
                                    value
                                });
                                file = folderByServerRelativeUrl.Files.Add(fileCreationInformation);
                            }
                        }
                        if (byId.EnableVersioning)
                        {
                            clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                            {
                                (Microsoft.SharePoint.Client.File file7) => (object)file7.ListItemAllFields.Id,
                                (Microsoft.SharePoint.Client.File file8) => file8.ListItemAllFields["_UIVersionString"],
                                (Microsoft.SharePoint.Client.File file9) => (object)file9.UIVersion
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            double num;
                            double.TryParse(text2, out num);
                            if (!file.ListItemAllFields["_UIVersionString"].ToString().Equals(num.ToString("0.0")))
                            {
                                flag = false;
                                file.CheckIn("Temporary Version - (To be deleted)", byId.EnableMinorVersions ? CheckinType.MinorCheckIn : CheckinType.MajorCheckIn);
                            }
                        }
                    }
                    else if (options.OverrideCheckouts && file.CheckOutType != CheckOutType.None)
                    {
                        file.UndoCheckOut();
                    }
                    try
                    {
                        this.IncrementDocumentVersions(text2, folderByServerRelativeUrl, this, ref file, byId, flag3, flag4);
                        this.UpdateDocumentData(byId, xmlNode, folderByServerRelativeUrl, file, xmlNode2, fileContents, options, flag, text4, clientContext, isVideoFile, options.FileChunkSizeInMB, flag5);
                    }
                    catch (System.Exception ex)
                    {
                        this.UndoJsFileCheckOut(byId, file, this, clientContext, ex);
                    }
                    this.DeleteTempDocumentVersions(file, this);
                    if (!flag2)
                    {
                        byId.ForceCheckout = false;
                        byId.Update();
                    }
                    clientContext.Load<ListItem>(file.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem item) => (object)item.Id,
                        (ListItem item) => item["GUID"]
                    });
                    clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File file0) => file0.Name
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder2 = new System.Text.StringBuilder(300);
                    using (System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder2))
                    {
                        using (System.Xml.XmlTextWriter xmlTextWriter2 = new System.Xml.XmlTextWriter(stringWriter))
                        {
                            xmlTextWriter2.WriteStartElement("ListItems");
                            xmlTextWriter2.WriteStartElement("ListItem");
                            xmlTextWriter2.WriteAttributeString("ID", file.ListItemAllFields.Id.ToString());
                            xmlTextWriter2.WriteAttributeString("FileDirRef", folderByServerRelativeUrl.ServerRelativeUrl.Trim(new char[]
                            {
                                '/'
                            }));
                            xmlTextWriter2.WriteAttributeString("GUID", file.ListItemAllFields["GUID"].ToString());
                            xmlTextWriter2.WriteAttributeString("FileLeafRef", file.Name);
                            xmlTextWriter2.WriteAttributeString("Modified", Utils.FormatDate(dateTime));
                            xmlTextWriter2.WriteEndElement();
                            xmlTextWriter2.WriteEndElement();
                        }
                    }
                    result = stringBuilder2.ToString();
                }
            }
            finally
            {
                if (this.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void UndoJsFileCheckOut(List targetList, Microsoft.SharePoint.Client.File targetFile, CSOMAdapter callingAdapter, ClientContext clientContext, System.Exception ex)
        {
            bool flag = false;
            try
            {
                try
                {
                    if (callingAdapter.SharePointVersion.IsSharePointOnline && targetList.BaseTemplate == 116 && targetFile.Name.EndsWith(".js") && (ex.Message.Contains("The remote server returned an error: (500) Internal Server Error") || ex.Message.Contains("This file is currently associated to an HTML file of the same name")))
                    {
                        targetFile.UndoCheckOut();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        flag = true;
                    }
                }
                catch (System.Exception ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
            finally
            {
                if (flag)
                {
                    throw new System.Exception("This file is currently associated to an HTML file of the same name and is drawing content from it. Until the files are disassociated, you will not be able to move, delete, rename, or make any other changes to this file.", ex);
                }
                throw ex;
            }
        }

        private bool IsFileSizeGreaterThanSupportedSize(byte[] fileContents)
        {
            int num = (AdapterConfigurationVariables.SupportedFileSizeWithoutChunk < 1) ? 200 : AdapterConfigurationVariables.SupportedFileSizeWithoutChunk;
            return fileContents.Length > num * 1024 * 1024;
        }

        private void UploadVideo(byte[] fileContents, CSOMAdapter callingAdapter, List targetList, ClientContext clientContext, string fileName, int fileChunkSizeInMB, ref string fullFolderPath, ref Microsoft.SharePoint.Client.File targetFile, bool isVideoMigrating)
        {
            string text = UrlUtils.ConcatUrls(new string[]
            {
                fullFolderPath,
                fileName
            });
            if (this.IsFileSizeGreaterThanSupportedSize(fileContents) && callingAdapter.SharePointVersion.IsSharePoint2016OrLater)
            {
                this.UploadFileInChunks(clientContext, callingAdapter, targetList, fileContents, text, fileChunkSizeInMB);
            }
            else
            {
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(fileContents))
                {
                    VideoSet.UploadVideo(clientContext, targetList, fileName, memoryStream, true, fullFolderPath);
                    CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
                }
            }
            if (isVideoMigrating)
            {
                text = CSOMAdapter.GetUpdatedVideoAssetUrl(text);
            }
            fullFolderPath = text.Substring(0, text.LastIndexOf("/", System.StringComparison.Ordinal));
            targetFile = clientContext.Web.GetFileByServerRelativeUrl(text);
        }

        private Microsoft.SharePoint.Client.File GetTargetFileWithAllListItemFields(ClientContext clientContext, string serverRelativeUrl)
        {
            try
            {
                Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(serverRelativeUrl);
                clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                if (fileByServerRelativeUrl != null)
                {
                    clientContext.Load<ListItem>(fileByServerRelativeUrl.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                }
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                if (fileByServerRelativeUrl != null && fileByServerRelativeUrl.ServerObjectIsNull == false)
                {
                    return fileByServerRelativeUrl;
                }
            }
            catch (System.ArgumentException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return null;
        }

        private void UploadFileInChunks(ClientContext clientContext, CSOMAdapter callingAdapter, List targetList, byte[] data, string serverRelativeUrl, int fileChunkSizeInMB)
        {
            Microsoft.SharePoint.Client.File file;
            clientContext.Load<Folder>(targetList.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
            {
                (Folder file1) => file1.ServerRelativeUrl
            });
            CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
            int num = (fileChunkSizeInMB < 1) ? 8 : fileChunkSizeInMB;
            using (System.IO.Stream stream = new System.IO.MemoryStream(data))
            {
                using (System.IO.BinaryReader binaryReader = new System.IO.BinaryReader(stream))
                {
                    long num2 = 0L;
                    int num3 = num * 1024 * 1024;
                    if (data.Length <= num3)
                    {
                        FileCreationInformation parameters = new FileCreationInformation
                        {
                            Url = serverRelativeUrl,
                            Overwrite = true,
                            ContentStream = stream
                        };
                        targetList.RootFolder.Files.Add(parameters);
                        CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
                    }
                    else
                    {
                        FileCreationInformation parameters2 = new FileCreationInformation
                        {
                            Url = serverRelativeUrl,
                            Overwrite = true,
                            ContentStream = new System.IO.MemoryStream()
                        };
                        file = targetList.RootFolder.Files.Add(parameters2);
                        System.Guid uploadId = System.Guid.NewGuid();
                        System.IO.MemoryStream memoryStream;
                        while (this.ReadChunk(binaryReader, num3, out memoryStream))
                        {
                            if (num2 == 0L)
                            {
                                ClientResult<long> clientResult = file.StartUpload(uploadId, memoryStream);
                                file.Context.ExecuteQuery();
                                num2 = clientResult.Value;
                            }
                            else if ((long)num3 != memoryStream.Length)
                            {
                                file = clientContext.Web.GetFileByServerRelativeUrl(serverRelativeUrl);
                                file.FinishUpload(uploadId, num2, memoryStream);
                                file.Context.ExecuteQuery();
                            }
                            else
                            {
                                file = clientContext.Web.GetFileByServerRelativeUrl(serverRelativeUrl);
                                ClientResult<long> clientResult2 = file.ContinueUpload(uploadId, num2, memoryStream);
                                file.Context.ExecuteQuery();
                                num2 = clientResult2.Value;
                            }
                        }
                    }
                }
            }
        }

        private bool ReadChunk(System.IO.BinaryReader stream, int chunkSize, out System.IO.MemoryStream chunkStream)
        {
            byte[] array = new byte[chunkSize];
            int num = stream.Read(array, 0, array.Length);
            if (num == 0)
            {
                chunkStream = new System.IO.MemoryStream();
                return false;
            }
            chunkStream = new System.IO.MemoryStream(array, 0, num);
            return true;
        }

        private void IncrementDocumentVersions(string sVersionString, Folder folder, SharePointAdapter callingAdapter, ref Microsoft.SharePoint.Client.File targetFile, List parentList, bool isWikiPage, bool isMeetingWorkspacePage)
        {
            if (!parentList.EnableVersioning)
            {
                return;
            }
            folder.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
            {
                (Microsoft.SharePoint.Client.File file) => (object)file.CheckedOutByUser.Id,
                (Microsoft.SharePoint.Client.File file) => file.Name,
                (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersionString"]
            });
            CSOMAdapter.CallExecuteQuery(folder.Context, callingAdapter);
            int num = (int)System.Convert.ToDouble(sVersionString, CSOMAdapter.s_CultureInfo);
            int num2;
            int num3;
            try
            {
                num2 = ((targetFile.ListItemAllFields.Id == -1) ? 0 : ((targetFile.ListItemAllFields["_UIVersionString"] == null) ? 0 : ((int)System.Convert.ToDouble(targetFile.ListItemAllFields["_UIVersionString"], CSOMAdapter.s_CultureInfo))));
                num3 = ((targetFile.ListItemAllFields.Id == -1) ? 0 : ((targetFile.ListItemAllFields["_UIVersionString"] == null) ? 0 : System.Convert.ToInt32(targetFile.ListItemAllFields["_UIVersionString"].ToString().Substring(targetFile.ListItemAllFields["_UIVersionString"].ToString().IndexOf('.') + 1, 1))));
            }
            catch (PropertyOrFieldNotInitializedException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                num2 = 0;
                num3 = 0;
            }
            int num4 = 0;
            if (sVersionString.Contains('.'))
            {
                num4 = System.Convert.ToInt32(sVersionString.Substring(sVersionString.IndexOf('.') + 1, 1));
            }
            int num5 = num - num2 - 1 + ((num4 > 0) ? 1 : 0);
            for (int i = 0; i < num5; i++)
            {
                targetFile.CheckOut();
                if (!isWikiPage && !isMeetingWorkspacePage)
                {
                    FileCreationInformation fileCreationInformation = new FileCreationInformation();
                    fileCreationInformation.Url = targetFile.Name;
                    fileCreationInformation.Overwrite = true;
                    fileCreationInformation.Content = new byte[0];
                    targetFile = folder.Files.Add(fileCreationInformation);
                }
                targetFile.CheckIn("Temporary Version - (To be deleted)", CheckinType.MajorCheckIn);
                folder.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => (object)file.CheckedOutByUser.Id,
                    (Microsoft.SharePoint.Client.File file) => file.Name,
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersionString"]
                });
                CSOMAdapter.CallExecuteQuery(folder.Context, callingAdapter);
                if (parentList.EnableModeration)
                {
                    targetFile.ListItemAllFields["_ModerationStatus"] = 0;
                    targetFile.ListItemAllFields.Update();
                }
                folder.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => (object)file.UIVersion
                });
            }
            if (parentList.EnableMinorVersions)
            {
                num3 = this.UpdateCurrentMinorVersion(targetFile, num3);
                int num6 = num4 - num3 - 1;
                for (int j = 0; j < num6; j++)
                {
                    try
                    {
                        int arg_4F2_0 = targetFile.CheckedOutByUser.Id;
                    }
                    catch (System.Exception ex2)
                    {
                        CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        targetFile.CheckOut();
                    }
                    if (!isWikiPage && !isMeetingWorkspacePage)
                    {
                        FileCreationInformation fileCreationInformation2 = new FileCreationInformation();
                        fileCreationInformation2.Url = targetFile.Name;
                        fileCreationInformation2.Overwrite = true;
                        fileCreationInformation2.Content = new byte[0];
                        targetFile = folder.Files.Add(fileCreationInformation2);
                    }
                    targetFile.CheckIn("Temporary Version - (To be deleted)", CheckinType.MinorCheckIn);
                    folder.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File file) => (object)file.CheckedOutByUser.Id,
                        (Microsoft.SharePoint.Client.File file) => file.Name,
                        (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersionString"]
                    });
                    CSOMAdapter.CallExecuteQuery(folder.Context, callingAdapter);
                    folder.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File file) => (object)file.UIVersion
                    });
                }
            }
        }

        private int UpdateCurrentMinorVersion(Microsoft.SharePoint.Client.File targetFile, int currentMinorVersion)
        {
            int result = currentMinorVersion;
            try
            {
                object obj = targetFile.ListItemAllFields["_UIVersionString"];
                if (obj != null)
                {
                    string text = System.Convert.ToString(obj);
                    result = System.Convert.ToInt32(text.Substring(text.IndexOf('.') + 1, 1));
                }
                else
                {
                    result = 0;
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return result;
        }

        private void DeleteTempDocumentVersions(Microsoft.SharePoint.Client.File targetFile, SharePointAdapter callingAdapter)
        {
            targetFile.RefreshLoad();
            targetFile.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
            {
                (Microsoft.SharePoint.Client.File file) => file.Versions
            });
            CSOMAdapter.CallExecuteQuery(targetFile.Context, callingAdapter);
            System.Linq.IQueryable<FileVersion> queryable = from version in targetFile.Versions
                                                            where !version.IsCurrentVersion && string.Equals(version.CheckInComment, "Temporary Version - (To be deleted)", System.StringComparison.Ordinal)
                                                            select version;
            if (queryable.Any<FileVersion>())
            {
                foreach (FileVersion current in queryable)
                {
                    targetFile.Versions.DeleteByID(current.ID);
                }
            }
        }

        public string UpdateDocument(string sListID, string sParentFolder, string sFileLeafRef, string sListItemXML, byte[] fileContents, UpdateDocumentOptions updateOptions)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sListItemXML);
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    int num;
                    string text;
                    string text2;
                    System.DateTime dateTime;
                    System.DateTime dt;
                    this.GetListItemFileInfo(xmlNode, out num, out text, out text2, out dateTime, out dt);
                    string text3;
                    string text4;
                    CheckinType checkinType;
                    string text5;
                    this.GetVersionInfo(xmlNode, out text3, out text4, out checkinType, out text5);
                    string fullPath = this.GetFullPath(byId, sParentFolder);
                    Folder folder = null;
                    Microsoft.SharePoint.Client.File file = null;
                    try
                    {
                        folder = web.GetFolderByServerRelativeUrl(fullPath);
                        file = web.GetFileByServerRelativeUrl(fullPath + "\\" + sFileLeafRef);
                        clientContext.Load<Folder>(folder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                        clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        throw ex;
                    }
                    this.UpdateDocumentData(byId, null, folder, file, xmlNode, fileContents, updateOptions, false, fullPath, clientContext, false, 0, false);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(300);
                    using (System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder))
                    {
                        using (System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter))
                        {
                            xmlTextWriter.WriteStartElement("ListItems");
                            xmlTextWriter.WriteStartElement("ListItem");
                            xmlTextWriter.WriteAttributeString("ID", file.ListItemAllFields["Id"].ToString());
                            xmlTextWriter.WriteAttributeString("FileDirRef", folder.ServerRelativeUrl.Trim(new char[]
                            {
                                '/'
                            }));
                            xmlTextWriter.WriteAttributeString("GUID", file.ListItemAllFields["GUID"].ToString());
                            xmlTextWriter.WriteAttributeString("FileLeafRef", file.Name);
                            xmlTextWriter.WriteAttributeString("Modified", Utils.FormatDate(dt));
                            xmlTextWriter.WriteEndElement();
                            xmlTextWriter.WriteEndElement();
                        }
                    }
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void UpdateDocumentData(List targetList, System.Xml.XmlNode listXML, Folder folder, Microsoft.SharePoint.Client.File targetFile, System.Xml.XmlNode listItemXML, byte[] fileContents, IUpdateDocumentOptions options, bool bAdding, string sFullFolderPath, ClientContext clientContext, bool isVideoFile = false, int fileChunkSizeInMB = 0, bool isVideoSetMigrating = false)
        {
            bool flag = Utils.IsDocumentWikiPage(listItemXML, "");
            bool flag2 = targetList.BaseTemplate == 212;
            bool bPreserveSharePointDocumentID = options is AddDocumentOptions && (options as AddDocumentOptions).PreserveSharePointDocumentIDs;
            int num;
            string text;
            string text2;
            System.DateTime dateTime;
            System.DateTime dateTime2;
            this.GetListItemFileInfo(listItemXML, out num, out text, out text2, out dateTime, out dateTime2);
            string text3;
            string sVersionString;
            CheckinType checkinType;
            string sCheckinComments;
            this.GetVersionInfo(listItemXML, out text3, out sVersionString, out checkinType, out sCheckinComments);
            bool flag3 = false;
            string attributeValueAsString = listItemXML.GetAttributeValueAsString("_ModerationComments");
            targetList.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
            {
                (Microsoft.SharePoint.Client.File file) => file.Name,
                (Microsoft.SharePoint.Client.File file) => (object)file.CheckOutType
            });
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            if (targetFile.CheckOutType == CheckOutType.None)
            {
                targetFile.CheckOut();
                flag3 = true;
            }
            if (!flag && !flag2 && !isVideoFile)
            {
                string text4 = UrlUtils.ConcatUrls(new string[]
                {
                    sFullFolderPath,
                    targetFile.Name
                });
                if (this.IsFileSizeGreaterThanSupportedSize(fileContents) && base.SharePointVersion.IsSharePoint2016OrLater && (!ExternalizationUtils.IsExternalizedContent(listItemXML.Attributes["IsExternalized"]) || !options.ShallowCopyExternalizedData))
                {
                    this.UploadFileInChunks(clientContext, this, targetList, fileContents, text4, fileChunkSizeInMB);
                    targetFile = this.GetTargetFileWithAllListItemFields(clientContext, text4);
                }
                else if (!ExternalizationUtils.IsExternalizedContent(listItemXML.Attributes["IsExternalized"]) || !options.ShallowCopyExternalizedData)
                {
                    targetFile = this.AddFileToFolder(clientContext, folder, text4, fileContents, this);
                }
                else
                {
                    targetFile = this.AddFileToFolder(clientContext, folder, text4, new byte[0], this);
                }
            }
            if (isVideoFile)
            {
                string serverRelativeUrl = sFullFolderPath;
                if (!isVideoSetMigrating)
                {
                    serverRelativeUrl = UrlUtils.ConcatUrls(new string[]
                    {
                        sFullFolderPath,
                        targetFile.Name
                    });
                }
                Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(serverRelativeUrl);
                clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => (object)file.ListItemAllFields.Id
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                ListItem itemById = targetList.GetItemById(fileByServerRelativeUrl.ListItemAllFields.Id);
                this.UpdateItemMetadata(targetList, listXML, itemById, listItemXML, false, clientContext, bPreserveSharePointDocumentID);
                itemById.Update();
            }
            else
            {
                this.UpdateItemMetadata(targetList, listXML, targetFile.ListItemAllFields, listItemXML, false, clientContext, bPreserveSharePointDocumentID);
                targetFile.ListItemAllFields.Update();
            }
            targetFile.Context.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
            {
                (Microsoft.SharePoint.Client.File file) => (object)file.ListItemAllFields.Id,
                (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["FileLeafRef"],
                (Microsoft.SharePoint.Client.File file) => (object)file.CheckOutType
            });
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            this.CheckInFile(targetFile, targetList, sCheckinComments, checkinType, bAdding && flag3, sVersionString, this);
            bool enableMinorVersions = targetList.EnableMinorVersions;
            bool enableVersioning = targetList.EnableVersioning;
            string text5 = (listItemXML.Attributes["_ModerationStatus"] == null) ? "2" : listItemXML.Attributes["_ModerationStatus"].Value;
            if (targetList.EnableModeration)
            {
                clientContext.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersionString"],
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersion"]
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                targetFile.ListItemAllFields["_ModerationComments"] = attributeValueAsString;
                targetFile.ListItemAllFields["_ModerationStatus"] = text5;
                targetFile.ListItemAllFields.Update();
            }
            bool forceCheckout = targetList.ForceCheckout;
            if (!enableMinorVersions || checkinType != CheckinType.MinorCheckIn)
            {
                bool enableModeration = targetList.EnableModeration;
                DraftVisibilityType draftVersionVisibility = targetList.DraftVersionVisibility;
                if (enableVersioning)
                {
                    if (enableModeration && text5.Equals("0"))
                    {
                        targetList.EnableModeration = false;
                    }
                    targetList.EnableVersioning = false;
                    targetList.ForceCheckout = false;
                    targetList.Update();
                }
                else if (enableModeration && text5.Equals("0"))
                {
                    targetList.EnableModeration = false;
                    targetList.ForceCheckout = false;
                    targetList.Update();
                }
                clientContext.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersionString"],
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersion"]
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                if (!string.IsNullOrEmpty(text2))
                {
                    this.SetUserFieldFromLogin(targetFile.ListItemAllFields, "Editor", text2);
                }
                if (!string.IsNullOrEmpty(text))
                {
                    this.SetUserFieldFromLogin(targetFile.ListItemAllFields, "Author", text);
                }
                if (listItemXML.Attributes["Modified_x0020_By"] != null)
                {
                    targetFile.ListItemAllFields["Modified_x0020_By"] = listItemXML.GetAttributeValueAsString("Modified_x0020_By");
                }
                if (listItemXML.Attributes["Created_x0020_By"] != null)
                {
                    targetFile.ListItemAllFields["Created_x0020_By"] = listItemXML.GetAttributeValueAsString("Created_x0020_By");
                }
                targetFile.ListItemAllFields["Modified"] = dateTime2;
                targetFile.ListItemAllFields["Created"] = dateTime;
                if (enableModeration)
                {
                    targetFile.ListItemAllFields["_ModerationComments"] = attributeValueAsString;
                }
                targetFile.ListItemAllFields.Update();
                if (enableVersioning)
                {
                    targetList.EnableVersioning = true;
                    if (enableMinorVersions)
                    {
                        targetList.EnableMinorVersions = true;
                    }
                    if (enableModeration && !targetList.EnableModeration)
                    {
                        targetList.EnableModeration = true;
                        targetList.DraftVersionVisibility = draftVersionVisibility;
                    }
                    if (forceCheckout && !targetList.ForceCheckout)
                    {
                        targetList.ForceCheckout = true;
                    }
                    targetList.Update();
                }
                else if (enableModeration && !targetList.EnableModeration)
                {
                    targetList.EnableModeration = true;
                    targetList.DraftVersionVisibility = draftVersionVisibility;
                    if (forceCheckout && !targetList.ForceCheckout)
                    {
                        targetList.ForceCheckout = true;
                    }
                    targetList.Update();
                }
            }
            else
            {
                int num2 = this.GetIDFromUser(text2);
                if (num2 < 0)
                {
                    User user = clientContext.Web.EnsureUser(text2);
                    clientContext.Load<User>(user, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    num2 = user.Id;
                }
                if (!targetFile.ListItemAllFields.IsObjectPropertyInstantiated("Id"))
                {
                    clientContext.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File file) => (object)file.ListItemAllFields.Id
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
                ListItem itemById2 = targetList.GetItemById(targetFile.ListItemAllFields.Id);
                itemById2["Editor"] = num2;
                itemById2["Modified"] = dateTime2;
                System.Collections.Generic.IList<ListItemFormUpdateValue> list = new System.Collections.Generic.List<ListItemFormUpdateValue>();
                ListItemFormUpdateValue item = new ListItemFormUpdateValue
                {
                    FieldName = "Modified_x0020_By",
                    FieldValue = string.Format("{0}", num2)
                };
                list.Add(item);
                itemById2.ValidateUpdateListItem(list, true, "Blank");
            }
            if ((!enableVersioning && !targetList.EnableModeration) || (!enableMinorVersions && text5.Equals("1")))
            {
                if (enableVersioning)
                {
                    targetList.EnableVersioning = false;
                    targetList.Update();
                }
                clientContext.Load<Microsoft.SharePoint.Client.File>(targetFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_ModerationStatus"]
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                if (!targetFile.ListItemAllFields["_ModerationStatus"].ToString().Equals(text5, System.StringComparison.InvariantCultureIgnoreCase))
                {
                    targetFile.ListItemAllFields["_ModerationComments"] = attributeValueAsString;
                    targetFile.ListItemAllFields["_ModerationStatus"] = text5;
                    targetFile.ListItemAllFields.Update();
                    if (text5 == "2")
                    {
                        if (!string.IsNullOrEmpty(text2))
                        {
                            this.SetUserFieldFromLogin(targetFile.ListItemAllFields, "Editor", text2);
                        }
                        if (!string.IsNullOrEmpty(text))
                        {
                            this.SetUserFieldFromLogin(targetFile.ListItemAllFields, "Author", text);
                        }
                        if (listItemXML.Attributes["Modified_x0020_By"] != null)
                        {
                            targetFile.ListItemAllFields["Modified_x0020_By"] = listItemXML.GetAttributeValueAsString("Modified_x0020_By");
                        }
                        if (listItemXML.Attributes["Created_x0020_By"] != null)
                        {
                            targetFile.ListItemAllFields["Created_x0020_By"] = listItemXML.GetAttributeValueAsString("Created_x0020_By");
                        }
                        targetFile.ListItemAllFields["Modified"] = dateTime2;
                        targetFile.ListItemAllFields["Created"] = dateTime;
                        targetFile.ListItemAllFields.Update();
                    }
                }
                if (enableVersioning)
                {
                    targetList.EnableVersioning = true;
                    targetList.Update();
                }
            }
        }

        public string AddFolder(string sListId, string sParentFolderPath, string folderXmlString, AddFolderOptions folderOptions)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string folder;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    bool overwrite = folderOptions.Overwrite;
                    ListItem listItem = null;
                    List byId = clientContext.Web.Lists.GetById(new System.Guid(sListId));
                    clientContext.Load<Folder>(byId.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List list) => list.Title,
                        (List list) => (object)list.BaseTemplate,
                        (List list) => list.ContentTypes,
                        (List list) => list.ParentWeb.ServerRelativeUrl,
                        (List list) => (object)list.ItemCount
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(folderXmlString);
                    string text = (xmlNode.Attributes["FileLeafRef"] != null) ? xmlNode.Attributes["FileLeafRef"].Value : xmlNode.Attributes["Title"].Value;
                    ListItemCreationInformation listItemCreationInformation = new ListItemCreationInformation();
                    listItemCreationInformation.UnderlyingObjectType = FileSystemObjectType.Folder;
                    listItemCreationInformation.LeafName = text.Trim();
                    string fullPath = this.GetFullPath(byId, sParentFolderPath);
                    if (!string.IsNullOrEmpty(sParentFolderPath))
                    {
                        listItemCreationInformation.FolderUrl = Utils.JoinUrl(byId.RootFolder.ServerRelativeUrl, sParentFolderPath);
                    }
                    byId.Context.Load<FieldCollection>(byId.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                    {
                        (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                        {
                            (Field field) => field.TypeAsString,
                            (Field field) => field.InternalName,
                            (Field field) => field.SchemaXml,
                            (Field field) => (object)field.ReadOnlyField,
                            (Field field) => (object)field.Required,
                            (Field field) => (object)field.FieldTypeKind,
                            (Field field) => field.DefaultValue
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    uint maxItemsPerThrottledOperation = this.GetMaxItemsPerThrottledOperation();
                    if ((long)byId.ItemCount >= (long)((ulong)maxItemsPerThrottledOperation))
                    {
                        listItem = this.GetFolderByUrl(clientContext, text, fullPath, byId, false);
                    }
                    else
                    {
                        CamlQuery camlQuery = new CamlQuery();
                        camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<Query>").Append("<Where><And>").Append("<Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">1</Value></Eq>").AppendFormat("<Eq><FieldRef Name=\"FileLeafRef\"/><Value Type=\"Text\">{0}</Value></Eq>", text).Append("</And></Where>").Append("</Query>").Append("</View>").ToString();
                        if (!string.IsNullOrEmpty(listItemCreationInformation.FolderUrl))
                        {
                            camlQuery.FolderServerRelativeUrl = listItemCreationInformation.FolderUrl;
                        }
                        ListItemCollection items = byId.GetItems(camlQuery);
                        clientContext.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                        {
                            (ListItemCollection folders) => folders.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem folder3) => (object)folder3.Id
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (items.Count == 1)
                        {
                            listItem = items[0];
                        }
                    }
                    if (overwrite && listItem != null)
                    {
                        listItem.DeleteObject();
                        listItem = null;
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    if (!overwrite && listItem != null)
                    {
                        folder = this.GetFolder(sListId, text, fullPath, byId, maxItemsPerThrottledOperation);
                    }
                    else
                    {
                        if (listItem == null)
                        {
                            listItem = byId.AddItem(listItemCreationInformation);
                            if (byId.Fields.Any((Field f) => f.InternalName == "Title"))
                            {
                                listItem["Title"] = listItemCreationInformation.LeafName;
                                listItem.Update();
                            }
                            string text2 = (xmlNode.Attributes["HTML_x0020_File_x0020_Type"] != null) ? xmlNode.Attributes["HTML_x0020_File_x0020_Type"].Value : string.Empty;
                            if (text2.Equals("SharePoint.DocumentSet", System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                ContentType documentSetContentType = this.GetDocumentSetContentType(clientContext, byId, xmlNode);
                                listItem["ContentTypeId"] = documentSetContentType.Id.ToString();
                                listItem.Update();
                                CSOMAdapter.CallExecuteQuery(listItem.Context, this);
                            }
                            else if (xmlNode.Attributes["ContentTypeId"] != null)
                            {
                                listItem["ContentTypeId"] = xmlNode.Attributes["ContentTypeId"].Value;
                                listItem.Update();
                                CSOMAdapter.CallExecuteQuery(listItem.Context, this);
                            }
                            this.UpdateItemMetadata(byId, null, listItem, xmlNode, false);
                            listItem.Update();
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        folder = this.GetFolder(sListId, text, fullPath, byId, maxItemsPerThrottledOperation);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return folder;
        }

        public string AddFolderToFolder(string sFolderXML)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sFolderXML);
                    Web web = clientContext.Web;
                    Folder folder = null;
                    try
                    {
                        folder = web.GetFolderByServerRelativeUrl(xmlNode.Attributes["ParentFolderPath"].Value);
                        clientContext.Load<Folder>(folder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        throw new System.Exception("Parent folder not found.");
                    }
                    Folder folder2 = folder.Folders.Add(xmlNode.Attributes["Url"].Value);
                    clientContext.Load<Folder>(folder2, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
                    {
                        (Folder newFolder) => newFolder.Name,
                        (Folder newFolder) => newFolder.ServerRelativeUrl,
                        (Folder newFolder) => newFolder.Properties
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    CSOMAdapter.AddFolderToXml(xWriter, folder2);
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string AddFileToFolder(string sFileXML, byte[] fileContents, AddDocumentOptions Options)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Xml.XmlNode node = XmlUtility.StringToXmlNode(sFileXML);
                    StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(this, node.GetAttributeValueAsString("Url"));
                    using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(fileContents))
                    {
                        this.SaveBinaryDirectWithRetries(clientContext, standardizedUrl.ServerRelative, memoryStream, true);
                    }
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(standardizedUrl.ServerRelative);
                    clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File f) => f.Author,
                        (Microsoft.SharePoint.Client.File f) => (object)f.CustomizedPageStatus,
                        (Microsoft.SharePoint.Client.File f) => f.ModifiedBy,
                        (Microsoft.SharePoint.Client.File f) => f.Name,
                        (Microsoft.SharePoint.Client.File f) => (object)f.TimeCreated,
                        (Microsoft.SharePoint.Client.File f) => (object)f.TimeLastModified,
                        (Microsoft.SharePoint.Client.File f) => f.ServerRelativeUrl
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    this.AddFileToXml(xWriter, fileByServerRelativeUrl);
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private Microsoft.SharePoint.Client.File AddFileToFolder(ClientContext clientContext, Folder folder, string sServerRelativeUrl, byte[] fileContents, SharePointAdapter callingAdapter)
        {
            Site site = clientContext.Site;
            clientContext.Load<Site>(site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
            {
                (Site s) => (object)s.MaxItemsPerThrottledOperation
            });
            clientContext.Load<Folder>(folder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
            {
                (Folder f) => (object)f.ItemCount
            });
            CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
            if (this.IsSaveBinaryDirectSupportedFile(sServerRelativeUrl))
            {
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(fileContents))
                {
                    this.SaveBinaryDirectWithRetries(clientContext, sServerRelativeUrl, memoryStream, true);
                }
                return this.GetTargetFileWithAllListItemFields(clientContext, sServerRelativeUrl);
            }
            FileCreationInformation fileCreationInformation = new FileCreationInformation();
            fileCreationInformation.Content = fileContents;
            fileCreationInformation.Url = sServerRelativeUrl;
            fileCreationInformation.Overwrite = true;
            Microsoft.SharePoint.Client.File file = folder.Files.Add(fileCreationInformation);
            if (file != null)
            {
                clientContext.Load<ListItem>(file.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
            }
            CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
            return file;
        }

        private static string GetUpdatedVideoAssetUrl(string fileUrl)
        {
            string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(fileUrl);
            string fileName = System.IO.Path.GetFileName(fileUrl);
            string text = fileUrl.Substring(0, fileUrl.LastIndexOf("/"));
            return UrlUtils.ConcatUrls(new string[]
            {
                text,
                fileNameWithoutExtension,
                fileName
            });
        }

        private void SaveBinaryDirectWithRetries(ClientContext ctx, string serverRelativeUrl, System.IO.MemoryStream ms, bool overwrite)
        {
            int num = 0;
            do
            {
                try
                {
                    Microsoft.SharePoint.Client.File.SaveBinaryDirect(ctx, serverRelativeUrl, ms, overwrite);
                    break;
                }
                catch (System.Net.WebException ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    num++;
                    if (num > AdapterConfigurationVariables.CSOMDocumentRetriesNumber)
                    {
                        throw;
                    }
                }
                if (AdapterConfigurationVariables.CSOMDocumentRetriesDelay > 0)
                {
                    System.Threading.Thread.Sleep(AdapterConfigurationVariables.CSOMDocumentRetriesDelay);
                }
            }
            while (num <= AdapterConfigurationVariables.CSOMDocumentRetriesNumber);
        }

        public string DeleteFolder(string sListID, int iListItemID, string sFolder)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List l) => l.RootFolder
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    string fullPath = this.GetFullPath(byId, sFolder);
                    Folder folder = null;
                    try
                    {
                        folder = web.GetFolderByServerRelativeUrl(fullPath);
                        clientContext.Load<Folder>(folder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        folder = null;
                    }
                    if (folder != null)
                    {
                        folder.DeleteObject();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void CheckOutFile(Microsoft.SharePoint.Client.File file)
        {
            for (int i = 0; i < 5; i++)
            {
                try
                {
                    file.CheckOut();
                    CSOMAdapter.CallExecuteQuery(file.Context, this);
                    break;
                }
                catch (ServerException ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (i >= 4)
                    {
                        throw ex;
                    }
                    System.Threading.Thread.Sleep(50);
                }
            }
        }

        private void CheckInFile(Microsoft.SharePoint.Client.File targetFile, List parentList, string sCheckinComments, CheckinType checkinType, bool bAdding, string sVersionString, SharePointAdapter callingAdapter)
        {
            if (targetFile.CheckOutType == CheckOutType.None)
            {
                return;
            }
            if (!parentList.EnableVersioning)
            {
                targetFile.CheckIn(sCheckinComments, checkinType);
                return;
            }
            if (!bAdding)
            {
                targetFile.CheckIn(sCheckinComments, checkinType);
                return;
            }
            targetFile.Context.Load<FileVersionCollection>(targetFile.Versions, new System.Linq.Expressions.Expression<System.Func<FileVersionCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(targetFile.Context, callingAdapter);
            FileVersion fileVersion = targetFile.Versions[0];
            string versionLabel = fileVersion.VersionLabel;
            if (sVersionString == versionLabel || (!parentList.EnableMinorVersions && sVersionString.StartsWith("0.") && versionLabel == "1.0"))
            {
                targetFile.CheckIn(sCheckinComments, CheckinType.OverwriteCheckIn);
                return;
            }
            targetFile.CheckIn(sCheckinComments, checkinType);
            targetFile.Versions.DeleteByID(fileVersion.ID);
        }

        private void CheckInFile(Microsoft.SharePoint.Client.File file, string sCheckInComments, CheckinType checkInType)
        {
            for (int i = 0; i < 5; i++)
            {
                try
                {
                    file.CheckIn(sCheckInComments, checkInType);
                    CSOMAdapter.CallExecuteQuery(file.Context, this);
                    break;
                }
                catch (ServerException ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (i >= 4)
                    {
                        throw ex;
                    }
                    System.Threading.Thread.Sleep(50);
                }
            }
        }

        private System.Collections.Generic.List<System.Xml.XmlNode> GetFieldSchemaNodes(System.Xml.XmlNode listXML, List spList)
        {
            System.Collections.Generic.List<System.Xml.XmlNode> list = new System.Collections.Generic.List<System.Xml.XmlNode>();
            if (listXML != null)
            {
                System.Collections.IEnumerator enumerator = listXML.SelectNodes(".//Field").GetEnumerator();
                while (enumerator.MoveNext())
                {
                    System.Xml.XmlNode item = (System.Xml.XmlNode)enumerator.Current;
                    list.Add(item);
                }
                return list;
            }
            foreach (Field current in spList.Fields)
            {
                list.Add(XmlUtility.StringToXmlNode(current.SchemaXml));
            }
            return list;
        }

        private System.Xml.XmlNode GetFieldSchemaNode(string internalName, string displayName, System.Xml.XmlNode listXml, List spList, ClientRuntimeContext ctx, System.Xml.XmlNamespaceManager xmlNameSpaceManager = null)
        {
            if (listXml != null)
            {
                System.Xml.XmlNode xmlNode;
                if (xmlNameSpaceManager == null)
                {
                    xmlNode = listXml.SelectSingleNode(string.Format("//List/Fields/Field[@Name=\"{0}\"]", internalName));
                    if (xmlNode == null)
                    {
                        xmlNode = listXml.SelectSingleNode(string.Format("//List/Fields/Field[@DisplayName=\"{0}\"]", displayName));
                    }
                }
                else
                {
                    xmlNode = listXml.SelectSingleNode(string.Format("//tns:List/tns:Fields/tns:Field[@Name=\"{0}\"]", internalName), xmlNameSpaceManager);
                    if (xmlNode == null)
                    {
                        xmlNode = listXml.SelectSingleNode(string.Format("//tns:List/tns:Fields/tns:Field[@DisplayName=\"{0}\"]", displayName), xmlNameSpaceManager);
                    }
                }
                if (xmlNode == null)
                {
                    xmlNode = this.GetSourceListFieldByName(internalName, displayName, spList, ctx);
                }
                return xmlNode;
            }
            return this.GetSourceListFieldByName(internalName, displayName, spList, ctx);
        }

        private System.Xml.XmlNode GetSourceListFieldByName(string internalName, string displayName, List spList, ClientRuntimeContext ctx)
        {
            ctx.Load<FieldCollection>(spList.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
            {
                (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                {
                    (Field field) => field.TypeAsString,
                    (Field field) => field.InternalName,
                    (Field field) => field.SchemaXml,
                    (Field field) => (object)field.ReadOnlyField,
                    (Field field) => (object)field.Required,
                    (Field field) => (object)field.FieldTypeKind,
                    (Field field) => field.DefaultValue
                })
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            Field fieldByNames = CSOMAdapter.GetFieldByNames(spList.Fields, displayName, internalName);
            if (fieldByNames == null)
            {
                return null;
            }
            return XmlUtility.StringToXmlNode(fieldByNames.SchemaXml);
        }

        private bool IsSaveBinaryDirectSupportedFile(string serverRelativeURL)
        {
            string[] array = new string[]
            {
                ".xoml",
                ".xoml.rules",
                ".js"
            };
            bool result = true;
            string[] array2 = array;
            for (int i = 0; i < array2.Length; i++)
            {
                string value = array2[i];
                if (serverRelativeURL.EndsWith(value, System.StringComparison.InvariantCultureIgnoreCase))
                {
                    result = false;
                    break;
                }
            }
            return result;
        }

        private void LoadDataForListItemVersionIncrementing(ListItem item)
        {
            item.Context.Load<ListItem>(item, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
            {
                (ListItem i) => i["Modified"],
                (ListItem i) => i["_UIVersionString"],
                (ListItem i) => i["FileRef"]
            });
        }

        private void LoadDataForAddListItemReadBack(ListItem item, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> requestedFields)
        {
            using (System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>.Enumerator enumerator = requestedFields.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    System.Collections.Generic.KeyValuePair<string, string> field = enumerator.Current;
                    item.Context.Load<ListItem>(item, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem i) => i[field.Key]
                    });
                }
            }
            item.Context.Load<ListItem>(item, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
            {
                (ListItem i) => (object)i.HasUniqueRoleAssignments
            });
            item.Context.Load<ListItem>(item, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
            {
                (ListItem i) => (object)i.Id
            });
        }

        public string AddFolderOptimistically(System.Guid listId, string listName, string folderPath, string folderXml, AddFolderOptions options, ref FieldsLookUp fieldsLookupCache)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    ListItem listItem = null;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(folderXml);
                    System.Xml.XmlAttribute xmlAttribute = xmlDocument.DocumentElement.Attributes["FileLeafRef"];
                    if (xmlAttribute == null)
                    {
                        throw new System.ArgumentException("FileLeafRef cannot be missing");
                    }
                    string value = xmlAttribute.Value;
                    List byId = clientContext.Web.Lists.GetById(listId);
                    System.Uri uri = new System.Uri(string.Concat(new string[]
                    {
                        this.Url.Trim(new char[]
                        {
                            '/',
                            '\\',
                            ' '
                        }),
                        "/",
                        listName,
                        "/",
                        folderPath.Trim(new char[]
                        {
                            '/',
                            '\\',
                            ' '
                        })
                    }));
                    string text = uri.LocalPath.TrimEnd(new char[]
                    {
                        '/'
                    });
                    CamlQuery query = new CamlQuery
                    {
                        ViewXml = new System.Text.StringBuilder().Append("<View>").Append("<Query>").Append("<Where><And>").Append("<Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">1</Value></Eq>").AppendFormat("<Eq><FieldRef Name=\"FileLeafRef\"/><Value Type=\"Text\">{0}</Value></Eq>", value).Append("</And></Where>").Append("</Query>").Append("</View>").ToString(),
                        FolderServerRelativeUrl = text
                    };
                    ListItemCollection items = byId.GetItems(query);
                    clientContext.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                    {
                        (ListItemCollection foldersDel) => foldersDel.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                        {
                            (ListItem folderDel) => (object)folderDel.Id
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    listItem = ((items.Count > 0) ? items[0] : null);
                    if (options.Overwrite && listItem != null)
                    {
                        listItem.DeleteObject();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        listItem = null;
                    }
                    if (listItem == null)
                    {
                        ListItemCreationInformation parameters = new ListItemCreationInformation
                        {
                            UnderlyingObjectType = FileSystemObjectType.Folder,
                            LeafName = value,
                            FolderUrl = text
                        };
                        listItem = byId.AddItem(parameters);
                    }
                    if (fieldsLookupCache == null)
                    {
                        FieldsLookUp fieldsLookUp = new FieldsLookUp();
                        clientContext.Load<FieldCollection>(byId.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                        {
                            (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                            {
                                (Field field) => field.InternalName,
                                (Field field) => field.SchemaXml
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        foreach (Field current in byId.Fields)
                        {
                            if (!fieldsLookUp.ContainsKey(current.InternalName))
                            {
                                fieldsLookUp.Add(current.InternalName, current.SchemaXml);
                            }
                        }
                        fieldsLookupCache = fieldsLookUp;
                    }
                    bool flag = fieldsLookupCache.ContainsKey("_ModerationStatus") && CSOMAdapter.IsTargetModerationStatusRequired(fieldsLookupCache["_ModerationStatus"]);
                    foreach (System.Xml.XmlAttribute xmlAttribute2 in xmlDocument.DocumentElement.Attributes)
                    {
                        if (!string.Equals("Id", xmlAttribute2.Name, System.StringComparison.InvariantCultureIgnoreCase) && !string.Equals("ContentType", xmlAttribute2.Name, System.StringComparison.InvariantCultureIgnoreCase) && !string.Equals("_ModerationStatus", xmlAttribute2.Name, System.StringComparison.InvariantCultureIgnoreCase) && fieldsLookupCache.ContainsKey(xmlAttribute2.Name))
                        {
                            System.Xml.XmlDocument xmlDocument2 = new System.Xml.XmlDocument();
                            xmlDocument2.LoadXml(fieldsLookupCache[xmlAttribute2.Name]);
                            System.Xml.XmlNode documentElement = xmlDocument2.DocumentElement;
                            System.Xml.XmlAttribute xmlAttribute3 = documentElement.Attributes["Type"];
                            listItem[xmlAttribute2.Name] = this.CastStringToFieldType(xmlAttribute2.Value, xmlAttribute3.Value, documentElement);
                        }
                    }
                    listItem.Update();
                    clientContext.Load<ListItem>(listItem, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem temp) => (object)temp.Id,
                        (ListItem temp) => temp["FileLeafRef"],
                        (ListItem temp) => temp["FileDirRef"],
                        (ListItem temp) => temp["ContentTypeId"],
                        (ListItem temp) => temp["Author"],
                        (ListItem temp) => temp["Created"],
                        (ListItem temp) => temp["Editor"],
                        (ListItem temp) => temp["Modified"]
                    });
                    if (flag)
                    {
                        clientContext.Load<ListItem>(listItem, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                        {
                            (ListItem f) => f["_ModerationStatus"]
                        });
                        listItem["_ModerationStatus"] = 0;
                        listItem.Update();
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter();
                    using (System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter))
                    {
                        xmlTextWriter.WriteStartElement("Folder");
                        xmlTextWriter.WriteAttributeString("ID", listItem.Id.ToString(System.Globalization.CultureInfo.InvariantCulture));
                        xmlTextWriter.WriteAttributeString("FileLeafRef", listItem["FileLeafRef"].ToString());
                        xmlTextWriter.WriteAttributeString("FileDirRef", listItem["FileDirRef"].ToString());
                        xmlTextWriter.WriteAttributeString("ContentTypeId", listItem["ContentTypeId"].ToString());
                        xmlTextWriter.WriteAttributeString("Editor", listItem["Editor"].ToString());
                        xmlTextWriter.WriteAttributeString("Author", listItem["Author"].ToString());
                        xmlTextWriter.WriteAttributeString("Created", Utils.FormatDate((System.DateTime)listItem["Created"]));
                        xmlTextWriter.WriteAttributeString("Modified", Utils.FormatDate((System.DateTime)listItem["Modified"]));
                        xmlTextWriter.WriteEndElement();
                    }
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string AddDocumentOptimistically(System.Guid listId, string listName, string folderPath, string fileXml, byte[] fileContents, AddDocumentOptions options, ref FieldsLookUp fieldsLookupCache)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                ClientContext clientContext = this.GetClientContext(this, false);
                using (clientContext)
                {
                    Microsoft.SharePoint.Client.File file = null;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(fileXml);
                    System.Xml.XmlAttribute xmlAttribute = xmlDocument.DocumentElement.Attributes["FileLeafRef"];
                    if (xmlAttribute == null)
                    {
                        throw new System.ArgumentException("FileLeafRef cannot be missing");
                    }
                    string value = xmlAttribute.Value;
                    System.Uri uri = new System.Uri(string.Concat(new string[]
                    {
                        this.Url.Trim(new char[]
                        {
                            '/',
                            '\\',
                            ' '
                        }),
                        "/",
                        listName,
                        "/",
                        folderPath.Trim(new char[]
                        {
                            '/',
                            '\\',
                            ' '
                        })
                    }));
                    string text = uri.LocalPath.TrimEnd(new char[]
                    {
                        '/'
                    }) + "/" + value;
                    if (fileContents.LongLength > 1048576L)
                    {
                        using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(fileContents))
                        {
                            Microsoft.SharePoint.Client.File.SaveBinaryDirect(clientContext, text, memoryStream, options.Overwrite);
                            file = clientContext.Web.GetFileByServerRelativeUrl(text);
                            goto IL_1A9;
                        }
                    }
                    FileCreationInformation parameters = new FileCreationInformation
                    {
                        Overwrite = options.Overwrite,
                        Url = text,
                        Content = fileContents
                    };
                    Folder folderByServerRelativeUrl = clientContext.Web.GetFolderByServerRelativeUrl(uri.AbsolutePath);
                    file = folderByServerRelativeUrl.Files.Add(parameters);
                    IL_1A9:
                    if (fieldsLookupCache == null)
                    {
                        FieldsLookUp fieldsLookUp = new FieldsLookUp();
                        List byId = clientContext.Web.Lists.GetById(listId);
                        clientContext.Load<FieldCollection>(byId.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                        {
                            (FieldCollection fields) => fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                            {
                                (Field field) => field.InternalName,
                                (Field field) => field.SchemaXml
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        foreach (Field current in byId.Fields)
                        {
                            if (!fieldsLookUp.ContainsKey(current.InternalName))
                            {
                                fieldsLookUp.Add(current.InternalName, current.SchemaXml);
                            }
                        }
                        fieldsLookupCache = fieldsLookUp;
                    }
                    bool flag = fieldsLookupCache.ContainsKey("_ModerationStatus") && CSOMAdapter.IsTargetModerationStatusRequired(fieldsLookupCache["_ModerationStatus"]);
                    foreach (System.Xml.XmlAttribute xmlAttribute2 in xmlDocument.DocumentElement.Attributes)
                    {
                        if (!string.Equals("Id", xmlAttribute2.Name, System.StringComparison.InvariantCultureIgnoreCase) && !string.Equals("ContentType", xmlAttribute2.Name, System.StringComparison.InvariantCultureIgnoreCase) && !string.Equals("_ModerationStatus", xmlAttribute2.Name, System.StringComparison.InvariantCultureIgnoreCase) && fieldsLookupCache.ContainsKey(xmlAttribute2.Name))
                        {
                            System.Xml.XmlDocument xmlDocument2 = new System.Xml.XmlDocument();
                            xmlDocument2.LoadXml(fieldsLookupCache[xmlAttribute2.Name]);
                            System.Xml.XmlNode documentElement = xmlDocument2.DocumentElement;
                            System.Xml.XmlAttribute xmlAttribute3 = documentElement.Attributes["Type"];
                            file.ListItemAllFields[xmlAttribute2.Name] = this.CastStringToFieldType(xmlAttribute2.Value, xmlAttribute3.Value, documentElement);
                        }
                    }
                    file.ListItemAllFields.Update();
                    clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File temp) => (object)temp.ListItemAllFields.Id,
                        (Microsoft.SharePoint.Client.File temp) => temp.Name,
                        (Microsoft.SharePoint.Client.File temp) => (object)temp.TimeLastModified
                    });
                    if (flag)
                    {
                        clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                        {
                            (Microsoft.SharePoint.Client.File f) => f.ListItemAllFields["_ModerationStatus"]
                        });
                        file.ListItemAllFields["_ModerationStatus"] = 0;
                        file.ListItemAllFields.Update();
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter();
                    using (System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter))
                    {
                        xmlTextWriter.WriteStartElement("ListItems");
                        xmlTextWriter.WriteStartElement("ListItem");
                        xmlTextWriter.WriteAttributeString("ID", file.ListItemAllFields.Id.ToString(System.Globalization.CultureInfo.InvariantCulture));
                        xmlTextWriter.WriteAttributeString("FileDirRef", text.Substring(0, text.LastIndexOf('/')));
                        xmlTextWriter.WriteAttributeString("FileLeafRef", file.Name);
                        xmlTextWriter.WriteAttributeString("Modified", Utils.FormatDate(file.TimeLastModified));
                        xmlTextWriter.WriteEndElement();
                        xmlTextWriter.WriteEndElement();
                    }
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private static bool IsTargetModerationStatusRequired(string fieldLookupValue)
        {
            bool result = false;
            if (fieldLookupValue != null)
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(fieldLookupValue);
                if (xmlDocument.DocumentElement != null)
                {
                    string text = (xmlDocument.DocumentElement.Attributes["Required"] != null) ? xmlDocument.DocumentElement.Attributes["Required"].Value : "";
                    bool.TryParse(text.ToLower(), out result);
                }
            }
            return result;
        }

        public string GetLists()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    xmlTextWriter.WriteStartElement("Lists");
                    Web web = clientContext.Web;
                    ListCollection lists = web.Lists;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web w) => (object)w.Id,
                        (Web w) => w.ServerRelativeUrl,
                        (Web w) => w.Url
                    });
                    clientContext.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
                    {
                        (ListCollection listsu) => listsu.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List l) => (object)l.BaseTemplate,
                            (List l) => (object)l.BaseType,
                            (List l) => (object)l.Created,
                            (List l) => l.Description,
                            (List l) => (object)l.Hidden,
                            (List l) => (object)l.Id,
                            (List l) => (object)l.ItemCount,
                            (List l) => (object)l.LastItemModifiedDate,
                            (List l) => l.RootFolder,
                            (List l) => (object)l.TemplateFeatureId,
                            (List l) => l.Title
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    foreach (List current in lists)
                    {
                        try
                        {
                            this.GetListXML(clientContext, web, current, xmlTextWriter, false);
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        }
                    }
                }
                xmlTextWriter.WriteEndElement();
                result = stringWriter.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetList(string sListID)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(stringWriter);
                using (ClientContext clientContext = this.GetClientContext(this, false))
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    web.Context.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List l) => (object)l.AllowContentTypes,
                        (List l) => (object)l.BaseTemplate,
                        (List l) => (object)l.BaseType,
                        (List l) => (object)l.ContentTypesEnabled,
                        (List l) => (object)l.Created,
                        (List l) => l.Description,
                        (List l) => l.DocumentTemplateUrl,
                        (List l) => (object)l.DraftVersionVisibility,
                        (List l) => (object)l.EnableAttachments,
                        (List l) => (object)l.EnableFolderCreation,
                        (List l) => (object)l.EnableMinorVersions,
                        (List l) => (object)l.EnableModeration,
                        (List l) => (object)l.EnableVersioning,
                        (List l) => l.Fields,
                        (List l) => (object)l.ForceCheckout,
                        (List l) => (object)l.HasExternalDataSource,
                        (List l) => (object)l.HasUniqueRoleAssignments,
                        (List l) => (object)l.Hidden,
                        (List l) => (object)l.Id,
                        (List l) => (object)l.ItemCount,
                        (List l) => (object)l.LastItemModifiedDate,
                        (List l) => (object)l.MultipleDataList,
                        (List l) => (object)l.NoCrawl,
                        (List l) => (object)l.OnQuickLaunch,
                        (List l) => (object)l.TemplateFeatureId,
                        (List l) => l.Title,
                        (List l) => l.Views,
                        (List l) => (object)l.IsCatalog
                    });
                    web.Context.Load<Folder>(byId.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
                    {
                        (Folder folder) => folder.Name,
                        (Folder folder) => folder.ServerRelativeUrl,
                        (Folder folder) => folder.WelcomePage,
                        (Folder folder) => folder.Properties
                    });
                    web.Context.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web7) => web7.ServerRelativeUrl,
                        (Web web8) => (object)web8.Id,
                        (Web web9) => web9.Url
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.GetListXML(clientContext, web, byId, xmlWriter, true);
                }
                result = stringWriter.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetListXML(ClientContext ctx, Web parentWeb, List list, System.Xml.XmlWriter xmlWriter, bool bFullXML)
        {
            if (list.Title == "wfsvc" && list.BaseTemplate.GetHashCode() == 4501)
            {
                return;
            }
            xmlWriter.WriteStartElement("List");
            xmlWriter.WriteAttributeString("ID", list.Id.ToString());
            xmlWriter.WriteAttributeString("Name", list.RootFolder.Name);
            xmlWriter.WriteAttributeString("Title", list.Title);
            xmlWriter.WriteAttributeString("BaseTemplate", System.Convert.ToInt32(list.BaseTemplate).ToString());
            xmlWriter.WriteAttributeString("BaseType", System.Convert.ToInt32(list.BaseType).ToString());
            xmlWriter.WriteAttributeString("DirName", this.GetDirName(list.RootFolder));
            xmlWriter.WriteAttributeString("ItemCount", list.ItemCount.ToString());
            string value = Utils.FormatDate(Utils.MakeTrueUTCDateTime(list.Created));
            xmlWriter.WriteAttributeString("Created", value);
            string value2 = Utils.FormatDate(Utils.MakeTrueUTCDateTime(list.LastItemModifiedDate));
            xmlWriter.WriteAttributeString("Modified", value2);
            xmlWriter.WriteAttributeString("Hidden", list.Hidden.ToString());
            xmlWriter.WriteAttributeString("FeatureId", list.TemplateFeatureId.ToString());
            if (bFullXML)
            {
                System.Xml.XmlNode xmlNode = null;
                System.Collections.Hashtable hashtable = new System.Collections.Hashtable();
                System.Xml.XmlNode xmlNode2 = null;
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
                try
                {
                    this.NWSAdapter.GetListPropertiesForCSOM(list.Id.ToString(), out xmlNode, out hashtable, out xmlNode2);
                }
                finally
                {
                    if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                    {
                        this.CookieManager.AquireCookieLock();
                    }
                }
                xmlWriter.WriteAttributeString("Description", list.Description);
                xmlWriter.WriteAttributeString("HasUniquePermissions", list.HasUniqueRoleAssignments.ToString());
                if (list.BaseType != BaseType.DocumentLibrary && list.BaseType != BaseType.Survey)
                {
                    xmlWriter.WriteAttributeString("EnableAttachments", list.EnableAttachments.ToString());
                }
                xmlWriter.WriteAttributeString("EnableModeration", list.EnableModeration.ToString());
                xmlWriter.WriteAttributeString("EnableVersioning", list.EnableVersioning.ToString());
                if (list.EnableVersioning)
                {
                    xmlWriter.WriteAttributeString("EnableMinorVersions", list.EnableMinorVersions.ToString());
                    if (xmlNode != null && xmlNode.Attributes != null)
                    {
                        xmlWriter.WriteAttributeString("MajorVersionLimit", (xmlNode.Attributes["MajorVersionLimit"] == null || string.IsNullOrEmpty(xmlNode.Attributes["MajorVersionLimit"].Value)) ? "0" : xmlNode.Attributes["MajorVersionLimit"].Value);
                        if (list.EnableMinorVersions || list.EnableModeration)
                        {
                            xmlWriter.WriteAttributeString("MajorWithMinorVersionsLimit", (xmlNode.Attributes["MajorWithMinorVersionsLimit"] == null || string.IsNullOrEmpty(xmlNode.Attributes["MajorWithMinorVersionsLimit"].Value)) ? "0" : xmlNode.Attributes["MajorWithMinorVersionsLimit"].Value);
                        }
                    }
                }
                System.Enum.GetValues(typeof(BaseType));
                System.Enum.GetUnderlyingType(typeof(BaseType));
                xmlWriter.WriteAttributeString("DraftVersionVisibility", ((int)list.DraftVersionVisibility).ToString());
                xmlWriter.WriteAttributeString("OnQuickLaunch", list.OnQuickLaunch.ToString());
                if (list.BaseType == BaseType.DocumentLibrary)
                {
                    xmlWriter.WriteAttributeString("ForceCheckout", list.ForceCheckout.ToString());
                    xmlWriter.WriteAttributeString("IsCatalog", System.Convert.ToString(list.IsCatalog));
                    if (xmlNode != null)
                    {
                        xmlWriter.WriteAttributeString("BrowserEnabledDocuments", bool.Parse(((System.Convert.ToInt64(xmlNode.Attributes["Flags"].Value) & 268435456L) <= 0L).ToString()) ? "PreferClient" : "Browser");
                        if (xmlNode.Attributes["SendToLocation"] != null)
                        {
                            string innerText = xmlNode.Attributes["SendToLocation"].InnerText;
                            if (innerText.IndexOf("|") > 0)
                            {
                                xmlWriter.WriteAttributeString("SendToLocationName", innerText.Substring(0, innerText.IndexOf("|")));
                                if (innerText.IndexOf("|") + 1 <= innerText.Length - 1)
                                {
                                    xmlWriter.WriteAttributeString("SendToLocationUrl", innerText.Substring(innerText.IndexOf("|") + 1));
                                }
                            }
                            else
                            {
                                xmlWriter.WriteAttributeString("SendToLocationName", "");
                                xmlWriter.WriteAttributeString("SendToLocationUrl", "");
                            }
                        }
                    }
                    if (list.BaseTemplate == 101 || list.BaseTemplate == 115)
                    {
                        string documentTemplateUrl = list.DocumentTemplateUrl;
                        xmlWriter.WriteAttributeString("DocTemplateUrl", string.IsNullOrEmpty(documentTemplateUrl) ? "" : ("/" + documentTemplateUrl.TrimStart(new char[]
                        {
                            '/'
                        })));
                    }
                }
                xmlWriter.WriteAttributeString("AllowContentTypes", list.AllowContentTypes.ToString());
                xmlWriter.WriteAttributeString("ContentTypesEnabled", list.ContentTypesEnabled.ToString());
                xmlWriter.WriteAttributeString("Folders", list.EnableFolderCreation.ToString());
                xmlWriter.WriteAttributeString("NoCrawl", list.NoCrawl.ToString());
                xmlWriter.WriteAttributeString("MultipleDataList", list.MultipleDataList.ToString());
                if (xmlNode != null && xmlNode.Attributes != null)
                {
                    if (xmlNode.Attributes["AllowMultiResponses"] != null)
                    {
                        string value3 = xmlNode.Attributes["AllowMultiResponses"].Value;
                        if (!string.IsNullOrEmpty(value3))
                        {
                            xmlWriter.WriteAttributeString("AllowMultiResponses", value3);
                        }
                    }
                    if (xmlNode.Attributes["ShowUser"] != null)
                    {
                        string value4 = xmlNode.Attributes["ShowUser"].Value;
                        if (!string.IsNullOrEmpty(value4))
                        {
                            xmlWriter.WriteAttributeString("ShowUser", value4);
                        }
                    }
                    if (xmlNode.Attributes["ReadSecurity"] != null)
                    {
                        string innerText2 = xmlNode.Attributes["ReadSecurity"].InnerText;
                        xmlWriter.WriteAttributeString("ReadSecurity", innerText2);
                    }
                    if (xmlNode.Attributes["WriteSecurity"] != null)
                    {
                        string innerText3 = xmlNode.Attributes["WriteSecurity"].InnerText;
                        xmlWriter.WriteAttributeString("WriteSecurity", innerText3);
                    }
                    if (xmlNode.Attributes["EmailAlias"] != null && !string.IsNullOrEmpty(xmlNode.Attributes["EmailAlias"].InnerText))
                    {
                        string innerText4 = xmlNode.Attributes["EmailAlias"].InnerText;
                        xmlWriter.WriteAttributeString("EmailAlias", innerText4);
                    }
                    if (xmlNode.Attributes["EnableAssignedToEmail"] != null)
                    {
                        string value5 = xmlNode.Attributes["EnableAssignedToEmail"].Value;
                        if (!string.IsNullOrEmpty(value5))
                        {
                            xmlWriter.WriteAttributeString("EnableAssignToEmail", value5);
                        }
                    }
                }
                if (hashtable != null)
                {
                    if (hashtable.Contains("emailattachmentfolders"))
                    {
                        xmlWriter.WriteAttributeString("EmailAttachmentFolder", hashtable["emailattachmentfolders"].ToString());
                    }
                    if (hashtable.Contains("emailoverwrite"))
                    {
                        xmlWriter.WriteAttributeString("EmailOverWrite", hashtable["emailoverwrite"].ToString());
                    }
                    if (hashtable.Contains("emailsaveoriginal"))
                    {
                        xmlWriter.WriteAttributeString("EmailSaveOriginal", hashtable["emailsaveoriginal"].ToString());
                    }
                    if (hashtable.Contains("emailsavemeetings"))
                    {
                        xmlWriter.WriteAttributeString("EmailSaveMeetings", hashtable["emailsavemeetings"].ToString());
                    }
                    if (hashtable.Contains("emailusesecurity"))
                    {
                        xmlWriter.WriteAttributeString("EmailUseSecurity", hashtable["emailusesecurity"].ToString());
                    }
                    if (hashtable.Contains("rss_ChannelTitle"))
                    {
                        xmlWriter.WriteAttributeString("RssChannelTitle", hashtable["rss_ChannelTitle"].ToString());
                    }
                    if (hashtable.Contains("rss_ChannelDescription"))
                    {
                        xmlWriter.WriteAttributeString("RssChannelDescription", hashtable["rss_ChannelDescription"].ToString());
                    }
                    if (hashtable.Contains("rss_LimitDescriptionLength"))
                    {
                        xmlWriter.WriteAttributeString("RssLimitDescriptionLength", hashtable["rss_LimitDescriptionLength"].ToString());
                    }
                    if (hashtable.Contains("rss_ChannelImageUrl"))
                    {
                        xmlWriter.WriteAttributeString("RssChannelImageUrl", hashtable["rss_ChannelImageUrl"].ToString());
                    }
                    if (hashtable.Contains("rss_ItemLimit"))
                    {
                        xmlWriter.WriteAttributeString("RssItemLimit", hashtable["rss_ItemLimit"].ToString());
                    }
                    if (hashtable.Contains("rss_DayLimit"))
                    {
                        xmlWriter.WriteAttributeString("RssDayLimit", hashtable["rss_DayLimit"].ToString());
                    }
                    if (hashtable.Contains("rss_DocumentAsEnclosure"))
                    {
                        xmlWriter.WriteAttributeString("RssDocumentAsEnclosure", hashtable["rss_DocumentAsEnclosure"].ToString());
                    }
                    if (hashtable.Contains("rss_DocumentAsLink"))
                    {
                        xmlWriter.WriteAttributeString("RssDocumentAsLink", hashtable["rss_DocumentAsLink"].ToString());
                    }
                }
                if (list.RootFolder.Properties.FieldValues.ContainsKey("TimelineDefaultView"))
                {
                    xmlWriter.WriteAttributeString("TimelineDefaultView", list.RootFolder.Properties["TimelineDefaultView"].ToString());
                }
                if (list.RootFolder.Properties.FieldValues.ContainsKey("Timeline_Timeline"))
                {
                    xmlWriter.WriteAttributeString("Timeline", list.RootFolder.Properties["Timeline_Timeline"].ToString());
                }
                xmlWriter.WriteAttributeString("WelcomePage", list.RootFolder.WelcomePage);
                bool flag;
                XmlUtility.GetBooleanAttributeFromXml(xmlNode.Attributes, "HasExternalDataSource", out flag);
                if (xmlNode2 != null && flag)
                {
                    this.WriteBCSProperties(xmlWriter, xmlNode2);
                }
                xmlWriter.WriteStartElement("Views");
                foreach (View current in list.Views)
                {
                    xmlWriter.WriteRaw(current.HtmlSchemaXml);
                }
                xmlWriter.WriteEndElement();
                this.WriteFieldsToXML(ctx, xmlWriter, parentWeb, list.Fields);
                if (list != null)
                {
                    ctx.Load<Folder>(list.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
                    {
                        (Folder l) => l.ContentTypeOrder
                    });
                    ContentType contentType;
                    ctx.Load<ContentTypeCollection>(list.ContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
                    {
                        (ContentTypeCollection ct) => ct.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                        {
                            (ContentType contentType1) => contentType1.Name,
                            (ContentType contentType2) => contentType2.Id
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                    xmlWriter.WriteStartElement("ContentTypeOrder");
                    System.Collections.Generic.IList<ContentTypeId> contentTypeOrder = list.RootFolder.ContentTypeOrder;
                    using (System.Collections.Generic.IEnumerator<ContentTypeId> enumerator2 = contentTypeOrder.GetEnumerator())
                    {
                        while (enumerator2.MoveNext())
                        {
                            ContentTypeId contentTypeID = enumerator2.Current;
                            contentType = list.ContentTypes.SingleOrDefault((ContentType ct) => ct.Id.ToString().Equals(contentTypeID.ToString(), System.StringComparison.InvariantCultureIgnoreCase));
                            xmlWriter.WriteStartElement("ContentTypeName");
                            xmlWriter.WriteAttributeString("Name", contentType.Name);
                            xmlWriter.WriteEndElement();
                        }
                    }
                    xmlWriter.WriteEndElement();
                }
            }
            xmlWriter.WriteEndElement();
        }

        public string GetListTemplates()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    clientContext.Load<ListTemplateCollection>(web.ListTemplates, new System.Linq.Expressions.Expression<System.Func<ListTemplateCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    ListTemplateCollection listTemplates = web.ListTemplates;
                    xmlTextWriter.WriteStartElement("ListTemplates");
                    foreach (ListTemplate current in listTemplates)
                    {
                        xmlTextWriter.WriteStartElement("ListTemplate");
                        xmlTextWriter.WriteAttributeString("Name", current.InternalName);
                        xmlTextWriter.WriteAttributeString("Type", current.ListTemplateTypeKind.ToString());
                        xmlTextWriter.WriteAttributeString("BaseType", ((int)current.BaseType).ToString());
                        xmlTextWriter.WriteAttributeString("OnQuickLaunch", current.OnQuickLaunch.ToString());
                        xmlTextWriter.WriteAttributeString("DisplayName", current.Name);
                        xmlTextWriter.WriteAttributeString("Description", current.Description);
                        xmlTextWriter.WriteAttributeString("Image", current.ImageUrl);
                        xmlTextWriter.WriteAttributeString("DocumentTemplate", "");
                        xmlTextWriter.WriteAttributeString("FeatureId", current.FeatureId.ToString());
                        xmlTextWriter.WriteAttributeString("Hidden", current.Hidden.ToString());
                        xmlTextWriter.WriteAttributeString("Unique", current.Unique.ToString());
                        xmlTextWriter.WriteAttributeString("FolderCreation", current.AllowsFolderCreation.ToString());
                        xmlTextWriter.WriteEndElement();
                    }
                    xmlTextWriter.WriteEndElement();
                    xmlTextWriter.Flush();
                    xmlTextWriter.Close();
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public static List GetListByName(Web web, string sName)
        {
            foreach (List current in web.Lists)
            {
                try
                {
                    if (current.RootFolder.Name == sName)
                    {
                        return current;
                    }
                }
                catch (ServerException ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (ex.ServerErrorCode != -2130575322)
                    {
                        throw ex;
                    }
                }
            }
            return null;
        }

        public static List GetListByTitle(Web web, string sTitle)
        {
            foreach (List current in web.Lists)
            {
                try
                {
                    if (current.Title == sTitle)
                    {
                        return current;
                    }
                }
                catch (ServerException ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (ex.ServerErrorCode != -2130575322)
                    {
                        throw ex;
                    }
                }
            }
            return null;
        }

        private static List GetListByID(Web web, System.Guid listID)
        {
            try
            {
                System.Linq.IQueryable<List> source = from list in web.Lists
                                                      where list.Id == listID
                                                      select list;
                if (source.Count<List>() > 0)
                {
                    return source.FirstOrDefault<List>();
                }
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.ServerErrorCode != -2130575322)
                {
                    throw ex;
                }
            }
            return null;
        }

        public string GetFields(string sListId, bool bGetAllAvailableFields)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    FieldCollection fieldCollection;
                    if (!string.IsNullOrEmpty(sListId))
                    {
                        fieldCollection = web.Lists.GetById(new System.Guid(sListId)).Fields;
                    }
                    else
                    {
                        fieldCollection = (bGetAllAvailableFields ? web.AvailableFields : web.Fields);
                    }
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web1) => (object)web1.Id,
                        (Web web2) => web2.Url,
                        (Web web3) => web3.ServerRelativeUrl
                    });
                    clientContext.Load<FieldCollection>(fieldCollection, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                    {
                        (FieldCollection fieldsCollection) => fieldsCollection.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                        {
                            (Field field) => (object)field.Id,
                            (Field field) => field.TypeAsString,
                            (Field field) => field.SchemaXml,
                            (Field field) => (object)field.Hidden
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.WriteFieldsToXML(clientContext, xmlWriter, web, fieldCollection);
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private static bool ContainsViewField(View view, string fieldRefName)
        {
            foreach (string current in view.ViewFields)
            {
                if (current == fieldRefName)
                {
                    return true;
                }
            }
            return false;
        }

        private static bool ContainsExtraField(string sViewFieldName, System.Collections.Generic.List<string> fieldRefNames)
        {
            return fieldRefNames.Contains(sViewFieldName);
        }

        private bool ViewFieldIsExplicit(string sViewFieldName, ViewFieldCollection viewFields)
        {
            bool result = false;
            string sXml = "<ViewFields>" + viewFields.SchemaXml + "</ViewFields>";
            System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sXml);
            string xpath = string.Format("//FieldRef[@Name='{0}']", sViewFieldName);
            System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode(xpath);
            if (xmlNode2 != null && xmlNode2.Attributes != null && xmlNode2.Attributes["Explicit"] != null && xmlNode2.Attributes["Explicit"].Value.ToString().ToUpper() == "TRUE")
            {
                result = true;
            }
            return result;
        }

        private void GetAllDayEventFields(List list, System.Xml.XmlNode listXml, System.Xml.XmlNode itemXml, out string sStartDate, out string sEndDate)
        {
            sStartDate = null;
            sEndDate = null;
            System.Xml.XmlNode xmlNode = null;
            string text = null;
            if (itemXml.Attributes == null)
            {
                return;
            }
            if (listXml != null)
            {
                xmlNode = listXml.SelectSingleNode("//Fields/Field[@Type=\"AllDayEvent\"]");
                if (xmlNode != null)
                {
                    text = xmlNode.Attributes["Name"].Value;
                }
            }
            else
            {
                Field field = null;
                foreach (Field current in list.Fields)
                {
                    if (current.FieldTypeKind == FieldType.AllDayEvent)
                    {
                        field = current;
                        break;
                    }
                }
                if (field != null)
                {
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(field.SchemaXml);
                    xmlNode = xmlDocument.DocumentElement;
                    text = field.InternalName;
                }
            }
            if (text == null)
            {
                return;
            }
            System.Xml.XmlAttribute xmlAttribute = itemXml.Attributes[text];
            if (xmlAttribute == null)
            {
                return;
            }
            bool flag;
            if (bool.TryParse(xmlAttribute.Value, out flag))
            {
                if (!flag)
                {
                    return;
                }
            }
            else if (xmlAttribute.Value != "1")
            {
                return;
            }
            System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode("//FieldRefs/FieldRef[@RefType=\"StartDate\"]");
            if (xmlNode2 != null && xmlNode2.Attributes != null && xmlNode2.Attributes["Name"] != null)
            {
                sStartDate = xmlNode2.Attributes["Name"].Value;
            }
            System.Xml.XmlNode xmlNode3 = xmlNode.SelectSingleNode("//FieldRefs/FieldRef[@RefType=\"EndDate\"]");
            if (xmlNode3 != null && xmlNode3.Attributes != null && xmlNode3.Attributes["Name"] != null)
            {
                sEndDate = xmlNode3.Attributes["Name"].Value;
            }
        }

        private bool SupportsEmbedding(Microsoft.SharePoint.Client.File wppFile, SharePointAdapter callingAdapter)
        {
            bool result;
            try
            {
                result = (this.GetRichTextEmbeddingField(wppFile, callingAdapter) != null);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = false;
            }
            return result;
        }

        private string GetRichTextEmbeddingField(Microsoft.SharePoint.Client.File wppFile, SharePointAdapter callingAdapter)
        {
            string result = null;
            wppFile.Context.Load<ListItem>(wppFile.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
            CSOMAdapter.CallExecuteQuery(wppFile.Context, callingAdapter);
            string[] fieldsThatSupportEmbedding = CSOMAdapter.FieldsThatSupportEmbedding;
            for (int i = 0; i < fieldsThatSupportEmbedding.Length; i++)
            {
                string text = fieldsThatSupportEmbedding[i];
                if (wppFile.ListItemAllFields.FieldValues.ContainsKey(text))
                {
                    result = text;
                    break;
                }
            }
            return result;
        }

        private object CastStringToFieldType(string sValue, Field field)
        {
            return this.CastStringToFieldType(sValue, field.InternalName, XmlUtility.StringToXmlNode(field.SchemaXml));
        }

        private object CastStringToFieldType(string sValue, string fieldType, System.Xml.XmlNode schemaXML)
        {
            switch (fieldType)
            {
                case "DateTime":
                    {
                        string text = null;
                        System.Globalization.CultureInfo[] array = new System.Globalization.CultureInfo[]
                        {
                        new System.Globalization.CultureInfo("en-US"),
                        new System.Globalization.CultureInfo("en-CA")
                        };
                        System.Globalization.CultureInfo[] array2 = array;
                        for (int i = 0; i < array2.Length; i++)
                        {
                            System.Globalization.CultureInfo provider = array2[i];
                            System.DateTime dt;
                            if (System.DateTime.TryParse(sValue, provider, System.Globalization.DateTimeStyles.None, out dt))
                            {
                                text = Utils.FormatDateToUTC(dt);
                                break;
                            }
                        }
                        if (!string.IsNullOrEmpty(text))
                        {
                            return Utils.ParseDateAsUtc(text);
                        }
                        return text;
                    }
                case "PublishingScheduleStartDateFieldType":
                case "PublishingScheduleEndDateFieldType":
                    if (string.IsNullOrEmpty(sValue))
                    {
                        return null;
                    }
                    if (sValue.Equals("[today]", System.StringComparison.InvariantCulture))
                    {
                        return System.DateTime.UtcNow.ToString();
                    }
                    return Utils.ParseDateAsUtc(sValue);
                case "User":
                    return this.CreateFieldUserValue(sValue, schemaXML);
                case "UserMulti":
                    {
                        string[] array3 = sValue.Split(new char[]
                        {
                        ','
                        }, System.StringSplitOptions.RemoveEmptyEntries);
                        int num2 = 0;
                        System.Collections.Generic.List<FieldUserValue> list = new System.Collections.Generic.List<FieldUserValue>();
                        string[] array4 = array3;
                        for (int j = 0; j < array4.Length; j++)
                        {
                            string userName = array4[j];
                            FieldUserValue fieldUserValue = this.CreateFieldUserValue(userName, schemaXML);
                            if (fieldUserValue != null)
                            {
                                list.Add(fieldUserValue);
                                num2++;
                            }
                        }
                        if (num2 > 0)
                        {
                            return list.ToArray();
                        }
                        return null;
                    }
                case "Lookup":
                    {
                        int num3 = -1;
                        if (!int.TryParse(sValue, out num3))
                        {
                            return sValue;
                        }
                        if (num3 == 0)
                        {
                            return null;
                        }
                        return new FieldLookupValue
                        {
                            LookupId = num3
                        };
                    }
                case "LookupMulti":
                    {
                        string[] array5 = sValue.Split(new string[]
                        {
                        ";#"
                        }, System.StringSplitOptions.RemoveEmptyEntries);
                        System.Collections.Generic.List<FieldLookupValue> list2 = new System.Collections.Generic.List<FieldLookupValue>();
                        int num4 = -1;
                        for (int k = 0; k < array5.Length; k++)
                        {
                            if (int.TryParse(array5[k], out num4) && num4 != 0)
                            {
                                list2.Add(new FieldLookupValue
                                {
                                    LookupId = num4
                                });
                            }
                        }
                        if (list2.Count > 0)
                        {
                            return list2.ToArray();
                        }
                        return sValue;
                    }
            }
            return sValue;
        }

        private FieldUserValue CreateFieldUserValue(string userName, System.Xml.XmlNode schemaXml)
        {
            int num = this.GetIDFromUser(userName);
            if (num < 0)
            {
                if (schemaXml.Attributes != null && schemaXml.Attributes["UserSelectionMode"] != null && schemaXml.Attributes["UserSelectionMode"].Value.Equals("PeopleAndGroups"))
                {
                    num = this.GetIDFromGroup(userName);
                    if (num >= 0)
                    {
                        return new FieldUserValue
                        {
                            LookupId = num
                        };
                    }
                }
                return null;
            }
            return FieldUserValue.FromUser(userName);
        }

        private void SetUserFieldFromLogin(ListItem item, string fieldName, string loginName)
        {
            FieldUserValue fieldUserValue = new FieldUserValue();
            int iDFromUser = this.GetIDFromUser(loginName);
            if (iDFromUser >= 0)
            {
                fieldUserValue.LookupId = iDFromUser;
                item[fieldName] = fieldUserValue;
                return;
            }
            item[fieldName] = item.ParentList.ParentWeb.CurrentUser;
        }

        public string GetContentTypes(string sListId)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    ContentTypeCollection contentTypeCollection;
                    if (string.IsNullOrEmpty(sListId))
                    {
                        contentTypeCollection = web.AvailableContentTypes;
                    }
                    else
                    {
                        List byId = web.Lists.GetById(new System.Guid(sListId));
                        contentTypeCollection = byId.ContentTypes;
                    }
                    clientContext.Load<ContentTypeCollection>(contentTypeCollection, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
                    {
                        (ContentTypeCollection ct) => ct.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                        {
                            (ContentType contentType) => contentType.Name,
                            (ContentType contentType) => contentType.Id,
                            (ContentType contentType) => contentType.Description,
                            (ContentType contentType) => contentType.Group,
                            (ContentType contentType) => (object)contentType.Hidden,
                            (ContentType contentType) => (object)contentType.ReadOnly,
                            (ContentType contentType) => contentType.WorkflowAssociations,
                            (ContentType contentType) => contentType.FieldLinks.Include(new System.Linq.Expressions.Expression<System.Func<FieldLink, object>>[]
                            {
                                (FieldLink fl) => (object)fl.Id,
                                (FieldLink fl) => fl.Name,
                                (FieldLink fl) => (object)fl.Required,
                                (FieldLink fl) => (object)fl.Hidden
                            }),
                            (ContentType contentType) => contentType.DocumentTemplate,
                            (ContentType contentType) => contentType.DocumentTemplateUrl,
                            (ContentType contentType) => contentType.SchemaXml
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    xmlTextWriter.WriteStartElement("ContentTypes");
                    foreach (ContentType current in contentTypeCollection)
                    {
                        this.GetContentTypeXML(clientContext, current, xmlTextWriter);
                    }
                    xmlTextWriter.WriteEndElement();
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetContentTypeXML(ClientContext ctx, ContentType contentType, System.Xml.XmlWriter xmlWriter)
        {
            xmlWriter.WriteStartElement("ContentType");
            xmlWriter.WriteAttributeString("Name", contentType.Name);
            xmlWriter.WriteAttributeString("ID", contentType.Id.ToString());
            xmlWriter.WriteAttributeString("Description", contentType.Description);
            xmlWriter.WriteAttributeString("Group", contentType.Group);
            xmlWriter.WriteAttributeString("Hidden", contentType.Hidden.ToString());
            xmlWriter.WriteAttributeString("ReadOnly", contentType.ReadOnly.ToString());
            xmlWriter.WriteAttributeString("HasWorkflows", (contentType.WorkflowAssociations.Count > 0) ? "true" : "false");
            xmlWriter.WriteStartElement("FieldRefs");
            foreach (FieldLink current in contentType.FieldLinks)
            {
                xmlWriter.WriteStartElement("FieldRef");
                xmlWriter.WriteAttributeString("ID", current.Id.ToString());
                xmlWriter.WriteAttributeString("Name", current.Name);
                xmlWriter.WriteAttributeString("Required", current.Required.ToString());
                xmlWriter.WriteAttributeString("Hidden", current.Hidden.ToString());
                xmlWriter.WriteEndElement();
            }
            xmlWriter.WriteEndElement();
            if (!string.IsNullOrEmpty(contentType.DocumentTemplate))
            {
                xmlWriter.WriteStartElement("DocumentTemplate");
                xmlWriter.WriteAttributeString("TargetName", contentType.DocumentTemplateUrl);
                xmlWriter.WriteEndElement();
            }
            if (!string.IsNullOrEmpty(contentType.SchemaXml))
            {
                System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(contentType.SchemaXml);
                System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode("//Folder");
                if (xmlNode2 != null && xmlNode2.Attributes["TargetName"] != null)
                {
                    xmlWriter.WriteStartElement("Folder");
                    xmlWriter.WriteAttributeString("TargetName", xmlNode2.Attributes["TargetName"].Value);
                    xmlWriter.WriteEndElement();
                }
            }
            xmlWriter.WriteStartElement("XmlDocuments");
            xmlWriter.WriteEndElement();
            xmlWriter.WriteEndElement();
        }

        private ContentType GetDocumentSetContentType(ClientContext clientContext, List targetList, System.Xml.XmlNode folderXML)
        {
            string sDocSetContentTypeName = folderXML.Attributes["ContentType"].Value;
            ContentTypeCollection contentTypes = targetList.ContentTypes;
            clientContext.Load<ContentTypeCollection>(contentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
            {
                (ContentTypeCollection types) => types.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                {
                    (ContentType type) => type.Id,
                    (ContentType type) => type.Name,
                    (ContentType type) => type.Parent
                })
            });
            System.Collections.Generic.IEnumerable<ContentType> source = clientContext.LoadQuery<ContentType>(from c in contentTypes
                                                                                                              where c.Name == sDocSetContentTypeName
                                                                                                              select c);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            return source.FirstOrDefault<ContentType>();
        }

        public string GetRoles(string sListId)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    RoleDefinitionCollection roleDefinitions = web.RoleDefinitions;
                    clientContext.Load<RoleDefinitionCollection>(roleDefinitions, new System.Linq.Expressions.Expression<System.Func<RoleDefinitionCollection, object>>[0]);
                    clientContext.LoadQuery<RoleDefinition>(roleDefinitions.Include(new System.Linq.Expressions.Expression<System.Func<RoleDefinition, object>>[]
                    {
                        (RoleDefinition d) => d.BasePermissions,
                        (RoleDefinition d) => d.Name,
                        (RoleDefinition d) => (object)d.Hidden,
                        (RoleDefinition d) => d.Description,
                        (RoleDefinition d) => (object)d.Id,
                        (RoleDefinition d) => (object)d.Order,
                        (RoleDefinition d) => (object)d.RoleTypeKind
                    }));
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    using (System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder))
                    {
                        System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                        xmlTextWriter.WriteStartElement("Roles");
                        xmlTextWriter.WriteAttributeString("SharePointVersion", base.SharePointVersion.ToString());
                        foreach (RoleDefinition current in roleDefinitions)
                        {
                            this.WriteRoleXML(current, xmlTextWriter);
                        }
                        xmlTextWriter.WriteEndElement();
                    }
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void WriteRoleXML(RoleDefinition def, System.Xml.XmlWriter xmlWriter)
        {
            xmlWriter.WriteStartElement("Role");
            xmlWriter.WriteAttributeString("RoleId", System.Convert.ToString(def.Id));
            xmlWriter.WriteAttributeString("Name", def.Name);
            xmlWriter.WriteAttributeString("Description", def.Description);
            long num = 0L;
            foreach (PermissionKind permissionKind in System.Enum.GetValues(typeof(PermissionKind)))
            {
                if (permissionKind != PermissionKind.EmptyMask && def.BasePermissions.Has(permissionKind))
                {
                    num += 1L << permissionKind - PermissionKind.ViewListItems;
                }
            }
            xmlWriter.WriteAttributeString("PermMask", num.ToString());
            xmlWriter.WriteAttributeString("Hidden", def.Hidden.ToString());
            xmlWriter.WriteAttributeString("RoleOrder", def.Order.ToString());
            xmlWriter.WriteAttributeString("Type", def.RoleTypeKind.GetHashCode().ToString());
            xmlWriter.WriteEndElement();
        }

        public string GetRoleAssignments(string sListId, int iItemId)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                xmlTextWriter.WriteStartElement("RoleAssignments");
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    RoleAssignmentCollection roleAssignments;
                    if (!string.IsNullOrEmpty(sListId))
                    {
                        List byId = web.Lists.GetById(new System.Guid(sListId));
                        clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (byId == null)
                        {
                            throw new System.ArgumentException("Could not find SharePoint list with ID " + sListId);
                        }
                        if (iItemId >= 0)
                        {
                            ListItem itemByID = this.GetItemByID(byId, iItemId, true, true);
                            if (itemByID == null)
                            {
                                throw new System.ArgumentException(string.Concat(new object[]
                                {
                                    "Could not find item with ID ",
                                    iItemId,
                                    " in list ",
                                    byId.Title
                                }));
                            }
                            roleAssignments = itemByID.RoleAssignments;
                        }
                        else
                        {
                            roleAssignments = byId.RoleAssignments;
                        }
                    }
                    else
                    {
                        roleAssignments = web.RoleAssignments;
                    }
                    System.Collections.Generic.IEnumerable<RoleAssignment> enumerable = clientContext.LoadQuery<RoleAssignment>(roleAssignments.Include(new System.Linq.Expressions.Expression<System.Func<RoleAssignment, object>>[]
                    {
                        (RoleAssignment ra) => ra.Member,
                        (RoleAssignment ra) => ra.RoleDefinitionBindings.Include(new System.Linq.Expressions.Expression<System.Func<RoleDefinition, object>>[]
                        {
                            (RoleDefinition roleDef) => roleDef.Name
                        })
                    }));
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    foreach (RoleAssignment current in enumerable)
                    {
                        string loginName = current.Member.LoginName;
                        foreach (RoleDefinition current2 in current.RoleDefinitionBindings)
                        {
                            xmlTextWriter.WriteStartElement("RoleAssignment");
                            xmlTextWriter.WriteAttributeString("RoleName", current2.Name);
                            xmlTextWriter.WriteAttributeString("PrincipalName", loginName);
                            xmlTextWriter.WriteEndElement();
                        }
                    }
                }
                xmlTextWriter.WriteEndElement();
                result = stringBuilder.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private string MapFieldsStringToCamlQueryViewFields(string query)
        {
            if (query != null)
            {
                return query.Replace("<Fields>", "").Replace("</Fields>", "").Replace("<Field ", "<FieldRef ");
            }
            return "";
        }

        private static CamlQuery GetListQuery()
        {
            if (!CSOMAdapter.s_iGetListQueryRowLimit.HasValue)
            {
                CSOMAdapter.s_iGetListQueryRowLimit = new uint?(4294967295u);
            }
            return new CamlQuery
            {
                ViewXml = new System.Text.StringBuilder().Append("<View Scope='RecursiveAll'>").Append("<ExpandUserField>False</ExpandUserField>").Append("<IncludeMandatoryColumns>False</IncludeMandatoryColumns>").Append("<MeetingInstanceId>-2</MeetingInstanceId>").AppendFormat("<RowLimit>{0}</RowLimit>", CSOMAdapter.s_iGetListQueryRowLimit.Value).Append("</View>").ToString(),
                DatesInUtc = true
            };
        }

        private void WriteFieldsToXML(ClientContext ctx, System.Xml.XmlWriter xmlWriter, Web currentWeb, FieldCollection fields)
        {
            System.Collections.Generic.List<System.Xml.XmlNode> list = new System.Collections.Generic.List<System.Xml.XmlNode>();
            if (!this._mappedWebNames.ContainsKey(currentWeb.Id))
            {
                this._mappedWebNames.Add(currentWeb.Id, currentWeb);
            }
            xmlWriter.WriteStartElement("Fields");
            foreach (Field current in fields)
            {
                if (!current.Hidden && (current.TypeAsString == "Lookup" || current.TypeAsString == "LookupMulti"))
                {
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(current.SchemaXml);
                    System.Xml.XmlAttribute xmlAttribute = xmlNode.Attributes["List"];
                    if (xmlAttribute != null && !string.IsNullOrEmpty(xmlAttribute.Value))
                    {
                        if (!Utils.IsGuid(xmlAttribute.Value))
                        {
                            xmlWriter.WriteRaw(current.SchemaXml);
                        }
                        else
                        {
                            list.Add(xmlNode);
                            System.Guid guid = new System.Guid(xmlAttribute.Value);
                            if (!this._mappedListNames.ContainsKey(guid))
                            {
                                System.Guid empty = System.Guid.Empty;
                                System.Xml.XmlAttribute xmlAttribute2 = xmlNode.Attributes["WebId"];
                                if (xmlAttribute2 != null)
                                {
                                    string value = xmlNode.Attributes["WebId"].Value;
                                    if (Utils.IsGuid(value))
                                    {
                                        empty = new System.Guid(value);
                                    }
                                    else
                                    {
                                        xmlNode.Attributes.Remove(xmlAttribute2);
                                    }
                                }
                                if (empty == System.Guid.Empty || empty == currentWeb.Id)
                                {
                                    this.PopulateLookupList(currentWeb, guid);
                                }
                                else
                                {
                                    Web web;
                                    if (this._mappedWebNames.ContainsKey(empty))
                                    {
                                        web = this._mappedWebNames[empty];
                                    }
                                    else
                                    {
                                        try
                                        {
                                            web = ctx.Site.OpenWebById(empty);
                                            ctx.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                                            {
                                                (Web web1) => web1.ServerRelativeUrl,
                                                (Web web2) => (object)web2.Id,
                                                (Web web3) => web3.Url
                                            });
                                            CSOMAdapter.CallExecuteQuery(ctx, this);
                                            this._mappedWebNames.Add(empty, web);
                                        }
                                        catch (System.Exception ex)
                                        {
                                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                            web = null;
                                            this._mappedWebNames.Add(empty, web);
                                        }
                                    }
                                    this.PopulateLookupList(web, guid);
                                }
                            }
                        }
                    }
                }
                else
                {
                    string text = current.SchemaXml;
                    if (object.Equals(current.Id, CSOMAdapter.EnterPriseKeywordsFieldId))
                    {
                        text = this.UpdateEnterPriseKeywordTermSetId(ctx, current, text);
                    }
                    xmlWriter.WriteRaw(text);
                }
            }
            if (list.Count > 0)
            {
                foreach (System.Xml.XmlNode current2 in list)
                {
                    System.Guid key = new System.Guid(current2.Attributes["List"].Value);
                    System.Guid empty2 = System.Guid.Empty;
                    System.Xml.XmlAttribute xmlAttribute3 = current2.Attributes["WebId"];
                    if (xmlAttribute3 != null && Utils.IsGuid(xmlAttribute3.Value))
                    {
                        empty2 = new System.Guid(xmlAttribute3.Value);
                    }
                    string text2 = null;
                    if (this._mappedListNames.ContainsKey(key) && !this._mappedListNames[key].Equals("OrphanLookup", System.StringComparison.InvariantCultureIgnoreCase))
                    {
                        text2 = this._mappedListNames[key];
                    }
                    string text3 = null;
                    string text4 = null;
                    if (empty2 != System.Guid.Empty && this._mappedWebNames.ContainsKey(empty2) && this._mappedWebNames[empty2] != null)
                    {
                        Web web2 = this._mappedWebNames[empty2];
                        text3 = web2.ServerRelativeUrl;
                        text4 = Utils.GetNameFromURL(web2.Url);
                    }
                    if (text3 != null)
                    {
                        System.Xml.XmlAttribute xmlAttribute4 = current2.OwnerDocument.CreateAttribute("TargetWebSRURL");
                        xmlAttribute4.Value = text3;
                        current2.Attributes.Append(xmlAttribute4);
                    }
                    if (text4 != null)
                    {
                        System.Xml.XmlAttribute xmlAttribute5 = current2.OwnerDocument.CreateAttribute("TargetWebName");
                        xmlAttribute5.Value = text4;
                        current2.Attributes.Append(xmlAttribute5);
                    }
                    if (text2 != null)
                    {
                        System.Xml.XmlAttribute xmlAttribute6 = current2.OwnerDocument.CreateAttribute("TargetListName");
                        xmlAttribute6.Value = text2;
                        current2.Attributes.Append(xmlAttribute6);
                    }
                    xmlWriter.WriteRaw(current2.OuterXml);
                }
            }
            xmlWriter.WriteEndElement();
        }

        private void PopulateLookupList(Web lookupWeb, System.Guid listGuid)
        {
            try
            {
                if (lookupWeb != null)
                {
                    List byId = lookupWeb.Lists.GetById(listGuid);
                    lookupWeb.Context.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List l) => l.RootFolder.Name
                    });
                    CSOMAdapter.CallExecuteQuery(lookupWeb.Context, this);
                    this._mappedListNames.Add(listGuid, byId.RootFolder.Name);
                }
                else
                {
                    this._mappedListNames.Add(listGuid, "OrphanLookup");
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                this._mappedListNames.Add(listGuid, "OrphanLookup");
            }
        }

        private string GetDirName(Folder folder)
        {
            string serverRelativeUrl = folder.ServerRelativeUrl;
            int num = serverRelativeUrl.LastIndexOf("/");
            string result = "";
            if (num > 0)
            {
                result = serverRelativeUrl.Substring(0, num);
            }
            return result;
        }

        private int ParseDocumentTemplateType(string sDocTemplateUrl)
        {
            int result = 100;
            if (!string.IsNullOrEmpty(sDocTemplateUrl))
            {
                string fileNameFromPath = Utils.GetFileNameFromPath(sDocTemplateUrl, true);
                if (string.Equals(fileNameFromPath, "template.doc", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 101;
                }
                else if (string.Equals(fileNameFromPath, "template.htm", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 102;
                }
                else if (string.Equals(fileNameFromPath, "template.xls", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 103;
                }
                else if (string.Equals(fileNameFromPath, "template.pot", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 104;
                }
                else if (string.Equals(fileNameFromPath, "_basicpage.htm", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 105;
                }
                else if (string.Equals(fileNameFromPath, "_webpartpage.htm", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 106;
                }
                else if (string.Equals(fileNameFromPath, "template.one", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 111;
                }
                else if (string.Equals(fileNameFromPath, "template.dotx", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 121;
                }
                else if (string.Equals(fileNameFromPath, "template.xlsx", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 122;
                }
                else if (string.Equals(fileNameFromPath, "template.pptx", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 123;
                }
                else if (string.Equals(fileNameFromPath, "template.xml", System.StringComparison.OrdinalIgnoreCase) || string.Equals(fileNameFromPath, "template.xsn", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = 1000;
                }
            }
            return result;
        }

        private string GetFullPath(List list, string folder)
        {
            return list.RootFolder.ServerRelativeUrl + ((string.IsNullOrEmpty(folder) || folder.StartsWith("/")) ? "" : "/") + folder;
        }

        public string AddList(string sListXML, AddListOptions options, byte[] documentTemplateFile)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    bool isTargetWebMultilingual = false;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(sListXML);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    if (firstChild.Attributes["Name"] == null || string.IsNullOrEmpty(firstChild.Attributes["Name"].Value))
                    {
                        throw new System.Exception("Invalid XML was supplied to AddList(). Required attribute 'Name' is either missing or empty.");
                    }
                    if (firstChild.Attributes["Title"] == null)
                    {
                        throw new System.Exception("Invalid XML was supplied to AddList(). Missing required 'Title' attribute");
                    }
                    string value = firstChild.Attributes["Name"].Value;
                    string text = (firstChild.Attributes["Description"] == null) ? "" : firstChild.Attributes["Description"].Value;
                    string sTitle = firstChild.Attributes["Title"].Value;
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web0) => web0.Lists.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List l) => l.Title,
                            (List l) => l.Description,
                            (List l) => l.RootFolder,
                            (List l) => (object)l.Id,
                            (List l) => (object)l.BaseTemplate,
                            (List l) => (object)l.BaseType
                        }),
                        (Web web1) => web1.ListTemplates.Include(new System.Linq.Expressions.Expression<System.Func<ListTemplate, object>>[]
                        {
                            (ListTemplate t) => (object)t.BaseType,
                            (ListTemplate t) => (object)t.FeatureId,
                            (ListTemplate t) => (object)t.ListTemplateTypeKind
                        }),
                        (Web web2) => (object)web2.Id,
                        (Web web3) => web3.ServerRelativeUrl,
                        (Web web4) => web4.Url
                    });
                    if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web web5) => (object)web5.IsMultilingual
                        });
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
                    {
                        isTargetWebMultilingual = web.IsMultilingual;
                    }
                    string value2 = null;
                    if (firstChild.Attributes["BaseTemplate"].InnerText == "851" || firstChild.Attributes["BaseTemplate"].InnerText == "1302")
                    {
                        ListTemplateCollection listTemplates = web.ListTemplates;
                        foreach (ListTemplate current in listTemplates)
                        {
                            if (firstChild.Attributes["BaseTemplate"].InnerText == "851" && current.ListTemplateTypeKind.ToString() == "851")
                            {
                                value2 = current.FeatureId.ToString();
                            }
                            else if (firstChild.Attributes["BaseTemplate"].InnerText == "1302" && current.ListTemplateTypeKind.ToString() == "1302")
                            {
                                value2 = current.FeatureId.ToString();
                            }
                        }
                        System.Xml.XmlAttribute xmlAttribute = firstChild.Attributes["FeatureId"];
                        if (xmlAttribute == null)
                        {
                            xmlAttribute = firstChild.OwnerDocument.CreateAttribute("FeatureId");
                            firstChild.Attributes.Append(xmlAttribute);
                        }
                        xmlAttribute.Value = value2;
                    }
                    List list = (value == sTitle) ? CSOMAdapter.GetListByTitle(web, sTitle) : CSOMAdapter.GetListByName(web, value);
                    if (options.Overwrite && list != null)
                    {
                        bool flag = false;
                        if (list.BaseTemplate != 109)
                        {
                            try
                            {
                                list.DeleteObject();
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                                flag = true;
                                list = null;
                            }
                            catch (System.Exception ex)
                            {
                                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            }
                        }
                        if (!flag)
                        {
                            bool flag2;
                            ListItemCollection[] fullListItemCollectionsNoMetaData = this.GetFullListItemCollectionsNoMetaData(list, out flag2);
                            ListItemCollection[] array = fullListItemCollectionsNoMetaData;
                            for (int i = 0; i < array.Length; i++)
                            {
                                ListItemCollection items = array[i];
                                this.DeleteAllListItems(items, list);
                            }
                        }
                    }
                    List list2 = null;
                    bool flag3 = false;
                    try
                    {
                        if (list == null)
                        {
                            flag3 = true;
                            if (firstChild.Attributes["BaseTemplate"] == null)
                            {
                                throw new System.Exception("Invalid XML was supplied to AddList(). Missing required 'BaseTemplate' attribute");
                            }
                            ListTemplateType listTemplateType = (ListTemplateType)System.Enum.Parse(typeof(ListTemplateType), firstChild.Attributes["BaseTemplate"].Value);
                            list2 = CSOMAdapter.GetListByTitle(web, value);
                            if (list2 != null)
                            {
                                string text2 = value + "_";
                                while (CSOMAdapter.GetListByTitle(web, text2) != null)
                                {
                                    text2 += "_";
                                }
                                list2.Title = text2;
                                list2.Update();
                                clientContext.Load<List>(list2, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            int? num = (firstChild.Attributes["DocTemplateUrl"] != null) ? new int?(this.ParseDocumentTemplateType(firstChild.Attributes["DocTemplateUrl"].Value)) : null;
                            string text3 = (firstChild.Attributes["FeatureId"] != null) ? firstChild.Attributes["FeatureId"].InnerText : null;
                            if (listTemplateType == ListTemplateType.ExternalList)
                            {
                                System.Guid id = this.CreateExternalList(web, value, text, firstChild);
                                list = web.Lists.GetById(id);
                                goto IL_100D;
                            }
                            try
                            {
                                ListCreationInformation listCreationInformation = new ListCreationInformation
                                {
                                    Title = value,
                                    Description = text,
                                    Url = null
                                };
                                if (!string.IsNullOrEmpty(text3))
                                {
                                    System.Guid guid = new System.Guid(text3);
                                    if (guid != System.Guid.Empty)
                                    {
                                        listCreationInformation.TemplateFeatureId = guid;
                                    }
                                }
                                listCreationInformation.TemplateType = (int)listTemplateType;
                                if (num.HasValue)
                                {
                                    listCreationInformation.DocumentTemplateType = num.Value;
                                }
                                list = web.Lists.Add(listCreationInformation);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                                goto IL_100D;
                            }
                            catch (System.Exception ex2)
                            {
                                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                bool flag4 = !string.IsNullOrEmpty(text3) && ex2.Message.Contains(new System.Guid(text3).ToString("D"));
                                if (flag4)
                                {
                                    ListCreationInformation listCreationInformation2 = new ListCreationInformation
                                    {
                                        Title = value,
                                        Description = text,
                                        Url = null,
                                        TemplateType = (int)listTemplateType
                                    };
                                    if (num.HasValue)
                                    {
                                        listCreationInformation2.DocumentTemplateType = num.Value;
                                    }
                                    list = web.Lists.Add(listCreationInformation2);
                                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                                }
                                else
                                {
                                    if (firstChild.Attributes["BaseType"] == null)
                                    {
                                        throw;
                                    }
                                    ListTemplateType templateType;
                                    switch (System.Convert.ToInt32(firstChild.Attributes["BaseType"].InnerText))
                                    {
                                        case 1:
                                            templateType = ListTemplateType.DocumentLibrary;
                                            goto IL_BCA;
                                        case 3:
                                            templateType = ListTemplateType.DiscussionBoard;
                                            goto IL_BCA;
                                        case 4:
                                            templateType = ListTemplateType.Survey;
                                            goto IL_BCA;
                                        case 5:
                                            templateType = ListTemplateType.IssueTracking;
                                            goto IL_BCA;
                                    }
                                    templateType = ListTemplateType.GenericList;
                                    IL_BCA:
                                    ListCreationInformation listCreationInformation3 = new ListCreationInformation
                                    {
                                        Title = value,
                                        Description = text,
                                        Url = null,
                                        TemplateType = (int)templateType
                                    };
                                    if (num.HasValue)
                                    {
                                        listCreationInformation3.DocumentTemplateType = num.Value;
                                    }
                                    try
                                    {
                                        list = web.Lists.Add(listCreationInformation3);
                                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                                        {
                                            (Web web6) => web6.Lists.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                                            {
                                                (List l) => l.Title,
                                                (List l) => l.RootFolder,
                                                (List l) => (object)l.Id,
                                                (List l) => (object)l.BaseTemplate
                                            })
                                        });
                                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                                        list = CSOMAdapter.GetListByTitle(web, value);
                                    }
                                    catch (ServerException ex3)
                                    {
                                        CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                        if (ex3.ServerErrorCode == -2130575300 || ex3.ServerErrorCode == -2130575342)
                                        {
                                            clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                                            {
                                                (Web web7) => web7.Lists.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                                                {
                                                    (List l) => l.Title,
                                                    (List l) => l.RootFolder,
                                                    (List l) => (object)l.Id
                                                })
                                            });
                                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                                            list = (CSOMAdapter.GetListByName(web, value) ?? CSOMAdapter.GetListByTitle(web, value));
                                        }
                                    }
                                }
                                goto IL_100D;
                            }
                        }
                        if (list.Description != text)
                        {
                            list.Description = text;
                            list.Update();
                        }
                        IL_100D:
                        clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                        clientContext.Load<Folder>(list.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                        System.Collections.Generic.IEnumerable<List> source = clientContext.LoadQuery<List>(web.Lists.IncludeWithDefaultProperties(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List l) => l.Title,
                            (List l) => (object)l.Id,
                            (List l) => l.RootFolder,
                            (List l) => l.RootFolder.Name
                        }));
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        this.UpdateListProperties(clientContext, list, null, firstChild, options, documentTemplateFile, isTargetWebMultilingual, operationReporting);
                        int num2 = 1;
                        string sTitle2 = sTitle;
                        if (list2 != null && value == sTitle)
                        {
                            sTitle = sTitle2 + num2.ToString();
                            num2++;
                        }
                        List list3 = source.FirstOrDefault((List l) => l.Title == sTitle);
                        while (list3 != null && list3.Id != list.Id && list3.RootFolder.Name != list.RootFolder.Name)
                        {
                            sTitle = sTitle2 + num2.ToString();
                            num2++;
                            list3 = source.FirstOrDefault((List l) => l.Title == sTitle);
                        }
                        list.Title = sTitle;
                        bool multipleDataList = list.MultipleDataList;
                        if (flag3 && multipleDataList && !list.MultipleDataList && list.BaseType == BaseType.DocumentLibrary)
                        {
                            System.Collections.Generic.List<Folder> list4 = new System.Collections.Generic.List<Folder>();
                            foreach (Folder current2 in list.RootFolder.Folders)
                            {
                                int num3;
                                if (int.TryParse(current2.Name, out num3))
                                {
                                    list4.Add(current2);
                                }
                            }
                            foreach (Folder current3 in list4)
                            {
                                current3.DeleteObject();
                            }
                        }
                    }
                    finally
                    {
                        if (list2 != null && list2.Title != value)
                        {
                            list2.Title = value;
                            list2.Update();
                        }
                    }
                    list.RootFolder.Update();
                    list.Update();
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    this.GetListXML(clientContext, web, list, xmlWriter, false);
                    operationReporting.LogObjectXml(stringBuilder.ToString());
                }
            }
            catch (System.Exception ex4)
            {
                CSOMAdapter.LogExceptionDetails(ex4, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex4, "Main AddList() Block");
            }
            finally
            {
                operationReporting.End();
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return operationReporting.ResultXml;
        }

        private void AddLanguageResourcesForList(List list, System.Xml.XmlNode listXML, bool isTargetWebMultilingual, OperationReporting reporting)
        {
            try
            {
                if (isTargetWebMultilingual)
                {
                    System.Xml.XmlNode xmlNode = listXML.SelectSingleNode("//List/LanguageResources");
                    if (xmlNode != null && xmlNode.ChildNodes.Count > 0 && xmlNode.GetAttributeValueAsBoolean(XmlAttributeNames.MigrateLanguageSettings.ToString()))
                    {
                        this.AddLanguageResources(xmlNode, list);
                    }
                }
            }
            catch (System.Exception ex)
            {
                string detail = string.Format("Error occurred while adding language resources for list : '{0}' ", list.Title);
                if (reporting != null)
                {
                    reporting.LogError(ex, detail);
                }
                else
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        public string UpdateList(string sListID, string sListXML, string sViewXml, UpdateListOptions updateOptions, byte[] documentTemplateFile)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                if (!Utils.IsGuid(sListID))
                {
                    throw new System.ArgumentException("The specified List ID is not a valid GUID");
                }
                using (ClientContext clientContext = this.GetClientContext())
                {
                    bool isTargetWebMultilingual = false;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(sListXML);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    string sTitle = "";
                    bool flag = firstChild.Attributes != null && firstChild.Attributes["Title"] != null;
                    if (flag)
                    {
                        sTitle = firstChild.Attributes["Title"].Value;
                    }
                    List byId = clientContext.Web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web) => (object)web.Id,
                        (Web web) => web.Url,
                        (Web web) => web.ServerRelativeUrl
                    });
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    clientContext.Load<Folder>(byId.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                    System.Collections.Generic.IEnumerable<List> source = null;
                    if (!string.IsNullOrEmpty(sTitle))
                    {
                        ListCollection lists = clientContext.Web.Lists;
                        source = clientContext.LoadQuery<List>(from l in lists
                                                               where l.Title == sTitle
                                                               select l);
                    }
                    if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
                    {
                        clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web web) => (object)web.IsMultilingual
                        });
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
                    {
                        isTargetWebMultilingual = clientContext.Web.IsMultilingual;
                    }
                    if (flag && source.Count<List>() == 0)
                    {
                        byId.Title = sTitle;
                    }
                    if (firstChild.Attributes["Description"] != null)
                    {
                        string value = firstChild.Attributes["Description"].Value;
                        if (!string.IsNullOrEmpty(value))
                        {
                            byId.Description = value;
                        }
                    }
                    this.UpdateListProperties(clientContext, byId, sViewXml, firstChild, updateOptions, documentTemplateFile, isTargetWebMultilingual, operationReporting);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    this.GetListXML(clientContext, clientContext.Web, byId, xmlWriter, false);
                    operationReporting.LogObjectXml(stringBuilder.ToString());
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "Main UpdateList() Block");
            }
            finally
            {
                operationReporting.End();
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return operationReporting.ResultXml;
        }

        private void UpdateListProperties(ClientContext ctx, List list, string sViewXml, System.Xml.XmlNode listXML, IUpdateListOptions options, byte[] documentTemplateFile, bool isTargetWebMultilingual, OperationReporting reporting)
        {
            string text = list.Id.ToString();
            string title = list.Title;
            string sTitle = (listXML.Attributes["Title"] != null) ? listXML.Attributes["Title"].Value : title;
            System.Xml.XmlNode currentLists = XmlUtility.StringToXmlNode(this.GetLists());
            bool flag = false;
            bool flag2 = false;
            if (options.CopyFields)
            {
                flag = true;
                options.CopyFields = false;
            }
            if (options.CopyViews)
            {
                flag2 = true;
                options.CopyViews = false;
            }
            if (flag)
            {
                FieldCollection fields = list.Fields;
                ctx.Load<FieldCollection>(fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
                System.Xml.XmlNode xmlNode = listXML.SelectSingleNode("./Fields");
                if (xmlNode != null)
                {
                    this.AddFieldsXML(ctx, list, fields, xmlNode, options.UpdateFieldTypes, reporting);
                }
            }
            if (list.BaseType == BaseType.Survey)
            {
                listXML.Attributes.RemoveNamedItem("EnableModeration");
                listXML.Attributes.RemoveNamedItem("EnableVersioning");
                listXML.Attributes.RemoveNamedItem("EnableMinorVersions");
            }
            if (listXML.Attributes["EnableModeration"] != null)
            {
                bool attributeValueAsBoolean = listXML.GetAttributeValueAsBoolean("EnableModeration");
                if (attributeValueAsBoolean != list.EnableModeration)
                {
                    list.EnableModeration = attributeValueAsBoolean;
                    list.Update();
                    ctx.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
            }
            if (flag2)
            {
                System.Xml.XmlNode xmlNode2 = listXML.SelectSingleNode("//Views");
                if (xmlNode2 != null && !string.IsNullOrEmpty(xmlNode2.InnerXml))
                {
                    this.AddViewsXML(list.Id, xmlNode2, options.DeletePreExistingViews);
                }
            }
            if (listXML.Attributes["ContentTypesEnabled"] != null)
            {
                string innerText = listXML.Attributes["ContentTypesEnabled"].InnerText;
                list.ContentTypesEnabled = bool.Parse(innerText);
            }
            if (listXML.Attributes["Description"] != null)
            {
                list.Description = listXML.Attributes["Description"].Value;
            }
            if (list.BaseType != BaseType.DocumentLibrary && list.BaseType != BaseType.Survey && listXML.Attributes["EnableAttachments"] != null)
            {
                list.EnableAttachments = bool.Parse(listXML.Attributes["EnableAttachments"].Value);
            }
            if (listXML.Attributes["OnQuickLaunch"] != null)
            {
                list.OnQuickLaunch = bool.Parse(listXML.Attributes["OnQuickLaunch"].Value);
            }
            if (listXML.Attributes["Hidden"] != null)
            {
                list.Hidden = bool.Parse(listXML.Attributes["Hidden"].Value);
            }
            if (listXML.Attributes["ForceCheckout"] != null)
            {
                list.ForceCheckout = bool.Parse(listXML.Attributes["ForceCheckout"].Value);
            }
            if (list.BaseTemplate != 112 && listXML.Attributes["Folders"] != null)
            {
                list.EnableFolderCreation = bool.Parse(listXML.Attributes["Folders"].Value);
            }
            if (listXML.Attributes["NoCrawl"] != null)
            {
                list.NoCrawl = bool.Parse(listXML.Attributes["NoCrawl"].Value);
            }
            if (listXML.Attributes["EnableVersioning"] != null)
            {
                list.EnableVersioning = bool.Parse(listXML.Attributes["EnableVersioning"].Value);
            }
            if (list.EnableVersioning)
            {
                bool isSharePointOnline = base.SharePointVersion.IsSharePointOnline;
                if (listXML.Attributes["MajorVersionLimit"] != null && isSharePointOnline)
                {
                    list.MajorVersionLimit = listXML.GetAttributeValueAsInt("MajorVersionLimit");
                }
                if (listXML.Attributes["EnableMinorVersions"] != null)
                {
                    list.EnableMinorVersions = bool.Parse(listXML.Attributes["EnableMinorVersions"].Value);
                }
                if (listXML.Attributes["MajorWithMinorVersionsLimit"] != null && listXML.Attributes["EnableModeration"] != null && isSharePointOnline && (list.EnableModeration || list.EnableMinorVersions))
                {
                    list.MajorWithMinorVersionsLimit = listXML.GetAttributeValueAsInt("MajorWithMinorVersionsLimit");
                }
            }
            if (listXML.Attributes["ForceCheckout"] != null)
            {
                list.ForceCheckout = bool.Parse(listXML.Attributes["ForceCheckout"].Value);
            }
            if (listXML.Attributes["DraftVersionVisibility"] != null)
            {
                string innerText2 = listXML.Attributes["DraftVersionVisibility"].InnerText;
                int draftVersionVisibility = int.Parse(innerText2);
                list.DraftVersionVisibility = (DraftVisibilityType)draftVersionVisibility;
            }
            if (listXML.Attributes["RssLimitDescriptionLength"] != null)
            {
                list.RootFolder.Properties["vti_rss_LimitDescriptionLength"] = int.Parse(listXML.Attributes["RssLimitDescriptionLength"].Value);
            }
            if (listXML.Attributes["RssChannelTitle"] != null)
            {
                list.RootFolder.Properties["vti_rss_ChannelTitle"] = listXML.Attributes["RssChannelTitle"].Value;
            }
            if (listXML.Attributes["RssChannelDescription"] != null)
            {
                string text2 = listXML.Attributes["RssChannelDescription"].Value;
                text2 = text2.Replace("\\r\\n", "\r\n");
                list.RootFolder.Properties["vti_rss_ChannelDescription"] = text2;
            }
            if (listXML.Attributes["RssChannelImageUrl"] != null)
            {
                list.RootFolder.Properties["vti_rss_ChannelImageUrl"] = listXML.Attributes["RssChannelImageUrl"].Value;
            }
            if (listXML.Attributes["RssItemLimit"] != null)
            {
                list.RootFolder.Properties["vti_rss_ItemLimit"] = int.Parse(listXML.Attributes["RssItemLimit"].Value);
            }
            if (listXML.Attributes["RssDayLimit"] != null)
            {
                list.RootFolder.Properties["vti_rss_DayLimit"] = int.Parse(listXML.Attributes["RssDayLimit"].Value);
            }
            if (listXML.Attributes["RssDocumentAsEnclosure"] != null)
            {
                list.RootFolder.Properties["vti_rss_DocumentAsEnclosure"] = int.Parse(listXML.Attributes["RssDocumentAsEnclosure"].Value);
            }
            if (listXML.Attributes["RssDocumentAsLink"] != null)
            {
                list.RootFolder.Properties["vti_rss_DocumentAsLink"] = int.Parse(listXML.Attributes["RssDocumentAsLink"].Value);
            }
            if (listXML.Attributes["TimelineDefaultView"] != null)
            {
                list.RootFolder.Properties["TimelineDefaultView"] = listXML.Attributes["TimelineDefaultView"].Value;
            }
            if (listXML.Attributes["Timeline"] != null)
            {
                list.RootFolder.Properties["Timeline_Timeline"] = listXML.Attributes["Timeline"].Value;
            }
            if (listXML.Attributes["WelcomePage"] != null)
            {
                list.RootFolder.Properties["vti_welcomepage"] = listXML.Attributes["WelcomePage"].Value;
            }
            this.AddLanguageResourcesForList(list, listXML, isTargetWebMultilingual, reporting);
            list.RootFolder.Update();
            list.Update();
            CSOMAdapter.CallExecuteQuery(ctx, this);
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.ReleaseCookieLock();
            }
            try
            {
                this.NWSAdapter.UpdateListProperties(text, title, sTitle, sViewXml, listXML, options, documentTemplateFile, currentLists);
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
            }
            if (base.SharePointVersion.IsSharePointOnline)
            {
                this.UpdateAdvanceListSettingForO365(listXML, text);
            }
        }

        private void UpdateAdvanceListSettingForO365(System.Xml.XmlNode listXML, string targetListId)
        {
            System.Guid guid = new System.Guid(targetListId);
            if (guid == System.Guid.Empty)
            {
                return;
            }
            bool? isDefaultItemOpenUseListSetting = null;
            bool? isLaunchFormsInDialog = null;
            bool? canExcludeFromOfflineClient = null;
            bool? canDisableGridEditing = null;
            string browserEnabledDocuments = string.Empty;
            string sendToLocationName = string.Empty;
            string sendToLocationUrl = string.Empty;
            string readSecurity = string.Empty;
            string writeSecurity = string.Empty;
            if (listXML.Attributes["BrowserEnabledDocuments"] != null)
            {
                isDefaultItemOpenUseListSetting = new bool?(listXML.Attributes["DefaultItemOpenUseListSetting"] == null || listXML.GetAttributeValueAsBoolean("DefaultItemOpenUseListSetting"));
                browserEnabledDocuments = listXML.Attributes["BrowserEnabledDocuments"].Value;
            }
            if (listXML.Attributes["NavigateForFormsPages"] != null)
            {
                isLaunchFormsInDialog = new bool?(listXML.GetAttributeValueAsBoolean("NavigateForFormsPages"));
            }
            if (listXML.Attributes["ExcludeFromOfflineClient"] != null)
            {
                canExcludeFromOfflineClient = new bool?(listXML.GetAttributeValueAsBoolean("ExcludeFromOfflineClient"));
            }
            if (listXML.Attributes["DisableGridEditing"] != null)
            {
                canDisableGridEditing = new bool?(listXML.GetAttributeValueAsBoolean("DisableGridEditing"));
            }
            if (listXML.Attributes["SendToLocationName"] != null)
            {
                sendToLocationName = listXML.Attributes["SendToLocationName"].Value;
            }
            if (listXML.Attributes["SendToLocationUrl"] != null)
            {
                sendToLocationUrl = listXML.Attributes["SendToLocationUrl"].Value;
            }
            if (listXML.Attributes["ReadSecurity"] != null)
            {
                readSecurity = listXML.Attributes["ReadSecurity"].Value;
            }
            if (listXML.Attributes["WriteSecurity"] != null)
            {
                writeSecurity = listXML.Attributes["WriteSecurity"].Value;
            }
            this.UpdateAdvanceListSettingForO365(guid, isDefaultItemOpenUseListSetting, browserEnabledDocuments, isLaunchFormsInDialog, canExcludeFromOfflineClient, canDisableGridEditing, sendToLocationName, sendToLocationUrl, readSecurity, writeSecurity);
        }

        private void UpdateAdvanceListSettingForO365(System.Guid listId, bool? isDefaultItemOpenUseListSetting, string browserEnabledDocuments, bool? isLaunchFormsInDialog, bool? canExcludeFromOfflineClient, bool? canDisableGridEditing, string sendToLocationName, string sendToLocationUrl, string readSecurity, string writeSecurity)
        {
            try
            {
                string pageUrl = System.IO.Path.Combine(this.Url, string.Format("{0}{1}", "_layouts/15/advsetng.aspx?List=", Microsoft.SharePoint.Client.Utilities.HttpUtility.UrlKeyValueEncode(listId.ToString("B").ToUpper())));
                string text = string.Empty;
                string value = string.Empty;
                System.Collections.Generic.Dictionary<string, string> dictionary = new System.Collections.Generic.Dictionary<string, string>();
                string responseStringFromPost = this.GetResponseStringFromPost(pageUrl, text, string.Empty, null);
                System.Collections.Generic.Dictionary<string, string> dictionary2 = HttpHelper.PopulateParametersFromForm(responseStringFromPost);
                if (isDefaultItemOpenUseListSetting.HasValue && !string.IsNullOrEmpty(browserEnabledDocuments))
                {
                    string key = "ctl00$PlaceHolderMain$OpenDocumentSection$ctl01$DefaultItemOpen";
                    bool isDefaultItemOpenUseListSetting2 = System.Convert.ToBoolean(isDefaultItemOpenUseListSetting.Value);
                    value = this.GetBrowserEnabledDocumentValue(isDefaultItemOpenUseListSetting2, browserEnabledDocuments);
                    dictionary.Add(key, value);
                }
                CSOMAdapter.UpdateBooleanAdvanceSettingListProperties(isLaunchFormsInDialog, canExcludeFromOfflineClient, canDisableGridEditing, dictionary);
                CSOMAdapter.UpdateStringAdvanceSettingListProperties(sendToLocationName, sendToLocationUrl, dictionary);
                CSOMAdapter.AddParametersToAdvanceSettingRequest(readSecurity, writeSecurity, dictionary2);
                if (dictionary.Count > 0)
                {
                    using (System.Collections.Generic.Dictionary<string, string>.KeyCollection.Enumerator enumerator = dictionary.Keys.GetEnumerator())
                    {
                        while (enumerator.MoveNext())
                        {
                            string controlName = enumerator.Current;
                            if (dictionary2.ContainsKey(controlName))
                            {
                                System.Collections.Generic.KeyValuePair<string, string> keyValuePair = (from s in dictionary
                                                                                                        where s.Key.Equals(controlName, System.StringComparison.InvariantCultureIgnoreCase)
                                                                                                        select s).Single<System.Collections.Generic.KeyValuePair<string, string>>();
                                dictionary2[controlName] = keyValuePair.Value;
                            }
                        }
                    }
                }
                text = HttpHelper.GetPostDataFromForm(dictionary2);
                string stringToEscape = "ctl00$PlaceHolderMain$ctl00$RptControls$BtnSaveAsTemplate";
                text += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape));
                responseStringFromPost = this.GetResponseStringFromPost(pageUrl, text, string.Empty, null);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
        }

        private static void AddParametersToAdvanceSettingRequest(string readSecurity, string writeSecurity, System.Collections.Generic.Dictionary<string, string> parameters)
        {
            if (!string.IsNullOrEmpty(readSecurity))
            {
                string key = "ctl00$PlaceHolderMain$ItemLevelSecuritySection$ctl09$ReadSecurity";
                parameters.Add(key, readSecurity);
            }
            if (!string.IsNullOrEmpty(writeSecurity))
            {
                string key2 = "ctl00$PlaceHolderMain$ItemLevelSecuritySection$ctl10$WriteSecurity";
                parameters.Add(key2, writeSecurity);
            }
        }

        private static void UpdateStringAdvanceSettingListProperties(string sendToLocationName, string sendToLocationUrl, System.Collections.Generic.Dictionary<string, string> controlNames)
        {
            if (!string.IsNullOrEmpty(sendToLocationName))
            {
                string key = "ctl00$PlaceHolderMain$SendToSection$ctl01$TxtSendToLocationName";
                controlNames.Add(key, sendToLocationName);
            }
            if (!string.IsNullOrEmpty(sendToLocationUrl))
            {
                string key2 = "ctl00$PlaceHolderMain$SendToSection$ctl02$TxtSendToLocationUrl";
                controlNames.Add(key2, sendToLocationUrl);
            }
        }

        private static void UpdateBooleanAdvanceSettingListProperties(bool? isLaunchFormsInDialog, bool? canExcludeFromOfflineClient, bool? canDisableGridEditing, System.Collections.Generic.Dictionary<string, string> controlNames)
        {
            if (isLaunchFormsInDialog.HasValue)
            {
                string key = "ctl00$PlaceHolderMain$DialogForFormsPagesSection$ctl03$DialogForFormsPages";
                string value = "RadDialogForFormsPagesYes";
                bool flag = System.Convert.ToBoolean(isLaunchFormsInDialog);
                if (flag)
                {
                    value = "RadDialogForFormsPagesNo";
                }
                controlNames.Add(key, value);
            }
            if (canExcludeFromOfflineClient.HasValue)
            {
                string key2 = "ctl00$PlaceHolderMain$AllowSyncSection$ctl02$AllowSync";
                string value2 = "RadAllowSyncYes";
                bool flag2 = System.Convert.ToBoolean(canExcludeFromOfflineClient);
                if (flag2)
                {
                    value2 = "RadAllowSyncNo";
                }
                controlNames.Add(key2, value2);
            }
            if (canDisableGridEditing.HasValue)
            {
                string key3 = "ctl00$PlaceHolderMain$AllowGridEditingSection$ctl02$AllowGrid";
                string value3 = "RadAllowGridYes";
                bool flag3 = System.Convert.ToBoolean(canDisableGridEditing);
                if (flag3)
                {
                    value3 = "RadAllowGridNo";
                }
                controlNames.Add(key3, value3);
            }
        }

        public string GetResponseStringFromPost(string pageUrl, string postData, string digest, string webUrl = null)
        {
            string uriString = string.IsNullOrEmpty(webUrl) ? this.Url : webUrl;
            System.Uri uri = new System.Uri(uriString);
            string cookieString = this.CookieManager.GetCookieString();
            System.Net.CookieContainer cookieContainer = new System.Net.CookieContainer();
            cookieContainer.SetCookies(uri, cookieString);
            return HttpHelper.GetResponseStringFromPost(pageUrl, postData, digest, this.Credentials.NetworkCredentials, cookieContainer);
        }

        private string GetBrowserEnabledDocumentValue(bool isDefaultItemOpenUseListSetting, string browserEnabledDocuments)
        {
            string result = string.Empty;
            if (isDefaultItemOpenUseListSetting)
            {
                if (browserEnabledDocuments.Equals("PreferClient", System.StringComparison.InvariantCultureIgnoreCase))
                {
                    result = "RadDefaultItemOpenPreferClient";
                }
                else
                {
                    result = "RadDefaultItemOpenBrowser";
                }
            }
            else
            {
                result = "RadDefaultItemOpenServerSetting";
            }
            return result;
        }

        public string DeleteList(string sListID)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (byId != null)
                    {
                        this.DeleteList(clientContext, byId);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void DeleteList(ClientContext ctx, List list)
        {
            try
            {
                list.DeleteObject();
                CSOMAdapter.CallExecuteQuery(ctx, this);
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.ServerErrorCode == -2147024860)
                {
                    this.ThrottleDeleteAllListItems(ctx, list);
                    list.DeleteObject();
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
                else
                {
                    if (ex.ServerErrorCode != -2130575299 && ex.ServerErrorCode != -2147016498)
                    {
                        throw;
                    }
                    ListCollection lists = ctx.Web.Lists;
                    ctx.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
                    {
                        (ListCollection listsy) => from l in listsy.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                            {
                                (List l) => l.Title
                            })
                            where l.Id == list.Id
                            select l
                    });
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                    if (lists.Count != 0)
                    {
                        throw;
                    }
                }
            }
        }

        private System.Collections.Generic.List<ListItemCollection> GetAllListItemsRecursive(ClientContext ctx, List list)
        {
            System.Collections.Generic.List<ListItemCollection> list2 = new System.Collections.Generic.List<ListItemCollection>();
            uint maxItemsPerThrottledOperation = this.GetMaxItemsPerThrottledOperation();
            CamlQuery camlQuery = new CamlQuery();
            camlQuery.ViewXml = new System.Text.StringBuilder().Append("<View Scope=\"RecursiveAll\">").Append("<ViewFields>").Append("<FieldRef Name=\"FSObjType\"/>").Append("</ViewFields>").AppendFormat("<RowLimit>{0}</RowLimit>", maxItemsPerThrottledOperation).Append("</View>").ToString();
            do
            {
                ListItemCollection items = list.GetItems(camlQuery);
                list.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                {
                    (ListItemCollection folders) => folders.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem folder) => (object)folder.Id,
                        (ListItem folder) => folder["FSObjType"]
                    }),
                    (ListItemCollection folders) => folders.ListItemCollectionPosition
                });
                list.Context.ExecuteQuery();
                int arg_20F_0 = items.Count;
                list2.Add(items);
                camlQuery.ListItemCollectionPosition = items.ListItemCollectionPosition;
            }
            while (camlQuery.ListItemCollectionPosition != null);
            return list2;
        }

        private void ThrottleDeleteAllListItems(ClientContext ctx, List list)
        {
            System.Collections.Generic.List<ListItemCollection> allListItemsRecursive = this.GetAllListItemsRecursive(ctx, list);
            System.Collections.Generic.List<ListItem> list2 = (from i in allListItemsRecursive.SelectMany((ListItemCollection i) => i)
                                                               orderby i["FSObjType"].ToString() == "1"
                                                               select i).ToList<ListItem>();
            int num = System.Convert.ToInt32(this.GetMaxItemsPerThrottledOperation());
            int num2 = 256;
            int num3 = System.Math.Min(num, num2);
            int j = list2.Count;
            int num4 = 0;
            while (j > num)
            {
                System.Collections.Generic.List<ListItem> list3 = list2.Skip(num4 * num3).Take(num3).ToList<ListItem>();
                if (list3.Count == 0)
                {
                    return;
                }
                int num5 = 0;
                foreach (ListItem current in list3)
                {
                    try
                    {
                        if (list.BaseType == BaseType.DocumentLibrary && current.FileSystemObjectType == FileSystemObjectType.File && current.File.CheckOutType != CheckOutType.None)
                        {
                            current.File.UndoCheckOut();
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                    try
                    {
                        current.DeleteObject();
                        num5++;
                    }
                    catch (System.Exception ex2)
                    {
                        CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                }
                try
                {
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
                catch (ServerException ex3)
                {
                    CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (!(ex3.Message == "The request uses too many resources."))
                    {
                        throw ex3;
                    }
                    num2 /= 2;
                    if (num2 < 1)
                    {
                        break;
                    }
                    num3 = System.Math.Min(num, num2);
                    continue;
                }
                j -= num5;
                num4++;
            }
        }

        public void SetColumnDefaultSettings(string configurationXml, OperationReporting opResult)
        {
            if (this.HasTaxonomySupport())
            {
                try
                {
                    using (ClientContext clientContext = this.GetClientContext())
                    {
                        ColumnDefaultValues columnDefaultValues = configurationXml.Deserialize<ColumnDefaultValues>();
                        List byId = clientContext.Web.Lists.GetById(new System.Guid(columnDefaultValues.ListId));
                        clientContext.Load<Folder>(byId.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (byId.RootFolder != null)
                        {
                            string serverRelativeUrl = byId.RootFolder.ServerRelativeUrl;
                            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                            System.Xml.XmlDocument xmlDocument2 = new System.Xml.XmlDocument();
                            System.Xml.XmlNode targetColumnDefaultValues = this.GetTargetColumnDefaultValues(serverRelativeUrl, xmlDocument2);
                            xmlDocument.LoadXml(columnDefaultValues.MetadataDefaultSettings);
                            System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("/Result/ObjectXml/MetadataDefaults");
                            if (xmlNode != null)
                            {
                                System.Xml.XmlNodeList xmlNodeList = xmlNode.SelectNodes("a");
                                if (xmlNodeList != null && xmlNodeList.Count > 0)
                                {
                                    foreach (System.Xml.XmlNode xmlNode2 in xmlNodeList)
                                    {
                                        string attributeValueAsString = xmlNode2.GetAttributeValueAsString("href");
                                        try
                                        {
                                            if (!string.IsNullOrEmpty(attributeValueAsString))
                                            {
                                                Folder folderFromTargetList = this.GetFolderFromTargetList(clientContext, byId, attributeValueAsString);
                                                if (folderFromTargetList != null)
                                                {
                                                    this.AddOrUpdateFieldValue(clientContext, attributeValueAsString, targetColumnDefaultValues, xmlDocument2, xmlNode2, byId, opResult);
                                                }
                                            }
                                        }
                                        catch (System.Exception ex)
                                        {
                                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                            if (targetColumnDefaultValues == null)
                                            {
                                                xmlNode.RemoveChild(xmlNode2);
                                            }
                                            if (!ex.Message.Contains("File Not Found."))
                                            {
                                                opResult.LogError(ex, string.Format("An error occured while setting column default value settings for folder '{0}'. Error : {1} ", attributeValueAsString, ex));
                                            }
                                            else
                                            {
                                                opResult.LogWarning(string.Format("Could not find folder at path: {0} ", attributeValueAsString), "");
                                            }
                                        }
                                    }
                                }
                                string folderUrl = string.Format("{0}/Forms/", serverRelativeUrl);
                                string fileData = string.IsNullOrEmpty(xmlDocument2.OuterXml) ? xmlNode.OuterXml : xmlDocument2.OuterXml;
                                this.AddFile(folderUrl, fileData, "client_LocationBasedDefaults.html");
                            }
                        }
                    }
                    return;
                }
                catch (System.Exception ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    opResult.LogError(ex2, string.Format("An error occured while setting column default value settings : {0} ", ex2));
                    return;
                }
            }
            opResult.LogError(new System.Exception("Could not load file or assembly 'Microsoft.Office.DocumentManagement'."), string.Empty);
        }

        private void AddOrUpdateFieldValue(ClientContext ctx, string targetFolderPath, System.Xml.XmlNode targetRootNode, System.Xml.XmlDocument targetXmlDoc, System.Xml.XmlNode anchorNode, List list, OperationReporting opResult)
        {
            string stringToEscape = System.Uri.UnescapeDataString(targetFolderPath);
            string text = System.Uri.EscapeUriString(stringToEscape);
            if (anchorNode.Attributes != null)
            {
                anchorNode.Attributes["href"].Value = text;
            }
            System.Xml.XmlNode xmlNode = anchorNode;
            System.Xml.XmlNode xmlNode2 = null;
            if (targetRootNode != null)
            {
                xmlNode2 = this.SetTargetFolderAnchorNode(targetRootNode, text, targetXmlDoc, anchorNode, ref xmlNode);
            }
            System.Collections.Generic.List<System.Xml.XmlNode> list2 = new System.Collections.Generic.List<System.Xml.XmlNode>();
            foreach (System.Xml.XmlNode xmlNode3 in xmlNode.ChildNodes)
            {
                string attributeValueAsString = xmlNode3.GetAttributeValueAsString("FieldName");
                try
                {
                    if (!string.IsNullOrEmpty(attributeValueAsString) && this.GetListField(ctx, list, attributeValueAsString) != null && xmlNode2 != null)
                    {
                        this.UpdateTargetColumnDefaultValue(attributeValueAsString, targetXmlDoc, xmlNode3, xmlNode2);
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    list2.Add(xmlNode3);
                    if (!ex.Message.Contains(string.Format("Column '{0}' does not exist.", attributeValueAsString)))
                    {
                        opResult.LogError(ex, string.Format("An error occured while setting column default value settings for field '{0}'. Error : {1} ", attributeValueAsString, ex));
                    }
                    else
                    {
                        opResult.LogWarning(string.Format("Could not find column : {0} ", attributeValueAsString), "");
                    }
                }
            }
            this.DeleteExtraDefaultValuesNode(list2, xmlNode);
        }

        private void DeleteExtraDefaultValuesNode(System.Collections.Generic.IEnumerable<System.Xml.XmlNode> nodesToDelete, System.Xml.XmlNode finalAnchorNode)
        {
            foreach (System.Xml.XmlNode current in nodesToDelete)
            {
                finalAnchorNode.RemoveChild(current);
            }
        }

        private Folder GetFolderFromTargetList(ClientContext ctx, List list, string destFolderPath)
        {
            Folder folderByServerRelativeUrl = list.ParentWeb.GetFolderByServerRelativeUrl(destFolderPath);
            ctx.Load<Folder>(folderByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[]
            {
                (Folder folder) => folder.Name
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            return folderByServerRelativeUrl;
        }

        private Field GetListField(ClientContext ctx, List list, string fieldInternalName)
        {
            ctx.Load<FieldCollection>(list.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
            {
                (FieldCollection fields) => from i in fields
                    where i.InternalName == fieldInternalName
                    select i
            });
            Field byInternalNameOrTitle = list.Fields.GetByInternalNameOrTitle(fieldInternalName);
            ctx.Load<Field>(byInternalNameOrTitle, new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
            {
                (Field field) => field.Title
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            return byInternalNameOrTitle;
        }

        private void UpdateTargetColumnDefaultValue(string fieldInternalName, System.Xml.XmlDocument targetXmlDoc, System.Xml.XmlNode defaultValueNode, System.Xml.XmlNode targetAnchorNode)
        {
            string xpath = string.Format("DefaultValue[@FieldName='{0}']", fieldInternalName);
            System.Xml.XmlNode xmlNode = targetAnchorNode.SelectSingleNode(xpath);
            if (xmlNode == null)
            {
                System.Xml.XmlNode newChild = targetXmlDoc.ImportNode(defaultValueNode, true);
                targetAnchorNode.AppendChild(newChild);
                return;
            }
            xmlNode.InnerText = defaultValueNode.InnerText;
        }

        private System.Xml.XmlNode SetTargetFolderAnchorNode(System.Xml.XmlNode targetRootNode, string encodedUrl, System.Xml.XmlDocument targetXmlDoc, System.Xml.XmlNode anchorNode, ref System.Xml.XmlNode finalAnchorNode)
        {
            System.Xml.XmlNode xmlNode = targetRootNode.SelectSingleNode(string.Format("/MetadataDefaults/a[@href='{0}']", encodedUrl));
            if (xmlNode == null)
            {
                xmlNode = targetXmlDoc.ImportNode(anchorNode, true);
                targetRootNode.AppendChild(xmlNode);
                finalAnchorNode = xmlNode;
            }
            return xmlNode;
        }

        private System.Xml.XmlNode GetTargetColumnDefaultValues(string listServerRelativeUrl, System.Xml.XmlDocument targetXmlDoc)
        {
            byte[] fileContents = this.GetFileContents(listServerRelativeUrl, "/Forms/client_LocationBasedDefaults.html");
            if (fileContents != null && fileContents.Length > 0)
            {
                string @string = System.Text.Encoding.UTF8.GetString(fileContents);
                targetXmlDoc.LoadXml(@string);
                return targetXmlDoc.SelectSingleNode("/MetadataDefaults");
            }
            return null;
        }

        public string AddView(string sListID, string sViewXML)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string htmlSchemaXml;
            try
            {
                if (!Utils.IsGuid(sListID))
                {
                    throw new System.ArgumentException("The specified List ID is not a valid GUID");
                }
                if (string.IsNullOrEmpty(sViewXML))
                {
                    throw new System.ArgumentException("The view XML is null or empty.");
                }
                sViewXML = "<Views>" + sViewXML + "</Views>";
                using (ClientContext clientContext = this.GetClientContext())
                {
                    List byId = clientContext.Web.Lists.GetById(new System.Guid(sListID));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List l) => l.Views.Include(new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                        {
                            (View v) => v.ServerRelativeUrl,
                            (View v) => v.ViewType,
                            (View v) => (object)v.Id
                        }),
                        (List l) => l.Fields,
                        (List l) => (object)l.Id,
                        (List l) => l.Title,
                        (List l) => (object)l.BaseTemplate,
                        (List l) => l.ContentTypes
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sViewXML);
                    this.AddViewsXML(clientContext, byId, xmlNode, false);
                    View view = CSOMAdapter.GetView(byId, xmlNode.ChildNodes[0].Attributes["Url"].Value);
                    if (!view.IsPropertyAvailable("HtmlSchemaXml"))
                    {
                        clientContext.Load<View>(view, new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                        {
                            (View v) => v.HtmlSchemaXml
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    htmlSchemaXml = view.HtmlSchemaXml;
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return htmlSchemaXml;
        }

        private void AddViewsXML(System.Guid listId, System.Xml.XmlNode viewXMLNode, bool bDeletePreExistingViews)
        {
            using (ClientContext clientContext = this.GetClientContext())
            {
                List byId = clientContext.Web.Lists.GetById(listId);
                clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List l) => l.Views.Include(new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                    {
                        (View v) => v.ServerRelativeUrl,
                        (View v) => v.ViewType,
                        (View v) => (object)v.Id
                    }),
                    (List l) => l.Fields,
                    (List l) => (object)l.Id,
                    (List l) => l.Title,
                    (List l) => (object)l.BaseTemplate,
                    (List l) => l.ContentTypes
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                this.AddViewsXML(clientContext, byId, viewXMLNode, bDeletePreExistingViews);
            }
        }

        private void AddViewsXML(ClientContext ctx, List list, System.Xml.XmlNode viewNodeXML, bool bDeletePreExistingViews)
        {
            if (viewNodeXML.ChildNodes.Count == 0)
            {
                return;
            }
            string xml = Utils.CorrectFieldReferencesInListViews(list.Fields.SchemaXml, viewNodeXML.OuterXml);
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(xml);
            viewNodeXML = xmlDocument.DocumentElement;
            if (bDeletePreExistingViews)
            {
                bool flag = false;
                foreach (System.Xml.XmlNode xmlNode in viewNodeXML.ChildNodes)
                {
                    System.Xml.XmlAttribute xmlAttribute = xmlNode.Attributes["DefaultView"];
                    if (xmlAttribute != null && xmlAttribute.Value.Equals("true", System.StringComparison.OrdinalIgnoreCase))
                    {
                        flag = true;
                        break;
                    }
                }
                if (!flag)
                {
                    System.Xml.XmlNode xmlNode2 = viewNodeXML.ChildNodes[0];
                    System.Xml.XmlAttribute xmlAttribute2 = xmlNode2.OwnerDocument.CreateAttribute("DefaultView");
                    xmlAttribute2.Value = "TRUE";
                    xmlNode2.Attributes.Append(xmlAttribute2);
                }
            }
            System.Collections.Generic.List<System.Guid> list2 = new System.Collections.Generic.List<System.Guid>();
            foreach (System.Xml.XmlNode xmlNode3 in viewNodeXML.ChildNodes)
            {
                string value = xmlNode3.Attributes["DisplayName"].Value;
                string value2 = xmlNode3.Attributes["Url"].Value;
                string text = value2.Substring(value2.LastIndexOf('/') + 1);
                text = text.Substring(0, text.IndexOf(".aspx", System.StringComparison.OrdinalIgnoreCase));
                bool flag2;
                if (xmlNode3.Attributes["DefaultView"] != null)
                {
                    bool.TryParse(xmlNode3.Attributes["DefaultView"].Value, out flag2);
                }
                else
                {
                    flag2 = false;
                }
                if (xmlNode3.Attributes["Personal"] != null)
                {
                    bool flag3;
                    bool.TryParse(xmlNode3.Attributes["Personal"].Value, out flag3);
                }
                else
                {
                    bool flag3 = false;
                }
                System.Xml.XmlNode xmlNode4 = xmlNode3.SelectSingleNode("./Query");
                if (xmlNode4 != null)
                {
                    System.Xml.XmlNode xmlNode5 = xmlNode4.SelectSingleNode("./GroupBy");
                    if (xmlNode5 != null && xmlNode5.ChildNodes.Count == 0)
                    {
                        xmlNode4.RemoveChild(xmlNode5);
                    }
                    System.Xml.XmlNode xmlNode6 = xmlNode4.SelectSingleNode("./OrderBy");
                    if (xmlNode6 != null && xmlNode6.ChildNodes.Count == 0)
                    {
                        xmlNode4.RemoveChild(xmlNode6);
                    }
                }
                xmlNode3.SelectSingleNode("./ViewFields");
                string sQuery = (xmlNode4 != null) ? xmlNode4.InnerXml : null;
                System.Xml.XmlNode xmlNode7 = xmlNode3.SelectSingleNode("./RowLimit");
                uint iRowLimit = (xmlNode7 != null) ? System.Convert.ToUInt32(xmlNode7.InnerText) : 0u;
                bool bPaged = xmlNode7 != null && xmlNode7.Attributes["Paged"] != null && xmlNode7.Attributes["Paged"].Value == "TRUE";
                System.Xml.XmlNode xmlNode8 = xmlNode3.SelectSingleNode("./Aggregations");
                string text2 = (xmlNode8 != null) ? xmlNode8.InnerXml : null;
                bool bAggregationStatus = text2 != null && xmlNode8.Attributes["Value"] != null && xmlNode8.Attributes["Value"].Value == "On";
                System.Xml.XmlNode xmlNode9 = xmlNode3.SelectSingleNode("./CalendarSettings");
                string sCalendarSettings = (xmlNode9 != null) ? xmlNode9.InnerXml : null;
                string text3 = (xmlNode3.Attributes["ContentTypeID"] != null && xmlNode3.Attributes["ContentTypeID"].Value != "0x") ? xmlNode3.Attributes["ContentTypeID"].Value : null;
                View view = CSOMAdapter.GetView(list, text);
                if (xmlNode3.Attributes["Type"].Value.Equals("Table", System.StringComparison.OrdinalIgnoreCase))
                {
                    if (view != null)
                    {
                        list2.Add(view.Id);
                    }
                }
                else
                {
                    string value3 = xmlNode3.Attributes["Type"].Value;
                    if (string.IsNullOrEmpty(value) || (xmlNode3.Attributes["Hidden"] != null && string.Equals(xmlNode3.Attributes["Hidden"].Value, "true", System.StringComparison.OrdinalIgnoreCase)))
                    {
                        if (view != null)
                        {
                            list2.Add(view.Id);
                        }
                    }
                    else
                    {
                        System.Xml.XmlNodeList xmlNodeList = xmlNode3.SelectNodes("./ViewFields/FieldRef/@Name");
                        System.Collections.Generic.List<string> list3 = new System.Collections.Generic.List<string>();
                        foreach (System.Xml.XmlNode xmlNode10 in xmlNodeList)
                        {
                            string text4 = xmlNode10.Value;
                            if (text4 == "Last_x0020_Modified")
                            {
                                text4 = "Modified";
                            }
                            Field fieldByNames = CSOMAdapter.GetFieldByNames(list.Fields, null, text4);
                            if (fieldByNames != null)
                            {
                                list3.Add(fieldByNames.InternalName);
                            }
                        }
                        if (view == null || (view != null && xmlNode3.Attributes["Type"] != null && !view.ViewType.Equals(xmlNode3.Attributes["Type"].Value, System.StringComparison.OrdinalIgnoreCase)))
                        {
                            if (view != null && xmlNode3.Attributes["Type"] != null && !view.ViewType.Equals(xmlNode3.Attributes["Type"].Value, System.StringComparison.OrdinalIgnoreCase))
                            {
                                view.DeleteObject();
                                CSOMAdapter.CallExecuteQuery(ctx, this);
                            }
                            View view2 = this.AddView(ctx, list.Id.ToString(), text, xmlNode4, xmlNode7, xmlNode3.SelectSingleNode("ViewData"), value3, flag2, text3, list3);
                            if (view2 != null)
                            {
                                this.AddViewSettings(ctx, list, view2, value, flag2, sQuery, iRowLimit, bPaged, text2, bAggregationStatus, text3, xmlNode3);
                                view2.Update();
                                ctx.Load<View>(view2, new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                                {
                                    (View v) => v.ServerRelativeUrl,
                                    (View v) => v.ViewType,
                                    (View v) => (object)v.Id
                                });
                                CSOMAdapter.CallExecuteQuery(ctx, this);
                                view = view2;
                            }
                        }
                        else
                        {
                            ctx.Load<ViewFieldCollection>(view.ViewFields, new System.Linq.Expressions.Expression<System.Func<ViewFieldCollection, object>>[0]);
                            ctx.Load<View>(view, new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                            {
                                (View v) => (object)v.MobileView,
                                (View v) => (object)v.MobileDefaultView
                            });
                            ctx.Load<Web>(ctx.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                            {
                                (Web v) => v.Url
                            });
                            CSOMAdapter.CallExecuteQuery(ctx, this);
                            if (list.BaseTemplate != 108)
                            {
                                foreach (string current in list3)
                                {
                                    if (!CSOMAdapter.ContainsViewField(view, current))
                                    {
                                        view.ViewFields.Add(current);
                                    }
                                    else
                                    {
                                        view.ViewFields.Remove(current);
                                        view.ViewFields.Add(current);
                                    }
                                }
                                System.Collections.Generic.List<string> list4 = new System.Collections.Generic.List<string>();
                                foreach (string current2 in view.ViewFields)
                                {
                                    if (!CSOMAdapter.ContainsExtraField(current2, list3) && !this.ViewFieldIsExplicit(current2, view.ViewFields))
                                    {
                                        list4.Add(current2);
                                    }
                                }
                                foreach (string current3 in list4)
                                {
                                    view.ViewFields.Remove(current3);
                                }
                                this.AddViewSettings(ctx, list, view, value, flag2, sQuery, iRowLimit, bPaged, text2, bAggregationStatus, text3, xmlNode3);
                                bool attributeValueAsBoolean = xmlNode3.GetAttributeValueAsBoolean("CopyCalendarOverlays");
                                this.AddViewCalendarSetting(list, view, sCalendarSettings, attributeValueAsBoolean, ctx.Web.Url);
                                view.Update();
                                CSOMAdapter.CallExecuteQuery(ctx, this);
                            }
                            else if (!value.Equals("Threaded"))
                            {
                                foreach (string current4 in list3)
                                {
                                    if (!CSOMAdapter.ContainsViewField(view, current4))
                                    {
                                        view.ViewFields.Add(current4);
                                    }
                                }
                                if (!value.Equals("Flat"))
                                {
                                    System.Collections.Generic.List<string> list5 = new System.Collections.Generic.List<string>();
                                    foreach (string current5 in view.ViewFields)
                                    {
                                        if (!CSOMAdapter.ContainsExtraField(current5, list3) && !this.ViewFieldIsExplicit(current5, view.ViewFields))
                                        {
                                            list5.Add(current5);
                                        }
                                    }
                                    foreach (string current6 in list5)
                                    {
                                        view.ViewFields.Remove(current6);
                                    }
                                }
                                this.AddViewSettings(ctx, list, view, value, flag2, sQuery, iRowLimit, bPaged, text2, bAggregationStatus, text3, xmlNode3);
                                view.Update();
                                CSOMAdapter.CallExecuteQuery(ctx, this);
                            }
                        }
                        if (view != null)
                        {
                            list2.Add(view.Id);
                        }
                    }
                }
            }
            if (bDeletePreExistingViews)
            {
                System.Collections.Generic.List<View> list6 = new System.Collections.Generic.List<View>();
                foreach (View current7 in list.Views)
                {
                    if (!list2.Contains(current7.Id) && !current7.Hidden && !string.IsNullOrEmpty(current7.Title))
                    {
                        list6.Add(current7);
                    }
                }
                foreach (View current8 in list6)
                {
                    current8.DeleteObject();
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
            }
        }

        private static View GetView(List list, string sUrlName)
        {
            if (sUrlName.Trim().EndsWith(".aspx", System.StringComparison.OrdinalIgnoreCase))
            {
                sUrlName = sUrlName.Substring(sUrlName.LastIndexOf('/') + 1);
                sUrlName = sUrlName.Substring(0, sUrlName.IndexOf(".aspx"));
            }
            foreach (View current in list.Views)
            {
                string text = current.ServerRelativeUrl.Substring(current.ServerRelativeUrl.LastIndexOf('/') + 1);
                text = text.Substring(0, text.IndexOf(".aspx", System.StringComparison.OrdinalIgnoreCase));
                if (text.Equals(sUrlName, System.StringComparison.OrdinalIgnoreCase))
                {
                    return current;
                }
            }
            return null;
        }

        private ViewType GetViewTypeValue(string viewType)
        {
            if (!string.Equals(viewType, ViewType.Calendar.ToString(), System.StringComparison.InvariantCultureIgnoreCase))
            {
                return (ViewType)System.Enum.Parse(typeof(ViewType), viewType, true);
            }
            return (ViewType)532481;
        }

        private View AddView(ClientContext clientContext, string listId, string sWantedViewUrlName, System.Xml.XmlNode nodeQuery, System.Xml.XmlNode nodeRowLimit, System.Xml.XmlNode viewData, string type, bool bDefaultView, string sContentTypeId, System.Collections.Generic.IEnumerable<string> listFieldRefNames)
        {
            List byId = clientContext.Web.Lists.GetById(new System.Guid(listId));
            ViewCreationInformation viewCreationInformation = new ViewCreationInformation();
            viewCreationInformation.Title = sWantedViewUrlName;
            viewCreationInformation.ViewTypeKind = this.GetViewTypeValue(type);
            if (nodeRowLimit != null)
            {
                viewCreationInformation.RowLimit = uint.Parse(nodeRowLimit.InnerText);
            }
            viewCreationInformation.SetAsDefaultView = bDefaultView;
            if (nodeQuery != null)
            {
                viewCreationInformation.Query = nodeQuery.InnerXml;
            }
            viewCreationInformation.ViewFields = listFieldRefNames.ToArray<string>();
            View view = byId.Views.Add(viewCreationInformation);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            if (viewData != null)
            {
                view.ViewData = viewData.InnerXml;
            }
            ContentTypeId contentTypeId = this.GetContentTypeId(sContentTypeId, byId, clientContext);
            if (contentTypeId != null)
            {
                view.ContentTypeId = contentTypeId;
            }
            view.Update();
            clientContext.Load<View>(view, new System.Linq.Expressions.Expression<System.Func<View, object>>[0]);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            return view;
        }

        public System.Xml.XmlNode UpdateViewSettings(string sListID, string sViewName, string sContentTypeId)
        {
            if (this.CookieManager != null && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            System.Xml.XmlNode result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    List byId = clientContext.Web.Lists.GetById(new System.Guid(sListID));
                    View byId2 = byId.Views.GetById(new System.Guid(sViewName));
                    ContentTypeId contentTypeId = this.GetContentTypeId(sContentTypeId, byId, clientContext);
                    if (contentTypeId != null)
                    {
                        byId2.ContentTypeId = contentTypeId;
                    }
                    byId2.Update();
                    clientContext.Load<View>(byId2, new System.Linq.Expressions.Expression<System.Func<View, object>>[]
                    {
                        (View o) => o.HtmlSchemaXml
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Xml.XmlTextReader reader = new System.Xml.XmlTextReader(new System.IO.StringReader(byId2.HtmlSchemaXml));
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    System.Xml.XmlNode xmlNode = xmlDocument.ReadNode(reader);
                    result = xmlNode;
                }
            }
            finally
            {
                if (this.CookieManager != null && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void AddViewCalendarSetting(List list, View view, string sCalendarSettings, bool copyCalendarOverlays, string targetWebUrl)
        {
            if (string.IsNullOrEmpty(sCalendarSettings) || !copyCalendarOverlays)
            {
                return;
            }
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(sCalendarSettings);
            System.Guid id = list.Id;
            System.Guid id2 = view.Id;
            string calendarOverSettingUrl = string.Concat(new object[]
            {
                targetWebUrl,
                "/_layouts/15/AggregationCustomize.aspx?List=",
                id,
                "&View=",
                id2
            });
            string calendarOverList = string.Concat(new object[]
            {
                targetWebUrl,
                "/_layouts/15/AggregationSettings.aspx?List=",
                id,
                "&View=",
                id2
            });
            System.Collections.Generic.Dictionary<string, System.Exception> dictionary = new System.Collections.Generic.Dictionary<string, System.Exception>();
            System.Xml.XmlNodeList xmlNodeList = xmlDocument.SelectNodes(".//AggregationCalendar");
            if (xmlNodeList.Count > 0)
            {
                System.Collections.Generic.List<string> existingOverlays = this.GetExistingOverlays(calendarOverList, targetWebUrl);
                foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
                {
                    string attributeValueAsString = xmlNode.GetAttributeValueAsString("Name");
                    if (attributeValueAsString != null && !this.IsExistingOverlay(existingOverlays, attributeValueAsString))
                    {
                        try
                        {
                            string attributeValueAsString2 = xmlNode.GetAttributeValueAsString("Type");
                            string attributeValueAsString3 = xmlNode.GetAttributeValueAsString("Description");
                            string attributeValueAsString4 = xmlNode.GetAttributeValueAsString("Color");
                            bool attributeValueAsBoolean = xmlNode.GetAttributeValueAsBoolean("AlwaysShow");
                            if (attributeValueAsString2.Equals("SharePoint", System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                this.AddSharePointOverlay(calendarOverSettingUrl, xmlNode, attributeValueAsString, attributeValueAsString3, attributeValueAsString4, attributeValueAsBoolean, targetWebUrl);
                            }
                            else
                            {
                                this.AddExchangeOverlay(calendarOverSettingUrl, xmlNode, attributeValueAsString, attributeValueAsString3, attributeValueAsString4, attributeValueAsBoolean, targetWebUrl);
                            }
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            dictionary.Add(attributeValueAsString, ex);
                        }
                    }
                }
            }
            if (dictionary.Count > 0)
            {
                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                stringBuilder.Append("Failed to add the following calendar overlays:\r\n");
                foreach (System.Collections.Generic.KeyValuePair<string, System.Exception> current in dictionary)
                {
                    stringBuilder.Append(current.Key + ": " + current.Value.Message + "\r\n");
                }
                throw new System.Exception(stringBuilder.ToString());
            }
        }

        private void AddExchangeOverlay(string calendarOverSettingUrl, System.Xml.XmlNode calendarOverlayNode, string overlayTitle, string overlayDescription, string overlayColor, bool overAlwaysShow, string targetWebUrl)
        {
            string text = string.Empty;
            string value = calendarOverlayNode.FirstChild.GetAttributeValueAsString("ServiceUrl").ToLower();
            string value2 = calendarOverlayNode.GetAttributeValueAsString("CalendarUrl").ToLower();
            string responseStringFromPost = this.GetResponseStringFromPost(calendarOverSettingUrl, text, string.Empty, targetWebUrl);
            System.Collections.Generic.Dictionary<string, string> dictionary = HttpHelper.PopulateParametersFromForm(responseStringFromPost);
            bool flag = dictionary.ContainsKey("__REQUESTDIGEST");
            if (flag && !string.IsNullOrEmpty(value) && !string.IsNullOrEmpty(value2))
            {
                string key = "ctl00$PlaceHolderMain$NameAndType$TypeOfCalendar$Type";
                string value3 = "RadioButtonExchange";
                string key2 = "ctl00$PlaceHolderMain$OptionalSettings$ColumnDescription$TxtFieldDescription";
                string key3 = "ctl00$PlaceHolderMain$NameAndType$CalendarName$TxtFieldTitle";
                string key4 = "ctl00$PlaceHolderMain$OptionalSettings$ColorSection$DropDownListColor";
                string key5 = "ctl00$PlaceHolderMain$OptionalSettings$OwaUrl$TxtFieldOwaUrl";
                string key6 = "ctl00$PlaceHolderMain$OptionalSettings$EwsUrl$TxtFieldWebServiceUrl";
                string key7 = "ctl00$PlaceHolderMain$OptionalSettings$CheckboxAddToAlwaysShow";
                dictionary[key] = value3;
                dictionary[key2] = overlayDescription;
                string stringToEscape = "ctl00$PlaceHolderMain$NameAndType$TypeOfCalendar$RadioButtonExchange";
                text = HttpHelper.GetPostDataFromForm(dictionary);
                text += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape));
                string responseStringFromPost2 = this.GetResponseStringFromPost(calendarOverSettingUrl, text, string.Empty, targetWebUrl);
                System.Collections.Generic.Dictionary<string, string> dictionary2 = HttpHelper.PopulateParametersFromForm(responseStringFromPost2);
                dictionary2[key3] = overlayTitle;
                dictionary2[key4] = overlayColor;
                dictionary2[key5] = value2;
                dictionary2[key6] = value;
                if (overAlwaysShow)
                {
                    dictionary2[key7] = "on";
                }
                string text2 = HttpHelper.GetPostDataFromForm(dictionary2);
                string stringToEscape2 = "ctl00$PlaceHolderMain$ctl00$RptControls$BtnOk";
                text2 += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape2));
                this.GetResponseStringFromPost(calendarOverSettingUrl, text2, string.Empty, targetWebUrl);
            }
        }

        private System.Collections.Generic.List<string> GetExistingOverlays(string calendarOverList, string targetWebUrl)
        {
            string responseStringFromPost = this.GetResponseStringFromPost(calendarOverList, string.Empty, string.Empty, targetWebUrl);
            return HttpHelper.GetParamsAsCollection(responseStringFromPost, "//tr/td/a[@id='LinkManageContentType']", null);
        }

        private bool IsExistingOverlay(System.Collections.Generic.List<string> existingOverlayCollection, string overlayTitle)
        {
            return existingOverlayCollection != null && existingOverlayCollection.Count > 0 && existingOverlayCollection.Contains(string.Format(" {0}", overlayTitle));
        }

        private void AddSharePointOverlay(string calendarOverSettingUrl, System.Xml.XmlNode calendarOverlayNode, string overlayTitle, string overlayDescription, string overlayColor, bool overAlwaysShow, string targetWebUrl)
        {
            string attributeValueAsString = calendarOverlayNode.FirstChild.GetAttributeValueAsString("WebUrl");
            string text = calendarOverlayNode.FirstChild.GetAttributeValueAsString("ListId").ToLower();
            string value = calendarOverlayNode.FirstChild.GetAttributeValueAsString("ViewId").ToLower();
            string empty = string.Empty;
            string responseStringFromPost = this.GetResponseStringFromPost(calendarOverSettingUrl, empty, string.Empty, targetWebUrl);
            System.Collections.Generic.Dictionary<string, string> dictionary = HttpHelper.PopulateParametersFromForm(responseStringFromPost);
            bool flag = dictionary.Keys.Contains("__REQUESTDIGEST");
            if (flag && !string.IsNullOrEmpty(value) && !string.IsNullOrEmpty(text))
            {
                string key = "ctl00$PlaceHolderMain$NameAndType$CalendarName$TxtFieldTitle";
                string key2 = "ctl00$PlaceHolderMain$OptionalSettings$ColorSection$DropDownListColor";
                string key3 = "ctl00$PlaceHolderMain$OptionalSettings$ListViewSection$DropDownListSharePointListView";
                string key4 = "ctl00$PlaceHolderMain$OptionalSettings$CheckboxAddToAlwaysShow";
                string htmlContent = this.SettingSharePointOverlayList(calendarOverSettingUrl, attributeValueAsString, overlayDescription, empty, text, dictionary, targetWebUrl);
                System.Collections.Generic.Dictionary<string, string> dictionary2 = HttpHelper.PopulateParametersFromForm(htmlContent);
                if (overAlwaysShow)
                {
                    dictionary2[key4] = "on";
                }
                dictionary2[key] = overlayTitle;
                dictionary2[key2] = overlayColor;
                dictionary2[key3] = value;
                string text2 = HttpHelper.GetPostDataFromForm(dictionary2);
                string stringToEscape = "ctl00$PlaceHolderMain$ctl00$RptControls$BtnOk";
                text2 += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape));
                this.GetResponseStringFromPost(calendarOverSettingUrl, text2, string.Empty, targetWebUrl);
            }
        }

        private string SettingSharePointOverlayList(string calendarOverSettingUrl, string overlayWebUrl, string overlayDescription, string initialPostData, string overlayReferencedListId, System.Collections.Generic.Dictionary<string, string> initialParameters, string targetWebUrl)
        {
            string key = "ctl00$PlaceHolderMain$OptionalSettings$ColumnDescription$TxtFieldDescription";
            string key2 = "ctl00$PlaceHolderMain$OptionalSettings$WebUrl$TxtFieldSharePointWebUrl";
            string key3 = "ctl00$PlaceHolderMain$OptionalSettings$ListSection$DropDownListSharePointList";
            initialParameters[key2] = overlayWebUrl;
            initialParameters[key] = overlayDescription;
            initialPostData = HttpHelper.GetPostDataFromForm(initialParameters);
            string stringToEscape = "ctl00$PlaceHolderMain$OptionalSettings$WebUrl$BtnResolve";
            initialPostData += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape));
            string responseStringFromPost = this.GetResponseStringFromPost(calendarOverSettingUrl, initialPostData, string.Empty, targetWebUrl);
            System.Collections.Generic.Dictionary<string, string> dictionary = HttpHelper.PopulateParametersFromForm(responseStringFromPost);
            dictionary[key3] = overlayReferencedListId;
            string stringToEscape2 = "ctl00$PlaceHolderMain$OptionalSettings$ListSection$DropDownListSharePointList";
            string text = HttpHelper.GetPostDataFromForm(dictionary);
            text += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape2));
            return this.GetResponseStringFromPost(calendarOverSettingUrl, text, string.Empty, targetWebUrl);
        }

        private void AddViewSettings(ClientContext clientContext, List list, View view, string sName, bool bIsDefault, string sQuery, uint iRowLimit, bool bPaged, string sAggregations, bool bAggregationStatus, string sContentTypeID, System.Xml.XmlNode viewNode)
        {
            view.Title = sName;
            view.DefaultView = bIsDefault;
            view.RowLimit = iRowLimit;
            view.Paged = bPaged;
            view.ViewQuery = sQuery;
            view.Scope = this.GetViewScopeFromXmlAttribute(viewNode);
            ContentTypeId contentTypeId = this.GetContentTypeId(sContentTypeID, list, clientContext);
            if (contentTypeId != null)
            {
                view.ContentTypeId = contentTypeId;
            }
            view.Aggregations = sAggregations;
            if (bAggregationStatus)
            {
                view.AggregationsStatus = "On";
            }
            System.Xml.XmlNode xmlNode = viewNode.SelectSingleNode("ViewData");
            if (xmlNode != null)
            {
                view.ViewData = xmlNode.InnerXml;
            }
            if (!string.Equals(view.ViewType, "Grid", System.StringComparison.OrdinalIgnoreCase) && !string.Equals(view.ViewType, "Gantt", System.StringComparison.OrdinalIgnoreCase))
            {
                System.Xml.XmlAttribute xmlAttribute = viewNode.Attributes[XmlAttributeNames.MobileView.ToString()];
                System.Xml.XmlAttribute xmlAttribute2 = viewNode.Attributes[XmlAttributeNames.MobileDefaultView.ToString()];
                if (xmlAttribute != null)
                {
                    bool attributeValueAsBoolean = viewNode.Attributes.GetAttributeValueAsBoolean(XmlAttributeNames.MobileView.ToString());
                    if (attributeValueAsBoolean != view.MobileView)
                    {
                        view.MobileView = attributeValueAsBoolean;
                    }
                }
                if (xmlAttribute2 != null)
                {
                    bool attributeValueAsBoolean2 = viewNode.Attributes.GetAttributeValueAsBoolean(XmlAttributeNames.MobileDefaultView.ToString());
                    if (attributeValueAsBoolean2 != view.MobileDefaultView)
                    {
                        view.MobileDefaultView = attributeValueAsBoolean2;
                    }
                }
            }
        }

        private ViewScope GetViewScopeFromXmlAttribute(System.Xml.XmlNode viewNode)
        {
            ViewScope result = ViewScope.DefaultValue;
            string attributeValueAsString = viewNode.GetAttributeValueAsString("Scope");
            if (!string.IsNullOrEmpty(attributeValueAsString) && System.Enum.IsDefined(typeof(ViewScope), attributeValueAsString))
            {
                result = (ViewScope)System.Enum.Parse(typeof(ViewScope), attributeValueAsString, true);
            }
            return result;
        }

        private ContentType GetExistingContentTypeFromWeb(ClientContext clientContext, List targetList, ContentTypeCollection availableContentTypeCollection, string parentContentTypeName)
        {
            ContentType result;
            try
            {
                ContentType contentType = this.GetContentTypeFromListByParent(parentContentTypeName, targetList);
                if (contentType == null)
                {
                    ContentType contentType2 = null;
                    if (availableContentTypeCollection.Count == 1)
                    {
                        contentType2 = availableContentTypeCollection[0];
                    }
                    if (contentType2 == null)
                    {
                        throw new System.ArgumentException("There is no content type \"" + parentContentTypeName + "\" available on this web");
                    }
                    contentType = targetList.ContentTypes.AddExistingContentType(contentType2);
                    clientContext.Load<ContentType>(contentType, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                    {
                        (ContentType ct) => ct.Name,
                        (ContentType ct) => ct.Parent,
                        (ContentType ct) => ct.Fields,
                        (ContentType ct) => (object)ct.Sealed,
                        (ContentType ct) => (object)ct.ReadOnly,
                        (ContentType ct) => ct.SchemaXml,
                        (ContentType ct) => ct.FieldLinks,
                        (ContentType ct) => ct.StringId
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
                result = contentType;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to get existing content type from web: {0}", ex));
            }
            return result;
        }

        private void RestoreTargetContentType(ClientContext clientContext, List targetList, bool wasContentTypeEnabled)
        {
            try
            {
                targetList.ContentTypesEnabled = wasContentTypeEnabled;
                targetList.Update();
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to restore target content type: {0}", ex));
            }
        }

        private Field GetContentTypeField(ContentType contentType, Web currentWeb, List targetList, string fieldId, string fieldName)
        {
            Field result;
            try
            {
                Field arg_34_0;
                if ((arg_34_0 = this.GetField(contentType.Fields, fieldName, fieldId)) == null)
                {
                    arg_34_0 = (CSOMAdapter.GetFieldByNames(currentWeb.Fields, null, fieldName) ?? CSOMAdapter.GetFieldByNames(targetList.Fields, null, fieldName));
                }
                Field field = arg_34_0;
                result = field;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to get content type field: {0}", ex));
            }
            return result;
        }

        private void AddOrUpdateContentTypeFieldsReference(ContentType targetContentType, Web currentWeb, List targetList, System.Xml.XmlNodeList fieldReferenceCollection, System.Xml.XmlDocument availableFieldsDocument, bool isAssetLibraryVideoContentType, System.Collections.Generic.List<string> fieldNameList)
        {
            try
            {
                foreach (System.Xml.XmlNode node in fieldReferenceCollection)
                {
                    string attributeValueAsString = node.GetAttributeValueAsString("ID");
                    string attributeValueAsString2 = node.GetAttributeValueAsString("Name");
                    if ((!isAssetLibraryVideoContentType || !attributeValueAsString.Equals("7e68a0f9-af76-404c-9613-6f82bc6dc28c", System.StringComparison.InvariantCultureIgnoreCase)) && (string.IsNullOrEmpty(attributeValueAsString) || !Utils.IsAdditionalLookupColumn(availableFieldsDocument, new System.Guid(attributeValueAsString), targetList.Fields.SchemaXml)))
                    {
                        Field contentTypeField = this.GetContentTypeField(targetContentType, currentWeb, targetList, attributeValueAsString, attributeValueAsString2);
                        FieldLink fieldLink = this.GetFieldLink(targetContentType.FieldLinks, attributeValueAsString2, attributeValueAsString);
                        if (contentTypeField != null)
                        {
                            if (!node.GetAttributeValueAsBoolean("Exclude") && fieldLink == null)
                            {
                                fieldLink = targetContentType.FieldLinks.Add(new FieldLinkCreationInformation
                                {
                                    Field = contentTypeField
                                });
                            }
                            if (fieldLink != null && !contentTypeField.Hidden)
                            {
                                bool attributeValueAsBoolean = node.GetAttributeValueAsBoolean("Required");
                                if (!fieldLink.IsPropertyAvailable("Required") || attributeValueAsBoolean != fieldLink.Required)
                                {
                                    fieldLink.Required = attributeValueAsBoolean;
                                }
                                bool attributeValueAsBoolean2 = node.GetAttributeValueAsBoolean("Hidden");
                                if (!fieldLink.IsPropertyAvailable("Hidden") || attributeValueAsBoolean2 != fieldLink.Hidden)
                                {
                                    fieldLink.Hidden = attributeValueAsBoolean2;
                                }
                            }
                            if (!fieldNameList.Contains(attributeValueAsString2))
                            {
                                fieldNameList.Add(attributeValueAsString2);
                            }
                            this.EnsureTaxonomyRelatedFieldsPresent(contentTypeField, ref fieldNameList);
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to add or update target content type field reference: {0}", ex));
            }
        }

        private void AddOrUpdateContentTypeFields(ContentType targetContentType, Web currentWeb, List targetList, System.Xml.XmlNodeList fieldCollection, System.Collections.Generic.List<string> fieldNameList)
        {
            try
            {
                foreach (System.Xml.XmlNode node in fieldCollection)
                {
                    string attributeValueAsString = node.GetAttributeValueAsString("Name");
                    string attributeValueAsString2 = node.GetAttributeValueAsString("ID");
                    Field field = this.GetField(targetContentType.Fields, attributeValueAsString, attributeValueAsString2);
                    if (field == null && !string.IsNullOrEmpty(attributeValueAsString))
                    {
                        field = CSOMAdapter.GetFieldByNames(currentWeb.Fields, null, attributeValueAsString);
                        if (field == null)
                        {
                            field = CSOMAdapter.GetFieldByNames(targetList.Fields, null, attributeValueAsString);
                        }
                        if (field != null)
                        {
                            targetContentType.FieldLinks.Add(new FieldLinkCreationInformation
                            {
                                Field = field
                            });
                        }
                    }
                    if (field != null && !fieldNameList.Contains(field.InternalName))
                    {
                        if (!fieldNameList.Contains(field.InternalName))
                        {
                            fieldNameList.Add(field.InternalName);
                        }
                        this.EnsureTaxonomyRelatedFieldsPresent(field, ref fieldNameList);
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to add or update target content type fields: {0}", ex));
            }
        }

        private void UpdateTargetContentType(ClientContext clientContext, Web currentWeb, List targetList, ContentType targetContentType, FieldCollection availableFields, string contentTypeXml)
        {
            try
            {
                if (!targetContentType.Sealed && !string.IsNullOrEmpty(contentTypeXml))
                {
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(contentTypeXml);
                    System.Xml.XmlNode documentElement = xmlDocument.DocumentElement;
                    bool? attributeValueAsNullableBoolean = documentElement.GetAttributeValueAsNullableBoolean("ReadOnly");
                    bool flag = attributeValueAsNullableBoolean.HasValue && targetContentType.ReadOnly && !attributeValueAsNullableBoolean.Value;
                    if (!targetContentType.ReadOnly || flag)
                    {
                        System.Xml.XmlDocument xmlDocument2 = new System.Xml.XmlDocument();
                        xmlDocument2.LoadXml(availableFields.SchemaXml);
                        if (flag)
                        {
                            targetContentType.ReadOnly = false;
                        }
                        targetContentType.Name = documentElement.GetAttributeValueAsString("Name");
                        targetContentType.Description = documentElement.GetAttributeValueAsString("Description");
                        string attributeValueAsString = documentElement.GetAttributeValueAsString("ID");
                        string stringId = targetContentType.Parent.StringId;
                        string listTemplate = targetList.BaseTemplate.ToString();
                        bool flag2 = Utils.IsVideoFile(listTemplate, attributeValueAsString, stringId);
                        System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
                        System.Xml.XmlNodeList xmlNodeList = xmlDocument.SelectNodes(".//FieldRef");
                        if (xmlNodeList != null)
                        {
                            this.AddOrUpdateContentTypeFieldsReference(targetContentType, currentWeb, targetList, xmlNodeList, xmlDocument2, flag2, list);
                        }
                        System.Xml.XmlNodeList xmlNodeList2 = xmlDocument.SelectNodes(".//Field");
                        if (xmlNodeList2 != null)
                        {
                            this.AddOrUpdateContentTypeFields(targetContentType, currentWeb, targetList, xmlNodeList2, list);
                        }
                        targetContentType.Update(false);
                        clientContext.Load<ContentType>(targetContentType, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                        {
                            (ContentType ct) => ct.Fields.SchemaXml,
                            (ContentType ct) => ct.FieldLinks.Include(new System.Linq.Expressions.Expression<System.Func<FieldLink, object>>[]
                            {
                                (FieldLink field) => (object)field.Id,
                                (FieldLink field) => field.Name
                            })
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        this.RemoveExtraTargetFieldLinks(targetContentType, targetList, list, xmlDocument2, flag2);
                        targetContentType.FieldLinks.Reorder(list.ToArray());
                        targetContentType.Update(false);
                        if (!flag2)
                        {
                            this.SetContentTypeXmlDocument(xmlDocument, targetContentType, targetList.Title);
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to update target content type: {0}", ex));
            }
        }

        private string GetContentTypeXml(ClientContext clientContext, ContentType contentType)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                this.GetContentTypeXML(clientContext, contentType, xmlWriter);
                xmlWriter.Flush();
            }
            return stringBuilder.ToString();
        }

        public string ApplyOrUpdateContentType(string listId, string parentContentTypeName, string contentTypeXml, bool doMakeDefaultContentType)
        {
            string result;
            try
            {
                this.AcquireCookieLock();
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(listId));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List tl) => (object)tl.ContentTypesEnabled,
                        (List tl) => from ct in tl.ContentTypes.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                            {
                                (ContentType ct) => ct.Name,
                                (ContentType ct) => ct.Parent,
                                (ContentType ct) => ct.Fields,
                                (ContentType ct) => (object)ct.Sealed,
                                (ContentType ct) => (object)ct.ReadOnly,
                                (ContentType ct) => ct.SchemaXml,
                                (ContentType ct) => ct.FieldLinks,
                                (ContentType ct) => ct.StringId
                            })
                            where ct.Name == parentContentTypeName || (ct.Parent != null && ct.Parent.Name == parentContentTypeName)
                            select ct,
                        (List tl) => tl.Fields,
                        (List tl) => (object)tl.Id,
                        (List tl) => tl.Title,
                        (List tl) => (object)tl.BaseTemplate
                    });
                    clientContext.Load<FieldCollection>(web.AvailableFields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                    {
                        (FieldCollection availableField) => availableField.SchemaXml
                    });
                    clientContext.Load<ContentTypeCollection>(web.AvailableContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
                    {
                        (ContentTypeCollection ct) => from c in ct
                            where c.Name == parentContentTypeName
                            select c
                    });
                    if (!string.IsNullOrEmpty(contentTypeXml))
                    {
                        clientContext.Load<FieldCollection>(web.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    bool contentTypesEnabled = byId.ContentTypesEnabled;
                    if (!byId.ContentTypesEnabled)
                    {
                        byId.ContentTypesEnabled = true;
                        byId.Update();
                    }
                    try
                    {
                        ContentType existingContentTypeFromWeb = this.GetExistingContentTypeFromWeb(clientContext, byId, web.AvailableContentTypes, parentContentTypeName);
                        if (existingContentTypeFromWeb == null)
                        {
                            throw new System.Exception("The content type was found to be available, but the adapter was unable to find the applied content type");
                        }
                        this.UpdateTargetContentType(clientContext, web, byId, existingContentTypeFromWeb, web.AvailableFields, contentTypeXml);
                        clientContext.Load<ContentType>(existingContentTypeFromWeb, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                        {
                            (ContentType ct) => ct.Name,
                            (ContentType ct) => ct.Id,
                            (ContentType ct) => ct.Description,
                            (ContentType ct) => ct.DocumentTemplate,
                            (ContentType ct) => ct.DocumentTemplateUrl,
                            (ContentType ct) => ct.Group,
                            (ContentType ct) => (object)ct.Hidden,
                            (ContentType ct) => (object)ct.ReadOnly,
                            (ContentType ct) => ct.Fields,
                            (ContentType ct) => ct.FieldLinks,
                            (ContentType ct) => ct.WorkflowAssociations,
                            (ContentType ct) => ct.SchemaXml
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (doMakeDefaultContentType)
                        {
                            this.SetListDefaultContentType(clientContext, byId, existingContentTypeFromWeb);
                        }
                        string contentTypeXml2 = this.GetContentTypeXml(clientContext, existingContentTypeFromWeb);
                        result = contentTypeXml2;
                    }
                    finally
                    {
                        this.RestoreTargetContentType(clientContext, byId, contentTypesEnabled);
                    }
                }
            }
            finally
            {
                this.ReleaseCookieLock();
            }
            return result;
        }

        private void RemoveExtraTargetFieldLinks(ContentType targetContentType, List targetList, System.Collections.Generic.List<string> sourceFields, System.Xml.XmlDocument sourceSchemaXml, bool isAssetLibraryVideoContentType)
        {
            try
            {
                System.Collections.Generic.List<FieldLink> list = new System.Collections.Generic.List<FieldLink>();
                if (!isAssetLibraryVideoContentType)
                {
                    System.Linq.IQueryable<FieldLink> collection = from fieldLink in targetContentType.FieldLinks
                                                                   where !sourceFields.Contains(fieldLink.Name) && !sourceFields.Contains(fieldLink.Id.ToString())
                                                                   select fieldLink;
                    list.AddRange(collection);
                }
                System.Collections.Generic.List<Field> list2 = null;
                if (this.HasTaxonomySupport())
                {
                    list2 = this.PopulateTaxonomyNoteFields(list, targetList);
                }
                using (System.Collections.Generic.List<FieldLink>.Enumerator enumerator = list.GetEnumerator())
                {
                    while (enumerator.MoveNext())
                    {
                        FieldLink fieldLink = enumerator.Current;
                        if (list2 != null)
                        {
                            if (list2.SingleOrDefault((Field fld) => fld.InternalName == fieldLink.Name) != null)
                            {
                                continue;
                            }
                        }
                        if (!Utils.IsAdditionalLookupColumn(sourceSchemaXml, fieldLink.Id, targetList.Fields.SchemaXml))
                        {
                            fieldLink.DeleteObject();
                        }
                    }
                }
                System.Collections.Generic.List<string> list3 = new System.Collections.Generic.List<string>();
                using (System.Collections.Generic.List<string>.Enumerator enumerator2 = sourceFields.GetEnumerator())
                {
                    while (enumerator2.MoveNext())
                    {
                        string field = enumerator2.Current;
                        if (!targetContentType.FieldLinks.Any((FieldLink fieldLink) => fieldLink.Name.Equals(field, System.StringComparison.OrdinalIgnoreCase) || fieldLink.Id.ToString().Equals(field, System.StringComparison.OrdinalIgnoreCase)))
                        {
                            list3.Add(field);
                        }
                    }
                }
                foreach (string current in list3)
                {
                    sourceFields.Remove(current);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format("Failed to remove extra target fieldlinks: {0}", ex));
            }
        }

        private void SetListDefaultContentType(ClientContext clientContext, List targetList, ContentType targetContentType)
        {
            try
            {
                clientContext.Load<List>(targetList, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List l) => l.RootFolder,
                    (List l) => l.RootFolder.UniqueContentTypeOrder,
                    (List l) => l.RootFolder.ContentTypeOrder,
                    (List l) => l.ContentTypes
                });
                clientContext.Load<ContentTypeCollection>(targetList.ContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
                {
                    (ContentTypeCollection ct) => ct.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                    {
                        (ContentType contentType) => contentType.Name,
                        (ContentType contentType) => contentType.Id,
                        (ContentType contentType) => (object)contentType.Sealed
                    })
                });
                clientContext.ExecuteQuery();
                System.Collections.Generic.IList<ContentTypeId> contentTypeOrder = targetList.RootFolder.ContentTypeOrder;
                System.Collections.Generic.List<string> list = (from contentType in contentTypeOrder.Select(delegate (ContentTypeId contentTypeId)
                    {
                        return targetList.ContentTypes.SingleOrDefault((ContentType ct) => ct.Id.ToString().Equals(contentTypeId.ToString(), System.StringComparison.InvariantCultureIgnoreCase));
                    })
                                                                where contentType != null
                                                                select contentType.Name).ToList<string>();
                if (targetContentType != null && !list.Contains(targetContentType.Name))
                {
                    list.Add(targetContentType.Name);
                }
                this.ReorderContentType(clientContext, list.ToArray(), targetList, targetContentType);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception("Failed to change list's default content type: " + ex.Message);
            }
        }

        private System.Collections.Generic.List<Field> PopulateTaxonomyNoteFields(System.Collections.Generic.List<FieldLink> fieldsToRemove, List targetList)
        {
            System.Collections.Generic.List<Field> list = new System.Collections.Generic.List<Field>();
            if (this.HasTaxonomySupport())
            {
                System.Guid guid = new System.Guid("8f6b6dd8-9357-4019-8172-966fcd502ed2");
                foreach (FieldLink current in fieldsToRemove)
                {
                    Field field = this.GetField(targetList.Fields, current.Name, current.Id.ToString());
                    if (field != null && object.Equals(field.Id, guid))
                    {
                        list.Add(field);
                    }
                    else
                    {
                        TaxonomyField taxonomyField = field as TaxonomyField;
                        if (taxonomyField != null)
                        {
                            Field field2 = this.GetField(targetList.Fields, string.Empty, taxonomyField.TextField.ToString());
                            if (field2 != null)
                            {
                                list.Add(field2);
                            }
                        }
                    }
                }
            }
            return list;
        }

        private void SetContentTypeXmlDocument(System.Xml.XmlDocument sourceXmlDoc, ContentType contentType, string listTitle)
        {
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(contentType.SchemaXml);
            System.Xml.XmlNodeList xmlNodeList = xmlDocument.SelectNodes(".//XmlDocument");
            System.Xml.XmlNodeList xmlNodeList2 = sourceXmlDoc.SelectNodes(".//XmlDocument");
            if (xmlNodeList2 != null)
            {
                System.Collections.IEnumerator enumerator = xmlNodeList2.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    System.Xml.XmlNode sourceNode = (System.Xml.XmlNode)enumerator.Current;
                    System.Xml.XmlNode xmlNode = null;
                    if (xmlNodeList != null)
                    {
                        xmlNode = xmlNodeList.Cast<System.Xml.XmlNode>().FirstOrDefault((System.Xml.XmlNode p) => p.InnerXml.Equals(sourceNode.InnerXml, System.StringComparison.InvariantCultureIgnoreCase));
                    }
                    if (xmlNode == null)
                    {
                        this.NWSAdapter.SetContentTypeXmlDocument(sourceNode.InnerXml, contentType.StringId, listTitle);
                    }
                }
            }
        }

        private ContentType GetContentTypeFromListByParent(string parentContentTypeName, List list)
        {
            return list.ContentTypes.FirstOrDefault((ContentType contentType) => contentType.Parent != null && contentType.Parent.Name == parentContentTypeName);
        }

        private ContentTypeId GetContentTypeId(string sContentTypeId, List list, ClientContext clientContext)
        {
            if (string.IsNullOrEmpty(sContentTypeId))
            {
                return null;
            }
            if (sContentTypeId.Equals("0x012001"))
            {
                string rootCollection = this.GetRootCollection(this);
                using (ClientContext clientContext2 = this.GetClientContext(rootCollection, this, false))
                {
                    ContentType webContentType = this.GetWebContentType(clientContext2.Web, sContentTypeId);
                    if (webContentType != null)
                    {
                        ContentTypeId id = webContentType.Id;
                        return id;
                    }
                }
            }
            clientContext.Load<ContentTypeCollection>(list.ContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            foreach (ContentType current in list.ContentTypes)
            {
                if (current.Id.ToString().Equals(sContentTypeId, System.StringComparison.OrdinalIgnoreCase))
                {
                    ContentTypeId id = current.Id;
                    return id;
                }
            }
            return null;
        }

        public string ReorderContentTypes(string listId, string[] contentTypeCollection)
        {
            if (contentTypeCollection.Length < 2)
            {
                return string.Empty;
            }
            using (ClientContext clientContext = this.GetClientContext())
            {
                Web web = clientContext.Web;
                List byId = web.Lists.GetById(new System.Guid(listId));
                clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List tl) => tl.ContentTypes
                });
                clientContext.ExecuteQuery();
                if (byId == null)
                {
                    throw new System.ArgumentException("Could not find list to update");
                }
                this.ReorderContentType(clientContext, contentTypeCollection, byId, null);
            }
            return string.Empty;
        }

        private void ReorderContentType(ClientContext ctx, string[] contentTypeCollection, List targetList, ContentType targetContentType)
        {
            ContentTypeCollection contentTypes = targetList.ContentTypes;
            System.Collections.Generic.IList<ContentTypeId> list = new System.Collections.Generic.List<ContentTypeId>();
            bool flag = false;
            for (int i = 0; i < contentTypeCollection.Length; i++)
            {
                string contentTypeName = contentTypeCollection[i];
                ContentType contentType = contentTypes.SingleOrDefault((ContentType ct) => ct.Name.Equals(contentTypeName, System.StringComparison.InvariantCultureIgnoreCase));
                if (contentType != null && (!contentType.Id.StringValue.StartsWith("0x012000") || !contentType.Sealed))
                {
                    if (targetContentType != null && contentType.Id.StringValue.Equals(targetContentType.Id.StringValue, System.StringComparison.InvariantCultureIgnoreCase))
                    {
                        list.Insert(0, contentType.Id);
                        flag = true;
                    }
                    else
                    {
                        list.Add(contentType.Id);
                    }
                }
            }
            if (flag || targetContentType == null)
            {
                targetList.RootFolder.UniqueContentTypeOrder = list;
                targetList.RootFolder.Update();
                targetList.Update();
                ctx.ExecuteQuery();
            }
        }

        public string DeleteContentTypes(string sListID, string[] contentTypeIDs)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    ContentTypeCollection contentTypes;
                    if (!string.IsNullOrEmpty(sListID))
                    {
                        List byId = web.Lists.GetById(new System.Guid(sListID));
                        clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        contentTypes = byId.ContentTypes;
                    }
                    else
                    {
                        contentTypes = web.ContentTypes;
                    }
                    clientContext.Load<ContentTypeCollection>(contentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Collections.Generic.List<ContentType> list = new System.Collections.Generic.List<ContentType>();
                    for (int i = 0; i < contentTypeIDs.Length; i++)
                    {
                        string contentTypeId = contentTypeIDs[i];
                        list.Add(contentTypes.GetById(contentTypeId));
                    }
                    System.Collections.Generic.Dictionary<ContentType, System.Exception> dictionary = new System.Collections.Generic.Dictionary<ContentType, System.Exception>();
                    foreach (ContentType current in list)
                    {
                        try
                        {
                            current.DeleteObject();
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            dictionary.Add(current, ex);
                        }
                    }
                    if (dictionary.Count > 0)
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        stringBuilder.Append("Failed to delete the following content types:\r\n");
                        foreach (System.Collections.Generic.KeyValuePair<ContentType, System.Exception> current2 in dictionary)
                        {
                            stringBuilder.Append(current2.Key.Name + ": " + current2.Value.Message + "\r\n");
                        }
                        throw new System.Exception(stringBuilder.ToString());
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void SetContentTypeID(List spList, ListItem spListItem, System.Xml.XmlNode fieldXML, System.Xml.XmlNode itemXML)
        {
            string value = fieldXML.Attributes["Name"].Value;
            System.Xml.XmlNode attribute = XmlUtility.GetAttribute(itemXML, null, "ContentType", false);
            object obj = null;
            if (attribute != null)
            {
                string value2 = attribute.Value;
                if (spList.BaseTemplate == 107 && (value2 == "Workflow Task" || value2 == "Office SharePoint Server Workflow Task"))
                {
                    spListItem[value] = "";
                    return;
                }
                foreach (ContentType current in spList.ContentTypes)
                {
                    if (current.Name == value2)
                    {
                        obj = current.Id;
                    }
                }
            }
            if (obj == null)
            {
                System.Xml.XmlNode attribute2 = XmlUtility.GetAttribute(itemXML, null, value, false);
                if (attribute2 != null)
                {
                    obj = this.CastStringToFieldType(attribute2.Value, value, fieldXML);
                }
            }
            try
            {
                spListItem[value] = obj;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception("Source Value: " + obj.ToString() + ", Exception: " + ex.Message);
            }
        }

        public string AddRoleAssignment(string sPrincipalName, bool bIsGroup, string sRoleName, string sListID, int iItemId)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    RoleAssignmentCollection roleAssignmentCollection = null;
                    if (sListID == null)
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web w) => (object)w.HasUniqueRoleAssignments
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (!web.HasUniqueRoleAssignments)
                        {
                            web.BreakRoleInheritance(true, false);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        roleAssignmentCollection = web.RoleAssignments;
                    }
                    else
                    {
                        List byId = web.Lists.GetById(new System.Guid(sListID));
                        clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List l) => (object)l.HasUniqueRoleAssignments
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (iItemId < 0)
                        {
                            if (!byId.HasUniqueRoleAssignments)
                            {
                                byId.BreakRoleInheritance(true, false);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            roleAssignmentCollection = byId.RoleAssignments;
                        }
                        else
                        {
                            ListItem itemById = byId.GetItemById(iItemId);
                            clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem i) => (object)i.HasUniqueRoleAssignments
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            if (!itemById.HasUniqueRoleAssignments)
                            {
                                itemById.BreakRoleInheritance(true, false);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            roleAssignmentCollection = itemById.RoleAssignments;
                        }
                    }
                    clientContext.Load<RoleAssignmentCollection>(roleAssignmentCollection, new System.Linq.Expressions.Expression<System.Func<RoleAssignmentCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    Principal principal = bIsGroup ? (Principal)web.SiteGroups.GetByName(sPrincipalName) : this.LookupUser(sPrincipalName, web);
                    RoleDefinition byName = web.RoleDefinitions.GetByName(sRoleName);
                    clientContext.Load<RoleDefinition>(byName, new System.Linq.Expressions.Expression<System.Func<RoleDefinition, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    try
                    {
                        RoleAssignment roleAssignment = roleAssignmentCollection.GetByPrincipal(principal);
                        clientContext.Load<RoleAssignment>(roleAssignment, new System.Linq.Expressions.Expression<System.Func<RoleAssignment, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (!roleAssignment.RoleDefinitionBindings.Contains(byName))
                        {
                            roleAssignment.RoleDefinitionBindings.Add(byName);
                        }
                        roleAssignment.Update();
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        RoleAssignment roleAssignment = roleAssignmentCollection.Add(principal, new RoleDefinitionBindingCollection(clientContext)
                        {
                            byName
                        });
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    result = string.Format("<RoleAssignment RoleName=\"{0}\" PrincipalName=\"{1}\" />", sRoleName, sPrincipalName);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string DeleteRoleAssignment(string sPrincipalName, bool bIsGroup, string sRoleName, string sListID, int iItemId)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    RoleAssignmentCollection roleAssignmentCollection = null;
                    List list = null;
                    if (sListID == null)
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web w) => (object)w.HasUniqueRoleAssignments
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (!web.HasUniqueRoleAssignments)
                        {
                            web.BreakRoleInheritance(true, false);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        roleAssignmentCollection = web.RoleAssignments;
                    }
                    else
                    {
                        list = web.Lists.GetById(new System.Guid(sListID));
                        clientContext.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List l) => (object)l.HasUniqueRoleAssignments
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (iItemId < 0)
                        {
                            if (!list.HasUniqueRoleAssignments)
                            {
                                list.BreakRoleInheritance(true, false);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            roleAssignmentCollection = list.RoleAssignments;
                        }
                        else
                        {
                            ListItem itemById = list.GetItemById(iItemId);
                            clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem i) => (object)i.HasUniqueRoleAssignments
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            if (!itemById.HasUniqueRoleAssignments)
                            {
                                itemById.BreakRoleInheritance(true, false);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            roleAssignmentCollection = itemById.RoleAssignments;
                        }
                    }
                    clientContext.Load<RoleAssignmentCollection>(roleAssignmentCollection, new System.Linq.Expressions.Expression<System.Func<RoleAssignmentCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    Principal principalToFind = bIsGroup ? (Principal)web.SiteGroups.GetByName(sPrincipalName) : this.LookupUser(sPrincipalName, web);
                    RoleAssignment byPrincipal;
                    try
                    {
                        byPrincipal = roleAssignmentCollection.GetByPrincipal(principalToFind);
                        clientContext.Load<RoleAssignment>(byPrincipal, new System.Linq.Expressions.Expression<System.Func<RoleAssignment, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.ArgumentException ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        return string.Empty;
                    }
                    if (sRoleName != null)
                    {
                        RoleDefinition def = web.RoleDefinitions.GetByName(sRoleName);
                        clientContext.Load<RoleDefinitionBindingCollection>(byPrincipal.RoleDefinitionBindings, new System.Linq.Expressions.Expression<System.Func<RoleDefinitionBindingCollection, object>>[0]);
                        clientContext.Load<RoleDefinition>(def, new System.Linq.Expressions.Expression<System.Func<RoleDefinition, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        bool flag = byPrincipal.RoleDefinitionBindings.Any((RoleDefinition roleDefinitionBinding) => roleDefinitionBinding.Name.Equals(def.Name, System.StringComparison.InvariantCulture) && roleDefinitionBinding.Id == def.Id);
                        if (flag)
                        {
                            if (byPrincipal.RoleDefinitionBindings.Count == 1)
                            {
                                byPrincipal.RoleDefinitionBindings.RemoveAll();
                            }
                            else
                            {
                                byPrincipal.RoleDefinitionBindings.Remove(def);
                            }
                            byPrincipal.Update();
                        }
                    }
                    else
                    {
                        roleAssignmentCollection.GetByPrincipal(principalToFind).DeleteObject();
                        if (string.IsNullOrEmpty(sListID))
                        {
                            web.Update();
                        }
                        else if (iItemId < 0)
                        {
                            list.Update();
                        }
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string AddFields(string listId, string fieldsXml)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(fieldsXml);
                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web1) => (object)web1.Id,
                        (Web web2) => web2.ServerRelativeUrl,
                        (Web web3) => web3.Url
                    });
                    if (listId != null)
                    {
                        List byId = web.Lists.GetById(new System.Guid(listId));
                        clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                        {
                            (List l) => l.Fields
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        FieldCollection fields = byId.Fields;
                        this.AddFieldsXML(clientContext, byId, fields, xmlDocument.DocumentElement, null);
                        clientContext.Load<FieldCollection>(byId.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        this.WriteFieldsToXML(clientContext, xmlWriter, web, byId.Fields);
                    }
                    else
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web w) => w.Fields,
                            (Web w) => w.AvailableFields,
                            (Web w) => (object)w.Id,
                            (Web w) => w.Url
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        FieldCollection fields = web.Fields;
                        this.AddFieldsXML(clientContext, null, fields, xmlDocument.DocumentElement, null);
                        clientContext.Load<FieldCollection>(web.AvailableFields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        this.WriteFieldsToXML(clientContext, xmlWriter, web, web.AvailableFields);
                    }
                }
                result = stringBuilder.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string DisableValidationSettings(string listID)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byId = web.Lists.GetById(new System.Guid(listID));
                    clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List list) => list.Title,
                        (List list) => list.RootFolder.ServerRelativeUrl
                    });
                    FieldCollection fields = byId.Fields;
                    System.Collections.Generic.IEnumerable<Field> enumerable = clientContext.LoadQuery<Field>(fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                    {
                        (Field field) => (object)field.Id,
                        (Field field) => field.Title,
                        (Field field) => field.ValidationFormula
                    }));
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Collections.Generic.IEnumerable<Field> source = from field in enumerable
                                                                           where field.ValidationFormula != null
                                                                           select field;
                    if (source.Any<Field>())
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                        xmlTextWriter.WriteStartElement("List");
                        xmlTextWriter.WriteAttributeString("ID", listID);
                        xmlTextWriter.WriteAttributeString("Name", byId.Title);
                        xmlTextWriter.WriteAttributeString("Url", byId.RootFolder.ServerRelativeUrl);
                        xmlTextWriter.WriteStartElement("Fields");
                        this.DisableValidationSettingOnTargetFields(enumerable, xmlTextWriter, operationReporting, clientContext);
                        xmlTextWriter.WriteEndElement();
                        xmlTextWriter.WriteEndElement();
                        operationReporting.LogObjectXml(stringBuilder.ToString());
                    }
                    else
                    {
                        operationReporting.LogObjectXml(string.Empty);
                    }
                }
            }
            catch (System.Exception ex)
            {
                string detail = string.Format("An error occurred while disabling validation settings for list with ID: '{0}'", listID);
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, detail);
            }
            finally
            {
                operationReporting.End();
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return operationReporting.ResultXml;
        }

        public string EnableValidationSettings(string validationNodeFieldsXml)
        {
            string text = string.Empty;
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(validationNodeFieldsXml);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    text = firstChild.GetAttributeValueAsString("ID");
                    FieldCollection fields = web.Lists.GetById(new System.Guid(text)).Fields;
                    System.Collections.Generic.IEnumerable<Field> fields2 = clientContext.LoadQuery<Field>(fields.Include(new System.Linq.Expressions.Expression<System.Func<Field, object>>[]
                    {
                        (Field field) => (object)field.Id,
                        (Field field) => field.Title,
                        (Field field) => field.ValidationFormula
                    }));
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.EnableValidationSettingOnTargetFields(fields2, firstChild, operationReporting, clientContext);
                }
            }
            catch (System.Exception ex)
            {
                string detail = string.Format("An error occurred while enabling validation settings for list with ID: '{0}'", text);
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, detail);
            }
            finally
            {
                operationReporting.End();
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return operationReporting.ResultXml;
        }

        private void DisableValidationSettingOnTargetFields(System.Collections.Generic.IEnumerable<Field> fields, System.Xml.XmlTextWriter xmlWriter, OperationReporting reporting, ClientContext ctx)
        {
            if (fields != null && fields.Any<Field>())
            {
                foreach (Field current in fields)
                {
                    try
                    {
                        if (current.ValidationFormula != null)
                        {
                            xmlWriter.WriteStartElement("Field");
                            xmlWriter.WriteAttributeString("ID", current.Id.ToString());
                            xmlWriter.WriteAttributeString("Validation", current.ValidationFormula);
                            xmlWriter.WriteEndElement();
                            current.ValidationFormula = string.Empty;
                            current.Update();
                        }
                    }
                    catch (System.Exception ex)
                    {
                        string detail = string.Format("An error occurred while disabling validation settings for field '{0}'", current.Title);
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        reporting.LogError(ex, detail);
                    }
                }
                CSOMAdapter.CallExecuteQuery(ctx, this);
            }
        }

        private void EnableValidationSettingOnTargetFields(System.Collections.Generic.IEnumerable<Field> fields, System.Xml.XmlNode fieldsNode, OperationReporting reporting, ClientContext ctx)
        {
            System.Xml.XmlNodeList xmlNodeList = fieldsNode.SelectNodes(".//Field");
            if (xmlNodeList != null && xmlNodeList.Count > 0)
            {
                System.Collections.IEnumerator enumerator = xmlNodeList.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    System.Xml.XmlNode node = (System.Xml.XmlNode)enumerator.Current;
                    System.Guid fieldID = node.GetAttributeValueAsGuid("ID");
                    try
                    {
                        Field field2 = fields.First((Field field) => field.Id.Equals(fieldID));
                        if (field2 != null)
                        {
                            field2.ValidationFormula = node.GetAttributeValueAsString("Validation");
                            field2.Update();
                        }
                    }
                    catch (System.Exception ex)
                    {
                        string detail = string.Format("An error occurred while enabling validation setting for field '{0}'", fieldID.ToString());
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        reporting.LogError(ex, detail);
                    }
                }
                CSOMAdapter.CallExecuteQuery(ctx, this);
            }
        }

        public string AddDocumentSetVersions(string listName, string listItemID, string updatedTargetMetaInfo)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    List byTitle = web.Lists.GetByTitle(listName);
                    ListItem itemById = byTitle.GetItemById(listItemID);
                    clientContext.Load<List>(byTitle, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List li) => (object)li.EnableModeration
                    });
                    clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                    clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem item) => item["Editor"],
                        (ListItem item) => item["Modified"],
                        (ListItem item) => item["Modified_x0020_By"],
                        (ListItem item) => item["_ModerationStatus"]
                    });
                    clientContext.ExecuteQuery();
                    object modified = itemById["Modified"];
                    object modifiedBy = itemById["Modified_x0020_By"];
                    FieldLookupValue fieldLookupValue = itemById["Editor"] as FieldLookupValue;
                    FieldUserValue fieldUserValue = new FieldUserValue();
                    int num = -1;
                    if (fieldLookupValue != null)
                    {
                        num = fieldLookupValue.LookupId;
                    }
                    string text = string.Empty;
                    string moderationComments = string.Empty;
                    if (byTitle.EnableModeration)
                    {
                        if (itemById["_ModerationStatus"] != null)
                        {
                            text = itemById["_ModerationStatus"].ToString();
                        }
                        if (itemById["_ModerationComments"] != null)
                        {
                            moderationComments = itemById["_ModerationComments"].ToString();
                        }
                    }
                    if (num != -1)
                    {
                        fieldUserValue.LookupId = num;
                    }
                    if (byTitle.EnableModeration && !string.IsNullOrEmpty(text) && !text.Equals("2", System.StringComparison.OrdinalIgnoreCase))
                    {
                        if (text.Equals("0", System.StringComparison.OrdinalIgnoreCase))
                        {
                            byTitle.EnableModeration = false;
                            byTitle.Update();
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            CSOMAdapter.SetMetaInfoAndAuthorshipData(updatedTargetMetaInfo, itemById, modified, modifiedBy, fieldUserValue);
                            CSOMAdapter.SetModerationInformation(itemById, text, moderationComments);
                            itemById.Update();
                            byTitle.EnableModeration = true;
                            byTitle.Update();
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        if (text.Equals("1", System.StringComparison.OrdinalIgnoreCase))
                        {
                            itemById.ParseAndSetFieldValue("MetaInfo", updatedTargetMetaInfo);
                            itemById.Update();
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            CSOMAdapter.SetModerationInformation(itemById, text, moderationComments);
                            itemById.Update();
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                    }
                    else
                    {
                        CSOMAdapter.SetMetaInfoAndAuthorshipData(updatedTargetMetaInfo, itemById, modified, modifiedBy, fieldUserValue);
                        itemById.Update();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "An error occurred while copying document set version history");
            }
            finally
            {
                operationReporting.End();
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return operationReporting.ResultXml;
        }

        private static void SetModerationInformation(ListItem listItem, string moderationStatus, string moderationComments)
        {
            if (!string.IsNullOrEmpty(moderationStatus))
            {
                listItem["_ModerationStatus"] = moderationStatus;
            }
            if (!string.IsNullOrEmpty(moderationComments))
            {
                listItem["_ModerationComments"] = moderationComments;
            }
        }

        private static void SetMetaInfoAndAuthorshipData(string updatedTargetMetaInfo, ListItem listItem, object modified, object modifiedBy, FieldUserValue modifiedUserValue)
        {
            listItem.ParseAndSetFieldValue("MetaInfo", updatedTargetMetaInfo);
            listItem["Modified"] = modified;
            listItem["Editor"] = modifiedUserValue;
            listItem["Modified_x0020_By"] = modifiedBy;
        }

        private System.Collections.Generic.List<Field> AddFieldsXML(ClientContext ctx, List parentList, FieldCollection fields, System.Xml.XmlNode fieldNodeXML, OperationReporting reporting = null)
        {
            return this.AddFieldsXML(ctx, parentList, fields, fieldNodeXML, false, reporting);
        }

        private System.Collections.Generic.List<Field> AddFieldsXML(ClientContext ctx, List parentList, FieldCollection fields, System.Xml.XmlNode fieldNodeXML, bool bUpdateFieldTypes, OperationReporting reporting = null)
        {
            bool isTargetWebMultilingual = false;
            FieldCollection availableFields = ctx.Web.AvailableFields;
            ctx.Load<Web>(ctx.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
            {
                (Web w) => (object)w.Id,
                (Web w) => w.Url
            });
            ctx.Load<ListCollection>(ctx.Web.Lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
            {
                (ListCollection lists) => lists.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List l) => (object)l.Id,
                    (List l) => l.Title
                })
            });
            ctx.Load<RegionalSettings>(ctx.Web.RegionalSettings, new System.Linq.Expressions.Expression<System.Func<RegionalSettings, object>>[0]);
            if (parentList != null)
            {
                ctx.Load<FieldCollection>(ctx.Web.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                ctx.Load<ContentTypeCollection>(ctx.Web.ContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[0]);
            }
            ctx.Load<FieldCollection>(availableFields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
            if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
            {
                ctx.Load<Web>(ctx.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web w) => (object)w.IsMultilingual
                });
            }
            CSOMAdapter.CallExecuteQuery(ctx, this);
            if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
            {
                isTargetWebMultilingual = ctx.Web.IsMultilingual;
            }
            System.Collections.Queue queue = new System.Collections.Queue();
            if (fieldNodeXML.Name == "Field")
            {
                queue.Enqueue(fieldNodeXML);
            }
            else
            {
                System.Xml.XmlNodeList xmlNodeList = fieldNodeXML.SelectNodes("./Field");
                foreach (System.Xml.XmlNode obj in xmlNodeList)
                {
                    queue.Enqueue(obj);
                }
            }
            System.Collections.Generic.List<Field> list = new System.Collections.Generic.List<Field>(queue.Count);
            System.Collections.Queue queue2 = new System.Collections.Queue();
            int num = 0;
            int num2 = queue.Count * queue.Count;
            while (queue.Count > 0 || queue2.Count > 0)
            {
                num++;
                if (num > num2)
                {
                    throw new System.Exception("A field being added depends on a field that does not exist on the target");
                }
                string text = string.Empty;
                System.Xml.XmlNode xmlNode = null;
                System.Xml.XmlNode languageResourcesNode = null;
                try
                {
                    bool flag = false;
                    if (queue.Count > 0)
                    {
                        xmlNode = (System.Xml.XmlNode)queue.Dequeue();
                    }
                    else
                    {
                        xmlNode = (System.Xml.XmlNode)queue2.Dequeue();
                        flag = true;
                    }
                    text = ((xmlNode.Attributes["DisplayName"] != null) ? xmlNode.Attributes["DisplayName"].Value : null);
                    string text2 = xmlNode.Attributes["Name"].Value;
                    bool flag2 = false;
                    if (xmlNode.Attributes["Hidden"] != null)
                    {
                        bool.TryParse(xmlNode.Attributes["Hidden"].Value, out flag2);
                    }
                    bool flag3 = false;
                    if (xmlNode.Attributes["Sealed"] != null)
                    {
                        bool.TryParse(xmlNode.Attributes["Sealed"].Value, out flag3);
                    }
                    bool flag4 = false;
                    if (xmlNode.Attributes["MLSystem"] != null)
                    {
                        bool.TryParse(xmlNode.Attributes["MLSystem"].Value, out flag4);
                    }
                    bool flag5 = false;
                    if (xmlNode.Attributes["ReadOnly"] != null)
                    {
                        bool.TryParse(xmlNode.Attributes["ReadOnly"].Value, out flag5);
                    }
                    bool flag6 = false;
                    if (xmlNode.Attributes["Type"] != null)
                    {
                        flag6 = ("Threading" == xmlNode.Attributes["Type"].Value);
                    }
                    bool flag7 = false;
                    if (xmlNode.Attributes["FromTemplate"] != null)
                    {
                        bool.TryParse(xmlNode.Attributes["FromTemplate"].Value, out flag7);
                    }
                    if (xmlNode.Attributes["Type"] == null || !(xmlNode.Attributes["Type"].Value == "WorkflowStatus"))
                    {
                        bool flag8 = false;
                        if (xmlNode.Attributes["IsFromFeature"] != null)
                        {
                            bool.TryParse(xmlNode.Attributes["IsFromFeature"].Value, out flag8);
                        }
                        bool flag9 = false;
                        if (base.SharePointVersion.IsSharePoint2010OrLater && xmlNode.Attributes["Group"] != null && xmlNode.Attributes["List"] != null && xmlNode.Attributes["Group"].Value == "_Hidden")
                        {
                            flag9 = true;
                        }
                        string text3 = null;
                        if (xmlNode.Attributes["SourceID"] != null)
                        {
                            text3 = xmlNode.Attributes["SourceID"].Value;
                        }
                        bool flag10 = false;
                        if (xmlNode.Attributes["Required"] != null)
                        {
                            bool.TryParse(xmlNode.Attributes["Required"].Value, out flag10);
                        }
                        if (text != null && !flag4 && !flag6 && !flag9)
                        {
                            Field field = CSOMAdapter.GetFieldByInternalName(fields, text2);
                            System.Collections.Generic.List<string> list2 = new System.Collections.Generic.List<string>();
                            if (text2.Length > 32 && parentList != null)
                            {
                                bool flag11 = Utils.IsGUID(text2);
                                if (field == null && !flag11 && !list2.Contains(text2.ToLower()))
                                {
                                    list2.Add(text2.ToLower());
                                }
                            }
                            if (field == null || parentList != null || (!(field.InternalName == "FileLeafRef") && !flag8))
                            {
                                if (field != null)
                                {
                                    System.Xml.XmlNode xmlNode2 = XmlUtility.StringToXmlNode(field.SchemaXml);
                                    if (xmlNode2 != null && !CSOMAdapter.FieldUpdateNecessary(xmlNode, xmlNode2))
                                    {
                                        continue;
                                    }
                                }
                                bool flag12 = false;
                                if (field == null)
                                {
                                    field = CSOMAdapter.GetFieldByDisplayName(fields, text);
                                    flag12 = (field != null);
                                    if (flag12 && !flag)
                                    {
                                        queue2.Enqueue(xmlNode);
                                        continue;
                                    }
                                }
                                if (field == null && parentList == null)
                                {
                                    if (CSOMAdapter.GetFieldByInternalName(availableFields, text2) != null)
                                    {
                                        continue;
                                    }
                                    field = CSOMAdapter.GetFieldByDisplayName(availableFields, text);
                                    flag12 = (field != null);
                                    if (flag12)
                                    {
                                        if (!flag)
                                        {
                                            queue2.Enqueue(xmlNode);
                                        }
                                        continue;
                                    }
                                }
                                if (field == null && parentList != null && XmlUtility.IsFieldSiteColumn(xmlNode))
                                {
                                    Field field2 = CSOMAdapter.GetFieldByInternalName(availableFields, text2);
                                    if (field2 == null)
                                    {
                                        field2 = CSOMAdapter.GetFieldByDisplayName(availableFields, text);
                                        flag12 = (field2 != null);
                                        if (!flag)
                                        {
                                            queue2.Enqueue(xmlNode);
                                            continue;
                                        }
                                    }
                                    bool flag13 = field2 != null && xmlNode.Attributes["Type"] != null && xmlNode.Attributes["Type"].Value.Equals(field2.TypeAsString, System.StringComparison.OrdinalIgnoreCase);
                                    string text4 = "";
                                    if (field2 != null)
                                    {
                                        System.Xml.XmlNode xmlNode2 = XmlUtility.StringToXmlNode(field2.SchemaXml);
                                        if (xmlNode2.Attributes["SourceID"] != null)
                                        {
                                            text4 = xmlNode2.Attributes["SourceID"].Value;
                                        }
                                        if (Utils.IsGuid(text3) && !Utils.IsGuid(text4))
                                        {
                                            if (field2.Group.Equals("_Hidden", System.StringComparison.InvariantCulture))
                                            {
                                                continue;
                                            }
                                            if (!field2.InternalName.Equals(text2, System.StringComparison.InvariantCultureIgnoreCase))
                                            {
                                                field2 = null;
                                                flag13 = false;
                                            }
                                        }
                                    }
                                    if (flag13 && !string.IsNullOrEmpty(text3) && !string.IsNullOrEmpty(text4) && !Utils.IsGuid(text3) && !Utils.IsGuid(text4))
                                    {
                                        flag13 = text4.Equals(text3, System.StringComparison.OrdinalIgnoreCase);
                                    }
                                    if (flag13)
                                    {
                                        field = fields.Add(field2);
                                        ctx.Load<Field>(field, new System.Linq.Expressions.Expression<System.Func<Field, object>>[0]);
                                        ctx.Load<FieldCollection>(fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                                        CSOMAdapter.CallExecuteQuery(ctx, this);
                                        text2 = field.InternalName;
                                        System.Xml.XmlAttribute xmlAttribute = xmlNode.Attributes["SourceID"];
                                        if (xmlAttribute == null)
                                        {
                                            xmlAttribute = xmlNode.OwnerDocument.CreateAttribute("SourceID");
                                            xmlNode.Attributes.Append(xmlAttribute);
                                        }
                                        xmlAttribute.Value = text4;
                                        System.Xml.XmlAttribute xmlAttribute2 = xmlNode.Attributes["ID"];
                                        if (xmlAttribute2 == null)
                                        {
                                            xmlAttribute2 = xmlNode.OwnerDocument.CreateAttribute("ID");
                                            xmlNode.Attributes.Append(xmlAttribute2);
                                        }
                                        xmlAttribute2.Value = "{" + field.Id.ToString() + "}";
                                    }
                                }
                                bool bForceFieldUpdate = field != null && !xmlNode.Attributes["Type"].Value.Equals(field.TypeAsString, System.StringComparison.OrdinalIgnoreCase);
                                bool flag14 = false;
                                bool flag15 = false;
                                if (field == null)
                                {
                                    if (xmlNode.Attributes["Type"].Value == "Calculated" && !this.UpdateCalculatedField(ctx, parentList, fields, xmlNode, queue, queue2))
                                    {
                                        continue;
                                    }
                                    if (list2.Count > 0)
                                    {
                                        if (list2.Contains(text2.ToLower()))
                                        {
                                            field = this.AddFieldWithAutoGeneratedNameToCollection(ctx, parentList, xmlNode, ref fields, text, text2);
                                            list2.Remove(text2.ToLower());
                                        }
                                    }
                                    else
                                    {
                                        field = this.AddFieldToCollection(ctx, parentList, xmlNode, ref fields, text, text2);
                                    }
                                }
                                else if (!field.Sealed && !field.Hidden && field.FieldTypeKind != FieldType.Lookup && (!field.ReadOnlyField || field.FieldTypeKind == FieldType.Calculated))
                                {
                                    if (xmlNode.Attributes["Type"].Value == "Calculated" && !this.UpdateCalculatedField(ctx, parentList, fields, xmlNode, queue, queue2))
                                    {
                                        continue;
                                    }
                                    bool flag16 = !flag7 && !flag12 && CSOMAdapter.IsFieldSchemaUpdateable(bUpdateFieldTypes, xmlNode, field, bForceFieldUpdate);
                                    if (flag16)
                                    {
                                        flag14 = true;
                                    }
                                    else if (flag12)
                                    {
                                        field = this.AddFieldToCollection(ctx, parentList, xmlNode, ref fields, text, text2);
                                    }
                                }
                                else if (flag12 && !flag2 && !flag3)
                                {
                                    field = this.AddFieldToCollection(ctx, parentList, xmlNode, ref fields, text, text2);
                                }
                                languageResourcesNode = this.ExtractLanguageResourcesNodeFromFieldXml(xmlNode, languageResourcesNode, isTargetWebMultilingual, reporting);
                                this.AddLanguageResourcesForField(field, languageResourcesNode, reporting);
                                if ((!field.Sealed && !field.Hidden && !field.ReadOnlyField && xmlNode.Attributes["Type"].Value == "Lookup") || xmlNode.Attributes["Type"].Value == "LookupMulti")
                                {
                                    flag14 = this.IsLookUpFieldUpdateable(ctx, xmlNode, parentList.Id, fieldNodeXML.ParentNode.GetAttributeValueAsGuid("ID"));
                                }
                                else if ((field != null && field.FieldTypeKind == FieldType.User) || field.TypeAsString.Equals("UserMulti"))
                                {
                                    flag14 = true;
                                }
                                if (flag14)
                                {
                                    this.UpdateFieldSchema(ctx, field, xmlNode);
                                    flag15 = true;
                                }
                                if (field.Title != text && (parentList != null || (!field.Sealed && !field.Hidden && (!field.ReadOnlyField || field.FieldTypeKind == FieldType.Calculated))) && !flag7 && xmlNode.Attributes["Type"].Value == field.TypeAsString)
                                {
                                    field.Title = text;
                                    field.Update();
                                    flag15 = true;
                                }
                                if (flag15)
                                {
                                    CSOMAdapter.CallExecuteQuery(ctx, this);
                                }
                                if (field != null)
                                {
                                    list.Add(field);
                                }
                            }
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    ctx.Load<FieldCollection>(fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                    if (reporting != null && xmlNode != null)
                    {
                        string attributeValueAsString = xmlNode.GetAttributeValueAsString("Type");
                        if (!string.IsNullOrEmpty(attributeValueAsString) && attributeValueAsString.Equals("Calculated", System.StringComparison.InvariantCultureIgnoreCase))
                        {
                            string message = string.Format("An error occurred while copying field '{0}'.", text);
                            reporting.LogError(message, ex.Message, ex.StackTrace, 0, 0);
                        }
                    }
                }
            }
            return list;
        }

        private System.Xml.XmlNode ExtractLanguageResourcesNodeFromFieldXml(System.Xml.XmlNode fieldNode, System.Xml.XmlNode languageResourcesNode, bool isTargetWebMultilingual, OperationReporting reporting)
        {
            try
            {
                if (isTargetWebMultilingual && fieldNode != null && fieldNode.ChildNodes != null && fieldNode.ChildNodes.Count > 0)
                {
                    foreach (System.Xml.XmlNode xmlNode in fieldNode.ChildNodes)
                    {
                        if (xmlNode.OuterXml.StartsWith("<LanguageResources", System.StringComparison.Ordinal))
                        {
                            languageResourcesNode = xmlNode;
                            break;
                        }
                    }
                    if (languageResourcesNode != null)
                    {
                        fieldNode.RemoveChild(languageResourcesNode);
                    }
                    return languageResourcesNode;
                }
            }
            catch (System.Exception ex)
            {
                if (reporting != null)
                {
                    reporting.LogError(ex, "Error occurred while extracting language resources node from field xml.");
                }
                else
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
            return null;
        }

        private void AddLanguageResourcesForField(Field targetField, System.Xml.XmlNode languageResourcesNode, OperationReporting reporting)
        {
            try
            {
                if (targetField != null && languageResourcesNode != null && languageResourcesNode.ChildNodes.Count > 0 && languageResourcesNode.GetAttributeValueAsBoolean(XmlAttributeNames.MigrateLanguageSettings.ToString()))
                {
                    this.AddLanguageResources(languageResourcesNode, targetField);
                    targetField.Update();
                }
            }
            catch (System.Exception ex)
            {
                string detail = string.Format("Error occurred while adding language resources for field : '{0}' ", targetField.Title);
                if (reporting != null)
                {
                    reporting.LogError(ex, detail);
                }
                else
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        private bool IsLookUpFieldUpdateable(ClientContext ctx, System.Xml.XmlNode fieldNode, System.Guid parentListId, System.Guid sourceListId)
        {
            System.Xml.XmlAttribute xmlAttribute = fieldNode.Attributes["TargetListName"];
            System.Xml.XmlAttribute xmlAttribute2 = fieldNode.Attributes["TargetWebName"];
            System.Xml.XmlAttribute xmlAttribute3 = fieldNode.Attributes["WebId"];
            System.Xml.XmlAttribute xmlAttribute4 = fieldNode.Attributes["TargetWebSRURL"];
            System.Guid id = fieldNode.GetAttributeValueAsGuid("List");
            bool result = true;
            if (id.Equals(sourceListId))
            {
                id = parentListId;
            }
            if (xmlAttribute != null)
            {
                List byId = ctx.Web.Lists.GetById(id);
                ctx.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
                if (byId != null && byId.ServerObjectIsNull == false)
                {
                    string text = byId.Id.ToString();
                    if (!text.StartsWith("{") || !text.EndsWith("}"))
                    {
                        text = "{" + text + "}";
                    }
                    fieldNode.Attributes["List"].Value = text;
                    if (xmlAttribute2 != null && xmlAttribute3 != null)
                    {
                        if (xmlAttribute2.Value.ToLower() == Utils.GetNameFromURL(ctx.Web.Url).ToLower())
                        {
                            xmlAttribute3.Value = ctx.Web.Id.ToString();
                        }
                        else
                        {
                            result = false;
                        }
                        fieldNode.Attributes.Remove(xmlAttribute2);
                        if (xmlAttribute4 != null)
                        {
                            fieldNode.Attributes.Remove(xmlAttribute4);
                        }
                    }
                }
                else
                {
                    result = false;
                }
                fieldNode.Attributes.Remove(xmlAttribute);
                fieldNode.Attributes.Remove(xmlAttribute2);
                fieldNode.Attributes.Remove(xmlAttribute4);
            }
            return result;
        }

        private static bool IsFieldSchemaUpdateable(bool bUpdateFieldTypes, System.Xml.XmlNode fieldNode, Field targetField, bool bForceFieldUpdate)
        {
            bool flag = targetField.FieldTypeKind == FieldType.Boolean || targetField.FieldTypeKind == FieldType.Currency || targetField.FieldTypeKind == FieldType.DateTime || targetField.FieldTypeKind == FieldType.Number || targetField.FieldTypeKind == FieldType.Text || targetField.FieldTypeKind == FieldType.Choice;
            bool flag2 = fieldNode.Attributes["Type"].Value.Equals("UserMulti", System.StringComparison.OrdinalIgnoreCase) && targetField.FieldTypeKind == FieldType.User;
            bool flag3 = fieldNode.Attributes["Type"].Value.Equals("User", System.StringComparison.OrdinalIgnoreCase) && targetField.TypeAsString.Equals("UserMulti");
            bool flag4 = bForceFieldUpdate && fieldNode.Attributes["Type"].Value.Equals("Text", System.StringComparison.OrdinalIgnoreCase) && targetField.FieldTypeKind == FieldType.Choice;
            bool flag5 = bForceFieldUpdate && fieldNode.Attributes["Type"].Value.Equals("Choice", System.StringComparison.OrdinalIgnoreCase);
            bool flag6 = bUpdateFieldTypes && flag && (fieldNode.Attributes["Type"].Value.Equals("Text", System.StringComparison.OrdinalIgnoreCase) || fieldNode.Attributes["Type"].Value.Equals("Note", System.StringComparison.OrdinalIgnoreCase));
            bool flag7 = fieldNode.Attributes["Type"].Value.Equals(targetField.TypeAsString, System.StringComparison.OrdinalIgnoreCase);
            return flag3 || flag2 || flag4 || flag5 || flag7 || flag6;
        }

        private bool UpdateCalculatedField(ClientContext ctx, List parentList, FieldCollection fields, System.Xml.XmlNode fieldNode, System.Collections.Queue fieldsToBeAdded, System.Collections.Queue displayNameMatchedFields)
        {
            System.Collections.Generic.List<System.Xml.XmlNode> dependencies = new System.Collections.Generic.List<System.Xml.XmlNode>();
            if (!CSOMAdapter.FieldHasMissingDependencies(ctx, parentList, fields, fieldNode, out dependencies))
            {
                this.UpdateFormulaDefinition(ctx, fields, fieldNode);
                return true;
            }
            if (CSOMAdapter.FieldDependenciesInQueue(dependencies, fieldsToBeAdded))
            {
                fieldsToBeAdded.Enqueue(fieldNode);
                return false;
            }
            if (!string.IsNullOrEmpty(fieldNode.GetAttributeValueAsString("SourceID")) && CSOMAdapter.FieldDependenciesInQueue(dependencies, displayNameMatchedFields))
            {
                displayNameMatchedFields.Enqueue(fieldNode);
                return false;
            }
            return true;
        }

        private void UpdateFieldSchema(ClientContext ctx, Field targetField, System.Xml.XmlNode fieldNode)
        {
            string text = XmlUtility.MergeTargetFieldSchemaXml(targetField.SchemaXml, fieldNode.OuterXml);
            if (fieldNode.Attributes["Type"].Value == "Note" && targetField.FieldTypeKind != FieldType.Note && fieldNode.Attributes["RichText"] != null)
            {
                System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(text);
                System.Xml.XmlAttribute node = xmlNode.Attributes["RichText"];
                xmlNode.Attributes.Remove(node);
                targetField.SchemaXml = xmlNode.OuterXml;
                targetField.Update();
            }
            targetField.SchemaXml = text;
        }

        private static bool FieldUpdateNecessary(System.Xml.XmlNode sourceField, System.Xml.XmlNode targetField)
        {
            return !XmlUtility.ElementsAreEquivalent((System.Xml.XmlElement)sourceField, (System.Xml.XmlElement)targetField, true, new string[]
            {
                "ID",
                "Version"
            });
        }

        private Field AddFieldToCollection(ClientContext ctx, List parentList, System.Xml.XmlNode fieldNode, ref FieldCollection fields, string displayName, string internalName)
        {
            Field result = null;
            try
            {
                System.Xml.XmlNode xmlNode = fieldNode.Clone();
                if (!displayName.Equals(internalName))
                {
                    xmlNode.Attributes["DisplayName"].Value = internalName;
                }
                result = this.CreateFieldFromXml(ctx, parentList, xmlNode, fields, displayName, internalName);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.Message == "Index was outside the bounds of the array.")
                {
                    try
                    {
                        if (fieldNode.Attributes != null)
                        {
                            fieldNode.Attributes["Name"].Value = displayName;
                            fieldNode.Attributes["DisplayName"].Value = displayName;
                        }
                        result = this.CreateFieldFromXml(ctx, parentList, fieldNode, fields, displayName, internalName);
                        goto IL_FA;
                    }
                    catch (System.Exception ex2)
                    {
                        CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        throw new System.Exception("Cannot add field '" + displayName + "'. " + ex2.Message);
                    }
                    goto IL_DD;
                    IL_FA:
                    return result;
                }
                IL_DD:
                throw new System.Exception("Cannot add field '" + displayName + "'. " + ex.Message);
            }
            return result;
        }

        private Field AddFieldWithAutoGeneratedNameToCollection(ClientContext ctx, List parentList, System.Xml.XmlNode fieldNode, ref FieldCollection fields, string sDisplayName, string sInternalName)
        {
            Field result = null;
            System.Collections.Generic.List<Field> list = new System.Collections.Generic.List<Field>();
            try
            {
                string text = sInternalName.Substring(0, 32);
                int num;
                bool flag = int.TryParse(sInternalName.Substring(32), out num);
                if (flag)
                {
                    string sName = text;
                    string sPlaceHolderName = text + "MLPlaceHolder";
                    this.AddPlaceHolderField(ctx, fields, sName, sPlaceHolderName, list);
                    for (int i = 0; i < num; i++)
                    {
                        sName = text + i.ToString();
                        sPlaceHolderName = text + i.ToString() + "MLPlaceHolder";
                        this.AddPlaceHolderField(ctx, fields, sName, sPlaceHolderName, list);
                    }
                }
                result = this.AddFieldToCollection(ctx, parentList, fieldNode, ref fields, sDisplayName, sInternalName);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception("Cannot add field '" + sDisplayName + "'. " + ex.Message);
            }
            finally
            {
                for (int j = 0; j < list.Count; j++)
                {
                    list[j].DeleteObject();
                }
                CSOMAdapter.CallExecuteQuery(ctx, this);
            }
            return result;
        }

        private void AddPlaceHolderField(ClientContext ctx, FieldCollection fields, string sName, string sPlaceHolderName, System.Collections.Generic.List<Field> placeHolderFieldsList)
        {
            if (CSOMAdapter.GetFieldByNames(fields, sName, sName) == null && CSOMAdapter.GetFieldByNames(ctx.Web.AvailableFields, sName, sName) == null)
            {
                try
                {
                    string schemaXml = string.Format("<Field Type='Text' DisplayName='{0}' Name='{0}' />", sPlaceHolderName);
                    Field field = fields.AddFieldAsXml(schemaXml, false, AddFieldOptions.DefaultValue);
                    ctx.Load<Field>(field, new System.Linq.Expressions.Expression<System.Func<Field, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                    placeHolderFieldsList.Add(field);
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        private Field CreateFieldFromXml(ClientContext ctx, List parentList, System.Xml.XmlNode fieldNode, FieldCollection fields, string sDisplayName, string sInternalName)
        {
            Field result = null;
            string value = null;
            string text = null;
            bool flag = parentList == null;
            if (fieldNode.Attributes != null && fieldNode.Attributes["AddToSiteColumnGroup"] != null && !string.IsNullOrEmpty(fieldNode.Attributes["AddToSiteColumnGroup"].Value))
            {
                value = fieldNode.Attributes["AddToSiteColumnGroup"].Value;
                fieldNode.Attributes.Remove(fieldNode.Attributes["AddToSiteColumnGroup"]);
                if (fieldNode.Attributes["AddToContentType"] != null && !string.IsNullOrEmpty(fieldNode.Attributes["AddToContentType"].Value))
                {
                    text = fieldNode.Attributes["AddToContentType"].Value;
                    fieldNode.Attributes.Remove(fieldNode.Attributes["AddToContentType"]);
                }
            }
            if (!string.IsNullOrEmpty(value) && !flag)
            {
                Field field = CSOMAdapter.GetFieldByNames(parentList.ParentWeb.AvailableFields, sDisplayName, sInternalName);
                if (field == null)
                {
                    System.Xml.XmlAttribute xmlAttribute = fieldNode.Attributes["Group"];
                    if (xmlAttribute == null)
                    {
                        xmlAttribute = fieldNode.OwnerDocument.CreateAttribute("Group");
                        fieldNode.Attributes.Append(xmlAttribute);
                    }
                    xmlAttribute.Value = value;
                    result = this.AddFieldAsXmlToCollection(ctx, fieldNode, parentList.ParentWeb.Fields, sDisplayName);
                    field = parentList.ParentWeb.Fields.GetByInternalNameOrTitle(sDisplayName);
                }
                if (field != null)
                {
                    fields.Add(field);
                    if (!string.IsNullOrEmpty(text))
                    {
                        ContentType contentType = null;
                        foreach (ContentType current in parentList.ParentWeb.ContentTypes)
                        {
                            if (text.Equals(current.Name, System.StringComparison.OrdinalIgnoreCase))
                            {
                                contentType = current;
                                break;
                            }
                        }
                        if (contentType != null)
                        {
                            FieldLinkCreationInformation fieldLinkCreationInformation = new FieldLinkCreationInformation();
                            fieldLinkCreationInformation.Field = field;
                            contentType.FieldLinks.Add(fieldLinkCreationInformation);
                            contentType.Update(false);
                        }
                    }
                }
            }
            else
            {
                result = this.AddFieldAsXmlToCollection(ctx, fieldNode, fields, sDisplayName);
            }
            return result;
        }

        private Field AddFieldAsXmlToCollection(ClientContext ctx, System.Xml.XmlNode fieldNode, FieldCollection fields, string sDisplayName)
        {
            Field field = null;
            if (fieldNode.Attributes != null)
            {
                System.Xml.XmlAttribute xmlAttribute = fieldNode.Attributes["Version"];
                if (xmlAttribute != null)
                {
                    fieldNode.Attributes.Remove(xmlAttribute);
                }
                System.Xml.XmlAttribute xmlAttribute2 = fieldNode.Attributes["Name"] ?? fieldNode.Attributes["DisplayName"];
                if (xmlAttribute2 != null)
                {
                    xmlAttribute2.Value = Utils.EnsureFieldNameSafety(xmlAttribute2.Value);
                }
                bool addToDefaultView = fieldNode.Attributes["Viewable"] == null || fieldNode.Attributes["Viewable"].Value.ToUpper() == "TRUE";
                field = fields.AddFieldAsXml(fieldNode.OuterXml, addToDefaultView, AddFieldOptions.DefaultValue);
                if (xmlAttribute2.Value != sDisplayName)
                {
                    field.Title = sDisplayName;
                    field.Update();
                }
                ctx.Load<Field>(field, new System.Linq.Expressions.Expression<System.Func<Field, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
            }
            return field;
        }

        private static bool FieldDependenciesInQueue(System.Collections.Generic.List<System.Xml.XmlNode> dependencies, System.Collections.Queue fieldQueue)
        {
            foreach (System.Xml.XmlNode current in dependencies)
            {
                string sName = (current.Attributes["Name"] != null) ? current.Attributes["Name"].Value : null;
                string sDisplayName = (current.Attributes["DisplayName"] != null) ? current.Attributes["DisplayName"].Value : null;
                if (!CSOMAdapter.FieldInQueueInQueue(fieldQueue, sName, sDisplayName))
                {
                    return false;
                }
            }
            return true;
        }

        private static bool FieldInQueueInQueue(System.Collections.Queue fieldQueue, string sName, string sDisplayName)
        {
            foreach (System.Xml.XmlNode xmlNode in fieldQueue)
            {
                if (xmlNode.Attributes != null && xmlNode.Attributes["DisplayName"] != null && xmlNode.Attributes["DisplayName"].Value == sDisplayName)
                {
                    bool result = true;
                    return result;
                }
            }
            foreach (System.Xml.XmlNode xmlNode2 in fieldQueue)
            {
                if (xmlNode2.Attributes != null && xmlNode2.Attributes["Name"].Value == sName)
                {
                    bool result = true;
                    return result;
                }
            }
            return false;
        }

        private static bool HasFieldReference(ClientContext ctx, List parentList, System.Xml.XmlNode fieldRef, FieldCollection fields)
        {
            string value = fieldRef.Attributes["Name"].Value;
            string sDisplayName = (fieldRef.Attributes["DisplayName"] != null) ? fieldRef.Attributes["DisplayName"].Value : null;
            Field fieldByNames = CSOMAdapter.GetFieldByNames(fields, sDisplayName, value);
            if (fieldByNames == null && parentList == null)
            {
                fieldByNames = CSOMAdapter.GetFieldByNames(ctx.Web.AvailableFields, sDisplayName, value);
            }
            return fieldByNames != null;
        }

        private static bool FieldHasMissingDependencies(ClientContext ctx, List parentList, FieldCollection fields, System.Xml.XmlNode calculatedField, out System.Collections.Generic.List<System.Xml.XmlNode> missingDependencies)
        {
            missingDependencies = new System.Collections.Generic.List<System.Xml.XmlNode>();
            System.Xml.XmlNodeList xmlNodeList = calculatedField.SelectNodes("./FieldRefs/FieldRef");
            foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
            {
                if (!CSOMAdapter.HasFieldReference(ctx, parentList, xmlNode, fields))
                {
                    missingDependencies.Add(xmlNode.Clone());
                }
            }
            return missingDependencies.Count > 0;
        }

        private void UpdateFormulaDefinition(ClientContext ctx, FieldCollection fields, System.Xml.XmlNode calculatedField)
        {
            System.Xml.XmlNodeList xmlNodeList = calculatedField.SelectNodes("./FieldRefs");
            if (xmlNodeList != null)
            {
                foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
                {
                    System.Xml.XPath.XPathNodeIterator xPathNodeIterator = XmlUtility.SortXmlNodes(xmlNode.OuterXml, "FieldRefs/FieldRef", "@Name", System.Xml.XPath.XmlSortOrder.Descending);
                    if (xPathNodeIterator.Count > 0)
                    {
                        foreach (System.Xml.XPath.XPathNavigator xPathNavigator in xPathNodeIterator)
                        {
                            System.Xml.XmlNode fieldRef = XmlUtility.StringToXmlNode(xPathNavigator.OuterXml);
                            CSOMAdapter.UpdateFieldNameInFormula(fields, calculatedField, fieldRef);
                        }
                    }
                }
            }
            bool flag = !ctx.Web.RegionalSettings.ListSeparator.Equals(",");
            bool flag2 = !ctx.Web.RegionalSettings.DecimalSeparator.Equals(".");
            if (flag || flag2)
            {
                System.Xml.XmlElement xmlElement = calculatedField["Formula"];
                if (xmlElement != null)
                {
                    string text = xmlElement.InnerText;
                    string[] array = text.Split(new char[]
                    {
                        '"'
                    });
                    if (array.Length > 1)
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        for (int i = 0; i < array.Length; i++)
                        {
                            if (i % 2 == 0)
                            {
                                stringBuilder.Append(array[i].Replace(",", ctx.Web.RegionalSettings.ListSeparator).Replace(".", ctx.Web.RegionalSettings.DecimalSeparator));
                            }
                            else
                            {
                                stringBuilder.Append(array[i]);
                            }
                            if (i < array.Length - 1)
                            {
                                stringBuilder.Append("\"");
                            }
                        }
                        text = stringBuilder.ToString();
                    }
                    else
                    {
                        text = text.Replace(",", ctx.Web.RegionalSettings.ListSeparator);
                    }
                    xmlElement.InnerText = text;
                }
            }
        }

        private static void UpdateFieldNameInFormula(FieldCollection fields, System.Xml.XmlNode calculatedField, System.Xml.XmlNode fieldRef)
        {
            string value = fieldRef.Attributes["Name"].Value;
            string sDisplayName = (fieldRef.Attributes["DisplayName"] != null) ? fieldRef.Attributes["DisplayName"].Value : null;
            Field fieldByNames = CSOMAdapter.GetFieldByNames(fields, sDisplayName, value);
            if (fieldByNames != null && value != fieldByNames.Title)
            {
                System.Xml.XmlElement xmlElement = calculatedField["Formula"];
                if (xmlElement != null)
                {
                    string text = xmlElement.InnerText;
                    text = text.Replace(value, "[" + fieldByNames.Title + "]");
                    xmlElement.InnerText = text;
                }
            }
        }

        private Field GetField(FieldCollection fields, string fieldName, string fieldId)
        {
            System.Guid empty;
            if (!System.Guid.TryParse(fieldId, out empty))
            {
                empty = System.Guid.Empty;
            }
            Field field = null;
            Field result = null;
            foreach (Field current in fields)
            {
                if (current.Id == empty)
                {
                    Field result2 = current;
                    return result2;
                }
                if (current.InternalName == fieldName)
                {
                    field = current;
                }
                else if (current.Title == fieldName)
                {
                    result = current;
                }
            }
            if (field != null)
            {
                return field;
            }
            return result;
        }

        public string GetWebNavigationSettings()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web w) => w.Url,
                        (Web w) => w.AllProperties,
                        (Web w) => (object)w.QuickLaunchEnabled,
                        (Web w) => (object)w.TreeViewEnabled,
                        (Web w) => (object)w.Navigation.UseShared,
                        (Web w) => w.AllProperties
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    xmlTextWriter.WriteStartElement("Web");
                    xmlTextWriter.WriteAttributeString("Name", Utils.GetNameFromURL(web.Url));
                    this.GetWebNavigationXML(clientContext, web, xmlTextWriter);
                    xmlTextWriter.WriteEndElement();
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetWebNavigationXML(ClientContext ctx, Web web, System.Xml.XmlWriter xmlWriter)
        {
            if (web == null)
            {
                return;
            }
            if (web.AllProperties.FieldValues.ContainsKey("__NavigationOrderingMethod"))
            {
                xmlWriter.WriteAttributeString("NavigationOrderingMethod", web.AllProperties["__NavigationOrderingMethod"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__NavigationSortAscending"))
            {
                xmlWriter.WriteAttributeString("NavigationSortAscending", web.AllProperties["__NavigationSortAscending"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__NavigationAutomaticSortingMethod"))
            {
                xmlWriter.WriteAttributeString("NavigationAutomaticSortingMethod", web.AllProperties["__NavigationAutomaticSortingMethod"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__InheritCurrentNavigation"))
            {
                xmlWriter.WriteAttributeString("InheritCurrentNavigation", web.AllProperties["__InheritCurrentNavigation"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__NavigationShowSiblings"))
            {
                xmlWriter.WriteAttributeString("NavigationShowSiblings", web.AllProperties["__NavigationShowSiblings"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__DisplayShowHideRibbonActionId"))
            {
                xmlWriter.WriteAttributeString("DisplayShowHideRibbonActionId", web.AllProperties["__DisplayShowHideRibbonActionId"].ToString());
            }
            bool? flag = null;
            bool? flag2 = null;
            bool? flag3 = null;
            bool? flag4 = null;
            bool value;
            if (web.AllProperties.FieldValues.ContainsKey("__IncludePagesInNavigation") && bool.TryParse(web.AllProperties["__IncludePagesInNavigation"].ToString(), out value))
            {
                flag = new bool?(value);
                flag3 = new bool?(value);
            }
            bool value2;
            if (web.AllProperties.FieldValues.ContainsKey("__IncludeSubSitesInNavigation") && bool.TryParse(web.AllProperties["__IncludeSubSitesInNavigation"].ToString(), out value2))
            {
                flag2 = new bool?(value2);
                flag4 = new bool?(value2);
            }
            int num = 0;
            int num2 = 0;
            if (web.AllProperties.FieldValues.ContainsKey("__CurrentNavigationIncludeTypes") && !int.TryParse(web.AllProperties["__CurrentNavigationIncludeTypes"].ToString(), out num2))
            {
                num2 = 0;
            }
            if (web.AllProperties.FieldValues.ContainsKey("__GlobalNavigationIncludeTypes") && !int.TryParse(web.AllProperties["__GlobalNavigationIncludeTypes"].ToString(), out num))
            {
                num = 0;
            }
            if (!flag.HasValue)
            {
                flag = new bool?((num2 & 2) > 0);
            }
            if (!flag3.HasValue)
            {
                flag3 = new bool?((num & 2) > 0);
            }
            if (!flag2.HasValue)
            {
                flag2 = new bool?((num2 & 1) > 0);
            }
            if (!flag4.HasValue)
            {
                flag4 = new bool?((num & 1) > 0);
            }
            flag = ((!flag.HasValue) ? new bool?(false) : flag);
            flag3 = ((!flag3.HasValue) ? new bool?(false) : flag3);
            flag2 = ((!flag2.HasValue) ? new bool?(false) : flag2);
            flag4 = ((!flag4.HasValue) ? new bool?(false) : flag4);
            xmlWriter.WriteAttributeString("IncludePagesInCurrentNavigation", flag.Value.ToString());
            xmlWriter.WriteAttributeString("IncludePagesInGlobalNavigation", flag3.Value.ToString());
            xmlWriter.WriteAttributeString("IncludeSubSitesInCurrentNavigation", flag2.Value.ToString());
            xmlWriter.WriteAttributeString("IncludeSubSitesInGlobalNavigation", flag4.Value.ToString());
            if (web.AllProperties.FieldValues.ContainsKey("__GlobalDynamicChildLimit"))
            {
                xmlWriter.WriteAttributeString("GlobalDynamicChildLimit", web.AllProperties["__GlobalDynamicChildLimit"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__CurrentDynamicChildLimit"))
            {
                xmlWriter.WriteAttributeString("CurrentDynamicChildLimit", web.AllProperties["__CurrentDynamicChildLimit"].ToString());
            }
            xmlWriter.WriteAttributeString("QuickLaunchEnabled", web.QuickLaunchEnabled.ToString());
            xmlWriter.WriteAttributeString("TreeViewEnabled", web.TreeViewEnabled.ToString());
            if (web.Navigation != null)
            {
                xmlWriter.WriteAttributeString("InheritGlobalNavigation", web.Navigation.UseShared.ToString());
            }
        }

        public string GetWebNavigationStructure()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
                    System.Collections.Generic.List<string> list2 = new System.Collections.Generic.List<string>();
                    Navigation navigation = web.Navigation;
                    clientContext.Load<Navigation>(navigation, new System.Linq.Expressions.Expression<System.Func<Navigation, object>>[0]);
                    clientContext.Load<NavigationNodeCollection>(navigation.QuickLaunch, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
                    clientContext.Load<NavigationNodeCollection>(navigation.TopNavigationBar, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
                    clientContext.Load<PropertyValues>(web.AllProperties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.GetNavNodeHiddenUrls(web, out list, out list2);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    xmlWriter.WriteStartElement("NavNode");
                    xmlWriter.WriteAttributeString("ID", "0");
                    xmlWriter.WriteAttributeString("Title", "");
                    xmlWriter.WriteAttributeString("Url", "");
                    xmlWriter.WriteAttributeString("IsVisible", "True");
                    xmlWriter.WriteAttributeString("IsExternal", "True");
                    xmlWriter.WriteAttributeString("LastModified", Utils.FormatDate(System.DateTime.UtcNow));
                    xmlWriter.WriteStartElement("NavNode");
                    xmlWriter.WriteAttributeString("ID", "1025");
                    xmlWriter.WriteAttributeString("Title", "Quick Launch");
                    xmlWriter.WriteAttributeString("Url", "");
                    xmlWriter.WriteAttributeString("IsVisible", "True");
                    xmlWriter.WriteAttributeString("IsExternal", "True");
                    xmlWriter.WriteAttributeString("LastModified", Utils.FormatDate(System.DateTime.UtcNow));
                    try
                    {
                        foreach (NavigationNode current in navigation.QuickLaunch)
                        {
                            this.WriteNavNodeXml(xmlWriter, current, "1025", list2.ToArray(), this);
                        }
                    }
                    catch (CollectionNotInitializedException ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                    xmlWriter.WriteEndElement();
                    xmlWriter.WriteStartElement("NavNode");
                    xmlWriter.WriteAttributeString("ID", "1002");
                    xmlWriter.WriteAttributeString("Title", "SharePoint Top Navbar");
                    xmlWriter.WriteAttributeString("Url", "");
                    xmlWriter.WriteAttributeString("IsVisible", "True");
                    xmlWriter.WriteAttributeString("IsExternal", "True");
                    xmlWriter.WriteAttributeString("LastModified", Utils.FormatDate(System.DateTime.UtcNow));
                    try
                    {
                        foreach (NavigationNode current2 in navigation.TopNavigationBar)
                        {
                            this.WriteNavNodeXml(xmlWriter, current2, "1002", list.ToArray(), this);
                        }
                    }
                    catch (CollectionNotInitializedException ex2)
                    {
                        CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                    xmlWriter.WriteEndElement();
                    xmlWriter.WriteEndElement();
                    xmlWriter.Flush();
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void WriteNavNodeXml(System.Xml.XmlWriter writer, NavigationNode node, string sParentID, string[] hiddenUrls, SharePointAdapter callingAdapter)
        {
            string text = node.Id.ToString();
            string title = node.Title;
            string url = node.Url;
            string value = Utils.FormatDate(System.DateTime.UtcNow);
            bool isExternal = node.IsExternal;
            bool navNodeIsHidden = this.GetNavNodeIsHidden(node, hiddenUrls, callingAdapter);
            writer.WriteStartElement("NavNode");
            writer.WriteAttributeString("ID", text);
            writer.WriteAttributeString("Title", title);
            writer.WriteAttributeString("Url", url);
            writer.WriteAttributeString("IsVisible", navNodeIsHidden.ToString());
            writer.WriteAttributeString("IsExternal", isExternal.ToString());
            writer.WriteAttributeString("LastModified", value);
            node.Context.Load<NavigationNodeCollection>(node.Children, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(node.Context, callingAdapter);
            foreach (NavigationNode current in node.Children)
            {
                this.WriteNavNodeXml(writer, current, text, hiddenUrls, callingAdapter);
            }
            writer.WriteEndElement();
        }

        private void GetNavNodeHiddenUrls(Web web, out System.Collections.Generic.List<string> hiddenGlobalNavUrls, out System.Collections.Generic.List<string> hiddenCurrentNavUrls)
        {
            System.Guid[] array = null;
            System.Guid[] array2 = null;
            this.GetNavNodeHiddenGuids(web, out array, out array2);
            hiddenGlobalNavUrls = new System.Collections.Generic.List<string>();
            hiddenCurrentNavUrls = new System.Collections.Generic.List<string>();
            WebCollection subwebsForCurrentUser = web.GetSubwebsForCurrentUser(null);
            web.Context.Load<WebCollection>(subwebsForCurrentUser, new System.Linq.Expressions.Expression<System.Func<WebCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(web.Context, this);
            for (int i = 0; i < subwebsForCurrentUser.Count; i++)
            {
                Web web2 = subwebsForCurrentUser[i];
                if (array != null)
                {
                    System.Guid[] array3 = array;
                    for (int j = 0; j < array3.Length; j++)
                    {
                        System.Guid a = array3[j];
                        if (a == web2.Id)
                        {
                            StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(this, web2.Url);
                            hiddenGlobalNavUrls.Add(standardizedUrl.WebRelative);
                            break;
                        }
                    }
                }
                if (array2 != null)
                {
                    System.Guid[] array4 = array2;
                    for (int k = 0; k < array4.Length; k++)
                    {
                        System.Guid a2 = array4[k];
                        if (a2 == web2.Id)
                        {
                            StandardizedUrl standardizedUrl2 = StandardizedUrl.StandardizeUrl(this, web2.Url);
                            hiddenCurrentNavUrls.Add(standardizedUrl2.WebRelative);
                            break;
                        }
                    }
                }
            }
            if ((array == null || array.Length == hiddenGlobalNavUrls.Count) && (array2 == null || array2.Length == hiddenCurrentNavUrls.Count))
            {
                return;
            }
            web.Context.Load<ListCollection>(web.Lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(web.Context, this);
            List list = null;
            foreach (List current in web.Lists)
            {
                if (current.BaseTemplate == 850)
                {
                    list = current;
                    break;
                }
            }
            if (list == null)
            {
                return;
            }
            string query = Utils.BuildPagesLibraryGuidFetchingQuery(Utils.GetGuidCollectionUnion(array, array2));
            string viewFields = "<FieldRef Name=\"FileRef\" /><FieldRef Name=\"UniqueId\" />";
            bool flag;
            ListItemCollection[] listItems = this.GetListItems(list, query, viewFields, null, null, null, null, null, null, out flag, false);
            bool flag2 = false;
            ListItemCollection[] array5 = listItems;
            for (int l = 0; l < array5.Length; l++)
            {
                ListItemCollection listItemCollection = array5[l];
                if (flag2)
                {
                    return;
                }
                foreach (ListItem current2 in listItemCollection)
                {
                    System.Guid b = (System.Guid)current2["UniqueId"];
                    string text = current2["FileRef"].ToString();
                    int num = text.IndexOf(";#");
                    if (num >= 0)
                    {
                        num += 2;
                        text = ((num == text.Length - 1) ? null : text.Substring(num));
                    }
                    if (!string.IsNullOrEmpty(text))
                    {
                        StandardizedUrl standardizedUrl3 = StandardizedUrl.StandardizeUrl(this, "/" + text.TrimStart(new char[]
                        {
                            '/'
                        }));
                        if (array != null)
                        {
                            System.Guid[] array6 = array;
                            for (int m = 0; m < array6.Length; m++)
                            {
                                System.Guid a3 = array6[m];
                                if (a3 == b)
                                {
                                    hiddenGlobalNavUrls.Add(standardizedUrl3.WebRelative);
                                    flag2 = true;
                                    break;
                                }
                            }
                        }
                        if (array2 != null)
                        {
                            System.Guid[] array7 = array2;
                            for (int n = 0; n < array7.Length; n++)
                            {
                                System.Guid a4 = array7[n];
                                if (a4 == b)
                                {
                                    hiddenCurrentNavUrls.Add(standardizedUrl3.WebRelative);
                                    flag2 = true;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        private void GetNavNodeHiddenGuids(Web web, out System.Guid[] globalNavHiddenGuids, out System.Guid[] currentNavHiddenGuids)
        {
            globalNavHiddenGuids = null;
            if (web.AllProperties.FieldValues.ContainsKey("__GlobalNavigationExcludes"))
            {
                string sGuidList = (string)web.AllProperties["__GlobalNavigationExcludes"];
                globalNavHiddenGuids = Utils.SplitWebMetaInfoGuidList(sGuidList);
            }
            currentNavHiddenGuids = null;
            if (web.AllProperties.FieldValues.ContainsKey("__CurrentNavigationExcludes"))
            {
                string sGuidList2 = (string)web.AllProperties["__CurrentNavigationExcludes"];
                currentNavHiddenGuids = Utils.SplitWebMetaInfoGuidList(sGuidList2);
            }
        }

        private bool GetNavNodeIsHidden(NavigationNode node, string[] hiddenUrls, SharePointAdapter adapter)
        {
            if (hiddenUrls == null || node.Url.Contains("://"))
            {
                return true;
            }
            StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(adapter, node.Url);
            string webRelative = standardizedUrl.WebRelative;
            for (int i = 0; i < hiddenUrls.Length; i++)
            {
                string a = hiddenUrls[i];
                if (a == webRelative)
                {
                    return false;
                }
            }
            return true;
        }

        private System.Guid GetNavNodeHiddenUrlID(string sUrl, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMap, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMap, SharePointAdapter adapter)
        {
            if (string.IsNullOrEmpty(sUrl))
            {
                return System.Guid.Empty;
            }
            StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(adapter, sUrl);
            string webRelative = standardizedUrl.WebRelative;
            foreach (System.Collections.Generic.KeyValuePair<System.Guid, string> current in subWebIDMap)
            {
                if (current.Value == webRelative)
                {
                    System.Guid key = current.Key;
                    return key;
                }
            }
            foreach (System.Collections.Generic.KeyValuePair<System.Guid, string> current2 in pagesLibIDMap)
            {
                if (current2.Value == webRelative)
                {
                    System.Guid key = current2.Key;
                    return key;
                }
            }
            return System.Guid.Empty;
        }

        private NavigationNode GetNavNodeByID(int iID, Navigation navigation, SharePointAdapter callingAdapter, out bool bOnQuickLaunch, out bool bOnTopNav)
        {
            bOnQuickLaunch = false;
            bOnTopNav = false;
            if (iID < 1000 || iID == 1002 || iID == 1025)
            {
                return null;
            }
            try
            {
                foreach (NavigationNode current in navigation.TopNavigationBar)
                {
                    NavigationNode navNodeByID = this.GetNavNodeByID(iID, current, callingAdapter);
                    if (navNodeByID != null)
                    {
                        bOnTopNav = true;
                        NavigationNode result = navNodeByID;
                        return result;
                    }
                }
            }
            catch (CollectionNotInitializedException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            try
            {
                foreach (NavigationNode current2 in navigation.QuickLaunch)
                {
                    NavigationNode navNodeByID = this.GetNavNodeByID(iID, current2, callingAdapter);
                    if (navNodeByID != null)
                    {
                        bOnQuickLaunch = true;
                        NavigationNode result = navNodeByID;
                        return result;
                    }
                }
            }
            catch (CollectionNotInitializedException ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return null;
        }

        private NavigationNode GetNavNodeByID(int iID, NavigationNode nodeToSearchUnder, SharePointAdapter callingAdapter)
        {
            if (!nodeToSearchUnder.IsPropertyAvailable("Id"))
            {
                return null;
            }
            if (nodeToSearchUnder.Id == iID)
            {
                return nodeToSearchUnder;
            }
            if (!nodeToSearchUnder.IsPropertyAvailable("Children"))
            {
                nodeToSearchUnder.Context.Load<NavigationNodeCollection>(nodeToSearchUnder.Children, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(nodeToSearchUnder.Context, callingAdapter);
            }
            NavigationNode navigationNode = null;
            foreach (NavigationNode current in nodeToSearchUnder.Children)
            {
                navigationNode = this.GetNavNodeByID(iID, current, callingAdapter);
                if (navigationNode != null)
                {
                    break;
                }
            }
            return navigationNode;
        }

        private NavigationNodeCollection GetNavNodeCollectionUnder(int iID, Navigation navigation, SharePointAdapter callingAdapter, out bool bOnQuickLaunch, out bool bOnTopNav)
        {
            bOnQuickLaunch = false;
            bOnTopNav = false;
            if (iID < 1000)
            {
                return null;
            }
            if (iID == 1002)
            {
                bOnTopNav = true;
                return navigation.TopNavigationBar;
            }
            if (iID == 1025)
            {
                bOnQuickLaunch = true;
                return navigation.QuickLaunch;
            }
            NavigationNode navNodeByID = this.GetNavNodeByID(iID, navigation, callingAdapter, out bOnQuickLaunch, out bOnTopNav);
            if (navNodeByID != null)
            {
                return navNodeByID.Children;
            }
            return null;
        }

        public string UpdateWebNavigationStructure(string sUpdateXml)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string webNavigationStructure;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                    clientContext.Load<PropertyValues>(web.AllProperties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    new System.Collections.Generic.List<string>();
                    Navigation arg_60_0 = web.Navigation;
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sUpdateXml);
                    System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode("./AdditionsAndUpdates");
                    System.Xml.XmlNode deletions = xmlNode.SelectSingleNode("./Deletions");
                    System.Xml.XmlNode node = xmlNode.SelectSingleNode("./SoureAdapterInformation");
                    bool attributeValueAsBoolean = node.GetAttributeValueAsBoolean("IsCSOMOrNWS");
                    System.Xml.XmlNode xmlNode3 = xmlNode.SelectSingleNode("./MigrateLanguageSettingForNavigationStructure");
                    bool isLanguageSettingMigrated = false;
                    if (xmlNode3 != null)
                    {
                        isLanguageSettingMigrated = xmlNode3.GetAttributeValueAsBoolean("IsMigrateLanguageSettingForNavigationStructure");
                    }
                    System.Xml.XmlNode xmlNode4 = xmlNode.SelectSingleNode("./PublishingFeatureInformation");
                    bool isPublishingFeatureEnabled = false;
                    if (xmlNode4 != null)
                    {
                        isPublishingFeatureEnabled = xmlNode4.GetAttributeValueAsBoolean("IsPublishingFeatureEnabled");
                    }
                    System.Xml.XmlNode xmlNode5 = xmlNode.SelectSingleNode("./LanguageSettingsMaximumIntervalInformation");
                    int languageSettingsMaximumInterval = 0;
                    if (xmlNode5 != null)
                    {
                        languageSettingsMaximumInterval = xmlNode5.GetAttributeValueAsInt("LanguageSettingsMaximumInterval");
                    }
                    System.Xml.XmlNode xmlNode6 = xmlNode.SelectSingleNode("./LanguageSettingsRefreshIntervalInformation");
                    int languageSettingsRefreshInterval = 0;
                    if (xmlNode6 != null)
                    {
                        languageSettingsRefreshInterval = xmlNode6.GetAttributeValueAsInt("LanguageSettingsRefreshInterval");
                    }
                    System.Guid[] array = null;
                    System.Guid[] array2 = null;
                    System.Collections.Generic.List<System.Guid> list = null;
                    System.Collections.Generic.List<System.Guid> list2 = null;
                    System.Collections.Generic.List<string> list3 = new System.Collections.Generic.List<string>();
                    System.Collections.Generic.List<string> list4 = new System.Collections.Generic.List<string>();
                    System.Collections.Generic.Dictionary<System.Guid, string> pagesLibraryDocIDToURLMap = this.GetPagesLibraryDocIDToURLMap(clientContext, web);
                    System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMap = this.GetSubWebIDMap(clientContext, web);
                    if (attributeValueAsBoolean)
                    {
                        this.GetNavNodeHiddenGuids(web, out array, out array2);
                        list = ((array == null) ? new System.Collections.Generic.List<System.Guid>() : new System.Collections.Generic.List<System.Guid>(array));
                        list2 = ((array2 == null) ? new System.Collections.Generic.List<System.Guid>() : new System.Collections.Generic.List<System.Guid>(array2));
                        this.GetNavNodeHiddenUrls(web, out list3, out list4);
                        string[] hiddenGlobalUrls = list3.ToArray();
                        string[] hiddenCurrentUrls = list4.ToArray();
                        bool navNodeAdditionsAndUpdatesRequireIsVisibleChange = this.GetNavNodeAdditionsAndUpdatesRequireIsVisibleChange2013(xmlNode2);
                        bool flag;
                        this.UpdateWebNavigationStructure(xmlNode2, deletions, this, navNodeAdditionsAndUpdatesRequireIsVisibleChange, hiddenGlobalUrls, hiddenCurrentUrls, pagesLibraryDocIDToURLMap, subWebIDMap, ref list, ref list2, out flag);
                    }
                    else
                    {
                        this.UpdateWebNavigationStructureWithAspx(clientContext, xmlNode2, pagesLibraryDocIDToURLMap, subWebIDMap, web, isLanguageSettingMigrated, isPublishingFeatureEnabled, languageSettingsMaximumInterval, languageSettingsRefreshInterval);
                    }
                    webNavigationStructure = this.GetWebNavigationStructure();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return webNavigationStructure;
        }

        private void UpdateWebNavigationStructure(System.Xml.XmlNode additionsAndUpdates, System.Xml.XmlNode deletions, SharePointAdapter callingAdapter, bool bWatchForIsVisibleChanges, string[] hiddenGlobalUrls, string[] hiddenCurrentUrls, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMap, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMap, ref System.Collections.Generic.List<System.Guid> hiddenGlobalNodes, ref System.Collections.Generic.List<System.Guid> hiddenCurrentNodes, out bool bHiddenChangesMade)
        {
            if (callingAdapter.HasActiveCookieManager && callingAdapter.CookieManager.LockCookie)
            {
                callingAdapter.CookieManager.AquireCookieLock();
            }
            try
            {
                bHiddenChangesMade = false;
                using (ClientContext clientContext = this.GetClientContext(callingAdapter, false))
                {
                    Web web = clientContext.Web;
                    Navigation navigation = web.Navigation;
                    clientContext.Load<Navigation>(navigation, new System.Linq.Expressions.Expression<System.Func<Navigation, object>>[]
                    {
                        (Navigation n) => (object)n.UseShared
                    });
                    clientContext.Load<NavigationNodeCollection>(navigation.QuickLaunch, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
                    clientContext.Load<NavigationNodeCollection>(navigation.TopNavigationBar, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
                    clientContext.Load<PropertyValues>(web.AllProperties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
                    foreach (System.Xml.XmlNode xmlNode in deletions.ChildNodes)
                    {
                        int iID = int.Parse(xmlNode.Attributes["ID"].Value);
                        bool flag = false;
                        bool flag2 = false;
                        NavigationNode navNodeByID = this.GetNavNodeByID(iID, navigation, callingAdapter, out flag, out flag2);
                        if (navNodeByID != null)
                        {
                            navNodeByID.DeleteObject();
                        }
                    }
                    foreach (System.Xml.XmlNode xmlNode2 in additionsAndUpdates.ChildNodes)
                    {
                        bool bOnQuickLaunch = false;
                        bool flag3 = false;
                        int iID2 = int.Parse(xmlNode2.Attributes["ID"].Value);
                        NavigationNode navNodeByID2 = this.GetNavNodeByID(iID2, navigation, callingAdapter, out bOnQuickLaunch, out flag3);
                        if (navNodeByID2 != null)
                        {
                            this.UpdateNavigationNode(xmlNode2, navNodeByID2, callingAdapter, bWatchForIsVisibleChanges, hiddenGlobalUrls, hiddenCurrentUrls, pagesLibIDMap, subWebIDMap, bOnQuickLaunch, flag3, ref hiddenGlobalNodes, ref hiddenCurrentNodes, ref bHiddenChangesMade);
                        }
                        else
                        {
                            int iID3 = int.Parse(xmlNode2.Attributes["ParentID"].Value);
                            NavigationNodeCollection navNodeCollectionUnder = this.GetNavNodeCollectionUnder(iID3, navigation, callingAdapter, out bOnQuickLaunch, out flag3);
                            if (navNodeCollectionUnder != null && (!flag3 || !navigation.UseShared))
                            {
                                this.AddNavigationNode(xmlNode2, navNodeCollectionUnder, callingAdapter, bWatchForIsVisibleChanges, pagesLibIDMap, subWebIDMap, bOnQuickLaunch, flag3, ref hiddenGlobalNodes, ref hiddenCurrentNodes, ref bHiddenChangesMade);
                            }
                        }
                    }
                    this.UpdateNavigationHiddenGuids(web, hiddenGlobalNodes, hiddenCurrentNodes);
                    CSOMAdapter.CallExecuteQuery(clientContext, callingAdapter);
                }
            }
            finally
            {
                if (callingAdapter.HasActiveCookieManager && callingAdapter.CookieManager.LockCookie)
                {
                    callingAdapter.CookieManager.ReleaseCookieLock();
                }
            }
        }

        private void UpdateNavigationHiddenGuids(Web currentWeb, System.Collections.Generic.List<System.Guid> hiddenGlobalNavGuids, System.Collections.Generic.List<System.Guid> hiddenCurrentNavGuids)
        {
            this.UpdateNavHiddenGuids(currentWeb, hiddenGlobalNavGuids, "__GlobalNavigationExcludes");
            this.UpdateNavHiddenGuids(currentWeb, hiddenCurrentNavGuids, "__CurrentNavigationExcludes");
            currentWeb.Update();
        }

        private void UpdateNavHiddenGuids(Web currentWeb, System.Collections.Generic.List<System.Guid> hiddenNavGuids, string navProperty)
        {
            string text = string.Empty;
            foreach (System.Guid current in hiddenNavGuids)
            {
                text = text + current.ToString() + ";";
            }
            if (currentWeb.AllProperties.FieldValues.ContainsKey(navProperty))
            {
                currentWeb.AllProperties[navProperty] = text;
                return;
            }
            if (!string.IsNullOrEmpty(text))
            {
                PropertyValues allProperties = currentWeb.AllProperties;
                allProperties[navProperty] = text;
            }
        }

        private void AddNavigationNode(System.Xml.XmlNode node, NavigationNodeCollection parentCollection, SharePointAdapter adapter, bool bWatchForIsVisibleChanges, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMap, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMap, bool bOnQuickLaunch, bool bOnTopNav, ref System.Collections.Generic.List<System.Guid> hiddenGlobalNodes, ref System.Collections.Generic.List<System.Guid> hiddenCurrentNodes, ref bool bHiddenChangesMade)
        {
            if (bWatchForIsVisibleChanges && node.Attributes["IsVisible"] != null)
            {
                bool isVisible = bool.Parse(node.Attributes["IsVisible"].Value);
                System.Guid navNodeHiddenUrlID = this.GetNavNodeHiddenUrlID(node.Attributes["Url"].Value, pagesLibIDMap, subWebIDMap, adapter);
                if (navNodeHiddenUrlID != System.Guid.Empty)
                {
                    if (bOnQuickLaunch)
                    {
                        this.UpdateNavigationList(ref hiddenCurrentNodes, navNodeHiddenUrlID, isVisible, ref bHiddenChangesMade);
                    }
                    else if (bOnTopNav)
                    {
                        this.UpdateNavigationList(ref hiddenGlobalNodes, navNodeHiddenUrlID, isVisible, ref bHiddenChangesMade);
                    }
                }
            }
            NavigationNodeCreationInformation navigationNodeCreationInformation = new NavigationNodeCreationInformation();
            navigationNodeCreationInformation.Title = node.Attributes["Title"].Value;
            navigationNodeCreationInformation.Url = node.Attributes["Url"].Value;
            navigationNodeCreationInformation.IsExternal = ((node.Attributes["IsExternal"] == null) ? navigationNodeCreationInformation.Url.Contains("://") : bool.Parse(node.Attributes["IsExternal"].Value));
            navigationNodeCreationInformation.AsLastNode = true;
            NavigationNode navigationNode = parentCollection.Add(navigationNodeCreationInformation);
            foreach (System.Xml.XmlNode node2 in node.ChildNodes)
            {
                this.AddNavigationNode(node2, navigationNode.Children, adapter, bWatchForIsVisibleChanges, pagesLibIDMap, subWebIDMap, bOnQuickLaunch, bOnTopNav, ref hiddenGlobalNodes, ref hiddenCurrentNodes, ref bHiddenChangesMade);
            }
        }

        private void UpdateNavigationList(ref System.Collections.Generic.List<System.Guid> hiddenNavigationNodes, System.Guid guid, bool isVisible, ref bool bHiddenChangesMade)
        {
            if (!isVisible)
            {
                if (!hiddenNavigationNodes.Contains(guid))
                {
                    bHiddenChangesMade = true;
                    hiddenNavigationNodes.Add(guid);
                    return;
                }
            }
            else if (hiddenNavigationNodes.Contains(guid))
            {
                bHiddenChangesMade = true;
                hiddenNavigationNodes.Remove(guid);
            }
        }

        private void UpdateNavigationNode(System.Xml.XmlNode node, NavigationNode navNode, SharePointAdapter adapter, bool bWatchForIsVisibleChanges, string[] hiddenGlobalUrls, string[] hiddenCurrentUrls, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMap, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMap, bool bOnQuickLaunch, bool bOnTopNav, ref System.Collections.Generic.List<System.Guid> hiddenGlobalNodes, ref System.Collections.Generic.List<System.Guid> hiddenCurrentNodes, ref bool bHiddenChangesMade)
        {
            if (bWatchForIsVisibleChanges && node.Attributes["IsVisible"] != null)
            {
                bool flag = bool.Parse(node.Attributes["IsVisible"].Value);
                bool flag2 = true;
                if (bOnTopNav)
                {
                    flag2 = this.GetNavNodeIsHidden(navNode, hiddenGlobalUrls, adapter);
                }
                else if (bOnQuickLaunch)
                {
                    flag2 = this.GetNavNodeIsHidden(navNode, hiddenCurrentUrls, adapter);
                }
                if (flag2 != flag)
                {
                    string sUrl = (node.Attributes["Url"] == null) ? navNode.Url : node.Attributes["Url"].Value;
                    System.Guid navNodeHiddenUrlID = this.GetNavNodeHiddenUrlID(sUrl, pagesLibIDMap, subWebIDMap, adapter);
                    if (navNodeHiddenUrlID != System.Guid.Empty)
                    {
                        if (flag)
                        {
                            if (bOnQuickLaunch)
                            {
                                if (hiddenCurrentNodes.Remove(navNodeHiddenUrlID))
                                {
                                    bHiddenChangesMade = true;
                                }
                            }
                            else if (bOnTopNav && hiddenGlobalNodes.Remove(navNodeHiddenUrlID))
                            {
                                bHiddenChangesMade = true;
                            }
                        }
                        else if (bOnQuickLaunch)
                        {
                            if (!hiddenCurrentNodes.Contains(navNodeHiddenUrlID))
                            {
                                bHiddenChangesMade = true;
                                hiddenCurrentNodes.Add(navNodeHiddenUrlID);
                            }
                        }
                        else if (bOnTopNav && !hiddenGlobalNodes.Contains(navNodeHiddenUrlID))
                        {
                            bHiddenChangesMade = true;
                            hiddenGlobalNodes.Add(navNodeHiddenUrlID);
                        }
                    }
                }
            }
            if (node.Attributes["Title"] != null)
            {
                navNode.Title = node.Attributes["Title"].Value;
            }
            if (node.Attributes["Url"] != null)
            {
                navNode.Url = node.Attributes["Url"].Value;
            }
            if (node.ChildNodes.Count > 0 && !navNode.IsPropertyAvailable("Children"))
            {
                navNode.Context.Load<NavigationNodeCollection>(navNode.Children, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(navNode.Context, adapter);
            }
            foreach (System.Xml.XmlNode xmlNode in node.ChildNodes)
            {
                int num = int.Parse(xmlNode.Attributes["ID"].Value);
                NavigationNode navigationNode = null;
                if (num >= 1000)
                {
                    foreach (NavigationNode current in navNode.Children)
                    {
                        if (current.Id == num)
                        {
                            navigationNode = current;
                            break;
                        }
                    }
                }
                if (navigationNode != null)
                {
                    this.UpdateNavigationNode(xmlNode, navigationNode, adapter, bWatchForIsVisibleChanges, hiddenGlobalUrls, hiddenCurrentUrls, pagesLibIDMap, subWebIDMap, bOnQuickLaunch, bOnTopNav, ref hiddenGlobalNodes, ref hiddenCurrentNodes, ref bHiddenChangesMade);
                }
                else
                {
                    this.AddNavigationNode(xmlNode, navNode.Children, adapter, bWatchForIsVisibleChanges, pagesLibIDMap, subWebIDMap, bOnQuickLaunch, bOnTopNav, ref hiddenGlobalNodes, ref hiddenCurrentNodes, ref bHiddenChangesMade);
                }
            }
        }

        private bool GetNavNodeAdditionsAndUpdatesRequireIsVisibleChange2013(System.Xml.XmlNode additionsAndUpdatesNode)
        {
            if (additionsAndUpdatesNode == null)
            {
                return false;
            }
            System.Xml.XmlNodeList xmlNodeList = additionsAndUpdatesNode.SelectNodes("//NavNode");
            foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
            {
                if (int.Parse(xmlNode.Attributes["ID"].Value) >= 0)
                {
                    bool result = true;
                    return result;
                }
                if (xmlNode.Attributes["IsVisible"].Value.ToLower() == "false")
                {
                    bool result = true;
                    return result;
                }
            }
            return false;
        }

        private System.Collections.Generic.Dictionary<System.Guid, string> GetSubWebIDMap(ClientContext ctx, Web web)
        {
            System.Collections.Generic.Dictionary<System.Guid, string> dictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
            WebCollection subwebsForCurrentUser = web.GetSubwebsForCurrentUser(null);
            ctx.Load<WebCollection>(subwebsForCurrentUser, new System.Linq.Expressions.Expression<System.Func<WebCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            foreach (Web current in subwebsForCurrentUser)
            {
                System.Guid id = current.Id;
                StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(this, current.Url);
                dictionary.Add(id, standardizedUrl.WebRelative);
            }
            return dictionary;
        }

        private System.Collections.Generic.Dictionary<System.Guid, string> GetPagesLibraryDocIDToURLMap(ClientContext ctx, Web web)
        {
            System.Collections.Generic.Dictionary<System.Guid, string> dictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
            ListCollection lists = web.Lists;
            ctx.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            List list = null;
            foreach (List current in lists)
            {
                if (current.BaseTemplate == 850)
                {
                    list = current;
                    break;
                }
            }
            if (list == null)
            {
                return dictionary;
            }
            string query = Utils.BuildPagesLibraryGuidFetchingQuery(null);
            string viewFields = "<FieldRef Name=\"FileRef\" /><FieldRef Name=\"UniqueId\" />";
            bool flag;
            ListItemCollection[] listItems = this.GetListItems(list, query, viewFields, null, null, null, null, null, null, out flag, false);
            ListItemCollection[] array = listItems;
            for (int i = 0; i < array.Length; i++)
            {
                ListItemCollection listItemCollection = array[i];
                foreach (ListItem current2 in listItemCollection)
                {
                    System.Guid key = (System.Guid)current2["UniqueId"];
                    string text = current2["FileRef"].ToString();
                    int num = text.IndexOf(";#");
                    if (num >= 0)
                    {
                        num += 2;
                        text = ((num == text.Length - 1) ? null : text.Substring(num));
                    }
                    if (!string.IsNullOrEmpty(text))
                    {
                        StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(this, "/" + text.TrimStart(new char[]
                        {
                            '/'
                        }));
                        dictionary.Add(key, standardizedUrl.WebRelative);
                    }
                }
            }
            return dictionary;
        }

        public string ModifyWebNavigationSettings(string sWebXML, ModifyNavigationOptions ModNavOptions)
        {
            using (ClientContext clientContext = this.GetClientContext())
            {
                Web web = clientContext.Web;
                clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                clientContext.Load<PropertyValues>(web.AllProperties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                {
                    (Site s) => s.ServerRelativeUrl
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                this.ModifyWebNavigationSettings(clientContext, web, XmlUtility.StringToXmlNode(sWebXML));
                web.Update();
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            return string.Empty;
        }

        private void ModifyWebNavigationSettings(ClientContext ctx, Web web, System.Xml.XmlNode webXml)
        {
            if (web == null || webXml == null)
            {
                return;
            }
            bool flag = false;
            int num = -1;
            if (XmlUtility.GetBooleanAttributeFromXml(webXml, "QuickLaunchEnabled", out flag))
            {
                web.QuickLaunchEnabled = flag;
            }
            if (XmlUtility.GetBooleanAttributeFromXml(webXml, "TreeViewEnabled", out flag))
            {
                web.TreeViewEnabled = flag;
            }
            bool flag2 = this.IsRootWeb(ctx, web);
            if (!flag2 && XmlUtility.GetBooleanAttributeFromXml(webXml, "InheritGlobalNavigation", out flag) && web.Navigation != null)
            {
                web.Navigation.UseShared = flag;
            }
            if (!flag2 && XmlUtility.GetBooleanAttributeFromXml(webXml, "InheritCurrentNavigation", out flag))
            {
                web.AllProperties["__InheritCurrentNavigation"] = webXml.Attributes["InheritCurrentNavigation"].Value;
            }
            string[] array = new string[]
            {
                "NavigationSortAscending",
                "NavigationShowSiblings",
                "DisplayShowHideRibbonActionId"
            };
            string[] array2 = array;
            for (int i = 0; i < array2.Length; i++)
            {
                string text = array2[i];
                if (XmlUtility.GetBooleanAttributeFromXml(webXml, text, out flag))
                {
                    web.AllProperties["__" + text] = webXml.Attributes[text].Value;
                }
            }
            string[] array3 = new string[]
            {
                "NavigationOrderingMethod",
                "NavigationAutomaticSortingMethod",
                "GlobalDynamicChildLimit",
                "CurrentDynamicChildLimit"
            };
            string[] array4 = array3;
            for (int j = 0; j < array4.Length; j++)
            {
                string text2 = array4[j];
                if (XmlUtility.GetIntegerAttributeFromXml(webXml, text2, out num))
                {
                    web.AllProperties["__" + text2] = num;
                }
            }
            bool? flag3 = null;
            bool? flag4 = null;
            bool? flag5 = null;
            bool? flag6 = null;
            bool value;
            if (XmlUtility.GetBooleanAttributeFromXml(webXml, "IncludePagesInCurrentNavigation", out value))
            {
                flag3 = new bool?(value);
            }
            if (XmlUtility.GetBooleanAttributeFromXml(webXml, "IncludeSubSitesInCurrentNavigation", out value))
            {
                flag4 = new bool?(value);
            }
            if (XmlUtility.GetBooleanAttributeFromXml(webXml, "IncludePagesInGlobalNavigation", out value))
            {
                flag5 = new bool?(value);
            }
            if (XmlUtility.GetBooleanAttributeFromXml(webXml, "IncludeSubSitesInGlobalNavigation", out value))
            {
                flag6 = new bool?(value);
            }
            if (flag3.HasValue || flag5.HasValue || flag4.HasValue || flag6.HasValue)
            {
                int num2 = 0;
                int num3 = 0;
                if (!flag3.HasValue || !flag5.HasValue || !flag4.HasValue || !flag6.HasValue)
                {
                    if (web.AllProperties.FieldValues.ContainsKey("__CurrentNavigationIncludeTypes") && web.AllProperties["__CurrentNavigationIncludeTypes"] != null && !int.TryParse(web.AllProperties["__CurrentNavigationIncludeTypes"].ToString(), out num3))
                    {
                        num3 = 0;
                    }
                    if (web.AllProperties.FieldValues.ContainsKey("__GlobalNavigationIncludeTypes") && web.AllProperties["__GlobalNavigationIncludeTypes"] != null && !int.TryParse(web.AllProperties["__GlobalNavigationIncludeTypes"].ToString(), out num2))
                    {
                        num2 = 0;
                    }
                }
                if (flag3.HasValue)
                {
                    num3 = ((num3 & 1) | (flag3.Value ? 2 : 0));
                }
                if (flag4.HasValue)
                {
                    num3 = ((num3 & 2) | (flag4.Value ? 1 : 0));
                }
                if (flag5.HasValue)
                {
                    num2 = ((num2 & 1) | (flag5.Value ? 2 : 0));
                }
                if (flag6.HasValue)
                {
                    num2 = ((num2 & 2) | (flag6.Value ? 1 : 0));
                }
                web.AllProperties["__GlobalNavigationIncludeTypes"] = num2;
                web.AllProperties["__CurrentNavigationIncludeTypes"] = num3;
                if (web.AllProperties.FieldValues.ContainsKey("__IncludePagesInNavigation"))
                {
                    web.AllProperties.FieldValues.Remove("__IncludePagesInNavigation");
                }
                if (web.AllProperties.FieldValues.ContainsKey("__IncludeSubSitesInNavigation"))
                {
                    web.AllProperties.FieldValues.Remove("__IncludeSubSitesInNavigation");
                }
            }
            if (web.AllProperties.FieldValues.ContainsKey("_webnavigationsettings"))
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(web.AllProperties["_webnavigationsettings"].ToString());
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("//WebNavigationSettings");
                System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode("./SiteMapProviderSettings/SwitchableSiteMapProviderSettings[@Name='GlobalNavigationSwitchableProvider']");
                System.Xml.XmlNode xmlNode3 = xmlNode.SelectSingleNode("./SiteMapProviderSettings/TaxonomySiteMapProviderSettings[@Name='GlobalNavigationTaxonomyProvider']");
                xmlNode2.Attributes.RemoveNamedItem("UseParentSiteMap");
                xmlNode2.Attributes.RemoveNamedItem("TargetProviderName");
                xmlNode3.Attributes.RemoveNamedItem("UseParentSiteMap");
                xmlNode3.Attributes.RemoveNamedItem("Disabled");
                if (webXml.GetAttributeValueAsBoolean("InheritGlobalNavigation"))
                {
                    System.Xml.XmlNode xmlNode4 = xmlDocument.CreateNode(System.Xml.XmlNodeType.Attribute, "UseParentSiteMap", null);
                    xmlNode4.Value = "True";
                    xmlNode2.Attributes.SetNamedItem(xmlNode4);
                    xmlNode3.Attributes.SetNamedItem(xmlNode4);
                }
                else
                {
                    System.Xml.XmlNode xmlNode5 = xmlDocument.CreateNode(System.Xml.XmlNodeType.Attribute, "TargetProviderName", null);
                    xmlNode5.Value = "GlobalNavigation";
                    xmlNode2.Attributes.SetNamedItem(xmlNode5);
                    System.Xml.XmlNode xmlNode6 = xmlDocument.CreateNode(System.Xml.XmlNodeType.Attribute, "Disabled", null);
                    xmlNode6.Value = "True";
                    xmlNode3.Attributes.SetNamedItem(xmlNode6);
                }
                System.Xml.XmlNode xmlNode7 = xmlNode.SelectSingleNode("./SiteMapProviderSettings/SwitchableSiteMapProviderSettings[@Name='CurrentNavigationSwitchableProvider']");
                System.Xml.XmlNode xmlNode8 = xmlNode.SelectSingleNode("./SiteMapProviderSettings/TaxonomySiteMapProviderSettings[@Name='CurrentNavigationTaxonomyProvider']");
                xmlNode7.Attributes.RemoveNamedItem("UseParentSiteMap");
                xmlNode7.Attributes.RemoveNamedItem("TargetProviderName");
                xmlNode8.Attributes.RemoveNamedItem("UseParentSiteMap");
                xmlNode8.Attributes.RemoveNamedItem("Disabled");
                if (webXml.GetAttributeValueAsBoolean("InheritCurrentNavigation"))
                {
                    System.Xml.XmlNode xmlNode9 = xmlDocument.CreateNode(System.Xml.XmlNodeType.Attribute, "UseParentSiteMap", null);
                    xmlNode9.Value = "True";
                    xmlNode7.Attributes.SetNamedItem(xmlNode9);
                    xmlNode8.Attributes.SetNamedItem(xmlNode9);
                }
                else
                {
                    System.Xml.XmlNode xmlNode10 = xmlDocument.CreateNode(System.Xml.XmlNodeType.Attribute, "TargetProviderName", null);
                    xmlNode10.Value = "CurrentNavigation";
                    xmlNode7.Attributes.SetNamedItem(xmlNode10);
                    System.Xml.XmlNode xmlNode11 = xmlDocument.CreateNode(System.Xml.XmlNodeType.Attribute, "Disabled", null);
                    xmlNode11.Value = "True";
                    xmlNode8.Attributes.SetNamedItem(xmlNode11);
                }
                web.AllProperties["_webnavigationsettings"] = xmlDocument.OuterXml;
            }
        }

        private bool IsRootWeb(ClientContext ctx, Web web)
        {
            return UrlUtils.Equal(ctx.Site.ServerRelativeUrl, web.ServerRelativeUrl);
        }

        private void UpdateWebNavigationStructureWithAspx(ClientContext context, System.Xml.XmlNode additionsAndUpdates, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIdMappingTable, System.Collections.Generic.Dictionary<System.Guid, string> subWebIdMappingTable, Web targetWeb, bool isLanguageSettingMigrated, bool isPublishingFeatureEnabled, int languageSettingsMaximumInterval, int languageSettingsRefreshInterval)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                string navigationSettingsPageUrl = string.Format("{0}/_layouts/15/AreaNavigationSettings.aspx", targetWeb.Url);
                System.Collections.Generic.Dictionary<string, string> navigationSettingsParameters = this.GetNavigationSettingsParameters(navigationSettingsPageUrl, targetWeb.Url);
                string nodeStructureParameter = this.CreateNavigationStructure(additionsAndUpdates, pagesLibIdMappingTable, subWebIdMappingTable);
                string arg;
                if (!this.PostNavigationSettingsRequestWithAspx(navigationSettingsPageUrl, navigationSettingsParameters, nodeStructureParameter, targetWeb.Url, out arg))
                {
                    string message = string.Format("Exception : An error occurred while migrating the navigation settings using screen scrapingThe response from the target is: \"{0}\"", arg);
                    throw new System.Exception(message);
                }
                if (isLanguageSettingMigrated && base.SharePointVersion.IsSharePointOnline)
                {
                    this.CopyLanguageResources(context, additionsAndUpdates, targetWeb, pagesLibIdMappingTable, subWebIdMappingTable, isPublishingFeatureEnabled, languageSettingsMaximumInterval, languageSettingsRefreshInterval);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
        }

        private bool IsNavigationSettingsMigratedSuccessfully(string committedresponse)
        {
            HtmlDocument htmlDocument = new HtmlDocument();
            htmlDocument.LoadHtml(committedresponse);
            HtmlNode htmlNode = htmlDocument.DocumentNode.SelectSingleNode("//title");
            string text = htmlNode.InnerText.Trim();
            return !text.Equals("Error", System.StringComparison.InvariantCultureIgnoreCase);
        }

        private string CreateNavigationStructure(System.Xml.XmlNode additionsAndUpdates, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMappingTable, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMappingTable)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder2 = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder3 = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder4 = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder5 = new System.Text.StringBuilder();
            using (ClientContext clientContext = this.GetClientContext())
            {
                int num = 0;
                Web web = clientContext.Web;
                Navigation navigation = web.Navigation;
                clientContext.Load<Navigation>(navigation, new System.Linq.Expressions.Expression<System.Func<Navigation, object>>[]
                {
                    (Navigation webNavigation) => (object)webNavigation.UseShared
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                foreach (System.Xml.XmlNode xmlNode in additionsAndUpdates.ChildNodes)
                {
                    int attributeValueAsInt = xmlNode.GetAttributeValueAsInt("ParentID");
                    bool? flag = this.IsNodeGlobalNavigation(attributeValueAsInt);
                    if (flag.HasValue)
                    {
                        num--;
                        if (!flag.Value || !navigation.UseShared)
                        {
                            bool flag2;
                            string nodeStructure = this.GetNodeStructure(xmlNode, pagesLibIDMappingTable, subWebIDMappingTable, num, true, out flag2, null, null, false, false);
                            if (flag.Value)
                            {
                                stringBuilder.Append(nodeStructure);
                            }
                            else
                            {
                                stringBuilder2.Append(nodeStructure);
                            }
                            if (xmlNode.ChildNodes.Count > 0 && xmlNode.GetAttributeValueAsInt("ID") != 1033)
                            {
                                string value = string.Format("<\"{0},{1}", System.Guid.Empty.ToString(), num);
                                if (flag.Value)
                                {
                                    stringBuilder3.Append(value);
                                }
                                else
                                {
                                    stringBuilder4.Append(value);
                                }
                                foreach (System.Xml.XmlNode node in xmlNode.ChildNodes)
                                {
                                    num--;
                                    string nodeStructure2 = this.GetNodeStructure(node, pagesLibIDMappingTable, subWebIDMappingTable, num, false, out flag2, null, null, false, false);
                                    if (flag.Value)
                                    {
                                        stringBuilder3.Append(nodeStructure2);
                                    }
                                    else
                                    {
                                        stringBuilder4.Append(nodeStructure2);
                                    }
                                }
                            }
                        }
                    }
                }
                stringBuilder5.Append("Root<\"GlobalNav").Append(stringBuilder.ToString()).Append(stringBuilder3.ToString()).Append("<\"CurrentNav").Append(stringBuilder2.ToString()).Append(stringBuilder4.ToString());
            }
            return stringBuilder5.ToString();
        }

        private string GetNodeStructure(System.Xml.XmlNode node, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMappingTable, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMappingTable, int nodeID, bool isParentNode, out bool isNodeUpdatedUsingEditNavPage, Web currentWeb = null, string currentLanguage = null, bool isFirstMigration = false, bool isPublishingFeatureEnabled = false)
        {
            isNodeUpdatedUsingEditNavPage = false;
            string text = node.GetAttributeValueAsString("Title");
            if (!string.IsNullOrEmpty(currentLanguage))
            {
                text = CSOMAdapter.GetLanguageSpecificTitle(node, currentLanguage);
            }
            text = this.EncodeReservedCharacters(text);
            string text2 = node.GetAttributeValueAsString("Url");
            text2 = text2.Replace("%20", " ");
            text2 = this.EncodeReservedCharacters(text2);
            string text3 = node.GetAttributeValueAsString("Description");
            text3 = this.EncodeReservedCharacters(text3);
            string text4 = node.GetAttributeValueAsString("NodeType");
            string attributeValueAsString = node.GetAttributeValueAsString("Target");
            string text5 = node.GetAttributeValueAsBoolean("IsVisible") ? "visible" : "hidden";
            if (string.IsNullOrEmpty(text4))
            {
                text4 = (isParentNode ? "Heading" : "AuthoredLinkPlain");
            }
            System.Guid guid = this.GetNavNodeHiddenUrlID(text2, pagesLibIDMappingTable, subWebIDMappingTable, this);
            if (isFirstMigration && ((guid != System.Guid.Empty && !isPublishingFeatureEnabled) || text2.Contains("viewlsts.aspx")))
            {
                isNodeUpdatedUsingEditNavPage = true;
            }
            if (currentWeb != null && guid == System.Guid.Empty)
            {
                guid = currentWeb.Id;
            }
            return string.Format("<{0},{1}>{2}>{3}>{4}>{5}>{6}>{7}>>>", new object[]
            {
                System.Convert.ToString(guid),
                nodeID,
                text,
                text2,
                text3,
                text4,
                text5,
                attributeValueAsString
            });
        }

        private static string GetLanguageSpecificTitle(System.Xml.XmlNode node, string currentLanguage)
        {
            string attributeValueAsString = node.GetAttributeValueAsString("LanguageResources");
            if (attributeValueAsString != null)
            {
                string[] source = attributeValueAsString.Split(new char[]
                {
                    '|'
                });
                string text = (from x in source
                               where x.Contains(currentLanguage)
                               select x).FirstOrDefault<string>();
                if (text != null)
                {
                    return text.Split(new string[]
                    {
                        ";#"
                    }, 2, System.StringSplitOptions.RemoveEmptyEntries)[1];
                }
            }
            return string.Empty;
        }

        private string EncodeReservedCharacters(string fieldValue)
        {
            fieldValue = fieldValue.Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;");
            return fieldValue;
        }

        private bool? IsNodeGlobalNavigation(int parentID)
        {
            if (parentID == 1002)
            {
                return new bool?(true);
            }
            if (parentID == 1025)
            {
                return new bool?(false);
            }
            return null;
        }

        private void CopyLanguageResources(ClientContext context, System.Xml.XmlNode additionsAndUpdatesNode, Web targetWeb, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMappingTable, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMappingTable, bool isPublishingFeatureEnabled, int languageSettingsMaximumInterval, int languageSettingsRefreshInterval)
        {
            string text = string.Empty;
            bool flag = false;
            try
            {
                System.Collections.Generic.IEnumerable<int> supportedLanguageIds = this.LoadWebSupportedCultures(context, targetWeb);
                System.Collections.Generic.List<System.Globalization.CultureInfo> supportedWebCultures = this.GetSupportedWebCultures(supportedLanguageIds);
                if (supportedWebCultures.Count <= 1)
                {
                    System.Diagnostics.Trace.WriteLine(string.Format("Unable to find multiple languages on target", new object[0]));
                }
                else
                {
                    System.Collections.Generic.List<string> sourceLanguages = this.GetSourceLanguages(additionsAndUpdatesNode, supportedWebCultures);
                    if (sourceLanguages != null && sourceLanguages.Count > 0)
                    {
                        text = this.GetCurrentTargetLanguageOrder(context, targetWeb);
                        bool isFirstMigration = true;
                        System.Collections.Generic.List<System.Xml.XmlNode> list = new System.Collections.Generic.List<System.Xml.XmlNode>();
                        string text2 = string.Empty;
                        string name = System.Globalization.CultureInfo.GetCultureInfo((int)targetWeb.Language).Name;
                        foreach (string current in sourceLanguages)
                        {
                            if (!current.Equals(name))
                            {
                                try
                                {
                                    flag = true;
                                    if (this.SetTargetLanguage(context, targetWeb, current + "," + text, languageSettingsMaximumInterval, languageSettingsRefreshInterval))
                                    {
                                        System.Collections.Generic.Dictionary<int, string> targetWebNavigationObjects = this.GetTargetWebNavigationObjects(context, targetWeb);
                                        if (targetWebNavigationObjects != null && targetWebNavigationObjects.Count > 0)
                                        {
                                            this.UpdateWebNavigationStructureWithAspx(additionsAndUpdatesNode, pagesLibIDMappingTable, subWebIDMappingTable, targetWeb, targetWebNavigationObjects, current, isFirstMigration, list, text2, isPublishingFeatureEnabled);
                                            isFirstMigration = false;
                                        }
                                        text2 = current;
                                    }
                                    else
                                    {
                                        System.Diagnostics.Trace.WriteLine(string.Format("Unable to set '{0}' language on target for web {1}. Please increase time limit of configuration variable '{2}' in EnvironmentSettings.xml or Configuration Database and try again.", current, targetWeb.Url, "LanguageSettingsMaximumInterval"));
                                    }
                                }
                                catch (System.Exception ex)
                                {
                                    CSOMAdapter.LogExceptionDetails(ex, "An error occurred while updating language specific navigation structure other than subsites.", null);
                                }
                            }
                        }
                        if (list.Count > 0)
                        {
                            string lastLanguage = text2;
                            foreach (string current2 in sourceLanguages)
                            {
                                try
                                {
                                    flag = true;
                                    if (this.SetTargetLanguage(context, targetWeb, current2 + "," + text, languageSettingsMaximumInterval, languageSettingsRefreshInterval))
                                    {
                                        System.Collections.Generic.Dictionary<int, string> targetWebNavigationObjects = this.GetTargetWebNavigationObjects(context, targetWeb);
                                        if (targetWebNavigationObjects != null && targetWebNavigationObjects.Count > 0)
                                        {
                                            this.UpdateLanguageSpecificStructureForSubsites(targetWebNavigationObjects, list, current2, lastLanguage, targetWeb.Url);
                                        }
                                        lastLanguage = current2;
                                    }
                                    else
                                    {
                                        System.Diagnostics.Trace.WriteLine(string.Format("Unable to set '{0}' language on target for web {1}. Please increase time limit of configuration variable '{2}' in EnvironmentSettings.xml or Configuration Database and try again.", current2, targetWeb.Url, "LanguageSettingsMaximumInterval"));
                                    }
                                }
                                catch (System.Exception ex2)
                                {
                                    CSOMAdapter.LogExceptionDetails(ex2, "An error occurred while updating language specific navigation structure for subsites.", null);
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex3)
            {
                CSOMAdapter.LogExceptionDetails(ex3, "An error occurred while updating language specific entire navigation structure.", null);
            }
            finally
            {
                if (flag)
                {
                    this.SetTargetLanguage(context, targetWeb, text, languageSettingsMaximumInterval, languageSettingsRefreshInterval);
                }
            }
        }

        private System.Collections.Generic.List<string> GetSourceLanguages(System.Xml.XmlNode additionsAndUpdatesNode, System.Collections.Generic.List<System.Globalization.CultureInfo> targetCultures)
        {
            System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
            if (additionsAndUpdatesNode.HasChildNodes)
            {
                string attributeValueAsString = additionsAndUpdatesNode.FirstChild.GetAttributeValueAsString("LanguageResources");
                if (!string.IsNullOrEmpty(attributeValueAsString))
                {
                    string[] array = attributeValueAsString.Split(new char[]
                    {
                        '|'
                    });
                    if (array.Length > 0)
                    {
                        string[] array2 = array;
                        for (int i = 0; i < array2.Length; i++)
                        {
                            string text = array2[i];
                            string[] array3 = text.Split(new string[]
                            {
                                ";#"
                            }, 2, System.StringSplitOptions.RemoveEmptyEntries);
                            if (array3.Count<string>() > 1)
                            {
                                string text2 = array3[0];
                                if (!string.IsNullOrEmpty(text2))
                                {
                                    System.Globalization.CultureInfo item = new System.Globalization.CultureInfo(text2);
                                    if (targetCultures.Contains(item))
                                    {
                                        list.Add(text2);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return list;
        }

        private System.Collections.Generic.Dictionary<int, string> GetTargetWebNavigationObjects(ClientContext context, Web targetWeb)
        {
            System.Collections.Generic.Dictionary<int, string> dictionary = new System.Collections.Generic.Dictionary<int, string>();
            Navigation navigation = targetWeb.Navigation;
            context.Load<NavigationNodeCollection>(navigation.QuickLaunch, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[]
            {
                (NavigationNodeCollection nodes) => nodes.Include(new System.Linq.Expressions.Expression<System.Func<NavigationNode, object>>[]
                {
                    (NavigationNode node) => node.Title,
                    (NavigationNode node) => (object)node.Id
                })
            });
            context.Load<NavigationNodeCollection>(navigation.TopNavigationBar, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[]
            {
                (NavigationNodeCollection nodes) => nodes.Include(new System.Linq.Expressions.Expression<System.Func<NavigationNode, object>>[]
                {
                    (NavigationNode node) => node.Title,
                    (NavigationNode node) => (object)node.Id
                })
            });
            CSOMAdapter.CallExecuteQuery(context, this);
            this.PopulateNodes(context, navigation.QuickLaunch, dictionary);
            this.PopulateNodes(context, navigation.TopNavigationBar, dictionary);
            return dictionary;
        }

        private void PopulateNodes(ClientContext context, NavigationNodeCollection navNodes, System.Collections.Generic.Dictionary<int, string> targetNodeIDMapping)
        {
            foreach (NavigationNode current in navNodes)
            {
                targetNodeIDMapping.Add(current.Id, current.Title);
                context.Load<NavigationNodeCollection>(current.Children, new System.Linq.Expressions.Expression<System.Func<NavigationNodeCollection, object>>[]
                {
                    (NavigationNodeCollection nodes) => nodes.Include(new System.Linq.Expressions.Expression<System.Func<NavigationNode, object>>[]
                    {
                        (NavigationNode x) => x.Title,
                        (NavigationNode x) => (object)x.Id
                    })
                });
                CSOMAdapter.CallExecuteQuery(context, this);
                if (current.Children.Count > 0)
                {
                    foreach (NavigationNode current2 in current.Children)
                    {
                        targetNodeIDMapping.Add(current2.Id, current2.Title);
                    }
                }
            }
        }

        private void UpdateWebNavigationStructureWithAspx(System.Xml.XmlNode additionsAndUpdates, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIdMappingTable, System.Collections.Generic.Dictionary<System.Guid, string> subWebIdMappingTable, Web targetWeb, System.Collections.Generic.Dictionary<int, string> targetNodes, string currentLanguage, bool isFirstMigration, System.Collections.Generic.List<System.Xml.XmlNode> subsiteNodes, string lastLanguage, bool isPublishingFeatureEnabled)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                string navigationSettingsPageUrl = string.Format("{0}/_layouts/15/AreaNavigationSettings.aspx", targetWeb.Url);
                System.Collections.Generic.Dictionary<string, string> navigationSettingsParameters = this.GetNavigationSettingsParameters(navigationSettingsPageUrl, targetWeb.Url);
                string nodeStructureParameter = this.CreateNavigationStructure(additionsAndUpdates, pagesLibIdMappingTable, subWebIdMappingTable, targetWeb, targetNodes, currentLanguage, isFirstMigration, subsiteNodes, lastLanguage, isPublishingFeatureEnabled);
                string arg;
                if (!this.PostNavigationSettingsRequestWithAspx(navigationSettingsPageUrl, navigationSettingsParameters, nodeStructureParameter, targetWeb.Url, out arg))
                {
                    string message = string.Format("Exception : An error occurred while migrating the navigation settings using screen scrapingThe response from the target is: \"{0}\"", arg);
                    throw new System.Exception(message);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
        }

        private bool PostNavigationSettingsRequestWithAspx(string navigationSettingsPageUrl, System.Collections.Generic.Dictionary<string, string> navigationSettingsParameters, string nodeStructureParameter, string targetWebUrl, out string committedresponse)
        {
            navigationSettingsParameters["nodes"] = nodeStructureParameter;
            navigationSettingsParameters.Remove("ctl00$PlaceHolderMain$ctl05$RptControls$bottomCancelButton");
            string text = HttpHelper.GetPostDataFromForm(navigationSettingsParameters);
            text += string.Format("{0}&__EVENTTARGET=&__EVENTARGUMENT=", System.Uri.EscapeDataString("ctl00$PlaceHolderMain$ctl05$RptControls$bottomOKButton"));
            committedresponse = this.GetResponseStringFromPost(navigationSettingsPageUrl, text, string.Empty, targetWebUrl);
            return this.IsNavigationSettingsMigratedSuccessfully(committedresponse);
        }

        private System.Collections.Generic.Dictionary<string, string> GetNavigationSettingsParameters(string navigationSettingsPageUrl, string targetWebUrl)
        {
            string empty = string.Empty;
            string responseStringFromPost = this.GetResponseStringFromPost(navigationSettingsPageUrl, empty, string.Empty, targetWebUrl);
            return HttpHelper.PopulateParametersFromForm(responseStringFromPost);
        }

        private string CreateNavigationStructure(System.Xml.XmlNode additionsAndUpdates, System.Collections.Generic.Dictionary<System.Guid, string> pagesLibIDMappingTable, System.Collections.Generic.Dictionary<System.Guid, string> subWebIDMappingTable, Web targetWeb, System.Collections.Generic.Dictionary<int, string> targetNodes, string currentLanguage, bool isFirstMigration, System.Collections.Generic.List<System.Xml.XmlNode> subsiteNodes, string lastLanguage, bool isPublishingFeatureEnabled)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder2 = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder3 = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder4 = new System.Text.StringBuilder();
            System.Text.StringBuilder stringBuilder5 = new System.Text.StringBuilder();
            System.Collections.Generic.List<int> usedTargetNodeIds = new System.Collections.Generic.List<int>();
            using (ClientContext clientContext = this.GetClientContext())
            {
                Web web = clientContext.Web;
                Navigation navigation = web.Navigation;
                clientContext.Load<Navigation>(navigation, new System.Linq.Expressions.Expression<System.Func<Navigation, object>>[]
                {
                    (Navigation webNavigation) => (object)webNavigation.UseShared
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                foreach (System.Xml.XmlNode xmlNode in additionsAndUpdates.ChildNodes)
                {
                    int attributeValueAsInt = xmlNode.GetAttributeValueAsInt("ParentID");
                    bool? flag = this.IsNodeGlobalNavigation(attributeValueAsInt);
                    if (flag.HasValue)
                    {
                        string attributeValueAsString = xmlNode.GetAttributeValueAsString("Title");
                        int num = CSOMAdapter.HandleDuplicateNodes(targetNodes, usedTargetNodeIds, attributeValueAsString, lastLanguage, xmlNode);
                        if (!flag.Value || !navigation.UseShared)
                        {
                            bool flag2;
                            string nodeStructure = this.GetNodeStructure(xmlNode, pagesLibIDMappingTable, subWebIDMappingTable, num, true, out flag2, targetWeb, currentLanguage, isFirstMigration, isPublishingFeatureEnabled);
                            if (isFirstMigration && flag2)
                            {
                                subsiteNodes.Add(xmlNode);
                            }
                            if (flag.Value)
                            {
                                stringBuilder.Append(nodeStructure);
                            }
                            else
                            {
                                stringBuilder2.Append(nodeStructure);
                            }
                            if (xmlNode.ChildNodes.Count > 0 && xmlNode.GetAttributeValueAsInt("ID") != 1033)
                            {
                                string value = string.Empty;
                                if (targetNodes.ContainsValue(attributeValueAsString))
                                {
                                    value = string.Format("<\"{0},{1}", targetWeb.Id, num);
                                }
                                if (flag.Value)
                                {
                                    stringBuilder3.Append(value);
                                }
                                else
                                {
                                    stringBuilder4.Append(value);
                                }
                                foreach (System.Xml.XmlNode xmlNode2 in xmlNode.ChildNodes)
                                {
                                    string attributeValueAsString2 = xmlNode2.GetAttributeValueAsString("Title");
                                    num = CSOMAdapter.HandleDuplicateNodes(targetNodes, usedTargetNodeIds, attributeValueAsString2, lastLanguage, xmlNode2);
                                    string nodeStructure2 = this.GetNodeStructure(xmlNode2, pagesLibIDMappingTable, subWebIDMappingTable, num, false, out flag2, targetWeb, currentLanguage, isFirstMigration, isPublishingFeatureEnabled);
                                    if (isFirstMigration && flag2)
                                    {
                                        subsiteNodes.Add(xmlNode2);
                                    }
                                    if (flag.Value)
                                    {
                                        stringBuilder3.Append(nodeStructure2);
                                    }
                                    else
                                    {
                                        stringBuilder4.Append(nodeStructure2);
                                    }
                                }
                            }
                        }
                    }
                }
                stringBuilder5.Append("Root<\"GlobalNav").Append(stringBuilder.ToString()).Append(stringBuilder3.ToString()).Append("<\"CurrentNav").Append(stringBuilder2.ToString()).Append(stringBuilder4.ToString());
            }
            return stringBuilder5.ToString();
        }

        private static int HandleDuplicateNodes(System.Collections.Generic.Dictionary<int, string> targetNodes, System.Collections.Generic.List<int> usedTargetNodeIds, string title, string lastLanguage, System.Xml.XmlNode node)
        {
            int key = targetNodes.FirstOrDefault((System.Collections.Generic.KeyValuePair<int, string> x) => x.Value == title).Key;
            if (key == 0)
            {
                title = CSOMAdapter.GetLanguageSpecificTitle(node, lastLanguage);
                key = targetNodes.FirstOrDefault((System.Collections.Generic.KeyValuePair<int, string> x) => x.Value == title).Key;
            }
            if (!usedTargetNodeIds.Contains(key))
            {
                usedTargetNodeIds.Add(key);
            }
            else
            {
                key = targetNodes.FirstOrDefault((System.Collections.Generic.KeyValuePair<int, string> x) => x.Value == title && !usedTargetNodeIds.Contains(x.Key)).Key;
                if (key == 0)
                {
                    title = CSOMAdapter.GetLanguageSpecificTitle(node, lastLanguage);
                    key = targetNodes.FirstOrDefault((System.Collections.Generic.KeyValuePair<int, string> x) => x.Value == title && !usedTargetNodeIds.Contains(x.Key)).Key;
                }
                usedTargetNodeIds.Add(key);
            }
            return key;
        }

        private void UpdateLanguageSpecificStructureForSubsites(System.Collections.Generic.Dictionary<int, string> targetNodes, System.Collections.Generic.List<System.Xml.XmlNode> subsiteNodes, string currentLanguage, string lastLanguage, string targetWebUrl)
        {
            System.Collections.Generic.List<int> usedTargetNodeIds = new System.Collections.Generic.List<int>();
            if (targetNodes != null)
            {
                foreach (System.Xml.XmlNode current in subsiteNodes)
                {
                    try
                    {
                        string text = current.GetAttributeValueAsString("Title");
                        int num = CSOMAdapter.HandleDuplicateNodes(targetNodes, usedTargetNodeIds, text, lastLanguage, current);
                        string pageUrl = string.Format("{0}/_layouts/15/editnav.aspx?ID={1}", targetWebUrl, num);
                        string text2 = string.Empty;
                        string responseStringFromPost = this.GetResponseStringFromPost(pageUrl, text2, string.Empty, targetWebUrl);
                        System.Collections.Generic.Dictionary<string, string> dictionary = HttpHelper.PopulateParametersFromForm(responseStringFromPost);
                        text = CSOMAdapter.GetLanguageSpecificTitle(current, currentLanguage);
                        dictionary["ctl00$PlaceHolderMain$ctl00$ctl02$txtTitle"] = text;
                        text2 = HttpHelper.GetPostDataFromForm(dictionary);
                        string stringToEscape = "ctl00$PlaceHolderMain$ctl01$RptControls$BtnOk";
                        text2 += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape));
                        this.GetResponseStringFromPost(pageUrl, text2, string.Empty, targetWebUrl);
                    }
                    catch
                    {
                    }
                }
            }
        }

        public string HasWebParts(string sWebPartPageServerRelativeUrl)
        {
            bool value = false;
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    if (!sWebPartPageServerRelativeUrl.StartsWith("/"))
                    {
                        sWebPartPageServerRelativeUrl = "/" + sWebPartPageServerRelativeUrl;
                    }
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(sWebPartPageServerRelativeUrl);
                    LimitedWebPartManager limitedWebPartManager = fileByServerRelativeUrl.GetLimitedWebPartManager(PersonalizationScope.Shared);
                    clientContext.Load<LimitedWebPartManager>(limitedWebPartManager, new System.Linq.Expressions.Expression<System.Func<LimitedWebPartManager, object>>[]
                    {
                        (LimitedWebPartManager mgr) => mgr.WebParts
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (limitedWebPartManager != null && limitedWebPartManager.WebParts.Count > 0)
                    {
                        value = true;
                    }
                    result = System.Convert.ToString(value);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetWebPartPage(string sWebPartPageServerRelativeUrl)
        {
            string result;
            try
            {
                result = this.NWSAdapter.GetWebPartPage(sWebPartPageServerRelativeUrl, true, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.Message.Contains("could not be retrieved through web services"))
                {
                    throw new System.ArgumentException("WEBPART-OBJECTMOVED" + ex.Message, ex);
                }
                result = null;
            }
            return result;
        }

        public string GetWebPartsOnPage(string webPartPageServerRelativeUrl)
        {
            string result;
            try
            {
                result = this.NWSAdapter.GetWebPartsOnPage(webPartPageServerRelativeUrl);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = this.GetWebPartsUsingPieceMealApproach(webPartPageServerRelativeUrl);
            }
            return result;
        }

        private string GetWebPartsUsingPieceMealApproach(string webPartPageServerRelativeUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            System.Collections.Generic.List<System.Guid> list = new System.Collections.Generic.List<System.Guid>(100);
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    webPartPageServerRelativeUrl = UrlUtils.EnsureLeadingSlash(webPartPageServerRelativeUrl);
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(webPartPageServerRelativeUrl);
                    LimitedWebPartManager limitedWebPartManager = fileByServerRelativeUrl.GetLimitedWebPartManager(PersonalizationScope.Shared);
                    System.Collections.Generic.IEnumerable<WebPartDefinition> enumerable = clientContext.LoadQuery<WebPartDefinition>(limitedWebPartManager.WebParts.Include(new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[]
                    {
                        (WebPartDefinition wp) => (object)wp.Id
                    }));
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    foreach (WebPartDefinition current in enumerable)
                    {
                        list.Add(current.Id);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return this.NWSAdapter.GetSpecificWebPartsOnPage(webPartPageServerRelativeUrl, list);
        }

        public byte[] GetWebPartPageTemplate(int iTemplateId)
        {
            return this.WebPartPageTemplateManager.GetTemplate(iTemplateId);
        }

        public byte[] GetDashboardPageTemplate(int iTemplateId)
        {
            return this.WebPartPageTemplateManager.GetDashboardTemplate(iTemplateId);
        }

        public string AddWebParts(string sWebPartsXml, string sWebPartPageServerRelativeUrl, string sEmbeddedHtmlContent)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(sWebPartsXml);
                if (xmlNode.ChildNodes.Count <= 0)
                {
                    return string.Empty;
                }
                using (ClientContext clientContext = this.GetClientContext())
                {
                    if (!sWebPartPageServerRelativeUrl.StartsWith("/"))
                    {
                        sWebPartPageServerRelativeUrl = "/" + sWebPartPageServerRelativeUrl;
                    }
                    Web web = clientContext.Web;
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(sWebPartPageServerRelativeUrl);
                    ListItem listItem = null;
                    bool flag = false;
                    string a = string.Empty;
                    bool flag2 = false;
                    string sCheckinComment = "";
                    int vid = -1;
                    bool flag3 = false;
                    bool flag4 = RPCUtil.DocumentHasAssociatedListItem(this, sWebPartPageServerRelativeUrl);
                    bool flag5 = false;
                    bool flag6 = false;
                    FieldUserValue value = null;
                    System.DateTime dateTime = default(System.DateTime);
                    try
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                        clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                        {
                            (Microsoft.SharePoint.Client.File f) => (object)f.CheckOutType,
                            (Microsoft.SharePoint.Client.File f) => f.CheckInComment,
                            (Microsoft.SharePoint.Client.File f) => (object)f.Exists,
                            (Microsoft.SharePoint.Client.File f) => (object)f.Level,
                            (Microsoft.SharePoint.Client.File f) => f.Name,
                            (Microsoft.SharePoint.Client.File f) => f.ServerRelativeUrl,
                            (Microsoft.SharePoint.Client.File f) => f.Title
                        });
                        if (flag4)
                        {
                            listItem = fileByServerRelativeUrl.ListItemAllFields;
                            clientContext.Load<ListItem>(listItem, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
                        }
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (flag4 && fileByServerRelativeUrl != null && listItem != null)
                        {
                            value = (listItem["Editor"] as FieldUserValue);
                            dateTime = System.DateTime.Parse(listItem["Modified"].ToString());
                            List parentList = listItem.ParentList;
                            clientContext.Load<List>(parentList, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            bool flag7 = CSOMAdapter.SupportsPublishing && this.IsPublishingPage(listItem);
                            if (parentList.BaseType == BaseType.DocumentLibrary)
                            {
                                flag3 = (parentList.ForceCheckout || flag7);
                                if (parentList.EnableModeration)
                                {
                                    a = ((listItem["_ModerationStatus"] == null) ? "2" : listItem["_ModerationStatus"].ToString());
                                    flag = (a == "0");
                                }
                                if (parentList.ForceCheckout)
                                {
                                    if (fileByServerRelativeUrl.Level == FileLevel.Published)
                                    {
                                        sCheckinComment = fileByServerRelativeUrl.CheckInComment;
                                        if (!parentList.EnableMinorVersions)
                                        {
                                            if (!parentList.EnableVersioning)
                                            {
                                                parentList.EnableVersioning = true;
                                                flag6 = true;
                                            }
                                            parentList.EnableMinorVersions = true;
                                            flag5 = true;
                                            parentList.Update();
                                        }
                                        fileByServerRelativeUrl.UnPublish("");
                                        flag2 = true;
                                        clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                                        {
                                            (Microsoft.SharePoint.Client.File f) => (object)f.UIVersion
                                        });
                                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                                        vid = fileByServerRelativeUrl.UIVersion;
                                    }
                                    this.CheckoutPage(fileByServerRelativeUrl, web);
                                }
                            }
                        }
                        clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                        {
                            (Microsoft.SharePoint.Client.File f) => (object)f.CheckOutType
                        });
                        LimitedWebPartManager limitedWebPartManager = fileByServerRelativeUrl.GetLimitedWebPartManager(PersonalizationScope.Shared);
                        clientContext.Load<LimitedWebPartManager>(limitedWebPartManager, new System.Linq.Expressions.Expression<System.Func<LimitedWebPartManager, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        System.Collections.Generic.Dictionary<System.Guid, string> dictionary = new System.Collections.Generic.Dictionary<System.Guid, string>();
                        bool flag8 = this.SupportsEmbedding(fileByServerRelativeUrl, this);
                        System.Collections.Generic.List<string> list = null;
                        if (flag8)
                        {
                            string[] webPartZones = this.GetWebPartZones(fileByServerRelativeUrl);
                            list = new System.Collections.Generic.List<string>();
                            if (webPartZones != null)
                            {
                                string[] array = webPartZones;
                                for (int i = 0; i < array.Length; i++)
                                {
                                    string text = array[i];
                                    list.Add(text.ToLower());
                                }
                            }
                        }
                        bool flag9 = flag8 && (list == null || list.Count == 0);
                        string text2 = string.Empty;
                        System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed> list2 = new System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed>();
                        foreach (System.Xml.XmlNode xmlNode2 in xmlNode.ChildNodes)
                        {
                            try
                            {
                                bool flag10 = xmlNode2.Attributes["Embedded"] != null && bool.Parse(xmlNode2.Attributes["Embedded"].Value);
                                System.Xml.XmlNode xmlNode3 = xmlNode2.SelectSingleNode(".//*[name() = 'ZoneID']");
                                string text3 = (xmlNode3 != null) ? xmlNode3.InnerText : null;
                                if (flag9 || (flag8 && (flag10 || !list.Contains(text3.ToLower()))))
                                {
                                    System.Guid guid;
                                    string sTargetID = this.AddWebPart(clientContext, ref limitedWebPartManager, xmlNode2.OuterXml, "wpz", new int?(0), ref dictionary, out guid, sWebPartPageServerRelativeUrl);
                                    string sGuid = guid.ToString("D").ToUpper();
                                    System.Xml.XmlNode xmlNode4 = xmlNode2.SelectSingleNode(".//*[name() = 'ID']");
                                    string sSourceID = (xmlNode4 == null) ? null : Utils.ConvertWebPartIDToGuid(xmlNode4.InnerText.ToLower());
                                    list2.Add(new CSOMAdapter.WebPartToEmbed(sGuid, text3, sSourceID, sTargetID));
                                }
                                else
                                {
                                    if (flag10)
                                    {
                                        xmlNode3.InnerText = string.Empty;
                                        text3 = string.Empty;
                                    }
                                    System.Guid guid2;
                                    this.AddWebPart(clientContext, ref limitedWebPartManager, xmlNode2.OuterXml, text3, null, ref dictionary, out guid2, sWebPartPageServerRelativeUrl);
                                }
                            }
                            catch (System.Exception ex)
                            {
                                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                text2 = text2 + ex.Message + "\n";
                            }
                        }
                        if (flag8 && list2.Count > 0)
                        {
                            string empty = string.Empty;
                            this.EmbedWebParts(clientContext, fileByServerRelativeUrl, list2, sEmbeddedHtmlContent, out empty);
                            if (!string.IsNullOrEmpty(empty))
                            {
                                text2 = text2 + empty + "\n";
                            }
                        }
                        if (dictionary.Count > 0)
                        {
                            LimitedWebPartManager limitedWebPartManager2 = null;
                            try
                            {
                                Microsoft.SharePoint.Client.File fileByServerRelativeUrl2 = clientContext.Web.GetFileByServerRelativeUrl(sWebPartPageServerRelativeUrl);
                                limitedWebPartManager2 = fileByServerRelativeUrl2.GetLimitedWebPartManager(PersonalizationScope.Shared);
                                clientContext.Load<LimitedWebPartManager>(limitedWebPartManager2, new System.Linq.Expressions.Expression<System.Func<LimitedWebPartManager, object>>[0]);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                                foreach (System.Guid current in dictionary.Keys)
                                {
                                    WebPartDefinition byId = limitedWebPartManager2.WebParts.GetById(current);
                                    byId.WebPart.Title = dictionary[current];
                                    byId.SaveWebPartChanges();
                                }
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                            finally
                            {
                                if (limitedWebPartManager2 != null)
                                {
                                    limitedWebPartManager2 = null;
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(text2))
                        {
                            throw new System.Exception(string.Concat(new string[]
                            {
                                "One or more web parts encountered problems while being added to page '",
                                this.Server,
                                sWebPartPageServerRelativeUrl,
                                "'. These web parts may not appear on the page or may appear inaccurately. Error messages: ",
                                text2
                            }));
                        }
                    }
                    finally
                    {
                        if (flag4 && fileByServerRelativeUrl != null)
                        {
                            if (fileByServerRelativeUrl.CheckOutType != CheckOutType.None)
                            {
                                if (flag2)
                                {
                                    this.CheckInPage(fileByServerRelativeUrl, CheckinType.MajorCheckIn, sCheckinComment);
                                    bool enableVersioning = listItem.ParentList.EnableVersioning;
                                    bool enableMinorVersions = listItem.ParentList.EnableMinorVersions;
                                    bool forceCheckout = listItem.ParentList.ForceCheckout;
                                    listItem.ParentList.EnableVersioning = false;
                                    listItem.ParentList.ForceCheckout = false;
                                    listItem.ParentList.Update();
                                    clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                                    {
                                        (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersionString"],
                                        (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields["_UIVersion"]
                                    });
                                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                                    fileByServerRelativeUrl.ListItemAllFields["Editor"] = value;
                                    fileByServerRelativeUrl.ListItemAllFields["Modified"] = dateTime;
                                    fileByServerRelativeUrl.ListItemAllFields.Update();
                                    if (enableVersioning)
                                    {
                                        if (!flag6)
                                        {
                                            listItem.ParentList.EnableVersioning = true;
                                        }
                                        if (enableMinorVersions && !flag5)
                                        {
                                            listItem.ParentList.EnableMinorVersions = true;
                                        }
                                        if (forceCheckout)
                                        {
                                            listItem.ParentList.ForceCheckout = true;
                                        }
                                        listItem.ParentList.Update();
                                    }
                                    fileByServerRelativeUrl.Versions.DeleteByID(vid);
                                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                                }
                                else if (flag3)
                                {
                                    this.CheckInPage(fileByServerRelativeUrl, CheckinType.MajorCheckIn, "Checkout required by Migration Manager for SharePoint in order to copy web parts.");
                                }
                                else
                                {
                                    this.CheckInPage(fileByServerRelativeUrl, CheckinType.OverwriteCheckIn, null);
                                }
                            }
                            if (flag)
                            {
                                fileByServerRelativeUrl.Approve("Update required by Migration Manager for SharePoint in order to copy web parts.");
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                            }
                        }
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private string AddWebPart(ClientContext ctx, ref LimitedWebPartManager webPartManager, string sWebPartXml, string sZoneId, int? partOrder, ref System.Collections.Generic.Dictionary<System.Guid, string> webPartTitleUpdates, out System.Guid wpIdProperty, string sWebPartPageServerRelativeUrl)
        {
            string result = null;
            wpIdProperty = System.Guid.NewGuid();
            this.StorageKeyToID(wpIdProperty);
            System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(sWebPartXml);
            if (string.IsNullOrEmpty(sZoneId))
            {
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("//*[name() = 'ZoneID']");
                if (xmlNode != null)
                {
                    sZoneId = xmlNode.InnerText;
                }
                if (string.IsNullOrEmpty(sZoneId))
                {
                    sZoneId = "Left";
                }
            }
            if (sZoneId == "wpz")
            {
                System.Xml.XmlNodeList xmlNodeList = xmlDocument.SelectNodes("//*[name() = 'ID']");
                if (xmlNodeList != null)
                {
                    foreach (System.Xml.XmlNode xmlNode2 in xmlNodeList)
                    {
                        xmlNode2.ParentNode.RemoveChild(xmlNode2);
                    }
                }
            }
            int num = 0;
            if (partOrder.HasValue)
            {
                num = partOrder.Value;
            }
            else
            {
                System.Xml.XmlNode xmlNode3 = xmlDocument.SelectSingleNode("//*[name() = 'PartOrder']");
                if (xmlNode3 != null && !int.TryParse(xmlNode3.InnerText, out num))
                {
                    throw new System.ComponentModel.WarningException("A web part does not have a valid part order on page: '" + ctx.Web.Url + "'. The ordering of web parts on this page may be different on the target.");
                }
            }
            string text = this.MigrateInfoPathWebPart(xmlDocument, ctx, sWebPartPageServerRelativeUrl, webPartManager, sZoneId, num);
            if (!string.IsNullOrEmpty(text))
            {
                return text;
            }
            bool? flag = null;
            System.Xml.XmlNode xmlNode4 = xmlDocument.SelectSingleNode("//*[name() = 'IsIncluded']");
            if (xmlNode4 != null)
            {
                bool flag2 = true;
                if (bool.TryParse(xmlNode4.InnerText, out flag2))
                {
                    flag = new bool?(!flag2);
                }
            }
            SharePointVersion sharePointVersion = new SharePointVersion();
            System.Xml.XmlNode xmlNode5 = xmlDocument.SelectSingleNode("//*[name() = 'SharePointSourceVersion']");
            if (xmlNode5 != null)
            {
                try
                {
                    sharePointVersion = new SharePointVersion(xmlNode5.InnerText);
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    sharePointVersion = new SharePointVersion();
                }
            }
            System.Xml.XmlNode xmlNode6 = xmlDocument.SelectSingleNode("//*[name() = 'Title']");
            string text2 = null;
            if (xmlNode6 != null)
            {
                text2 = xmlNode6.InnerText;
            }
            System.Xml.XmlNode xmlNode7 = xmlDocument.SelectSingleNode("//*[name() = 'webPart']");
            string text3 = null;
            System.Xml.XmlNode xmlNode8;
            if (xmlNode7 != null)
            {
                xmlDocument.LoadXml("<webParts>" + xmlNode7.OuterXml + "</webParts>");
                xmlNode8 = xmlDocument.SelectSingleNode("//*[@name='ListName']");
                System.Xml.XmlNode xmlNode9 = xmlDocument.SelectSingleNode("//*[name() = 'type']");
                if (xmlNode9 != null)
                {
                    text3 = xmlNode9.Attributes["name"].Value.Split(new char[]
                    {
                        ','
                    })[0];
                }
            }
            else
            {
                xmlNode8 = xmlDocument.SelectSingleNode("//*[name() = 'ListName']");
                System.Xml.XmlNode xmlNode9 = xmlDocument.SelectSingleNode("//*[name() = 'TypeName']");
                if (xmlNode9 != null)
                {
                    text3 = xmlNode9.InnerText;
                }
            }
            new System.Xml.XmlNamespaceManager(xmlDocument.NameTable);
            List list = null;
            bool bReferencesBlogPostsList = false;
            if (xmlNode8 != null && !string.IsNullOrEmpty(xmlNode8.InnerText))
            {
                string pattern = "\\t|\\n|\\r";
                System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(pattern);
                if (regex.IsMatch(xmlNode8.InnerText))
                {
                    xmlNode8.InnerText = System.Text.RegularExpressions.Regex.Replace(xmlNode8.InnerText, pattern, string.Empty);
                }
                string text4 = null;
                string text5 = null;
                bool flag3 = false;
                ListCollection lists = ctx.Web.Lists;
                ctx.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
                {
                    (ListCollection l) => l.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List o) => (object)o.Id,
                        (List o) => o.Title,
                        (List o) => (object)o.BaseTemplate,
                        (List o) => o.Views
                    })
                });
                CSOMAdapter.CallExecuteQuery(ctx, this);
                if (!xmlNode8.InnerText.StartsWith("{"))
                {
                    text4 = xmlNode8.InnerText;
                }
                else
                {
                    text5 = xmlNode8.InnerText.TrimStart(new char[]
                    {
                        '{'
                    }).TrimEnd(new char[]
                    {
                        '}'
                    });
                }
                foreach (List current in lists)
                {
                    if ((current.Title != null && current.Title.Equals(text4, System.StringComparison.OrdinalIgnoreCase)) || current.Id.ToString().Equals(text5, System.StringComparison.OrdinalIgnoreCase))
                    {
                        list = current;
                        flag3 = true;
                        text5 = "{" + current.Id.ToString().ToUpper() + "}";
                        bReferencesBlogPostsList = (current.BaseTemplate == 301);
                        break;
                    }
                }
                bool flag4 = text3.Equals("Microsoft.SharePoint.Publishing.WebControls.ContentByQueryWebPart", System.StringComparison.Ordinal);
                if (!flag3 && !flag4)
                {
                    throw new System.Exception("Cannot add web part. The list: '" + text4 + "' does not exist on the target site. ");
                }
                if (!string.IsNullOrEmpty(text5) || !flag4)
                {
                    xmlNode8.InnerText = text5;
                }
                System.Xml.XmlNode xmlNode10 = xmlDocument.SelectSingleNode("//*[name() = 'ListId']");
                if (!string.IsNullOrEmpty(text5) && xmlNode10 != null)
                {
                    xmlNode10.InnerText = text5.Trim(new char[]
                    {
                        '{',
                        '}'
                    }).ToLower();
                }
            }
            bool flag5 = false;
            string text6 = null;
            ViewTypes viewTypes = ViewTypes.Html;
            System.Xml.XmlNode xmlNode11 = xmlDocument.SelectSingleNode((xmlNode7 != null) ? "//*[@name='XmlDefinition']" : "//*[name() = 'ListViewXml']");
            int num2 = 0;
            if (xmlNode11 != null && !string.IsNullOrEmpty(xmlNode11.InnerText))
            {
                System.Xml.XmlDocument xmlDocument2 = new System.Xml.XmlDocument();
                xmlDocument2.LoadXml(xmlNode11.InnerText);
                if (xmlDocument2.DocumentElement != null && xmlDocument2.DocumentElement.Name == "View" && xmlDocument2.DocumentElement.Attributes["Type"] != null)
                {
                    System.Xml.XmlNode firstChild = xmlDocument2.FirstChild;
                    this.MakeViewAdjustments(firstChild, sharePointVersion, bReferencesBlogPostsList);
                    text6 = firstChild.InnerXml;
                    string value = firstChild.Attributes["Type"].Value;
                    viewTypes = (ViewTypes)System.Enum.Parse(typeof(ViewTypes), value, true);
                    num2 = ((firstChild.Attributes["BaseViewID"] != null) ? System.Convert.ToInt32(firstChild.Attributes["BaseViewID"].Value.ToString()) : 0);
                    System.Xml.XmlNodeList xmlNodeList2 = firstChild.SelectNodes("./ViewFields/FieldRef");
                    if (num2 == 0)
                    {
                        foreach (System.Xml.XmlNode xmlNode12 in xmlNodeList2)
                        {
                            if (xmlNode12.Attributes["Explicit"] != null && xmlNode12.Attributes["Explicit"].Value.Equals("true", System.StringComparison.OrdinalIgnoreCase))
                            {
                                flag5 = true;
                                break;
                            }
                        }
                    }
                }
            }
            try
            {
                WebPartDefinition webPartDefinition;
                if (xmlNode11 != null && this.IsListViewWebPart(text3))
                {
                    if (flag5 && !sharePointVersion.IsSharePoint2010OrLater && list.BaseTemplate == 106)
                    {
                        flag5 = false;
                    }
                    if (!flag5)
                    {
                        View view = null;
                        if (sharePointVersion.IsSharePoint2013 && list.BaseTemplate == 101 && num2 == 50)
                        {
                            num2 = 1;
                        }
                        bool flag6 = false;
                        bool flag7 = sharePointVersion.IsSharePoint2003 && num2 != 1;
                        foreach (View current2 in list.Views)
                        {
                            if (current2.BaseViewId == num2.ToString() && (flag7 || current2.ViewType.ToLower() == viewTypes.ToString().ToLower()))
                            {
                                flag6 = true;
                                xmlNode11.InnerText = current2.ListViewXml;
                                break;
                            }
                        }
                        if (!flag6)
                        {
                            view = this.CreateTempViewForWebPart(list, viewTypes);
                            xmlNode11.InnerText = view.ListViewXml;
                        }
                        webPartDefinition = CSOMAdapter.ImportWebPart(webPartManager, xmlDocument.OuterXml);
                        webPartDefinition = webPartManager.AddWebPart(webPartDefinition.WebPart, sZoneId, num);
                        ctx.Load<WebPartDefinition>(webPartDefinition, new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(ctx, this);
                        if (view != null)
                        {
                            view.DeleteObject();
                            CSOMAdapter.CallExecuteQuery(ctx, this);
                        }
                    }
                    else
                    {
                        if (text3.Equals("Microsoft.SharePoint.WebPartPages.ListViewWebPart", System.StringComparison.OrdinalIgnoreCase))
                        {
                            xmlNode11.ParentNode.RemoveChild(xmlNode11);
                        }
                        webPartDefinition = CSOMAdapter.ImportWebPart(webPartManager, xmlDocument.OuterXml);
                        webPartDefinition = webPartManager.AddWebPart(webPartDefinition.WebPart, sZoneId, num);
                        ctx.Load<WebPartDefinition>(webPartDefinition, new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(ctx, this);
                    }
                    if (!string.IsNullOrEmpty(text6))
                    {
                        View view2 = null;
                        System.Guid empty = System.Guid.Empty;
                        PropertyValues properties = webPartDefinition.WebPart.Properties;
                        ctx.Load<PropertyValues>(properties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(ctx, this);
                        string text7 = null;
                        if (properties.FieldValues.ContainsKey("ListViewXml"))
                        {
                            text7 = properties.FieldValues["ListViewXml"].ToString();
                        }
                        else if (properties.FieldValues.ContainsKey("XmlDefinition"))
                        {
                            text7 = properties.FieldValues["XmlDefinition"].ToString();
                        }
                        if (!string.IsNullOrEmpty(text7))
                        {
                            System.Xml.XmlNode xmlNode13 = XmlUtility.StringToXmlNode(text7);
                            if (xmlNode13.Attributes["Name"] != null)
                            {
                                string g = xmlNode13.Attributes["Name"].Value.TrimStart(new char[]
                                {
                                    '{'
                                }).TrimEnd(new char[]
                                {
                                    '}'
                                });
                                empty = new System.Guid(g);
                                view2 = list.GetView(empty);
                                ctx.Load<View>(view2, new System.Linq.Expressions.Expression<System.Func<View, object>>[0]);
                                CSOMAdapter.CallExecuteQuery(ctx, this);
                            }
                        }
                        if (view2 != null)
                        {
                            view2.ListViewXml = text6;
                            view2.Update();
                            CSOMAdapter.CallExecuteQuery(ctx, this);
                        }
                    }
                    if (text2 != null)
                    {
                        webPartTitleUpdates.Add(webPartDefinition.Id, text2);
                    }
                }
                else
                {
                    webPartDefinition = CSOMAdapter.ImportWebPart(webPartManager, xmlDocument.OuterXml);
                    webPartDefinition = webPartManager.AddWebPart(webPartDefinition.WebPart, sZoneId, num);
                    ctx.Load<WebPartDefinition>(webPartDefinition, new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
                webPartDefinition.MoveWebPartTo(sZoneId, num);
                webPartDefinition.SaveWebPartChanges();
                ctx.Load<WebPartDefinition>(webPartDefinition, new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[0]);
                ctx.Load<WebPart>(webPartDefinition.WebPart, new System.Linq.Expressions.Expression<System.Func<WebPart, object>>[0]);
                ctx.Load<PropertyValues>(webPartDefinition.WebPart.Properties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
                webPartDefinition.WebPart.TitleUrl = System.Web.HttpUtility.UrlDecode(webPartDefinition.WebPart.TitleUrl);
                webPartDefinition = this.UpdateWebPartProperties(xmlDocument, webPartDefinition, viewTypes, xmlNode7 != null);
                webPartDefinition.SaveWebPartChanges();
                CSOMAdapter.CallExecuteQuery(ctx, this);
                ctx.Load<WebPartDefinition>(webPartDefinition, new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[0]);
                if (flag.HasValue && flag.Value)
                {
                    webPartDefinition.CloseWebPart();
                    webPartDefinition.SaveWebPartChanges();
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
                result = webPartDefinition.Id.ToString();
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Concat(new string[]
                {
                    "Web part add failed on page: '",
                    webPartManager.Context.Url,
                    "'. Error: ",
                    ex2.Message,
                    ". ",
                    (ex2.InnerException != null) ? ("Inner exception(" + ex2.InnerException.Message + ")") : "",
                    " Web Part XML: ",
                    xmlDocument.OuterXml
                }));
            }
            return result;
        }

        private WebPartDefinition UpdateWebPartProperties(System.Xml.XmlDocument xmlDoc, WebPartDefinition newWebPart, ViewTypes viewType, bool isV3WebPart)
        {
            if (newWebPart.WebPart.Properties["HelpUrl"] != null)
            {
                newWebPart.WebPart.Properties["HelpUrl"] = System.Web.HttpUtility.UrlDecode(newWebPart.WebPart.Properties["HelpUrl"].ToString());
            }
            if (newWebPart.WebPart.Properties["TitleIconImageUrl"] != null)
            {
                newWebPart.WebPart.Properties["TitleIconImageUrl"] = System.Web.HttpUtility.UrlDecode(newWebPart.WebPart.Properties["TitleIconImageUrl"].ToString());
            }
            if (newWebPart.WebPart.Properties["CatalogIconImageUrl"] != null)
            {
                newWebPart.WebPart.Properties["CatalogIconImageUrl"] = System.Web.HttpUtility.UrlDecode(newWebPart.WebPart.Properties["CatalogIconImageUrl"].ToString());
            }
            if (viewType != ViewTypes.Html && newWebPart.WebPart.Properties["ViewFlags"] != null)
            {
                newWebPart.WebPart.Properties["ViewFlags"] = this.GetViewFlags(xmlDoc, viewType, isV3WebPart);
            }
            return newWebPart;
        }

        private long GetViewFlags(System.Xml.XmlDocument xmlDoc, ViewTypes viewType, bool isV3WebPart)
        {
            long num = 0L;
            try
            {
                string xpath = isV3WebPart ? "//*[@name='ViewFlag']" : "//*[name() = 'ViewFlag']";
                System.Xml.XmlNode xmlNode = xmlDoc.SelectSingleNode(xpath);
                if (xmlNode != null && !string.IsNullOrEmpty(xmlNode.InnerText))
                {
                    num = long.Parse(xmlNode.InnerText);
                }
                else
                {
                    string xpath2 = isV3WebPart ? "//*[@name='ViewFlags']" : "//*[name() = 'ViewFlags']";
                    System.Xml.XmlNode xmlNode2 = xmlDoc.SelectSingleNode(xpath2);
                    if (xmlNode2 != null && !string.IsNullOrEmpty(xmlNode2.InnerText))
                    {
                        string[] array = xmlNode2.InnerText.Trim().Split(new string[]
                        {
                            ",",
                            " "
                        }, System.StringSplitOptions.RemoveEmptyEntries);
                        string[] array2 = array;
                        for (int i = 0; i < array2.Length; i++)
                        {
                            string text = array2[i];
                            try
                            {
                                long num2 = (long)((ViewTypes)System.Enum.Parse(typeof(ViewTypes), text, true));
                                num |= num2;
                            }
                            catch (System.Exception ex)
                            {
                                CSOMAdapter.LogExceptionDetails(ex, string.Format("Error occurred while converting view flag enum for '{0}' flag. {1}Error: {2}", text, System.Environment.NewLine, ex), null);
                            }
                        }
                    }
                    else
                    {
                        num = (long)this.GetViewFlagTypes(viewType.ToString());
                    }
                }
            }
            catch (System.Exception ex2)
            {
                num = (long)this.GetViewFlagTypes(viewType.ToString());
                CSOMAdapter.LogExceptionDetails(ex2, string.Format("Error occurred while setting view flag property for '{0}' view type. {1}Error: {2}", viewType, System.Environment.NewLine, ex2), null);
            }
            return num;
        }

        private ViewTypes GetViewFlagTypes(string viewType)
        {
            if (viewType.Equals(ViewTypes.Calendar.ToString(), System.StringComparison.OrdinalIgnoreCase))
            {
                return (ViewTypes)532481L;
            }
            if (viewType.Equals(ViewTypes.Grid.ToString(), System.StringComparison.OrdinalIgnoreCase))
            {
                return ViewTypes.Html | ViewTypes.TabularView | ViewTypes.Hidden | ViewTypes.Grid;
            }
            if (viewType.Equals(ViewTypes.Gantt.ToString(), System.StringComparison.OrdinalIgnoreCase))
            {
                return ViewTypes.Html | ViewTypes.TabularView | ViewTypes.Hidden | ViewTypes.Gantt;
            }
            return (ViewTypes)System.Enum.Parse(typeof(ViewTypes), viewType, true);
        }

        private string MigrateInfoPathWebPart(System.Xml.XmlNode xmlDocWebPart, ClientContext ctx, string webPartPageServerRelativeUrl, LimitedWebPartManager webPartManager, string zoneId, int partOrder)
        {
            System.Xml.XmlNode xmlNode = xmlDocWebPart.SelectSingleNode("//*[contains(@name,'BrowserFormWebPart')]");
            if (xmlNode != null)
            {
                string browserFormWebPartIdOnPage = this.GetBrowserFormWebPartIdOnPage(webPartPageServerRelativeUrl);
                if (!string.IsNullOrEmpty(browserFormWebPartIdOnPage))
                {
                    ctx.Load<WebPartDefinitionCollection>(webPartManager.WebParts, new System.Linq.Expressions.Expression<System.Func<WebPartDefinitionCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                    if (webPartManager.WebParts.Count > 0)
                    {
                        System.Guid id = new System.Guid(browserFormWebPartIdOnPage);
                        WebPartDefinition byId = webPartManager.WebParts.GetById(id);
                        if (byId != null)
                        {
                            byId.MoveWebPartTo(zoneId, partOrder);
                            byId.SaveWebPartChanges();
                            CSOMAdapter.CallExecuteQuery(ctx, this);
                            return id.ToString();
                        }
                    }
                }
            }
            return string.Empty;
        }

        private string GetBrowserFormWebPartIdOnPage(string sWebPartPageServerRelativeUrl)
        {
            string result = string.Empty;
            string webPartsOnPage = this.Reader.GetWebPartsOnPage(sWebPartPageServerRelativeUrl);
            if (webPartsOnPage != null)
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(webPartsOnPage);
                System.Xml.XmlNamespaceManager xmlNamespaceManager = new System.Xml.XmlNamespaceManager(xmlDocument.NameTable);
                xmlNamespaceManager.AddNamespace("wps", "http://microsoft.com/sharepoint/webpartpages");
                xmlNamespaceManager.AddNamespace("wp", "http://schemas.microsoft.com/WebPart/v3");
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("/wps:WebParts/wps:WebPart[wp:webPart/wp:metaData/wp:type[contains(@name,\"BrowserFormWebPart\")]]/@ID", xmlNamespaceManager);
                if (xmlNode != null)
                {
                    result = xmlNode.Value;
                }
            }
            return result;
        }

        private static WebPartDefinition ImportWebPart(LimitedWebPartManager webPartManager, string xml)
        {
            WebPartDefinition result;
            try
            {
                WebPartDefinition webPartDefinition = webPartManager.ImportWebPart(xml);
                result = webPartDefinition;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Concat(new string[]
                {
                    "Web part import failed on page: '",
                    webPartManager.Context.Url,
                    "'. Error: ",
                    ex.Message,
                    ". Web Part XML:",
                    xml
                }));
            }
            return result;
        }

        private View CreateTempViewForWebPart(List listReferencedByWebPart, ViewTypes viewType)
        {
            ViewCreationInformation viewCreationInformation = new ViewCreationInformation();
            viewCreationInformation.Title = string.Format("Temp view: {0}", viewType);
            viewCreationInformation.RowLimit = 0u;
            viewCreationInformation.Paged = false;
            viewCreationInformation.SetAsDefaultView = false;
            viewCreationInformation.PersonalView = false;
            viewCreationInformation.ViewTypeKind = this.GetViewTypeValue(viewType.ToString());
            View view = listReferencedByWebPart.Views.Add(viewCreationInformation);
            listReferencedByWebPart.Context.Load<View>(view, new System.Linq.Expressions.Expression<System.Func<View, object>>[0]);
            CSOMAdapter.CallExecuteQuery(listReferencedByWebPart.Context, this);
            return view;
        }

        private void EmbedWebParts(ClientContext clientContext, Microsoft.SharePoint.Client.File pageFile, System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed> webPartsToEmbed, string sEmbeddedContent, out string sEmbeddingErrors)
        {
            if (webPartsToEmbed.Count <= 0)
            {
                sEmbeddingErrors = "";
                return;
            }
            clientContext.Load<ListItem>(pageFile.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[0]);
            clientContext.Load<FieldCollection>(pageFile.ListItemAllFields.ParentList.Fields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            string richTextEmbeddingField = this.GetRichTextEmbeddingField(pageFile, this);
            if (!string.IsNullOrEmpty(sEmbeddedContent))
            {
                Field field = null;
                foreach (Field current in pageFile.ListItemAllFields.ParentList.Fields)
                {
                    if (current.InternalName == richTextEmbeddingField)
                    {
                        field = current;
                        break;
                    }
                }
                if (field != null)
                {
                    sEmbeddedContent = (this.CastStringToFieldType(sEmbeddedContent, field) as string);
                }
            }
            if (pageFile.ListItemAllFields.FieldValues.ContainsKey(richTextEmbeddingField))
            {
                if (string.IsNullOrEmpty(sEmbeddedContent) && pageFile.ListItemAllFields[richTextEmbeddingField] != null)
                {
                    sEmbeddedContent = pageFile.ListItemAllFields[richTextEmbeddingField].ToString();
                }
                if (!string.IsNullOrEmpty(sEmbeddedContent))
                {
                    System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed> list = new System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed>();
                    foreach (CSOMAdapter.WebPartToEmbed current2 in webPartsToEmbed)
                    {
                        if (!string.IsNullOrEmpty(current2.SourceID) && this.UpdateEmbeddedWebPartReference(ref sEmbeddedContent, current2.SourceID, current2.TargetID))
                        {
                            list.Add(current2);
                        }
                    }
                    foreach (CSOMAdapter.WebPartToEmbed current3 in list)
                    {
                        webPartsToEmbed.Remove(current3);
                    }
                    if (0 <= sEmbeddedContent.IndexOf("ms-rte-layoutszone-inner", System.StringComparison.OrdinalIgnoreCase))
                    {
                        this.EmbedWebPartsInTeamSite(ref sEmbeddedContent, webPartsToEmbed);
                        if (!string.IsNullOrEmpty(sEmbeddedContent))
                        {
                            clientContext.Load<ListItem>(pageFile.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem item) => item["_UIVersion"],
                                (ListItem item) => item["_UIVersionString"]
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            this.SetWikiContent(clientContext, pageFile, sEmbeddedContent, richTextEmbeddingField);
                        }
                    }
                    else
                    {
                        this.EmbedWebPartsInGeneralSite(ref sEmbeddedContent, webPartsToEmbed);
                        if (!string.IsNullOrEmpty(sEmbeddedContent))
                        {
                            clientContext.Load<ListItem>(pageFile.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem item) => item["_UIVersion"],
                                (ListItem item) => item["_UIVersionString"]
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            this.SetWikiContent(clientContext, pageFile, sEmbeddedContent, richTextEmbeddingField);
                        }
                    }
                }
            }
            sEmbeddingErrors = "";
        }

        private void SetWikiContent(ClientContext clientContext, Microsoft.SharePoint.Client.File pageFile, string embeddedContent, string emeddingFieldName)
        {
            if (pageFile.CheckOutType == CheckOutType.None)
            {
                bool enableModeration = pageFile.ListItemAllFields.ParentList.EnableModeration;
                bool forceCheckout = pageFile.ListItemAllFields.ParentList.ForceCheckout;
                FieldUserValue fieldUserValue = pageFile.ListItemAllFields["Editor"] as FieldUserValue;
                System.DateTime dateTime = System.DateTime.Parse(pageFile.ListItemAllFields["Modified"].ToString());
                string value = string.Empty;
                if (enableModeration)
                {
                    value = ((pageFile.ListItemAllFields["_ModerationComments"] != null) ? pageFile.ListItemAllFields["_ModerationComments"].ToString() : string.Empty);
                }
                if (!forceCheckout)
                {
                    pageFile.ListItemAllFields.ParentList.ForceCheckout = true;
                    pageFile.ListItemAllFields.ParentList.Update();
                }
                pageFile.CheckOut();
                pageFile.ListItemAllFields[emeddingFieldName] = embeddedContent;
                pageFile.ListItemAllFields.Update();
                string comment = pageFile.ListItemAllFields["_CheckinComment"].ToString();
                pageFile.CheckIn(comment, CheckinType.OverwriteCheckIn);
                if (!forceCheckout)
                {
                    pageFile.ListItemAllFields.ParentList.ForceCheckout = false;
                    pageFile.ListItemAllFields.ParentList.Update();
                }
                if (!pageFile.ListItemAllFields.IsObjectPropertyInstantiated("Id"))
                {
                    clientContext.Load<Microsoft.SharePoint.Client.File>(pageFile, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                    {
                        (Microsoft.SharePoint.Client.File file) => (object)file.ListItemAllFields.Id
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
                ListItem itemById = pageFile.ListItemAllFields.ParentList.GetItemById(pageFile.ListItemAllFields.Id);
                itemById["Editor"] = fieldUserValue.LookupId;
                itemById["Modified"] = dateTime;
                if (!string.IsNullOrEmpty(value))
                {
                    itemById["_ModerationComments"] = value;
                }
                System.Collections.Generic.IList<ListItemFormUpdateValue> list = new System.Collections.Generic.List<ListItemFormUpdateValue>();
                ListItemFormUpdateValue item = new ListItemFormUpdateValue
                {
                    FieldName = "Modified_x0020_By",
                    FieldValue = string.Format("{0}", fieldUserValue.LookupId)
                };
                list.Add(item);
                itemById.ValidateUpdateListItem(list, true, "Blank");
            }
            else
            {
                pageFile.ListItemAllFields[emeddingFieldName] = embeddedContent;
                pageFile.ListItemAllFields.Update();
            }
            CSOMAdapter.CallExecuteQuery(clientContext, this);
        }

        private bool UpdateEmbeddedWebPartReference(ref string sEmbeddedContent, string sOldWebPartGuid, string sNewWebPartGuid)
        {
            if (string.IsNullOrEmpty(sOldWebPartGuid) || string.IsNullOrEmpty(sEmbeddedContent))
            {
                return false;
            }
            System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(sOldWebPartGuid, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            System.Text.RegularExpressions.MatchCollection matchCollection = regex.Matches(sEmbeddedContent);
            if (matchCollection.Count > 0)
            {
                foreach (System.Text.RegularExpressions.Match match in matchCollection)
                {
                    sEmbeddedContent = sEmbeddedContent.Remove(match.Index, match.Length);
                    sEmbeddedContent = sEmbeddedContent.Insert(match.Index, sNewWebPartGuid.ToLower());
                }
                return true;
            }
            return false;
        }

        private void EmbedWebPartsInTeamSite(ref string sEmbeddedContent, System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed> webPartsToEmbed)
        {
            if (webPartsToEmbed.Count <= 0)
            {
                return;
            }
            string text = "";
            string text2 = "";
            foreach (CSOMAdapter.WebPartToEmbed current in webPartsToEmbed)
            {
                if (0 <= current.ZoneID.IndexOf("right", System.StringComparison.OrdinalIgnoreCase))
                {
                    text2 = text2 + this.GetEmbeddedWebPartString(current.TargetID) + "\n";
                }
                else
                {
                    text = text + this.GetEmbeddedWebPartString(current.TargetID) + "\n";
                }
            }
            try
            {
                System.Xml.XmlNode embeddedNode = XmlUtility.StringToXmlNode(sEmbeddedContent);
                sEmbeddedContent = this.AddEmbeddedWebPartReferencesUsingXml(embeddedNode, text, text2);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                sEmbeddedContent = this.AddEmbeddedWebPartReferencesUsingRegex(sEmbeddedContent, text, text2);
            }
        }

        private void EmbedWebPartsInGeneralSite(ref string sEmbeddedContent, System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed> webPartsToEmbed)
        {
            if (webPartsToEmbed.Count <= 0)
            {
                return;
            }
            string text = "<div>" + this.GenerateEmbeddedWebPartsHtml(webPartsToEmbed) + "</div>";
            int num = sEmbeddedContent.LastIndexOf("</div>", System.StringComparison.OrdinalIgnoreCase);
            if (num >= 0)
            {
                sEmbeddedContent = sEmbeddedContent.Insert(num, text);
                return;
            }
            sEmbeddedContent += text;
        }

        private string GenerateEmbeddedWebPartsHtml(System.Collections.Generic.List<CSOMAdapter.WebPartToEmbed> webPartsToEmbed)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
            foreach (CSOMAdapter.WebPartToEmbed current in webPartsToEmbed)
            {
                stringBuilder.Append(this.GetEmbeddedWebPartString(current.TargetID) + "\n");
            }
            return stringBuilder.ToString();
        }

        private string GetEmbeddedWebPartString(string sWebPartGuid)
        {
            return string.Format("<div class=\"ms-rtestate-read ms-rte-wpbox\"><div class=\"ms-rtestate-notify ms-rtestate-read {0}\" id=\"div_{0}\"></div><div id=\"vid_{0}\" style=\"display:none\"></div></div>", sWebPartGuid.ToLower());
        }

        private string AddEmbeddedWebPartReferencesUsingXml(System.Xml.XmlNode embeddedNode, string sLeftZoneEmbeddingHtml, string sRightZoneEmbeddingHtml)
        {
            string result = "";
            if (embeddedNode != null)
            {
                System.Xml.XmlNodeList xmlNodeList = embeddedNode.SelectNodes(".//tbody//div[@class='ms-rte-layoutszone-outer']/div[@class='ms-rte-layoutszone-inner']");
                if (xmlNodeList != null && xmlNodeList.Count > 0)
                {
                    System.Xml.XmlNode expr_28 = xmlNodeList[0];
                    expr_28.InnerXml += sLeftZoneEmbeddingHtml;
                    if (xmlNodeList.Count > 1)
                    {
                        System.Xml.XmlNode expr_49 = xmlNodeList[1];
                        expr_49.InnerXml += sRightZoneEmbeddingHtml;
                    }
                    else
                    {
                        System.Xml.XmlNode expr_63 = xmlNodeList[0];
                        expr_63.InnerXml += sRightZoneEmbeddingHtml;
                    }
                }
                result = embeddedNode.OuterXml;
            }
            return result;
        }

        private string AddEmbeddedWebPartReferencesUsingRegex(string sEmbeddedContent, string sLeftZoneEmbeddingHtml, string sRightZoneEmbeddingHtml)
        {
            string text = sEmbeddedContent;
            string text2 = "Inner";
            string pattern = "<\\s*tbody\\s*>(.*?<\\s*div[^>]+class\\s*=\\s*\"ms-rte-layoutszone-outer\".*?>.*?(?<" + text2 + "><\\s*div[^>]+class\\s*=\\s*\"ms-rte-layoutszone-inner\".*?>))+";
            System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline);
            System.Text.RegularExpressions.Match match = regex.Match(sEmbeddedContent);
            if (match.Success)
            {
                System.Text.RegularExpressions.CaptureCollection captures = match.Groups[text2].Captures;
                if (captures != null && captures.Count > 0)
                {
                    int num = captures[0].Index + captures[0].Length;
                    text = sEmbeddedContent.Substring(0, num);
                    text += sLeftZoneEmbeddingHtml;
                    if (captures.Count > 1)
                    {
                        int num2 = captures[1].Index + captures[1].Length;
                        text += sEmbeddedContent.Substring(num, num2 - num);
                        num = num2;
                    }
                    text += sRightZoneEmbeddingHtml;
                    text += sEmbeddedContent.Substring(num);
                }
            }
            return text;
        }

        public string DeleteWebPart(string sWebPartPageServerRelativeUrl, string sWebPartId)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    if (!sWebPartPageServerRelativeUrl.StartsWith("/"))
                    {
                        sWebPartPageServerRelativeUrl = "/" + sWebPartPageServerRelativeUrl;
                    }
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(sWebPartPageServerRelativeUrl);
                    LimitedWebPartManager limitedWebPartManager = fileByServerRelativeUrl.GetLimitedWebPartManager(PersonalizationScope.Shared);
                    WebPartDefinition byId = limitedWebPartManager.WebParts.GetById(new System.Guid(sWebPartId));
                    byId.DeleteWebPart();
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public void DeleteWebParts(string sPageUrl, System.Collections.Generic.List<System.Guid> webPartIDs)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    if (!sPageUrl.StartsWith("/"))
                    {
                        sPageUrl = "/" + sPageUrl;
                    }
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl(sPageUrl);
                    LimitedWebPartManager limitedWebPartManager = fileByServerRelativeUrl.GetLimitedWebPartManager(PersonalizationScope.Shared);
                    bool flag = false;
                    bool flag2 = RPCUtil.DocumentHasAssociatedListItem(this, sPageUrl);
                    try
                    {
                        clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                        clientContext.Load<LimitedWebPartManager>(limitedWebPartManager, new System.Linq.Expressions.Expression<System.Func<LimitedWebPartManager, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (flag2 && fileByServerRelativeUrl != null && fileByServerRelativeUrl.ListItemAllFields != null)
                        {
                            clientContext.Load<ListItem>(fileByServerRelativeUrl.ListItemAllFields, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                            {
                                (ListItem p) => p.ParentList
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            List parentList = fileByServerRelativeUrl.ListItemAllFields.ParentList;
                            bool flag3 = CSOMAdapter.SupportsPublishing && this.IsPublishingPage(fileByServerRelativeUrl.ListItemAllFields);
                            if (parentList.BaseType == BaseType.DocumentLibrary)
                            {
                                flag = (parentList.ForceCheckout || flag3);
                                if (parentList.ForceCheckout)
                                {
                                    this.CheckoutPage(fileByServerRelativeUrl, web);
                                    clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                                }
                            }
                        }
                        foreach (System.Guid current in webPartIDs)
                        {
                            WebPartDefinition byId = limitedWebPartManager.WebParts.GetById(current);
                            byId.DeleteWebPart();
                        }
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    finally
                    {
                        if (flag2 && fileByServerRelativeUrl != null && fileByServerRelativeUrl.CheckOutType != CheckOutType.None)
                        {
                            if (flag)
                            {
                                this.CheckInPage(fileByServerRelativeUrl, CheckinType.MajorCheckIn, "Checkout required in order to delete web parts on page before copying source web parts.");
                            }
                            else
                            {
                                this.CheckInPage(fileByServerRelativeUrl, CheckinType.OverwriteCheckIn, null);
                            }
                        }
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
        }

        public string DeleteWebParts(string sWebPartPageServerRelativeUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web currentWeb) => currentWeb.RootFolder,
                        (Web currentWeb) => currentWeb.WebTemplate,
                        (Web currentWeb) => currentWeb.ServerRelativeUrl
                    });
                    clientContext.ExecuteQuery();
                    string webPartsOnPage = this.GetWebPartsOnPage(sWebPartPageServerRelativeUrl);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(webPartsOnPage);
                    System.Xml.XmlNodeList wpList = xmlNode.SelectNodes("./*[local-name() = 'WebPart']");
                    System.Collections.Generic.List<System.Guid> webPartIdsToModify = this.GetWebPartIdsToModify(wpList);
                    if (webPartIdsToModify.Count > 0)
                    {
                        this.DeleteWebParts(sWebPartPageServerRelativeUrl, webPartIdsToModify);
                    }
                    string welcomePageFromRootFolder = this.GetWelcomePageFromRootFolder(web);
                    if (!string.IsNullOrEmpty(welcomePageFromRootFolder) && sWebPartPageServerRelativeUrl.EndsWith(welcomePageFromRootFolder))
                    {
                        this.ClearDefaultSiteData(clientContext, web);
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private System.Collections.Generic.List<System.Guid> GetWebPartIdsToModify(System.Xml.XmlNodeList wpList)
        {
            System.Collections.Generic.List<System.Guid> list = new System.Collections.Generic.List<System.Guid>();
            foreach (System.Xml.XmlNode xmlNode in wpList)
            {
                System.Guid guid = (xmlNode.Attributes["ID"] != null) ? new System.Guid(xmlNode.Attributes["ID"].Value) : System.Guid.Empty;
                if (guid != System.Guid.Empty)
                {
                    System.Xml.XmlNode xmlNode2 = xmlNode.SelectSingleNode("*[local-name() = 'ZoneID']");
                    if (xmlNode2 == null)
                    {
                        xmlNode2 = xmlNode.SelectSingleNode(".//*[local-name() = 'property'][@name='ZoneID']");
                    }
                    string a = (xmlNode2 == null) ? "" : xmlNode2.InnerText;
                    System.Xml.XmlNode xmlNode3 = xmlNode.SelectSingleNode("*[local-name() = 'TypeName']");
                    if (xmlNode3 == null)
                    {
                        xmlNode3 = xmlNode.SelectSingleNode(".//*[local-name() = 'metaData']/*[local-name() = 'type']/@name");
                        if (xmlNode3 != null)
                        {
                            int num = xmlNode3.InnerText.IndexOf(",");
                            xmlNode3.InnerText = ((num >= 0) ? xmlNode3.InnerText.Substring(0, num) : xmlNode3.InnerText);
                        }
                    }
                    string text = (xmlNode3 == null) ? "" : xmlNode3.InnerText;
                    if (!(a == "MeetingSummary") && !(a == "MeetingNavigator") && !(text == "Microsoft.SharePoint.Meetings.CustomToolPaneManager") && !(text == "Microsoft.SharePoint.Meetings.PageTabsWebPart") && (!(text == "Microsoft.SharePoint.WebPartPages.ListFormWebPart") || !base.SharePointVersion.IsSharePoint2007OrEarlier) && !this.IsViewWebPart(text, xmlNode))
                    {
                        list.Add(guid);
                    }
                }
            }
            return list;
        }

        private bool IsViewWebPart(string sTypeName, System.Xml.XmlNode webPartXml)
        {
            if (string.IsNullOrEmpty(sTypeName) || (!sTypeName.Equals("Microsoft.SharePoint.WebPartPages.ListViewWebPart", System.StringComparison.OrdinalIgnoreCase) && !sTypeName.Equals("Microsoft.SharePoint.WebPartPages.XsltListViewWebPart", System.StringComparison.OrdinalIgnoreCase)))
            {
                return false;
            }
            bool flag = sTypeName.Equals("Microsoft.SharePoint.WebPartPages.XsltListViewWebPart", System.StringComparison.OrdinalIgnoreCase);
            System.Xml.XmlNode xmlNode;
            if (flag)
            {
                xmlNode = webPartXml.SelectSingleNode(".//*[local-name() = 'property'][@name='XmlDefinition']");
            }
            else
            {
                xmlNode = webPartXml.SelectSingleNode("*[local-name() = 'ListViewXml']");
            }
            if (xmlNode == null)
            {
                return false;
            }
            System.Xml.XmlNode xmlNode2;
            try
            {
                xmlNode2 = XmlUtility.StringToXmlNode(xmlNode.InnerText);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                bool result = false;
                return result;
            }
            System.Xml.XmlAttribute xmlAttribute = xmlNode2.Attributes["DisplayName"];
            if (xmlAttribute == null || string.IsNullOrEmpty(xmlAttribute.Value))
            {
                return false;
            }
            System.Xml.XmlAttribute xmlAttribute2 = xmlNode2.Attributes["Hidden"];
            bool flag2;
            return xmlAttribute2 == null || !bool.TryParse(xmlAttribute2.Value, out flag2) || !flag2;
        }

        public string CloseWebParts(string sWebPartPageServerRelativeUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    string webPartsOnPage = this.GetWebPartsOnPage(sWebPartPageServerRelativeUrl);
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(webPartsOnPage);
                    System.Xml.XmlNodeList wpList = xmlNode.SelectNodes("./*[local-name() = 'WebPart']");
                    System.Collections.Generic.List<System.Guid> webPartIdsToModify = this.GetWebPartIdsToModify(wpList);
                    if (webPartIdsToModify.Count > 0)
                    {
                        this.CloseWebParts(sWebPartPageServerRelativeUrl, webPartIdsToModify);
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public void CloseWebParts(string sPageUrl, System.Collections.Generic.List<System.Guid> webPartIDs)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    if (!sPageUrl.StartsWith("/"))
                    {
                        sPageUrl = "/" + sPageUrl;
                    }
                    Web web = clientContext.Web;
                    Microsoft.SharePoint.Client.File fileByServerRelativeUrl = clientContext.Web.GetFileByServerRelativeUrl(sPageUrl);
                    LimitedWebPartManager limitedWebPartManager = fileByServerRelativeUrl.GetLimitedWebPartManager(PersonalizationScope.Shared);
                    bool flag = false;
                    bool flag2 = RPCUtil.DocumentHasAssociatedListItem(this, sPageUrl);
                    try
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                        clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        if (flag2 && fileByServerRelativeUrl != null && fileByServerRelativeUrl.ListItemAllFields != null && fileByServerRelativeUrl.ListItemAllFields.ServerObjectIsNull == false)
                        {
                            List parentList = fileByServerRelativeUrl.ListItemAllFields.ParentList;
                            clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            bool flag3 = CSOMAdapter.SupportsPublishing && this.IsPublishingPage(fileByServerRelativeUrl.ListItemAllFields);
                            if (parentList.BaseType == BaseType.DocumentLibrary)
                            {
                                flag = (parentList.ForceCheckout || flag3);
                                if (parentList.ForceCheckout)
                                {
                                    this.CheckoutPage(fileByServerRelativeUrl, web);
                                }
                            }
                        }
                        foreach (System.Guid current in webPartIDs)
                        {
                            WebPartDefinition byId = limitedWebPartManager.WebParts.GetById(current);
                            byId.CloseWebPart();
                            byId.SaveWebPartChanges();
                        }
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    finally
                    {
                        if (flag2 && fileByServerRelativeUrl != null && fileByServerRelativeUrl.CheckOutType != CheckOutType.None)
                        {
                            if (flag)
                            {
                                this.CheckInPage(fileByServerRelativeUrl, CheckinType.MajorCheckIn, "Checkout required in order to close web parts on page.");
                            }
                            else
                            {
                                this.CheckInPage(fileByServerRelativeUrl, CheckinType.OverwriteCheckIn, null);
                            }
                        }
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
        }

        private void CheckoutPage(Microsoft.SharePoint.Client.File pageFile, Web containingWeb)
        {
            if (pageFile != null)
            {
                if (pageFile.CheckOutType != CheckOutType.None)
                {
                    pageFile.UndoCheckOut();
                    CSOMAdapter.CallExecuteQuery(pageFile.Context, this);
                }
                this.CheckOutFile(pageFile);
                return;
            }
            throw new System.Exception("Exception trying to check out a null page for web part copying.");
        }

        private void CheckInPage(Microsoft.SharePoint.Client.File file, CheckinType checkInType, string sCheckinComment)
        {
            if (file != null && file.CheckOutType != CheckOutType.None)
            {
                try
                {
                    string comment = (!string.IsNullOrEmpty(sCheckinComment)) ? sCheckinComment : file.CheckInComment;
                    file.CheckIn(comment, checkInType);
                    CSOMAdapter.CallExecuteQuery(file.Context, this);
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    throw new System.Exception("A check-in exception occurred while trying to modify web parts on the page '" + file.ServerRelativeUrl + "'. Message: " + ex.Message, ex);
                }
            }
        }

        private static CheckinType GetCheckinType(Microsoft.SharePoint.Client.File pageFile)
        {
            if (pageFile.ListItemAllFields != null && pageFile.ListItemAllFields.ParentList.BaseTemplate == CSOMAdapter.PAGES_LIBRARY_TEMPLATE_ID)
            {
                return CheckinType.MinorCheckIn;
            }
            return CheckinType.OverwriteCheckIn;
        }

        private void MakeViewAdjustments(System.Xml.XmlNode xmlViewNode, SharePointVersion sourceVersion, bool bReferencesBlogPostsList)
        {
            if (xmlViewNode == null)
            {
                return;
            }
            System.Xml.XmlNode xmlNode = xmlViewNode.SelectSingleNode("//Toolbar");
            if (xmlNode == null)
            {
                if (bReferencesBlogPostsList)
                {
                    System.Xml.XmlElement xmlElement = xmlViewNode.OwnerDocument.CreateElement("Toolbar");
                    System.Xml.XmlAttribute xmlAttribute = xmlViewNode.OwnerDocument.CreateAttribute("Type");
                    xmlAttribute.Value = "None";
                    xmlElement.Attributes.Append(xmlAttribute);
                    xmlViewNode.AppendChild(xmlElement);
                    return;
                }
            }
            else if (sourceVersion.IsSharePoint2007OrEarlier && xmlNode.Attributes["Type"] != null && xmlNode.Attributes["Type"].Value.Equals("Standard", System.StringComparison.OrdinalIgnoreCase))
            {
                System.Xml.XmlAttribute xmlAttribute2 = xmlNode.Attributes["ShowAlways"];
                if (xmlAttribute2 == null)
                {
                    xmlAttribute2 = xmlViewNode.OwnerDocument.CreateAttribute("ShowAlways");
                }
                xmlAttribute2.Value = "TRUE";
                xmlNode.Attributes.Append(xmlAttribute2);
            }
        }

        private string[] GetWebPartZones(Microsoft.SharePoint.Client.File pageFile)
        {
            if (pageFile == null || !pageFile.Exists)
            {
                return null;
            }
            string text = null;
            string pageContents = "";
            if (pageFile.ListItemAllFields.FieldValues.ContainsKey("PublishingPageLayout"))
            {
                FieldUrlValue fieldUrlValue = (FieldUrlValue)pageFile.ListItemAllFields["PublishingPageLayout"];
                text = ((fieldUrlValue == null) ? null : fieldUrlValue.Url);
            }
            if (string.IsNullOrEmpty(text) || text.StartsWith("http://www.microsoft.com/publishing?DisconnectedPublishingPage"))
            {
                FileInformation fileInformation = Microsoft.SharePoint.Client.File.OpenBinaryDirect(this.GetClientContext(), pageFile.ServerRelativeUrl);
                System.IO.Stream stream = fileInformation.Stream;
                using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
                {
                    pageContents = streamReader.ReadToEnd();
                    goto IL_190;
                }
            }
            if (UrlUtils.GetType(text) == UrlType.Full)
            {
                text = UrlUtils.ConvertFullUrlToServerRelative(text);
            }
            ClientContext clientContext = this.GetClientContext();
            Microsoft.SharePoint.Client.File file = null;
            try
            {
                file = clientContext.Site.RootWeb.GetFileByServerRelativeUrl(text);
                clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                file = null;
            }
            if (file != null && file.Exists)
            {
                clientContext.Load<Web>(clientContext.Site.RootWeb, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                ClientContext clientContext2 = this.GetClientContext(clientContext.Site.RootWeb.Url);
                FileInformation fileInformation2 = Microsoft.SharePoint.Client.File.OpenBinaryDirect(clientContext2, file.ServerRelativeUrl);
                System.IO.Stream stream2 = fileInformation2.Stream;
                using (System.IO.StreamReader streamReader2 = new System.IO.StreamReader(stream2))
                {
                    pageContents = streamReader2.ReadToEnd();
                    goto IL_190;
                }
            }
            throw new System.Exception("Failed to read web part zones. Failed to locate page layout: " + text);
            IL_190:
            return WebPartUtils.ParseWebPartPageForZones(pageContents).ToArray();
        }

        private string StorageKeyToID(System.Guid storageKey)
        {
            if (!(System.Guid.Empty == storageKey))
            {
                return "g_" + storageKey.ToString().Replace('-', '_');
            }
            return string.Empty;
        }

        private bool IsListViewWebPart(string sTypeName)
        {
            return !string.IsNullOrEmpty(sTypeName) && (sTypeName.Equals("Microsoft.SharePoint.WebPartPages.ListViewWebPart", System.StringComparison.OrdinalIgnoreCase) || sTypeName.Equals("Microsoft.SharePoint.WebPartPages.XsltListViewWebPart", System.StringComparison.OrdinalIgnoreCase));
        }

        public string GetSiteCollections()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                using (ClientContext clientContext = this.GetClientContext())
                {
                    xmlTextWriter.WriteStartElement("SiteCollections");
                    try
                    {
                        new System.Collections.Hashtable();
                        Tenant tenant = new Tenant(clientContext);
                        SPOSitePropertiesEnumerable sPOSitePropertiesEnumerable = null;
                        for (int i = 0; i >= 0; i = sPOSitePropertiesEnumerable.NextStartIndex)
                        {
                            sPOSitePropertiesEnumerable = tenant.GetSiteProperties(i, false);
                            clientContext.Load<SPOSitePropertiesEnumerable>(sPOSitePropertiesEnumerable, new System.Linq.Expressions.Expression<System.Func<SPOSitePropertiesEnumerable, object>>[0]);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            foreach (SiteProperties current in sPOSitePropertiesEnumerable)
                            {
                                xmlTextWriter.WriteStartElement("Site");
                                xmlTextWriter.WriteAttributeString("Url", current.Url);
                                xmlTextWriter.WriteAttributeString("ServerRelativeUrl", new System.Uri(current.Url).LocalPath);
                                xmlTextWriter.WriteEndElement();
                            }
                        }
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        xmlTextWriter.WriteComment("Error connecting to farm: '" + ex.Message);
                    }
                    xmlTextWriter.WriteEndElement();
                }
                result = stringWriter.ToString();
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private System.Collections.Generic.List<string> RetrievePersonalSite()
        {
            System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
            long userProfileCount = this.NWSAdapter.GetUserProfileCount();
            int profileIndex = 0;
            string empty = string.Empty;
            int num = 0;
            while ((long)num < userProfileCount)
            {
                profileIndex = this.NWSAdapter.GetUserProfileByIndex(profileIndex, out empty);
                if (!string.IsNullOrEmpty(empty))
                {
                    list.Add(empty);
                }
                num++;
            }
            return list;
        }

        public string GetSiteCollectionsOnWebApp(string webAppName)
        {
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
            using (ClientContext clientContext = this.GetClientContext())
            {
                xmlTextWriter.WriteStartElement("SiteCollections");
                TenantSetting tenantSetting = TenantSettingManager.GetTenantSetting(clientContext.Url);
                string mySiteHostPath = tenantSetting.MySiteHostPath;
                System.Collections.Generic.List<string> list = this.RetrievePersonalSite();
                foreach (string current in list)
                {
                    xmlTextWriter.WriteStartElement("Site");
                    xmlTextWriter.WriteAttributeString("Url", Utils.CombineUrls(mySiteHostPath, current));
                    xmlTextWriter.WriteAttributeString("ServerRelativeUrl", current);
                    xmlTextWriter.WriteEndElement();
                }
                xmlTextWriter.WriteEndElement();
            }
            return stringWriter.ToString();
        }

        public string GetSite(bool bFetchFullXml)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string siteXml;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    siteXml = this.GetSiteXml(clientContext, bFetchFullXml);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return siteXml;
        }

        private bool IsCurrentUserSiteAdmin(ClientContext ctx)
        {
            User currentUser = ctx.Web.CurrentUser;
            ctx.Load<User>(currentUser, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            return currentUser.IsSiteAdmin;
        }

        private string GetSiteXml(ClientContext ctx, bool bFullXML)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
            this.GetSiteXml(ctx, xmlWriter, bFullXML);
            return stringBuilder.ToString();
        }

        private void GetSiteXml(ClientContext ctx, System.Xml.XmlWriter xmlWriter, bool bFullXML)
        {
            Site site = ctx.Site;
            ctx.Load<Site>(site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
            {
                (Site s) => (object)s.Id,
                (Site s) => s.Url,
                (Site s) => s.Usage,
                (Site s) => s.Owner,
                (Site s) => s.ServerRelativeUrl
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            Web web = ctx.Web;
            xmlWriter.WriteStartElement("Site");
            xmlWriter.WriteAttributeString("SiteID", site.Id.ToString());
            xmlWriter.WriteAttributeString("Url", site.Url);
            try
            {
                xmlWriter.WriteAttributeString("DiskUsed", site.Usage.Storage.ToString());
                xmlWriter.WriteAttributeString("Owner", (site.Owner != null) ? site.Owner.LoginName : "");
                xmlWriter.WriteAttributeString("SiteCollectionAdministrators", this.GetSiteCollectionAdmins());
                if (site.ServerRelativeUrl == "/")
                {
                    xmlWriter.WriteAttributeString("ManagedPath", "/");
                }
                else
                {
                    int num = site.ServerRelativeUrl.IndexOf("/", 1);
                    if (num > 0)
                    {
                        xmlWriter.WriteAttributeString("ManagedPath", site.ServerRelativeUrl.Substring(0, num));
                    }
                    else
                    {
                        xmlWriter.WriteAttributeString("ManagedPath", site.ServerRelativeUrl.Substring(0, site.ServerRelativeUrl.Length));
                    }
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            this.GetWebXML(ctx, web, xmlWriter, bFullXML);
            xmlWriter.WriteEndElement();
        }

        public string GetSiteCollectionAdmins()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    UserCollection siteUsers = clientContext.Web.SiteUsers;
                    clientContext.Load<UserCollection>(siteUsers, new System.Linq.Expressions.Expression<System.Func<UserCollection, object>>[]
                    {
                        (UserCollection siteUser) => siteUser.Include(new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                        {
                            (User user) => (object)user.IsSiteAdmin,
                            (User user) => user.LoginName
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    foreach (User current in siteUsers)
                    {
                        try
                        {
                            if (current.IsSiteAdmin)
                            {
                                stringBuilder.Append(current.LoginName);
                                stringBuilder.Append(";");
                            }
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            System.Diagnostics.Trace.WriteLine(string.Format("An error occured while fetching user. Error: '{0}'", ex.Message));
                        }
                    }
                }
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                System.Diagnostics.Trace.WriteLine(string.Format("An error occured while fetching site collection administrators. Error: '{0}'", ex2.Message));
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return stringBuilder.ToString().Trim(new char[]
            {
                ';'
            });
        }

        internal void GetPrincipalCollectionsForMaps(out UserCollection userCollection, out Microsoft.SharePoint.Client.GroupCollection groupCollection)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    userCollection = clientContext.Web.SiteUsers;
                    clientContext.Load<UserCollection>(userCollection, new System.Linq.Expressions.Expression<System.Func<UserCollection, object>>[]
                    {
                        (UserCollection collection) => collection.Include(new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                        {
                            (User user) => (object)user.Id,
                            (User user) => user.LoginName
                        })
                    });
                    groupCollection = clientContext.Web.SiteGroups;
                    clientContext.Load<Microsoft.SharePoint.Client.GroupCollection>(groupCollection, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.GroupCollection, object>>[]
                    {
                        (Microsoft.SharePoint.Client.GroupCollection collection) => collection.Include(new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[]
                        {
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.Id,
                            (Microsoft.SharePoint.Client.Group grp) => grp.Title
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
        }

        public string GetGroups()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("Groups");
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Microsoft.SharePoint.Client.GroupCollection siteGroups = clientContext.Web.SiteGroups;
                    clientContext.Load<Microsoft.SharePoint.Client.GroupCollection>(siteGroups, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.GroupCollection, object>>[]
                    {
                        (Microsoft.SharePoint.Client.GroupCollection groups) => groups.Include(new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[]
                        {
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.Id,
                            (Microsoft.SharePoint.Client.Group grp) => grp.Title,
                            (Microsoft.SharePoint.Client.Group grp) => grp.Description,
                            (Microsoft.SharePoint.Client.Group grp) => grp.Owner.LoginName,
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.Owner.PrincipalType,
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.OnlyAllowMembersViewMembership,
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.AllowMembersEditMembership,
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.AllowRequestToJoinLeave,
                            (Microsoft.SharePoint.Client.Group grp) => (object)grp.AutoAcceptRequestToJoinLeave,
                            (Microsoft.SharePoint.Client.Group grp) => grp.RequestToJoinLeaveEmailSetting,
                            (Microsoft.SharePoint.Client.Group grp) => grp.Users
                        })
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    List siteUserInfoList = clientContext.Web.SiteUserInfoList;
                    foreach (Microsoft.SharePoint.Client.Group current in siteGroups)
                    {
                        current.Description = this.GetGroupDescription(clientContext, siteUserInfoList, current);
                        this.WriteGroupXml(xmlTextWriter, current);
                    }
                    this.AdapterData.UpdateGroupMap(siteGroups);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            finally
            {
                xmlTextWriter.WriteEndElement();
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return stringWriter.ToString();
        }

        private string GetGroupDescription(ClientContext clientContext, List userInfoList, Microsoft.SharePoint.Client.Group group)
        {
            try
            {
                ListItem itemById = userInfoList.GetItemById(group.Id);
                clientContext.Load<ListItem>(itemById, new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                {
                    (ListItem fieldValue) => fieldValue.FieldValuesAsHtml
                });
                clientContext.ExecuteQuery();
                string text = itemById.FieldValuesAsHtml["Notes"];
                return (!string.IsNullOrEmpty(text)) ? text : group.Description;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return string.Empty;
        }

        private void WriteGroupXml(System.Xml.XmlTextWriter xmlWriter, Microsoft.SharePoint.Client.Group group)
        {
            try
            {
                xmlWriter.WriteStartElement("Group");
                xmlWriter.WriteAttributeString("ID", group.Id.ToString());
                xmlWriter.WriteAttributeString("Name", group.Title);
                xmlWriter.WriteAttributeString("Description", group.Description);
                xmlWriter.WriteAttributeString("Owner", group.Owner.LoginName);
                xmlWriter.WriteAttributeString("OwnerIsUser", group.Owner.PrincipalType.Equals(PrincipalType.User).ToString());
                xmlWriter.WriteAttributeString("OnlyAllowMembersViewMembership", group.OnlyAllowMembersViewMembership.ToString());
                xmlWriter.WriteAttributeString("AllowMembersEditMembership", group.AllowMembersEditMembership.ToString());
                xmlWriter.WriteAttributeString("AllowRequestToJoinLeave", group.AllowRequestToJoinLeave.ToString());
                xmlWriter.WriteAttributeString("AutoAcceptRequestToJoinLeave", group.AutoAcceptRequestToJoinLeave.ToString());
                xmlWriter.WriteAttributeString("RequestToJoinLeaveEmailSetting", group.RequestToJoinLeaveEmailSetting);
                UserCollection users = group.Users;
                foreach (User current in users)
                {
                    string text = current.LoginName ?? null;
                    if (text != null)
                    {
                        xmlWriter.WriteStartElement("Member");
                        xmlWriter.WriteAttributeString("Login", text);
                        xmlWriter.WriteEndElement();
                    }
                }
            }
            finally
            {
                xmlWriter.WriteEndElement();
            }
        }

        public string GetSiteUsers()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    UserCollection siteUsers = web.SiteUsers;
                    clientContext.Load<UserCollection>(siteUsers, new System.Linq.Expressions.Expression<System.Func<UserCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    xmlTextWriter.WriteStartElement("Users");
                    foreach (User current in siteUsers)
                    {
                        xmlTextWriter.WriteStartElement("User");
                        try
                        {
                            bool flag = current.PrincipalType == PrincipalType.SecurityGroup;
                            xmlTextWriter.WriteAttributeString("ID", current.Id.ToString());
                            string value = "";
                            if (current.UserId != null)
                            {
                                value = current.UserId.NameId;
                            }
                            xmlTextWriter.WriteAttributeString("SID", value);
                            xmlTextWriter.WriteAttributeString("IsSiteAdmin", current.IsSiteAdmin.ToString());
                            xmlTextWriter.WriteAttributeString("IsDomainGroup", flag.ToString());
                            xmlTextWriter.WriteAttributeString("LoginName", current.LoginName);
                            xmlTextWriter.WriteAttributeString("Name", current.Title);
                            xmlTextWriter.WriteAttributeString("Email", current.Email);
                            xmlTextWriter.WriteAttributeString("Notes", "");
                        }
                        catch (System.Exception ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        }
                        xmlTextWriter.WriteEndElement();
                    }
                    xmlTextWriter.WriteEndElement();
                    this.AdapterData.UpdateUserMap(siteUsers);
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private int GetIDFromGroup(string sGroup)
        {
            return this.AdapterData.GetIDFromGroup(sGroup);
        }

        private string GetIDFromGroupTitle(Microsoft.SharePoint.Client.GroupCollection groups, string sTitle)
        {
            foreach (Microsoft.SharePoint.Client.Group current in groups)
            {
                if (current.Title.ToLower() == sTitle.ToLower())
                {
                    return current.Id.ToString();
                }
            }
            return null;
        }

        private Microsoft.SharePoint.Client.Group GetGroupByTitle(Microsoft.SharePoint.Client.GroupCollection groups, string sTitle)
        {
            foreach (Microsoft.SharePoint.Client.Group current in groups)
            {
                if (current.Title.ToLower() == sTitle.ToLower())
                {
                    return current;
                }
            }
            return null;
        }

        private User GetUserFromLoginName(UserCollection users, string loginName)
        {
            string a;
            Utils.SwitchUserNameFormat(loginName, out a);
            foreach (User current in users)
            {
                if (loginName == current.LoginName || a == current.LoginName)
                {
                    return current;
                }
            }
            return null;
        }

        private User LookupUser(string sLoginName, Web currentWeb)
        {
            User byLoginName = currentWeb.SiteUsers.GetByLoginName(sLoginName);
            currentWeb.Context.Load<User>(byLoginName, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
            CSOMAdapter.CallExecuteQuery(currentWeb.Context, this);
            if (byLoginName != null)
            {
                return byLoginName;
            }
            return null;
        }

        private int GetIDFromUser(string sUser)
        {
            return this.AdapterData.GetIDFromUser(sUser);
        }

        public string GetWeb(bool bFetchFullXml)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                    xmlTextWriter.WriteStartElement("Web");
                    this.GetWebXML(clientContext, web, xmlTextWriter, bFetchFullXml);
                    xmlTextWriter.WriteEndElement();
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string GetSubWebs()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    xmlTextWriter.WriteStartElement("Webs");
                    try
                    {
                        WebCollection subwebsForCurrentUser = web.GetSubwebsForCurrentUser(null);
                        clientContext.Load<WebCollection>(subwebsForCurrentUser, new System.Linq.Expressions.Expression<System.Func<WebCollection, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        for (int i = 0; i < subwebsForCurrentUser.Count; i++)
                        {
                            xmlTextWriter.WriteStartElement("Web");
                            try
                            {
                                Web web2 = subwebsForCurrentUser[i];
                                this.GetWebXML(clientContext, web2, xmlTextWriter, false);
                            }
                            catch (System.Exception ex)
                            {
                                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            }
                            xmlTextWriter.WriteEndElement();
                        }
                    }
                    catch (System.Exception ex2)
                    {
                        CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                    xmlTextWriter.WriteEndElement();
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetWebXML(ClientContext ctx, Web web, System.Xml.XmlWriter xmlWriter, bool bFullXML)
        {
            string text = "0";
            bool bIsRootWeb = false;
            Site site = ctx.Site;
            ctx.Load<Site>(site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[0]);
            ctx.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
            ctx.Load<User>(web.CurrentUser, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
            ctx.Load<RegionalSettings>(web.RegionalSettings, new System.Linq.Expressions.Expression<System.Func<RegionalSettings, object>>[0]);
            ctx.Load<Folder>(web.RootFolder, new System.Linq.Expressions.Expression<System.Func<Folder, object>>[0]);
            ctx.Load<Microsoft.SharePoint.Client.TimeZone>(web.RegionalSettings.TimeZone, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.TimeZone, object>>[0]);
            if (bFullXML)
            {
                ctx.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web w) => (object)w.HasUniqueRoleAssignments
                });
                ctx.Load<Microsoft.SharePoint.Client.Group>(web.AssociatedOwnerGroup, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[0]);
                ctx.Load<Microsoft.SharePoint.Client.Group>(web.AssociatedMemberGroup, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[0]);
                ctx.Load<Microsoft.SharePoint.Client.Group>(web.AssociatedVisitorGroup, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[0]);
                ctx.Load<PropertyValues>(web.AllProperties, new System.Linq.Expressions.Expression<System.Func<PropertyValues, object>>[0]);
                ctx.Load<Navigation>(web.Navigation, new System.Linq.Expressions.Expression<System.Func<Navigation, object>>[]
                {
                    (Navigation n) => (object)n.UseShared
                });
                ctx.Load<FeatureCollection>(web.Features, new System.Linq.Expressions.Expression<System.Func<FeatureCollection, object>>[0]);
                ctx.Load<FeatureCollection>(site.Features, new System.Linq.Expressions.Expression<System.Func<FeatureCollection, object>>[0]);
                if (base.SharePointVersion.IsSharePointOnline)
                {
                    ctx.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web w) => w.SiteLogoUrl
                    });
                }
            }
            CSOMAdapter.CallExecuteQuery(ctx, this);
            bool isSiteAdmin = web.CurrentUser.IsSiteAdmin;
            xmlWriter.WriteAttributeString("ID", web.Id.ToString());
            xmlWriter.WriteAttributeString("ServerRelativeUrl", web.ServerRelativeUrl);
            xmlWriter.WriteAttributeString("Name", Utils.GetNameFromURL(web.Url));
            xmlWriter.WriteAttributeString("Title", web.Title);
            xmlWriter.WriteAttributeString("Language", web.Language.ToString());
            xmlWriter.WriteAttributeString("WebTemplateConfig", web.Configuration.ToString());
            xmlWriter.WriteAttributeString("IsSearchable", false.ToString());
            xmlWriter.WriteAttributeString("UIVersion", web.UIVersion.ToString());
            xmlWriter.WriteAttributeString("Locale", web.RegionalSettings.LocaleId.ToString());
            xmlWriter.WriteAttributeString("IsReadOnly", site.ReadOnly.ToString());
            string welcomePageFromRootFolder = this.GetWelcomePageFromRootFolder(web);
            if (!string.IsNullOrEmpty(welcomePageFromRootFolder))
            {
                xmlWriter.WriteAttributeString("WelcomePage", welcomePageFromRootFolder);
            }
            xmlWriter.WriteAttributeString("TimeZone", web.RegionalSettings.TimeZone.Id.ToString());
            if (!bFullXML)
            {
                return;
            }
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.ReleaseCookieLock();
            }
            string text2 = "";
            string value = "";
            System.Collections.Hashtable hashtable;
            try
            {
                text2 = this.NWSAdapter.GetSiteTheme(web.Url);
                value = this.NWSAdapter.HasUniqueRoles(this.Url).ToString();
                hashtable = this.NWSAdapter.RPCProperties(this.Url);
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
            }
            string webTemplate = web.WebTemplate;
            text = hashtable["webtemplate"].ToString();
            xmlWriter.WriteAttributeString("WebTemplateID", text);
            xmlWriter.WriteAttributeString("WebTemplateName", webTemplate);
            xmlWriter.WriteAttributeString("HasUniquePermissions", web.HasUniqueRoleAssignments.ToString());
            xmlWriter.WriteAttributeString("HasUniqueRoles", value);
            xmlWriter.WriteAttributeString("Description", web.Description);
            xmlWriter.WriteAttributeString("SiteTheme", string.IsNullOrEmpty(text2) ? "" : text2);
            xmlWriter.WriteAttributeString("DatabaseServerName", "");
            xmlWriter.WriteAttributeString("DatabaseName", "");
            xmlWriter.WriteAttributeString("SiteCollectionServerRelativeUrl", site.ServerRelativeUrl);
            xmlWriter.WriteAttributeString("IsSiteAdmin", isSiteAdmin.ToString());
            xmlWriter.WriteAttributeString("RootSiteGUID", site.Id.ToString());
            xmlWriter.WriteAttributeString("ExperienceVersion", site.CompatibilityLevel.ToString());
            xmlWriter.WriteAttributeString("MasterPage", web.MasterUrl);
            xmlWriter.WriteAttributeString("CustomMasterPage", web.CustomMasterUrl);
            xmlWriter.WriteAttributeString("CreatedDate", Utils.FormatDate(Utils.MakeTrueUTCDateTime(web.Created)));
            xmlWriter.WriteAttributeString("LastItemModifiedDate", Utils.FormatDate(Utils.MakeTrueUTCDateTime(web.LastItemModifiedDate)));
            if (base.SharePointVersion.IsSharePointOnline)
            {
                xmlWriter.WriteAttributeString("SiteLogoUrl", string.IsNullOrEmpty(web.SiteLogoUrl) ? string.Empty : web.SiteLogoUrl);
            }
            if (web.AllProperties.FieldValues.ContainsKey("__WebTemplates"))
            {
                xmlWriter.WriteAttributeString("AllowedWebTemplates", web.AllProperties["__WebTemplates"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__InheritWebTemplates"))
            {
                xmlWriter.WriteAttributeString("InheritWebTemplates", web.AllProperties["__InheritWebTemplates"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__PageLayouts"))
            {
                xmlWriter.WriteAttributeString("AllowedPageLayouts", web.AllProperties["__PageLayouts"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__DefaultPageLayout"))
            {
                xmlWriter.WriteAttributeString("DefaultPageLayout", web.AllProperties["__DefaultPageLayout"].ToString());
            }
            if (web.AllProperties.FieldValues.ContainsKey("__AllowSpacesInNewPageName"))
            {
                xmlWriter.WriteAttributeString("AllowSpacesInNewPageName", web.AllProperties["__AllowSpacesInNewPageName"].ToString());
            }
            xmlWriter.WriteAttributeString("AllowRSSFeeds", web.AllowRssFeeds.ToString());
            if (hashtable.ContainsKey("rss_Copyright"))
            {
                xmlWriter.WriteAttributeString("RssCopyright", hashtable["rss_Copyright"].ToString());
            }
            if (hashtable.ContainsKey("rss_ManagingEditor"))
            {
                xmlWriter.WriteAttributeString("RssManagingEditor", hashtable["rss_ManagingEditor"].ToString());
            }
            if (hashtable.ContainsKey("rss_WebMaster"))
            {
                xmlWriter.WriteAttributeString("RssWebMaster", hashtable["rss_WebMaster"].ToString());
            }
            if (hashtable.ContainsKey("rss_TimeToLive"))
            {
                xmlWriter.WriteAttributeString("RssTimeToLive", hashtable["rss_TimeToLive"].ToString());
            }
            this.GetWebNavigationXML(ctx, web, xmlWriter);
            string value2 = "";
            string value3 = "";
            string value4 = "";
            try
            {
                value2 = web.AssociatedOwnerGroup.Title;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            try
            {
                value3 = web.AssociatedMemberGroup.Title;
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            try
            {
                value4 = web.AssociatedVisitorGroup.Title;
            }
            catch (System.Exception ex3)
            {
                CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            xmlWriter.WriteAttributeString("OwnerGroup", value2);
            xmlWriter.WriteAttributeString("MemberGroup", value3);
            xmlWriter.WriteAttributeString("VisitorGroup", value4);
            xmlWriter.WriteAttributeString("AssociateGroups", web.IsPropertyAvailable("vti_associategroups") ? web.AllProperties["vti_associategroups"].ToString() : "");
            xmlWriter.WriteAttributeString("RegionalSortOrder", web.RegionalSettings.Collation.ToString());
            xmlWriter.WriteAttributeString("Calendar", web.RegionalSettings.CalendarType.ToString());
            xmlWriter.WriteAttributeString("AlternateCalendar", web.RegionalSettings.AlternateCalendarType.ToString());
            xmlWriter.WriteAttributeString("ShowWeeks", web.RegionalSettings.ShowWeeks.ToString());
            xmlWriter.WriteAttributeString("FirstWeekOfYear", web.RegionalSettings.FirstWeekOfYear.ToString());
            xmlWriter.WriteAttributeString("FirstDayOfWeek", web.RegionalSettings.FirstDayOfWeek.ToString());
            xmlWriter.WriteAttributeString("WorkDays", web.RegionalSettings.WorkDays.ToString());
            xmlWriter.WriteAttributeString("WorkDayStartHour", web.RegionalSettings.WorkDayStartHour.ToString());
            xmlWriter.WriteAttributeString("WorkDayEndHour", web.RegionalSettings.WorkDayEndHour.ToString());
            xmlWriter.WriteAttributeString("TimeFormat", web.RegionalSettings.Time24.ToString());
            xmlWriter.WriteAttributeString("AdjustHijriDays", web.RegionalSettings.AdjustHijriDays.ToString());
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            bool flag = false;
            foreach (Feature current in web.Features)
            {
                if (current.DefinitionId.ToString().ToLower() == "22A9EF51-737B-4FF2-9346-694633FE4416".ToLower())
                {
                    flag = true;
                }
                if (stringBuilder.Length > 0)
                {
                    stringBuilder.Append(",");
                }
                stringBuilder.Append(current.DefinitionId.ToString());
            }
            xmlWriter.WriteAttributeString("SiteFeatures", stringBuilder.ToString());
            System.Text.StringBuilder stringBuilder2 = new System.Text.StringBuilder();
            foreach (Feature current2 in site.Features)
            {
                if (stringBuilder2.Length > 0)
                {
                    stringBuilder2.Append(",");
                }
                stringBuilder2.Append(current2.DefinitionId.ToString());
            }
            xmlWriter.WriteAttributeString("SiteCollFeatures", stringBuilder2.ToString());
            xmlWriter.WriteAttributeString("PublishingFeatureActivated", flag.ToString());
            try
            {
                bIsRootWeb = this.GetRootWebData(ctx, web, xmlWriter);
            }
            catch (System.Exception ex4)
            {
                CSOMAdapter.LogExceptionDetails(ex4, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            if (text == "2")
            {
                try
                {
                    this.GetWebMeetingInstanceXML(ctx, web, xmlWriter, bIsRootWeb);
                }
                catch (System.Exception ex5)
                {
                    CSOMAdapter.LogExceptionDetails(ex5, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    xmlWriter.WriteComment("Couldn't fetch Meeting Instances: " + ex5.Message);
                }
            }
            this.GetSupportedUICulture(ctx, web, xmlWriter);
        }

        private void GetSupportedUICulture(ClientContext clientContext, Web web, System.Xml.XmlWriter xmlWriter)
        {
            try
            {
                if ((base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline) && web.IsMultilingual)
                {
                    string text = string.Empty;
                    string text2 = ",";
                    System.Collections.Generic.IEnumerable<int> enumerable = this.LoadWebSupportedCultures(clientContext, web);
                    foreach (int current in enumerable)
                    {
                        text = text + current + text2;
                    }
                    text = text.TrimEnd(text2.ToCharArray());
                    xmlWriter.WriteAttributeString("SupportedUICultures", text);
                    xmlWriter.WriteAttributeString("OverwriteTranslationsOnChange", web.OverwriteTranslationsOnChange.ToString());
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
        }

        private System.Collections.Generic.IEnumerable<int> LoadWebSupportedCultures(ClientContext clientContext, Web web)
        {
            clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
            {
                (Web w) => w.SupportedUILanguageIds,
                (Web w) => (object)w.IsMultilingual,
                (Web w) => (object)w.Language,
                (Web w) => w.Url
            });
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            return web.SupportedUILanguageIds;
        }

        private System.Collections.Generic.List<System.Globalization.CultureInfo> GetSupportedWebCultures(System.Collections.Generic.IEnumerable<int> supportedLanguageIds)
        {
            System.Collections.Generic.List<System.Globalization.CultureInfo> list = new System.Collections.Generic.List<System.Globalization.CultureInfo>();
            foreach (int current in supportedLanguageIds)
            {
                list.Add(System.Globalization.CultureInfo.GetCultureInfo(current));
            }
            return list;
        }

        private string GetWelcomePageFromRootFolder(Web web)
        {
            string result = null;
            try
            {
                result = web.RootFolder.WelcomePage;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
            return result;
        }

        private bool GetRootWebData(ClientContext ctx, Web web, System.Xml.XmlWriter xmlWriter)
        {
            bool result = false;
            Site site = ctx.Site;
            Web rootWeb = site.RootWeb;
            ctx.Load<Web>(rootWeb, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            if (web.Id == rootWeb.Id)
            {
                result = true;
            }
            this.GetRootWebDataHelper(ctx, rootWeb, xmlWriter);
            return result;
        }

        private void GetRootWebDataHelper(ClientContext ctx, Web rootWeb, System.Xml.XmlWriter xmlWriter)
        {
            xmlWriter.WriteAttributeString("RootWebGUID", rootWeb.Id.ToString());
            List list;
            try
            {
                list = rootWeb.Lists.GetByTitle("TaxonomyHiddenList");
                ctx.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List l) => (object)l.Id
                });
                CSOMAdapter.CallExecuteQuery(ctx, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                list = null;
            }
            if (list != null)
            {
                xmlWriter.WriteAttributeString("TaxonomyListGUID", list.Id.ToString());
                return;
            }
            xmlWriter.WriteAttributeString("TaxonomyListGUID", "");
        }

        private void GetWebMeetingInstanceXML(ClientContext ctx, Web web, System.Xml.XmlWriter xmlWriter, bool bIsRootWeb)
        {
            List list = null;
            ListCollection lists = web.Lists;
            ctx.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
            {
                (ListCollection list4) => from l in list4.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                    {
                        (List l) => (object)l.Id,
                        (List l) => (object)l.BaseTemplate,
                        (List l) => l.Fields
                    })
                    where l.BaseTemplate == 200
                    select l
            });
            CSOMAdapter.CallExecuteQuery(ctx, this);
            if (lists.Count == 1)
            {
                list = lists[0];
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                System.Xml.XmlWriter xmlWriter2 = new System.Xml.XmlTextWriter(new System.IO.StringWriter(sb));
                xmlWriter2.WriteStartElement("Fields");
                foreach (Field current in list.Fields)
                {
                    xmlWriter2.WriteRaw(current.SchemaXml);
                }
                xmlWriter2.WriteEndElement();
                xmlWriter2.Flush();
                string listItemsInternal = this.GetListItemsInternal(list.Id.ToString(), null, null, null, true, ListItemQueryType.ListItem, web, null, new GetListItemOptions(), this, ctx);
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(listItemsInternal);
                if (xmlDocument.DocumentElement != null)
                {
                    System.Xml.XmlNodeList xmlNodeList = xmlDocument.DocumentElement.SelectNodes("./ListItem");
                    System.Collections.Generic.List<System.Xml.XmlAttribute> list2 = new System.Collections.Generic.List<System.Xml.XmlAttribute>();
                    System.Collections.Generic.List<string> list3 = new System.Collections.Generic.List<string>();
                    foreach (System.Xml.XmlNode xmlNode in xmlNodeList)
                    {
                        if (xmlNode.Attributes != null)
                        {
                            System.Xml.XmlAttribute xmlAttribute = xmlNode.Attributes["EventUID"];
                            if (xmlAttribute != null)
                            {
                                string value = xmlAttribute.Value;
                                string[] array = value.Split(new char[]
                                {
                                    ':'
                                });
                                if (array.Length >= 4)
                                {
                                    string s = array[array.Length - 1];
                                    string text = array[array.Length - 3];
                                    int num = -1;
                                    System.Guid empty = System.Guid.Empty;
                                    if (Utils.IsGuid(text))
                                    {
                                        empty = new System.Guid(text);
                                    }
                                    if (int.TryParse(s, out num) && !(empty == System.Guid.Empty))
                                    {
                                        string text2 = "";
                                        for (int i = 0; i < array.Length - 4; i++)
                                        {
                                            if (!string.IsNullOrEmpty(text2))
                                            {
                                                text2 += ":";
                                            }
                                            text2 += array[i];
                                        }
                                        if (xmlNode.OwnerDocument != null)
                                        {
                                            System.Xml.XmlAttribute xmlAttribute2 = xmlNode.OwnerDocument.CreateAttribute("EventUIDPrefix");
                                            System.Xml.XmlAttribute xmlAttribute3 = xmlNode.OwnerDocument.CreateAttribute("EventUIDItemID");
                                            System.Xml.XmlAttribute xmlAttribute4 = xmlNode.OwnerDocument.CreateAttribute("EventUIDListName");
                                            xmlAttribute2.Value = text2;
                                            xmlAttribute3.Value = num.ToString();
                                            xmlAttribute4.Value = empty.ToString();
                                            xmlNode.Attributes.Remove(xmlAttribute);
                                            xmlNode.Attributes.Append(xmlAttribute2);
                                            xmlNode.Attributes.Append(xmlAttribute4);
                                            xmlNode.Attributes.Append(xmlAttribute3);
                                            list2.Add(xmlAttribute4);
                                        }
                                        if (!list3.Contains(empty.ToString()))
                                        {
                                            list3.Add(empty.ToString());
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!bIsRootWeb && list3.Count > 0)
                    {
                        System.Collections.Generic.Dictionary<string, string> dictionary = new System.Collections.Generic.Dictionary<string, string>();
                        Site site = ctx.Site;
                        Web web2 = site.OpenWebById(web.ParentWeb.Id);
                        ctx.Load<Web>(web2, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(ctx, this);
                        foreach (string current2 in list3)
                        {
                            foreach (List current3 in web2.Lists)
                            {
                                if (current2 == current3.Id.ToString())
                                {
                                    dictionary.Add(current2, current3.Title);
                                    break;
                                }
                            }
                        }
                        foreach (System.Xml.XmlAttribute current4 in list2)
                        {
                            if (dictionary.ContainsKey(current4.Value))
                            {
                                current4.Value = dictionary[current4.Value];
                            }
                        }
                    }
                    xmlWriter.WriteStartElement("MeetingInstances");
                    foreach (System.Xml.XmlNode xmlNode2 in xmlNodeList)
                    {
                        xmlWriter.WriteRaw(xmlNode2.OuterXml.Replace("<ListItem ", "<MeetingInstance "));
                    }
                }
                xmlWriter.WriteEndElement();
                return;
            }
        }

        public string GetWebTemplates()
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    xmlTextWriter.WriteStartElement("WebTemplates");
                    clientContext.Load<Web>(clientContext.Web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.GetWebTemplates(clientContext, xmlTextWriter, clientContext.Web.Language);
                    xmlTextWriter.WriteEndElement();
                    xmlTextWriter.Flush();
                    xmlTextWriter.Close();
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetWebTemplates(ClientContext ctx, System.Xml.XmlTextWriter xmlWriter, uint languageID)
        {
            WebTemplateCollection webTemplates = ctx.Site.GetWebTemplates(languageID, 0);
            ctx.Load<WebTemplateCollection>(webTemplates, new System.Linq.Expressions.Expression<System.Func<WebTemplateCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            foreach (WebTemplate current in webTemplates)
            {
                xmlWriter.WriteStartElement("WebTemplate");
                try
                {
                    string[] array = current.Name.Split(new char[]
                    {
                        '#'
                    });
                    string value = current.Name;
                    string value2 = "0";
                    int num = -1;
                    int num2 = -1;
                    if (array.Length == 2)
                    {
                        if (!int.TryParse(array[1], out num))
                        {
                            value = array[1];
                        }
                        else
                        {
                            value2 = array[1];
                            num2 = current.Id;
                        }
                    }
                    xmlWriter.WriteAttributeString("Name", value);
                    xmlWriter.WriteAttributeString("ID", num2.ToString());
                    xmlWriter.WriteAttributeString("Config", value2);
                    xmlWriter.WriteAttributeString("FullName", current.Name);
                    xmlWriter.WriteAttributeString("Title", current.Title);
                    xmlWriter.WriteAttributeString("ImageUrl", current.ImageUrl);
                    xmlWriter.WriteAttributeString("Description", current.Description);
                    xmlWriter.WriteAttributeString("IsHidden", current.IsHidden.ToString());
                    xmlWriter.WriteAttributeString("IsRootWebOnly", current.IsRootWebOnly.ToString());
                    xmlWriter.WriteAttributeString("IsSubWebOnly", current.IsSubWebOnly.ToString());
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    xmlWriter.WriteAttributeString("Error", ex.Message);
                }
                xmlWriter.WriteEndElement();
            }
        }

        private WebTemplate GetWebTemplateByIdOrName(uint localeId, int iId, int iConfigId, string sSearchName, Site site)
        {
            WebTemplateCollection webTemplates = site.GetWebTemplates(localeId, 0);
            site.Context.Load<WebTemplateCollection>(webTemplates, new System.Linq.Expressions.Expression<System.Func<WebTemplateCollection, object>>[]
            {
                (WebTemplateCollection temp) => temp.Include(new System.Linq.Expressions.Expression<System.Func<WebTemplate, object>>[]
                {
                    (WebTemplate t) => t.Name,
                    (WebTemplate t) => (object)t.Id
                })
            });
            CSOMAdapter.CallExecuteQuery(site.Context, this);
            foreach (WebTemplate current in webTemplates)
            {
                if (iId == -1)
                {
                    string text = current.Name;
                    string[] array = current.Name.Split(new char[]
                    {
                        '#'
                    });
                    if (array.Length == 2)
                    {
                        int num = -1;
                        if (!int.TryParse(array[1], out num))
                        {
                            text = array[1];
                        }
                    }
                    if (text.Equals(sSearchName))
                    {
                        WebTemplate result = current;
                        return result;
                    }
                }
                else
                {
                    string text = current.Name;
                    int num2 = text.IndexOf("#");
                    int num3 = 0;
                    if (num2 >= 0)
                    {
                        string s = text.Substring(num2 + 1);
                        if (!int.TryParse(s, out num3))
                        {
                            num3 = 0;
                        }
                    }
                    if (current.Id == iId && num3 == iConfigId)
                    {
                        WebTemplate result = current;
                        return result;
                    }
                }
            }
            if (webTemplates.Count <= 0)
            {
                throw new CSOMAdapter.LanguageTemplatesMissingException();
            }
            return null;
        }

        public string GetRootCollection(CSOMAdapter callingAdapter)
        {
            if (callingAdapter.CookieManager != null && callingAdapter.CookieManager.LockCookie)
            {
                callingAdapter.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext(callingAdapter, false))
                {
                    if (this.ContainsSystemContentType(clientContext.Web))
                    {
                        result = callingAdapter.Url;
                        return result;
                    }
                }
                string text = null;
                bool flag = false;
                while (!flag)
                {
                    if (text == null)
                    {
                        text = ((callingAdapter.Url.LastIndexOf('/') == 5 || callingAdapter.Url.LastIndexOf('/') == 6) ? null : callingAdapter.Url.Substring(0, callingAdapter.Url.LastIndexOf('/')));
                    }
                    else
                    {
                        text = ((text.LastIndexOf('/') == 5 || text.LastIndexOf('/') == 6) ? null : text.Substring(0, text.LastIndexOf('/')));
                    }
                    if (text == null)
                    {
                        break;
                    }
                    using (ClientContext clientContext2 = this.GetClientContext(text, callingAdapter, false))
                    {
                        if (this.ContainsSystemContentType(clientContext2.Web))
                        {
                            result = text;
                            return result;
                        }
                    }
                }
                result = null;
            }
            finally
            {
                if (callingAdapter.CookieManager != null && callingAdapter.CookieManager.LockCookie)
                {
                    callingAdapter.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private Web GetWebByName(Web parentWeb, string sName)
        {
            Web result;
            try
            {
                parentWeb.Context.Load<WebCollection>(parentWeb.Webs, new System.Linq.Expressions.Expression<System.Func<WebCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(parentWeb.Context, this);
                foreach (Web current in parentWeb.Webs)
                {
                    if (current.Title.ToLower() == sName.ToLower())
                    {
                        result = current;
                        return result;
                    }
                }
                result = null;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = null;
            }
            return result;
        }

        public static Field GetFieldByNames(FieldCollection fields, string sDisplayName, string sInternalName)
        {
            return CSOMAdapter.GetFieldByInternalName(fields, sInternalName) ?? CSOMAdapter.GetFieldByDisplayName(fields, sDisplayName);
        }

        private FieldLink GetFieldLink(FieldLinkCollection links, string internalName, string fieldId)
        {
            System.Guid empty;
            if (!System.Guid.TryParse(fieldId, out empty))
            {
                empty = System.Guid.Empty;
            }
            FieldLink result = null;
            foreach (FieldLink current in links)
            {
                if (current.IsPropertyAvailable("Name"))
                {
                    if (empty != System.Guid.Empty && current.Id == empty)
                    {
                        return current;
                    }
                    if (string.Equals(current.Name, internalName, System.StringComparison.OrdinalIgnoreCase))
                    {
                        result = current;
                    }
                }
            }
            return result;
        }

        private static Field GetFieldByInternalName(FieldCollection fields, string sInternalName)
        {
            if (!string.IsNullOrEmpty(sInternalName))
            {
                string b = sInternalName.ToLower();
                foreach (Field current in fields)
                {
                    if (current.InternalName.ToLower() == b)
                    {
                        return current;
                    }
                }
            }
            return null;
        }

        private static Field GetFieldByDisplayName(FieldCollection fields, string sDisplayName)
        {
            if (!string.IsNullOrEmpty(sDisplayName))
            {
                foreach (Field current in fields)
                {
                    if (current.Title == sDisplayName && current.FieldTypeKind != FieldType.Computed && !current.FromBaseType)
                    {
                        return current;
                    }
                }
            }
            return null;
        }

        private ContentType GetWebContentType(Web currentWeb, string contentTypeId)
        {
            ContentTypeCollection contentTypes = currentWeb.ContentTypes;
            currentWeb.Context.Load<ContentTypeCollection>(contentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
            {
                (ContentTypeCollection contentTypes3) => from contentType in contentTypes3.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                    {
                        (ContentType contentType) => contentType.Name,
                        (ContentType contentType) => contentType.Id,
                        (ContentType contentType) => contentType.Description,
                        (ContentType contentType) => contentType.Group
                    })
                    where contentType.StringId == contentTypeId
                    select contentType
            });
            CSOMAdapter.CallExecuteQuery(currentWeb.Context, this);
            foreach (ContentType current in contentTypes)
            {
                if (current.Id.ToString().Equals(contentTypeId, System.StringComparison.OrdinalIgnoreCase))
                {
                    return current;
                }
            }
            return null;
        }

        private ContentType GetContentTypeByID(ClientContext ctx, ContentTypeCollection contentTypes, string contentTypeId)
        {
            System.Collections.Generic.IEnumerable<ContentType> enumerable = ctx.LoadQuery<ContentType>(from contentType in contentTypes
                                                                                                        where contentType.StringId == contentTypeId
                                                                                                        select contentType);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            if (enumerable != null && enumerable.Count<ContentType>() > 0)
            {
                return enumerable.FirstOrDefault<ContentType>();
            }
            return null;
        }

        private bool ContainsSystemContentType(Web currentWeb)
        {
            ContentTypeCollection contentTypes = currentWeb.ContentTypes;
            currentWeb.Context.Load<ContentTypeCollection>(contentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[]
            {
                (ContentTypeCollection contentTypes4) => contentTypes4.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                {
                    (ContentType contentType) => contentType.Id
                })
            });
            CSOMAdapter.CallExecuteQuery(currentWeb.Context, this);
            foreach (ContentType current in contentTypes)
            {
                if (current.Id.ToString().Equals("0x"))
                {
                    return true;
                }
            }
            return false;
        }

        public string ProvisionMigrationContainer()
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    try
                    {
                        ClientResult<ProvisionedMigrationContainersInfo> clientResult = clientContext.Site.ProvisionMigrationContainers();
                        clientContext.ExecuteQuery();
                        System.IO.StringWriter stringWriter = new System.IO.StringWriter();
                        using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringWriter, new System.Xml.XmlWriterSettings
                        {
                            OmitXmlDeclaration = true
                        }))
                        {
                            xmlWriter.WriteStartElement("MigrationContainer");
                            xmlWriter.WriteAttributeString("DataContainerUri", clientResult.Value.DataContainerUri);
                            xmlWriter.WriteAttributeString("MetadataContainerUri", clientResult.Value.MetadataContainerUri);
                            xmlWriter.WriteAttributeString("EncryptionKey", System.Convert.ToBase64String(clientResult.Value.EncryptionKey));
                            xmlWriter.WriteEndElement();
                        }
                        operationReporting.LogObjectXml(stringWriter.ToString());
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        operationReporting.LogError(ex, "Error occured while executing ProvisionMigrationContainer - Using block");
                        operationReporting.LogInformation("TraceCorrelationId", clientContext.TraceCorrelationId);
                    }
                }
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex2, "Error occured while executing ProvisionMigrationContainer - Main block");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string ProvisionMigrationQueue()
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    try
                    {
                        ClientResult<ProvisionedMigrationQueueInfo> clientResult = clientContext.Site.ProvisionMigrationQueue();
                        clientContext.ExecuteQuery();
                        System.IO.StringWriter stringWriter = new System.IO.StringWriter();
                        using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringWriter, new System.Xml.XmlWriterSettings
                        {
                            OmitXmlDeclaration = true
                        }))
                        {
                            xmlWriter.WriteStartElement("MigrationQueue");
                            xmlWriter.WriteAttributeString("JobQueueUri", clientResult.Value.JobQueueUri);
                            xmlWriter.WriteEndElement();
                        }
                        operationReporting.LogObjectXml(stringWriter.ToString());
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        operationReporting.LogError(ex, "Error occured while executing ProvisionMigrationContainer - Using block");
                        operationReporting.LogInformation("TraceCorrelationId", clientContext.TraceCorrelationId);
                    }
                }
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex2, "Error occured while executing ProvisionMigrationContainer - Main block");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string RequestMigrationJob(string jobConfiguration, bool isMicrosoftCustomer, byte[] encryptionKey = null)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            bool flag = false;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(jobConfiguration);
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("//RequestMigrationJob");
                if (xmlNode == null)
                {
                    throw new System.ArgumentException("Invalid job configuration");
                }
                System.Guid attributeValueAsGuid = xmlNode.GetAttributeValueAsGuid("WebId");
                string attributeValueAsString = xmlNode.GetAttributeValueAsString("AzureContainerSourceUri");
                string attributeValueAsString2 = xmlNode.GetAttributeValueAsString("AzureContainerManifestUri");
                string attributeValueAsString3 = xmlNode.GetAttributeValueAsString("AzureQueueReportUri");
                using (ClientContext clientContext = this.GetClientContext(isMicrosoftCustomer))
                {
                    ClientResult<System.Guid> clientResult = null;
                    try
                    {
                        if (encryptionKey == null)
                        {
                            clientResult = clientContext.Site.CreateMigrationJob(attributeValueAsGuid, attributeValueAsString, attributeValueAsString2, attributeValueAsString3);
                        }
                        else
                        {
                            clientResult = clientContext.Site.CreateMigrationJobEncrypted(attributeValueAsGuid, attributeValueAsString, attributeValueAsString2, attributeValueAsString3, new EncryptionOption
                            {
                                AES256CBCKey = encryptionKey
                            });
                        }
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        flag = true;
                        operationReporting.LogError(ex, "Error occured while executing ProvisionMigrationContainer - Using block");
                        operationReporting.LogInformation("TraceCorrelationId", clientContext.TraceCorrelationId);
                    }
                    if (!flag)
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
                        {
                            xmlWriter.WriteStartElement("CreateMigrationJob");
                            xmlWriter.WriteAttributeString("Value", clientResult.Value.ToString());
                            xmlWriter.WriteAttributeString("TraceCorrelationId", clientContext.TraceCorrelationId);
                            xmlWriter.WriteEndElement();
                            xmlWriter.Flush();
                            xmlWriter.Close();
                        }
                        operationReporting.LogObjectXml(stringBuilder.ToString());
                    }
                }
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex2, "Error occured while executing ProvisionMigrationContainer - Main block");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string GetMigrationJobStatus(string jobConfiguration)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            bool flag = false;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(jobConfiguration);
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("//GetMigrationJobStatus");
                if (xmlNode == null)
                {
                    throw new System.ArgumentException("Invalid job configuration");
                }
                System.Guid attributeValueAsGuid = xmlNode.GetAttributeValueAsGuid("MigrationJobId");
                using (ClientContext clientContext = this.GetClientContext())
                {
                    ClientResult<MigrationJobState> migrationJobStatus = clientContext.Site.GetMigrationJobStatus(attributeValueAsGuid);
                    try
                    {
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        flag = true;
                        operationReporting.LogError(ex, "Error occured while executing ProvisionMigrationContainer - Using block");
                        operationReporting.LogInformation("TraceCorrelationId", clientContext.TraceCorrelationId);
                    }
                    if (!flag)
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
                        {
                            xmlWriter.WriteStartElement("GetMigrationJobStatus");
                            xmlWriter.WriteAttributeString("JobStatus", migrationJobStatus.Value.ToString());
                            xmlWriter.WriteAttributeString("TraceCorrelationId", clientContext.TraceCorrelationId);
                            xmlWriter.WriteEndElement();
                            xmlWriter.Flush();
                            xmlWriter.Close();
                        }
                        operationReporting.LogObjectXml(stringBuilder.ToString());
                    }
                }
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex2, "Error occured while executing ProvisionMigrationContainer - Main block");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string DeleteMigrationJob(string jobConfiguration)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            bool flag = false;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(jobConfiguration);
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("//DeleteMigrationJob");
                if (xmlNode == null)
                {
                    throw new System.ArgumentException("Invalid job configuration");
                }
                System.Guid attributeValueAsGuid = xmlNode.GetAttributeValueAsGuid("MigrationJobId");
                using (ClientContext clientContext = this.GetClientContext())
                {
                    ClientResult<bool> clientResult = clientContext.Site.DeleteMigrationJob(attributeValueAsGuid);
                    try
                    {
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        flag = true;
                        operationReporting.LogError(ex, "Error occured while executing ProvisionMigrationContainer - Using block");
                        operationReporting.LogInformation("TraceCorrelationId", clientContext.TraceCorrelationId);
                    }
                    if (!flag)
                    {
                        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                        using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
                        {
                            xmlWriter.WriteStartElement("DeleteMigrationJob");
                            xmlWriter.WriteAttributeString("JobStatus", clientResult.Value.ToString());
                            xmlWriter.WriteAttributeString("TraceCorrelationId", clientContext.TraceCorrelationId);
                            xmlWriter.WriteEndElement();
                            xmlWriter.Flush();
                            xmlWriter.Close();
                        }
                        operationReporting.LogObjectXml(stringBuilder.ToString());
                    }
                }
            }
            catch (System.Exception ex2)
            {
                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex2, "Error occured while executing ProvisionMigrationContainer - Main block");
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string ResolvePrincipals(string principal)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                if (!this.NWSAdapter.ResolvePrincipals(principal))
                {
                    operationReporting.LogWarning(string.Format("Could not resolve Principal '{0}'", principal), string.Empty);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, string.Format("An error occured while resolving the Principal '{0}'", principal));
            }
            finally
            {
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string AddWeb(string sWebXML, AddWebOptions addOptions)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(sWebXML);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    string text = firstChild.Attributes["Name"].Value;
                    string value = firstChild.Attributes["Title"].Value;
                    string description = (firstChild.Attributes["Description"] != null) ? firstChild.Attributes["Description"].Value : null;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web cWeb) => cWeb.RegionalSettings,
                        (Web cWeb) => (object)cWeb.Language
                    });
                    clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                    {
                        (Site s) => s.ServerRelativeUrl
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    int iLocaleNew = (firstChild.Attributes["Locale"] == null) ? System.Convert.ToInt32(web.RegionalSettings.LocaleId) : System.Convert.ToInt32(firstChild.Attributes["Locale"].Value);
                    int num = (firstChild.Attributes["Language"] == null) ? System.Convert.ToInt32(web.Language) : System.Convert.ToInt32(firstChild.Attributes["Language"].Value);
                    int num2;
                    if (!int.TryParse(firstChild.Attributes["WebTemplateID"].Value, out num2))
                    {
                        num2 = -1;
                    }
                    int num3 = System.Convert.ToInt32(firstChild.Attributes["WebTemplateConfig"].Value);
                    string sSearchName = null;
                    if (firstChild.Attributes["WebTemplateName"] != null)
                    {
                        sSearchName = firstChild.Attributes["WebTemplateName"].Value;
                    }
                    if (num2 == 14483 && num3 == 0)
                    {
                        num3 = 1;
                    }
                    WebTemplate webTemplate = null;
                    if (num3 != -1)
                    {
                        try
                        {
                            webTemplate = this.GetWebTemplateByIdOrName((uint)num, num2, num3, sSearchName, clientContext.Site);
                        }
                        catch (CSOMAdapter.LanguageTemplatesMissingException ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            throw new System.Exception("The templates for the given source language (" + iLocaleNew.ToString() + ") cannot be found on the target server. This is most likely due to the source language pack not being installed on the target.");
                        }
                        if (webTemplate == null)
                        {
                            throw new System.Exception("This template does not exist on the target server. Please install this template on the target machine or map it to an existing template.");
                        }
                    }
                    if (string.IsNullOrEmpty(text))
                    {
                        text = Utils.CleanSharePointURL(value);
                    }
                    Web web2 = this.GetWebByName(web, text);
                    bool overwrite = addOptions.Overwrite;
                    bool flag = addOptions.CopyFeatures && firstChild.Attributes["SiteFeatures"] != null;
                    if (web2 != null && addOptions.Overwrite)
                    {
                        this.DeleteWeb(clientContext, web2);
                        web2 = null;
                    }
                    if (web2 == null)
                    {
                        int cSOMMaximumExecuteQueryRetries = AdapterConfigurationVariables.CSOMMaximumExecuteQueryRetries;
                        int i = 0;
                        int num4 = 30000;
                        if (cSOMMaximumExecuteQueryRetries <= 0)
                        {
                            throw new System.ArgumentException("Provide a retry count greater than zero.");
                        }
                        while (i < cSOMMaximumExecuteQueryRetries)
                        {
                            try
                            {
                                WebCreationInformation webCreationInformation = new WebCreationInformation();
                                webCreationInformation.Description = description;
                                webCreationInformation.Language = System.Convert.ToInt32(num);
                                webCreationInformation.Title = value;
                                webCreationInformation.Url = UrlUtils.GetValidSiteUrl(text);
                                webCreationInformation.UseSamePermissionsAsParentSite = true;
                                if (num2 != -1 && webTemplate != null)
                                {
                                    webCreationInformation.WebTemplate = webTemplate.Name;
                                }
                                web2 = web.Webs.Add(webCreationInformation);
                                CSOMAdapter.CallExecuteQuery(clientContext, this);
                                break;
                            }
                            catch (ServerException ex2)
                            {
                                CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                                int serverErrorCode = ex2.ServerErrorCode;
                                ServerException ex3 = ex2.InnerException as ServerException;
                                if (ex3 != null)
                                {
                                    serverErrorCode = ex3.ServerErrorCode;
                                }
                                string message = ex2.Message;
                                if (!this.webNotProvisionedErrorCodes.Contains(serverErrorCode) || "The SharePoint Server Publishing Infrastructure feature must be activated at the site collection level before the Publishing feature can be activated.".Equals(message, System.StringComparison.InvariantCultureIgnoreCase))
                                {
                                    throw;
                                }
                                System.Threading.Thread.Sleep(num4);
                                i++;
                                num4 *= 2;
                                web2 = this.GetWebByName(web, text);
                                if (web2 != null)
                                {
                                    this.DeleteWeb(clientContext, web2);
                                    web2 = null;
                                }
                            }
                        }
                    }
                    else
                    {
                        web2.Title = value;
                        web2.Description = description;
                        web2.Update();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    if (addOptions.CopyAssociatedGroupSettings)
                    {
                        web2.BreakRoleInheritance(true, false);
                        clientContext.Load<Web>(web2, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web cWeb) => (object)cWeb.Id,
                            (Web cWeb) => cWeb.AllProperties,
                            (Web cWeb) => cWeb.ServerRelativeUrl,
                            (Web cWeb) => cWeb.RegionalSettings,
                            (Web cWeb) => cWeb.WebTemplate,
                            (Web cWeb) => cWeb.Features,
                            (Web cWeb) => cWeb.RootFolder,
                            (Web cWeb) => cWeb.SiteGroups,
                            (Web cWeb) => cWeb.AssociatedOwnerGroup,
                            (Web cWeb) => cWeb.AssociatedMemberGroup,
                            (Web cWeb) => cWeb.AssociatedVisitorGroup,
                            (Web cWeb) => cWeb.Url
                        });
                    }
                    else
                    {
                        clientContext.Load<Web>(web2, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web cWeb) => (object)cWeb.Id,
                            (Web cWeb) => cWeb.AllProperties,
                            (Web cWeb) => cWeb.ServerRelativeUrl,
                            (Web cWeb) => cWeb.RegionalSettings,
                            (Web cWeb) => cWeb.WebTemplate,
                            (Web cWeb) => cWeb.Features,
                            (Web cWeb) => cWeb.RootFolder,
                            (Web cWeb) => cWeb.Url
                        });
                    }
                    clientContext.Load<Web>(clientContext.Site.RootWeb, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web cWeb) => cWeb.WebTemplate
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (flag)
                    {
                        string sFeatureGuids = (firstChild.Attributes["SiteFeatures"] != null) ? firstChild.Attributes["SiteFeatures"].Value : "";
                        this.AddFeatures(web2.Features, clientContext, sFeatureGuids, addOptions.MergeFeatures, string.Equals(web2.WebTemplate, "ENTERWIKI", System.StringComparison.OrdinalIgnoreCase));
                    }
                    if (overwrite)
                    {
                        this.ClearDefaultSiteData(clientContext, web2);
                    }
                    if (num2 == -1 && webTemplate != null)
                    {
                        web2.ApplyWebTemplate(webTemplate.Name);
                    }
                    try
                    {
                        this.UpdateWebProperties(clientContext, web2, firstChild, addOptions, iLocaleNew, operationReporting);
                    }
                    catch (System.Exception ex4)
                    {
                        CSOMAdapter.LogExceptionDetails(ex4, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        operationReporting.LogError(ex4, string.Format("Error occured while UpdateWebProperties in AddWeb method for web '{0}'", web2.Url));
                    }
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    xmlTextWriter.WriteStartElement("Web");
                    this.GetWebXML(clientContext, web2, xmlTextWriter, false);
                    xmlTextWriter.WriteEndElement();
                    operationReporting.LogObjectXml(stringWriter.ToString());
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
                operationReporting.End();
            }
            return operationReporting.ResultXml;
        }

        public string UpdateWeb(string sWebXML, UpdateWebOptions updateOptions)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web currentWeb) => (object)currentWeb.HasUniqueRoleAssignments
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(sWebXML);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    if (firstChild.Name.Equals(XmlElementNames.DisableSiteAndListWorkflows.ToString()))
                    {
                        result = this.DisableSiteAndListWorkflows(clientContext, web);
                    }
                    else if (firstChild.Name.Equals(XmlElementNames.EnableSiteAndListWorkflows.ToString()))
                    {
                        result = this.EnableSiteAndListWorkflows(clientContext, web, firstChild);
                    }
                    else
                    {
                        clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[]
                        {
                            (Site s) => s.Features,
                            (Site s) => s.ServerRelativeUrl,
                            (Site s) => s.Url
                        });
                        if (updateOptions.CopyAssociatedGroupSettings)
                        {
                            clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                            {
                                (Web cWeb) => cWeb.AssociatedOwnerGroup,
                                (Web cWeb) => cWeb.AssociatedMemberGroup,
                                (Web cWeb) => cWeb.AssociatedVisitorGroup
                            });
                        }
                        if (updateOptions.CopyAssociatedGroupSettings && !web.HasUniqueRoleAssignments)
                        {
                            web.BreakRoleInheritance(true, false);
                            clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                            {
                                (Web cWeb) => (object)cWeb.Id,
                                (Web cWeb) => cWeb.AllProperties,
                                (Web cWeb) => cWeb.RegionalSettings,
                                (Web cWeb) => cWeb.SiteGroups,
                                (Web cWeb) => cWeb.WebTemplate,
                                (Web cWeb) => cWeb.Features,
                                (Web cWeb) => cWeb.ServerRelativeUrl,
                                (Web cWeb) => cWeb.Url
                            });
                        }
                        else
                        {
                            clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                            {
                                (Web cWeb) => (object)cWeb.Id,
                                (Web cWeb) => cWeb.AllProperties,
                                (Web cWeb) => cWeb.RegionalSettings,
                                (Web cWeb) => cWeb.SiteGroups,
                                (Web cWeb) => cWeb.WebTemplate,
                                (Web cWeb) => cWeb.Features,
                                (Web cWeb) => cWeb.ServerRelativeUrl,
                                (Web cWeb) => cWeb.Url
                            });
                        }
                        clientContext.Load<Web>(clientContext.Site.RootWeb, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web cWeb) => cWeb.WebTemplate
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        int iLocaleNew = (firstChild.Attributes["Locale"] == null) ? System.Convert.ToInt32(web.RegionalSettings.LocaleId) : System.Convert.ToInt32(firstChild.Attributes["Locale"].Value);
                        if (updateOptions.CopyFeatures)
                        {
                            if (web.Url.Equals(clientContext.Site.Url, System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                string sFeatureGuids = (firstChild.Attributes["SiteCollFeatures"] != null) ? firstChild.Attributes["SiteCollFeatures"].Value : "";
                                this.AddFeatures(clientContext.Site.Features, clientContext, sFeatureGuids, updateOptions.MergeFeatures, false);
                            }
                            string sFeatureGuids2 = (firstChild.Attributes["SiteFeatures"] != null) ? firstChild.Attributes["SiteFeatures"].Value : "";
                            this.AddFeatures(web.Features, clientContext, sFeatureGuids2, updateOptions.MergeFeatures, string.Equals(web.WebTemplate, "ENTERWIKI", System.StringComparison.OrdinalIgnoreCase));
                        }
                        this.UpdateWebProperties(clientContext, web, firstChild, updateOptions, iLocaleNew, null);
                        System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                        System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                        xmlTextWriter.WriteStartElement("Web");
                        this.GetWebXML(clientContext, web, xmlTextWriter, false);
                        xmlTextWriter.WriteEndElement();
                        result = stringWriter.ToString();
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private string EnableSiteAndListWorkflows(ClientContext clientContext, Web web, System.Xml.XmlNode workflowXml)
        {
            System.Xml.XmlNodeList childNodes = workflowXml.ChildNodes;
            System.Collections.Generic.List<string> workflowGuidList = (from System.Xml.XmlNode workflowXmlNode in childNodes
                                                                        select workflowXmlNode.Attributes[XmlAttributeNames.Guid.ToString()].Value).ToList<string>();
            System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                this.LoadSiteAndListWorkflows(clientContext, web);
                foreach (WorkflowAssociation current in from workflowAssociation in web.WorkflowAssociations
                                                        where !workflowAssociation.Enabled && workflowGuidList.Contains(workflowAssociation.Id.ToString())
                                                        select workflowAssociation)
                {
                    current.Enabled = true;
                    current.Update();
                    list.Add(current.Id.ToString());
                }
                foreach (WorkflowAssociation current2 in web.Lists.SelectMany((List list5) => from workflowAssociation in list5.WorkflowAssociations
                                                                                              where !workflowAssociation.Enabled && workflowGuidList.Contains(workflowAssociation.Id.ToString())
                                                                                              select workflowAssociation))
                {
                    current2.Enabled = true;
                    current2.Update();
                    list.Add(current2.Id.ToString());
                }
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "Exception when attempting to re-enable workflows after site content migration.");
            }
            if (list.Count > 0)
            {
                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                foreach (string current3 in workflowGuidList)
                {
                    stringBuilder.Append(current3);
                    stringBuilder.Append(' ');
                }
                operationReporting.LogInformation(XmlElementNames.EnableSiteAndListWorkflows.ToString(), stringBuilder.ToString().TrimEnd(new char[0]));
            }
            operationReporting.End();
            return operationReporting.ResultXml;
        }

        private void LoadSiteAndListWorkflows(ClientContext clientContext, Web web)
        {
            clientContext.Load<WorkflowAssociationCollection>(web.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[]
            {
                (WorkflowAssociationCollection workflowAssociations) => workflowAssociations.Include(new System.Linq.Expressions.Expression<System.Func<WorkflowAssociation, object>>[]
                {
                    (WorkflowAssociation workflow) => (object)workflow.Id,
                    (WorkflowAssociation workflow) => (object)workflow.Enabled
                })
            });
            clientContext.Load<ListCollection>(web.Lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[]
            {
                (ListCollection lists) => lists.Include(new System.Linq.Expressions.Expression<System.Func<List, object>>[]
                {
                    (List list) => list.WorkflowAssociations
                })
            });
            CSOMAdapter.CallExecuteQuery(clientContext, this);
        }

        private string DisableSiteAndListWorkflows(ClientContext clientContext, Web web)
        {
            System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                this.LoadSiteAndListWorkflows(clientContext, web);
                foreach (WorkflowAssociation current in from workflowAssociation in web.WorkflowAssociations
                                                        where workflowAssociation.Enabled
                                                        select workflowAssociation)
                {
                    current.Enabled = false;
                    current.Update();
                    list.Add(current.Id.ToString());
                }
                foreach (WorkflowAssociation current2 in web.Lists.SelectMany((List list9) => from workflowAssociation in list9.WorkflowAssociations
                                                                                              where workflowAssociation.Enabled
                                                                                              select workflowAssociation))
                {
                    current2.Enabled = false;
                    current2.Update();
                    list.Add(current2.Id.ToString());
                }
                CSOMAdapter.CallExecuteQuery(clientContext, this);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                operationReporting.LogError(ex, "Exception when attempting to disable workflows before site content migration.");
            }
            if (list.Count > 0)
            {
                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                foreach (string current3 in list)
                {
                    stringBuilder.Append(current3);
                    stringBuilder.Append(' ');
                }
                operationReporting.LogInformation(XmlElementNames.DisableSiteAndListWorkflows.ToString(), stringBuilder.ToString().TrimEnd(new char[0]));
            }
            operationReporting.End();
            return operationReporting.ResultXml;
        }

        private void ClearDefaultSiteData(ClientContext clientContext, Web web)
        {
            if (web == null)
            {
                return;
            }
            this.ClearTeamSiteWikiField(clientContext, web);
        }

        private void ClearTeamSiteWikiField(ClientContext clientContext, Web oWeb)
        {
            if (base.SharePointVersion.IsSharePoint2010OrLater && oWeb.WebTemplate.Equals("STS", System.StringComparison.InvariantCultureIgnoreCase))
            {
                System.Guid gWikiPageHomePageFeature = new System.Guid("00bfea71-d8fe-4fec-8dad-01c19a6e4053");
                FeatureCollection features = oWeb.Features;
                clientContext.Load<FeatureCollection>(features, new System.Linq.Expressions.Expression<System.Func<FeatureCollection, object>>[]
                {
                    (FeatureCollection features2) => from feature in features2
                        where feature.DefinitionId == gWikiPageHomePageFeature
                        select feature
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                if (features.Count > 0)
                {
                    string welcomePageFromRootFolder = this.GetWelcomePageFromRootFolder(oWeb);
                    string serverRelativeUrl = oWeb.ServerRelativeUrl + "/" + welcomePageFromRootFolder;
                    Microsoft.SharePoint.Client.File file = oWeb.GetFileByServerRelativeUrl(serverRelativeUrl);
                    try
                    {
                        clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                        {
                            (Microsoft.SharePoint.Client.File file2) => file2.Title
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        file = null;
                    }
                    if (file == null)
                    {
                        throw new System.Exception("Could not retrieve default page of site.");
                    }
                    if (this.HasUnderlyingItem(clientContext, file) && this.IsWikiPage(file) && this.IsWebPartExistsOnPage(clientContext, file))
                    {
                        file.ListItemAllFields["WikiField"] = "<table id=\"layoutsTable\" style=\"width: 100%\"> \r\n                                                                                    <tbody> \r\n                                                                                        <tr style=\"vertical-align: top\"> \r\n                                                                                            <td style=\"width: 66.6%\"> \r\n                                                                                                <div class=\"ms-rte-layoutszone-outer\" style=\"width: 100%\"> \r\n                                                                                                    <div class=\"ms-rte-layoutszone-inner\" style=\"min-height: 60px; word-wrap: break-word\">                              \r\n                                                                                                    </div> \r\n                                                                                                </div> \r\n                                                                                            </td> \r\n                                                                                            <td style=\"width: 33.3%\"> \r\n                                                                                                <div class=\"ms-rte-layoutszone-outer\" style=\"width: 100%\"> \r\n                                                                                                    <div class=\"ms-rte-layoutszone-inner\" style=\"min-height: 60px; word-wrap: break-word\">                             \r\n                                                                                                    </div> \r\n                                                                                                </div> \r\n                                                                                            </td> \r\n                                                                                        </tr> \r\n                                                                                    </tbody> \r\n                                                                                </table><span id=\"layoutsData\" style=\"display:none\">false,false,2</span>";
                        this.UpdateListItems(file.ListItemAllFields);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        return;
                    }
                }
            }
        }

        private bool IsWebPartExistsOnPage(ClientContext clientContext, Microsoft.SharePoint.Client.File defaultPage)
        {
            bool result;
            try
            {
                LimitedWebPartManager limitedWebPartManager = defaultPage.GetLimitedWebPartManager(PersonalizationScope.Shared);
                clientContext.Load<WebPartDefinitionCollection>(limitedWebPartManager.WebParts, new System.Linq.Expressions.Expression<System.Func<WebPartDefinitionCollection, object>>[]
                {
                    (WebPartDefinitionCollection webPart) => webPart.Include(new System.Linq.Expressions.Expression<System.Func<WebPartDefinition, object>>[]
                    {
                        (WebPartDefinition field) => (object)field.Id
                    })
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                result = (limitedWebPartManager.WebParts.Count > 0);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = false;
            }
            return result;
        }

        private bool HasUnderlyingItem(ClientContext clientContext, Microsoft.SharePoint.Client.File defaultPage)
        {
            bool result;
            try
            {
                clientContext.Load<Microsoft.SharePoint.Client.File>(defaultPage, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[]
                {
                    (Microsoft.SharePoint.Client.File file) => file.ListItemAllFields
                });
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                result = true;
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                System.Diagnostics.Trace.WriteLine("Metalogix.SharePoint.Adapters.CSOM2013.CSOM2013Adapter.WebsWriter 'HasUnderlyingItem' just ate an exception. Exception : " + ex.ToString());
                result = false;
            }
            return result;
        }

        private bool IsWikiPage(Microsoft.SharePoint.Client.File defaultPage)
        {
            return defaultPage.ListItemAllFields != null && defaultPage.ListItemAllFields.FieldValues.Count > 0 && defaultPage.ListItemAllFields.FieldValues.ContainsKey("WikiField");
        }

        private void UpdateWebProperties(ClientContext clientContext, Web web, System.Xml.XmlNode webXML, IUpdateWebOptions updateWebOptions, int iLocaleNew, OperationReporting opResult = null)
        {
            System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
            if (updateWebOptions.CopyAssociatedGroupSettings && webXML.Attributes != null && !clientContext.Site.RootWeb.WebTemplate.StartsWith("SPSPERS", System.StringComparison.InvariantCultureIgnoreCase))
            {
                try
                {
                    if (webXML.Attributes["OwnerGroup"] != null)
                    {
                        string value = webXML.Attributes["OwnerGroup"].Value;
                        if (!string.IsNullOrEmpty(value))
                        {
                            Microsoft.SharePoint.Client.Group groupByTitle = this.GetGroupByTitle(web.SiteGroups, value);
                            if (groupByTitle != null)
                            {
                                web.AssociatedOwnerGroup = groupByTitle;
                            }
                        }
                    }
                    else if (web.AssociatedOwnerGroup != null)
                    {
                        list.Add(web.AssociatedOwnerGroup.Title);
                    }
                    if (webXML.Attributes["MemberGroup"] != null)
                    {
                        string value2 = webXML.Attributes["MemberGroup"].Value;
                        if (!string.IsNullOrEmpty(value2))
                        {
                            Microsoft.SharePoint.Client.Group groupByTitle2 = this.GetGroupByTitle(web.SiteGroups, value2);
                            if (groupByTitle2 != null)
                            {
                                web.AssociatedMemberGroup = groupByTitle2;
                            }
                        }
                    }
                    else if (web.AssociatedMemberGroup != null)
                    {
                        list.Add(web.AssociatedMemberGroup.Title);
                    }
                    if (webXML.Attributes["VisitorGroup"] != null)
                    {
                        string value3 = webXML.Attributes["VisitorGroup"].Value;
                        if (!string.IsNullOrEmpty(value3))
                        {
                            Microsoft.SharePoint.Client.Group groupByTitle3 = this.GetGroupByTitle(web.SiteGroups, value3);
                            if (groupByTitle3 != null)
                            {
                                web.AssociatedVisitorGroup = groupByTitle3;
                            }
                        }
                    }
                    else if (web.AssociatedVisitorGroup != null)
                    {
                        list.Add(web.AssociatedVisitorGroup.Title);
                    }
                    web.Update();
                    CSOMAdapter.CallExecuteQuery(web.Context, this);
                    if (webXML.Attributes["AssociateGroups"] != null && !string.IsNullOrEmpty(webXML.Attributes["AssociateGroups"].Value))
                    {
                        string[] array = webXML.Attributes["AssociateGroups"].Value.Trim().Split(new char[]
                        {
                            ';'
                        }, System.StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 0; i < array.Length; i++)
                        {
                            string item = array[i];
                            if (!list.Contains(item))
                            {
                                list.Add(item);
                            }
                        }
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web w) => w.AllProperties["vti_associategroups"]
                        });
                        CSOMAdapter.CallExecuteQuery(web.Context, this);
                        web.AllProperties["vti_associategroups"] = this.GetAssociateGroupIDs(list);
                        web.Update();
                        CSOMAdapter.CallExecuteQuery(web.Context, this);
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (opResult == null)
                    {
                        throw;
                    }
                    opResult.LogError(ex, string.Format("Error occured while updating associated group setting for web '{0}'", web.Url));
                }
            }
            if (updateWebOptions.CopyNavigation)
            {
                try
                {
                    this.ModifyWebNavigationSettings(clientContext, web, webXML);
                }
                catch (System.Exception ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (opResult == null)
                    {
                        throw;
                    }
                    opResult.LogError(ex2, string.Format("Error occured while updating navigation settings for web '{0}'", web.Url));
                }
            }
            if (updateWebOptions.CopyCoreMetaData)
            {
                try
                {
                    if (!base.SharePointVersion.IsSharePoint2013)
                    {
                        this.UpdateRegionalSettings(clientContext, web, webXML, iLocaleNew, opResult);
                    }
                    this.UpdateRssSettings(clientContext, web, webXML);
                    this.UpdateLogoUrlAndDescriptionUsingASPX(web, webXML, opResult);
                    if (webXML.Attributes["AllowedWebTemplates"] != null)
                    {
                        web.AllProperties["__WebTemplates"] = webXML.GetAttributeValueAsString("AllowedWebTemplates");
                    }
                    if (webXML.Attributes["InheritWebTemplates"] != null)
                    {
                        web.AllProperties["__InheritWebTemplates"] = webXML.GetAttributeValueAsString("InheritWebTemplates");
                    }
                    if (webXML.Attributes["AllowedPageLayouts"] != null)
                    {
                        web.AllProperties["__PageLayouts"] = webXML.GetAttributeValueAsString("AllowedPageLayouts");
                    }
                    if (webXML.Attributes["DefaultPageLayout"] != null)
                    {
                        web.AllProperties["__DefaultPageLayout"] = webXML.GetAttributeValueAsString("DefaultPageLayout");
                    }
                    if (webXML.Attributes["AllowSpacesInNewPageName"] != null)
                    {
                        web.AllProperties["__AllowSpacesInNewPageName"] = webXML.GetAttributeValueAsString("AllowSpacesInNewPageName");
                    }
                }
                catch (System.Exception ex3)
                {
                    CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    if (opResult == null)
                    {
                        throw;
                    }
                    opResult.LogError(ex3, string.Format("Error occured while updating core metadata settings for web '{0}'", web.Url));
                }
            }
            if (base.SharePointVersion.IsSharePoint2013OrLater)
            {
                this.UpdateCommunitySiteProperties(web, webXML);
            }
            if (base.SharePointVersion.IsSharePointOnline || base.SharePointVersion.IsSharePoint2016OrLater)
            {
                this.AddSupportedUICulture(clientContext, web, webXML, opResult);
                this.AddLanguageResourcesForWeb(web, webXML, opResult);
            }
            clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
            {
                (Web w) => w.Url
            });
            web.Update();
            CSOMAdapter.CallExecuteQuery(web.Context, this);
            updateWebOptions.CopyAssociatedGroupSettings = false;
            updateWebOptions.CopyNavigation = false;
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.ReleaseCookieLock();
            }
            try
            {
                this.NWSAdapter.UpdateWebProperties(web.Url, webXML, updateWebOptions, false);
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.AquireCookieLock();
                }
            }
        }

        private void UpdateCommunitySiteProperties(Web web, System.Xml.XmlNode webXML)
        {
            try
            {
                System.Xml.XmlNode xmlNode = webXML.SelectSingleNode("//CommunitySiteProperties");
                if (xmlNode != null)
                {
                    string attributeValueAsString = xmlNode.GetAttributeValueAsString("Community_MembersCount");
                    if (!string.IsNullOrEmpty(attributeValueAsString))
                    {
                        web.AllProperties["Community_MembersCount"] = attributeValueAsString;
                    }
                }
            }
            catch (System.Exception arg)
            {
                System.Diagnostics.Trace.WriteLine(string.Format("Error occurred while updating community site properties for web '{0}'. Error: {1}", web.Url, arg));
            }
        }

        private void AddLanguageResourcesForWeb(Web web, System.Xml.XmlNode webXML, OperationReporting opResult)
        {
            try
            {
                if (!string.IsNullOrEmpty(webXML.GetAttributeValueAsString("SupportedUICultures")))
                {
                    System.Xml.XmlNode xmlNode = webXML.SelectSingleNode("//LanguageResources");
                    if (xmlNode != null && xmlNode.ChildNodes.Count > 0 && xmlNode.GetAttributeValueAsBoolean(XmlAttributeNames.MigrateLanguageSettings.ToString()))
                    {
                        this.AddLanguageResources(xmlNode, web);
                    }
                }
            }
            catch (System.Exception ex)
            {
                string detail = string.Format("Error occurred while adding language resources for web : '{0}' ", web.Title);
                if (opResult != null)
                {
                    opResult.LogError(ex, detail);
                }
                else
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        private void AddSupportedUICulture(ClientContext clientContext, Web web, System.Xml.XmlNode webXML, OperationReporting opResult)
        {
            try
            {
                if (!string.IsNullOrEmpty(webXML.GetAttributeValueAsString("SupportedUICultures")))
                {
                    string[] array = webXML.GetAttributeValueAsString("SupportedUICultures").Split(new char[]
                    {
                        ','
                    });
                    if (array.Count<string>() > 0)
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web w) => (object)w.IsMultilingual
                        });
                        CSOMAdapter.CallExecuteQuery(web.Context, this);
                        if (!web.IsMultilingual)
                        {
                            web.IsMultilingual = true;
                        }
                        string[] array2 = array;
                        for (int i = 0; i < array2.Length; i++)
                        {
                            string text = array2[i];
                            if (opResult != null)
                            {
                                opResult.LogInformation("Language Settings", string.Format("Adding language setting '{0}' for web '{1}'", text, web.Url));
                            }
                            web.AddSupportedUILanguage(System.Convert.ToInt32(text));
                        }
                        web.OverwriteTranslationsOnChange = webXML.GetAttributeValueAsBoolean("OverwriteTranslationsOnChange");
                    }
                }
            }
            catch (System.Exception ex)
            {
                if (opResult != null)
                {
                    opResult.LogError(ex, string.Format("Error occurred while updating language setting for web '{0}'", web.Url));
                }
                else
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        private void AddLanguageResources(System.Xml.XmlNode languageResourcesNode, object obj)
        {
            string cultureName = string.Empty;
            string value = string.Empty;
            string value2 = string.Empty;
            foreach (System.Xml.XmlNode node in languageResourcesNode.ChildNodes)
            {
                cultureName = node.GetAttributeValueAsString("Culture");
                value = node.GetAttributeValueAsString("Title");
                value2 = node.GetAttributeValueAsString("Description");
                Web web = obj as Web;
                if (web != null)
                {
                    web.TitleResource.SetValueForUICulture(cultureName, value);
                    web.DescriptionResource.SetValueForUICulture(cultureName, value2);
                }
                else
                {
                    List list = obj as List;
                    if (list != null)
                    {
                        list.TitleResource.SetValueForUICulture(cultureName, value);
                        list.DescriptionResource.SetValueForUICulture(cultureName, value2);
                    }
                    else
                    {
                        ContentType contentType = obj as ContentType;
                        if (contentType != null)
                        {
                            contentType.NameResource.SetValueForUICulture(cultureName, value);
                            contentType.DescriptionResource.SetValueForUICulture(cultureName, value2);
                        }
                        else
                        {
                            Field field = obj as Field;
                            if (field != null)
                            {
                                field.TitleResource.SetValueForUICulture(cultureName, value);
                                field.DescriptionResource.SetValueForUICulture(cultureName, value2);
                            }
                        }
                    }
                }
            }
        }

        private void UpdateRegionalSettings(ClientContext clientContext, Web web, System.Xml.XmlNode webXML, int locale, OperationReporting opResult)
        {
            try
            {
                if (webXML.Attributes["TimeZone"] != null)
                {
                    clientContext.Load<TimeZoneCollection>(web.RegionalSettings.TimeZones, new System.Linq.Expressions.Expression<System.Func<TimeZoneCollection, object>>[0]);
                    clientContext.ExecuteQuery();
                    Microsoft.SharePoint.Client.TimeZone timeZone = (from timezone in web.RegionalSettings.TimeZones
                                                                     where timezone.Id == webXML.GetAttributeValueAsInt("TimeZone")
                                                                     select timezone).FirstOrDefault<Microsoft.SharePoint.Client.TimeZone>();
                    if (timeZone != null)
                    {
                        web.RegionalSettings.TimeZone = timeZone;
                    }
                }
                web.RegionalSettings.LocaleId = System.Convert.ToUInt32(locale);
                if (webXML.Attributes["RegionalSortOrder"] != null)
                {
                    web.RegionalSettings.Collation = webXML.GetAttributeValueAsShortInt("RegionalSortOrder");
                }
                if (webXML.Attributes["Calendar"] != null)
                {
                    web.RegionalSettings.CalendarType = webXML.GetAttributeValueAsShortInt("Calendar");
                }
                if (webXML.Attributes["AlternateCalendar"] != null)
                {
                    web.RegionalSettings.ShowWeeks = webXML.GetAttributeValueAsBoolean("ShowWeeks");
                    web.RegionalSettings.AlternateCalendarType = webXML.GetAttributeValueAsShortInt("AlternateCalendar");
                    web.RegionalSettings.FirstWeekOfYear = webXML.GetAttributeValueAsShortInt("FirstWeekOfYear");
                    ushort num = System.Convert.ToUInt16(webXML.GetAttributeValueAsInt("FirstDayOfWeek"));
                    web.RegionalSettings.FirstDayOfWeek = (uint)(num % 7);
                    web.RegionalSettings.WorkDays = webXML.GetAttributeValueAsShortInt("WorkDays");
                    web.RegionalSettings.WorkDayStartHour = webXML.GetAttributeValueAsShortInt("WorkDayStartHour");
                    web.RegionalSettings.WorkDayEndHour = webXML.GetAttributeValueAsShortInt("WorkDayEndHour");
                }
                if (webXML.Attributes["TimeFormat"] != null)
                {
                    web.RegionalSettings.Time24 = webXML.GetAttributeValueAsBoolean("TimeFormat");
                }
                if (webXML.Attributes["AdjustHijriDays"] != null)
                {
                    web.RegionalSettings.AdjustHijriDays = webXML.GetAttributeValueAsShortInt("AdjustHijriDays");
                }
            }
            catch (System.Exception ex)
            {
                if (opResult != null)
                {
                    opResult.LogError(ex, string.Format("Error occurred while updating regional setting for web '{0}'", web.Url));
                }
                else
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                }
            }
        }

        private void UpdateLogoUrlAndDescriptionUsingASPX(Web web, System.Xml.XmlNode webXmlNode, OperationReporting opResult)
        {
            try
            {
                string text = webXmlNode.GetAttributeValueAsString("SiteLogoUrl");
                string text2 = webXmlNode.GetAttributeValueAsString("SiteLogoDescription");
                text = (string.IsNullOrEmpty(text) ? string.Empty : text.Trim());
                text2 = (string.IsNullOrEmpty(text2) ? string.Empty : text2.Trim());
                if (!string.IsNullOrEmpty(text) || !string.IsNullOrEmpty(text2))
                {
                    string pageUrl = string.Format("{0}/{1}", web.Url, "_layouts/15/prjsetng.aspx");
                    string text3 = string.Empty;
                    string responseStringFromPost = this.GetResponseStringFromPost(pageUrl, text3, string.Empty, web.Url);
                    System.Collections.Generic.Dictionary<string, string> dictionary = HttpHelper.PopulateParametersFromForm(responseStringFromPost);
                    if (!string.IsNullOrEmpty(text))
                    {
                        dictionary["ctl00$PlaceHolderMain$logoSection$ctl03$TxtSiteLogoUrl"] = text;
                    }
                    if (!string.IsNullOrEmpty(text2))
                    {
                        dictionary["ctl00$PlaceHolderMain$logoSection$ctl04$TxtLogoUrlDescription"] = text2;
                    }
                    text3 = HttpHelper.GetPostDataFromForm(dictionary);
                    string digest = dictionary["__REQUESTDIGEST"];
                    string stringToEscape = "ctl00$PlaceHolderMain$ctl00$RptControls$BtnCreate";
                    text3 += string.Format("&__EVENTTARGET={0}&__EVENTARGUMENT=", System.Uri.EscapeDataString(stringToEscape));
                    this.GetResponseStringFromPost(pageUrl, text3, digest, web.Url);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (opResult != null)
                {
                    opResult.LogError(ex, string.Format("Error occurred while updating site logo url and description for web '{0}'", web.Url));
                }
            }
        }

        private void UpdateRssSettings(ClientContext clientContext, Web web, System.Xml.XmlNode webXML)
        {
            if (webXML.Attributes["AllowRSSFeeds"] != null)
            {
                web.SyndicationEnabled = webXML.GetAttributeValueAsBoolean("AllowRSSFeeds");
            }
            if (!web.AllProperties.FieldValues.ContainsKey("vti_rss_Copyright"))
            {
                web.AllProperties.FieldValues.Add("vti_rss_Copyright", webXML.GetAttributeValueAsString("RssCopyright"));
            }
            web.AllProperties["vti_rss_Copyright"] = webXML.GetAttributeValueAsString("RssCopyright");
            if (!web.AllProperties.FieldValues.ContainsKey("vti_rss_ManagingEditor"))
            {
                web.AllProperties.FieldValues.Add("vti_rss_ManagingEditor", webXML.GetAttributeValueAsString("RssManagingEditor"));
            }
            web.AllProperties["vti_rss_ManagingEditor"] = webXML.GetAttributeValueAsString("RssManagingEditor");
            if (!web.AllProperties.FieldValues.ContainsKey("vti_rss_WebMaster"))
            {
                web.AllProperties.FieldValues.Add("vti_rss_WebMaster", webXML.GetAttributeValueAsString("RssWebMaster"));
            }
            web.AllProperties["vti_rss_WebMaster"] = webXML.GetAttributeValueAsString("RssWebMaster");
            int num = 0;
            if (webXML.Attributes["RssTimeToLive"] != null && int.TryParse(webXML.Attributes["RssTimeToLive"].Value, out num))
            {
                if (!web.AllProperties.FieldValues.ContainsKey("vti_rss_TimeToLive"))
                {
                    web.AllProperties.FieldValues.Add("vti_rss_TimeToLive", num);
                }
                web.AllProperties["vti_rss_TimeToLive"] = num;
            }
        }

        private string GetAssociateGroupIDs(System.Collections.Generic.List<string> groupNames)
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(groupNames.Count * 5);
            foreach (string current in groupNames)
            {
                int iDFromGroup = this.GetIDFromGroup(current);
                if (iDFromGroup > 0)
                {
                    stringBuilder.AppendFormat("{0};", iDFromGroup);
                }
            }
            return stringBuilder.ToString().TrimEnd(new char[]
            {
                ';'
            });
        }

        private void DeleteWeb(ClientContext ctx, Web web)
        {
            ctx.Load<WebCollection>(web.Webs, new System.Linq.Expressions.Expression<System.Func<WebCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            for (int i = web.Webs.Count - 1; i >= 0; i--)
            {
                Web web2 = web.Webs[i];
                this.DeleteWeb(ctx, web2);
            }
            try
            {
                web.DeleteObject();
                CSOMAdapter.CallExecuteQuery(web.Context, this);
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.ServerErrorCode != -2130245308)
                {
                    throw;
                }
                ListCollection lists = web.Lists;
                ctx.Load<ListCollection>(lists, new System.Linq.Expressions.Expression<System.Func<ListCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
                for (int j = lists.Count - 1; j >= 0; j--)
                {
                    this.DeleteList(ctx, lists[j]);
                }
                web.DeleteObject();
                CSOMAdapter.CallExecuteQuery(web.Context, this);
            }
        }

        public string DeleteWeb(string sServerRelativeUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Site.OpenWeb(sServerRelativeUrl);
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    this.DeleteWeb(clientContext, web);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string AddOrUpdateContentType(string sContentTypeXML, string sParentContentTypeName)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(sContentTypeXML);
                System.Xml.XmlNode xmlNode = xmlDocument.SelectSingleNode("//ContentType");
                if (xmlNode == null)
                {
                    throw new System.ArgumentException("The given content type xml is not valid");
                }
                using (ClientContext clientContext = this.GetClientContext())
                {
                    bool isTargetWebMultilingual = false;
                    string sName = xmlNode.Attributes["Name"].Value;
                    string ctIDString = (xmlNode.Attributes["ID"] != null) ? xmlNode.Attributes["ID"].Value : null;
                    System.Collections.Generic.List<string> list = new System.Collections.Generic.List<string>();
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web4) => from ct in web4.ContentTypes.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                            {
                                (ContentType ct) => ct.Name,
                                (ContentType ct) => ct.Id,
                                (ContentType ct) => ct.FieldLinks,
                                (ContentType ct) => ct.Fields
                            })
                            where ct.Id.StringValue == ctIDString || ct.Name == sName || ct.Name == sParentContentTypeName
                            select ct
                    });
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web5) => from ct in web5.AvailableContentTypes.Include(new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                            {
                                (ContentType ct) => ct.Name,
                                (ContentType ct) => ct.Id,
                                (ContentType ct) => ct.FieldLinks,
                                (ContentType ct) => ct.Fields
                            })
                            where ct.Id.StringValue == ctIDString || ct.Name == sName || ct.Name == sParentContentTypeName
                            select ct
                    });
                    FieldCollection availableFields = web.AvailableFields;
                    clientContext.Load<FieldCollection>(availableFields, new System.Linq.Expressions.Expression<System.Func<FieldCollection, object>>[]
                    {
                        (FieldCollection availableField) => availableField.SchemaXml
                    });
                    if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
                    {
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web w) => (object)w.IsMultilingual
                        });
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (base.SharePointVersion.IsSharePoint2016OrLater || base.SharePointVersion.IsSharePointOnline)
                    {
                        isTargetWebMultilingual = web.IsMultilingual;
                    }
                    ContentType contentType;
                    ContentType contentType2;
                    this.GetExistingContentTypesFromWeb(sName, ctIDString, web, out contentType, out contentType2);
                    if (contentType2 == null)
                    {
                        ContentType contentType3 = null;
                        if (!string.IsNullOrEmpty(sParentContentTypeName))
                        {
                            contentType3 = this.GetContentTypeByName(web.AvailableContentTypes, sParentContentTypeName);
                        }
                        if (contentType3 == null)
                        {
                            contentType3 = this.GetParentContentType(web.AvailableContentTypes, xmlNode.Attributes["ID"].Value);
                        }
                        if (contentType3 != null)
                        {
                            ContentTypeCreationInformation contentTypeCreationInformation = new ContentTypeCreationInformation();
                            contentTypeCreationInformation.Name = sName;
                            contentTypeCreationInformation.ParentContentType = contentType3;
                            contentType = web.ContentTypes.Add(contentTypeCreationInformation);
                            clientContext.Load<ContentType>(contentType, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                            {
                                (ContentType ct) => ct.Name,
                                (ContentType ct) => ct.Id,
                                (ContentType ct) => ct.FieldLinks,
                                (ContentType ct) => ct.Fields
                            });
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                        }
                        else if (contentType == null)
                        {
                            throw new System.Exception("Cannot add content type to list. The parent content type does not exist on the target site.");
                        }
                    }
                    if (contentType != null)
                    {
                        System.Xml.XmlNode xmlNode2 = xmlNode.Attributes["Description"];
                        if (xmlNode2 != null)
                        {
                            contentType.Description = xmlNode2.Value;
                        }
                        System.Xml.XmlNode xmlNode3 = xmlNode.Attributes["Group"];
                        if (xmlNode3 != null)
                        {
                            contentType.Group = xmlNode3.Value;
                        }
                        System.Collections.Generic.List<string> list2 = new System.Collections.Generic.List<string>();
                        FieldCollection arg_A02_0 = contentType.Fields;
                        System.Xml.XmlDocument xmlDocument2 = new System.Xml.XmlDocument();
                        xmlDocument2.LoadXml(web.AvailableFields.SchemaXml);
                        System.Xml.XmlNodeList xmlNodeList = xmlNode.SelectNodes(".//FieldRefs/FieldRef");
                        foreach (System.Xml.XmlNode xmlNode4 in xmlNodeList)
                        {
                            bool flag = string.Equals(xmlNode4.GetAttributeValueAsString("Exclude"), "True", System.StringComparison.OrdinalIgnoreCase);
                            string text = xmlNode4.Attributes["Name"].Value;
                            string text2 = (xmlNode4.Attributes["ID"] != null) ? xmlNode4.Attributes["ID"].Value : string.Empty;
                            FieldLink fieldLink = this.GetFieldLink(contentType.FieldLinks, text, text2);
                            if (!flag && fieldLink == null)
                            {
                                if (!string.IsNullOrEmpty(text2) && text.IndexOf("_x003A_", System.StringComparison.InvariantCultureIgnoreCase) > 0 && Utils.IsAdditionalLookupColumn(xmlDocument2, new System.Guid(text2), null))
                                {
                                    continue;
                                }
                                FieldLinkCreationInformation fieldLinkCreationInformation = new FieldLinkCreationInformation();
                                fieldLinkCreationInformation.Field = web.AvailableFields.GetById(new System.Guid(text2));
                                fieldLink = contentType.FieldLinks.Add(fieldLinkCreationInformation);
                                this.UpdateColumnSettings(xmlNode4, fieldLink);
                            }
                            else if (fieldLink != null)
                            {
                                this.UpdateColumnSettings(xmlNode4, fieldLink);
                            }
                            Field field = this.GetField(contentType.Fields, text, text2);
                            if (field != null && !field.InternalName.Equals(text, System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                text = field.InternalName;
                            }
                            if (!list2.Contains(text))
                            {
                                list2.Add(text);
                            }
                        }
                        System.Xml.XmlNodeList xmlNodeList2 = xmlNode.SelectNodes(".//Fields/Field");
                        if (xmlNodeList2.Count > 0)
                        {
                            System.Collections.Generic.List<Field> list3 = this.AddFieldsXML(clientContext, null, web.Fields, xmlNode.SelectSingleNode(".//Fields"), null);
                            foreach (Field current in list3)
                            {
                                FieldLinkCreationInformation fieldLinkCreationInformation2 = new FieldLinkCreationInformation();
                                fieldLinkCreationInformation2.Field = current;
                                contentType.FieldLinks.Add(fieldLinkCreationInformation2);
                            }
                        }
                        foreach (System.Xml.XmlNode xmlNode5 in xmlNodeList2)
                        {
                            string value = xmlNode5.Attributes["Name"].Value;
                            if (!list2.Contains(value))
                            {
                                list2.Add(value);
                            }
                        }
                        System.Collections.Generic.List<FieldLink> list4 = new System.Collections.Generic.List<FieldLink>();
                        foreach (FieldLink current2 in contentType.FieldLinks)
                        {
                            if (current2.IsPropertyAvailable("Name") && !list2.Contains(current2.Name) && !list2.Contains(current2.Id.ToString()) && Utils.GetFieldNodeById(xmlNodeList, current2.Id) == null)
                            {
                                list4.Add(current2);
                            }
                        }
                        foreach (FieldLink current3 in list4)
                        {
                            current3.DeleteObject();
                        }
                        contentType.FieldLinks.Reorder(list2.ToArray());
                        contentType.Update(true);
                    }
                    if (contentType == null && contentType2 != null)
                    {
                        contentType = contentType2;
                    }
                    if (contentType == null)
                    {
                        throw new System.Exception("Failed to add ContentType: " + sName);
                    }
                    this.AddLanguageResourcesForContentType(contentType, xmlNode, isTargetWebMultilingual);
                    clientContext.Load<ContentType>(contentType, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                    {
                        (ContentType ct) => ct.Name,
                        (ContentType ct) => ct.Id,
                        (ContentType ct) => ct.Description,
                        (ContentType ct) => ct.DocumentTemplate,
                        (ContentType ct) => ct.DocumentTemplateUrl,
                        (ContentType ct) => ct.Group,
                        (ContentType ct) => (object)ct.Hidden,
                        (ContentType ct) => (object)ct.ReadOnly,
                        (ContentType ct) => ct.Fields,
                        (ContentType ct) => ct.FieldLinks,
                        (ContentType ct) => ct.WorkflowAssociations,
                        (ContentType ct) => ct.SchemaXml
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
                    {
                        xmlWriter.WriteStartElement("AddOrUpdateContentType");
                        xmlWriter.WriteStartElement("Results");
                        xmlWriter.WriteAttributeString("Failures", list.Count.ToString());
                        foreach (string current4 in list)
                        {
                            xmlWriter.WriteStartElement("Failure");
                            xmlWriter.WriteAttributeString("ContentTypeName", current4);
                            xmlWriter.WriteEndElement();
                        }
                        xmlWriter.WriteEndElement();
                        this.GetContentTypeXML(clientContext, contentType, xmlWriter);
                        xmlWriter.WriteEndElement();
                        xmlWriter.Flush();
                    }
                    result = stringBuilder.ToString();
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.Message.Contains("is sealed.") || ex.Message.Contains("is read only."))
                {
                    throw new System.ArgumentException("ML-SPCT-ROS: " + ex.Message);
                }
                throw;
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void AddLanguageResourcesForContentType(ContentType contentType, System.Xml.XmlNode ctNode, bool isTargetWebMultilingual)
        {
            try
            {
                if (isTargetWebMultilingual)
                {
                    System.Xml.XmlNode xmlNode = ctNode.SelectSingleNode("//LanguageResources");
                    if (xmlNode != null && xmlNode.ChildNodes.Count > 0 && xmlNode.GetAttributeValueAsBoolean(XmlAttributeNames.MigrateLanguageSettings.ToString()))
                    {
                        this.AddLanguageResources(xmlNode, contentType);
                        contentType.Update(true);
                    }
                }
            }
            catch (System.Exception ex)
            {
                string message = string.Format("Error occurred while adding language resources for field : '{0}'. Error: '{1}' ", contentType.Name, ex.ToString());
                System.Diagnostics.Trace.WriteLine(message);
            }
        }

        private void EnsureTaxonomyRelatedFieldsPresent(Field referencedField, ref System.Collections.Generic.List<string> fieldNameList)
        {
            if (this.HasTaxonomySupport())
            {
                TaxonomyField taxonomyField = referencedField as TaxonomyField;
                if (taxonomyField != null)
                {
                    string item = taxonomyField.TextField.ToString();
                    if (!fieldNameList.Contains(item))
                    {
                        fieldNameList.Add(item);
                    }
                    if (!fieldNameList.Contains("TaxCatchAll"))
                    {
                        fieldNameList.Add("TaxCatchAll");
                    }
                    if (!fieldNameList.Contains("TaxCatchAllLabel"))
                    {
                        fieldNameList.Add("TaxCatchAllLabel");
                    }
                }
            }
        }

        private void GetExistingContentTypesFromWeb(string name, string id, Web targetWeb, out ContentType existing, out ContentType available)
        {
            existing = null;
            available = null;
            bool flag = false;
            foreach (ContentType current in targetWeb.ContentTypes)
            {
                if (string.Equals(current.Id.StringValue, id, System.StringComparison.OrdinalIgnoreCase))
                {
                    existing = current;
                    flag = true;
                    break;
                }
                if (string.Equals(current.Name, name, System.StringComparison.OrdinalIgnoreCase))
                {
                    existing = current;
                }
            }
            if (flag)
            {
                available = existing;
                return;
            }
            foreach (ContentType current2 in targetWeb.AvailableContentTypes)
            {
                if (string.Equals(current2.Id.StringValue, id, System.StringComparison.OrdinalIgnoreCase))
                {
                    available = current2;
                    existing = null;
                    break;
                }
                if (string.Equals(current2.Name, name, System.StringComparison.OrdinalIgnoreCase))
                {
                    available = current2;
                }
            }
        }

        private ContentType GetContentTypeByName(ContentTypeCollection collection, string contentTypeName)
        {
            ContentType result = null;
            foreach (ContentType current in collection)
            {
                if (string.Equals(current.Name, contentTypeName, System.StringComparison.OrdinalIgnoreCase))
                {
                    result = current;
                    break;
                }
            }
            return result;
        }

        private ContentType GetContentTypeByID(ContentTypeCollection contentTypeCollection, string contentTypeID)
        {
            System.Linq.IQueryable<ContentType> source = from ct in contentTypeCollection
                                                         where ct.StringId.Equals(contentTypeID, System.StringComparison.InvariantCultureIgnoreCase)
                                                         select ct;
            if (source.Count<ContentType>() > 0)
            {
                return source.FirstOrDefault<ContentType>();
            }
            return null;
        }

        private ContentType GetParentContentType(ContentTypeCollection collection, string id)
        {
            ContentType result = null;
            int num = 0;
            foreach (ContentType current in collection)
            {
                string text = current.Id.ToString();
                if (id.StartsWith(text) && text.Length > num)
                {
                    result = current;
                    num = text.Length;
                }
            }
            return result;
        }

        public string AddDocumentTemplatetoContentType(byte[] docTemplate, string cTypeXml, string url)
        {
            string text;
            string documentTemplate;
            UrlUtils.SplitOnLastSlash(url, out text, out documentTemplate);
            StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(this, url);
            url = standardizedUrl.ServerRelative;
            System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(cTypeXml).SelectSingleNode("//ContentType");
            if (xmlNode == null)
            {
                throw new System.ArgumentException("The given content type xml is not valid");
            }
            string value = xmlNode.Attributes["ID"].Value;
            string text2 = (xmlNode.Attributes["ListID"] != null) ? xmlNode.Attributes["ListID"].Value : null;
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    string serverRelativeUrl;
                    string text3;
                    UrlUtils.SplitOnLastSlash(url, out serverRelativeUrl, out text3);
                    Folder folderByServerRelativeUrl = clientContext.Web.GetFolderByServerRelativeUrl(serverRelativeUrl);
                    this.AddFileToFolder(clientContext, folderByServerRelativeUrl, url, docTemplate, this);
                    ContentType byId;
                    if (string.IsNullOrEmpty(text2))
                    {
                        byId = clientContext.Web.ContentTypes.GetById(value);
                    }
                    else
                    {
                        List byId2 = clientContext.Web.Lists.GetById(new System.Guid(text2));
                        byId = byId2.ContentTypes.GetById(value);
                    }
                    clientContext.Load<ContentType>(byId, new System.Linq.Expressions.Expression<System.Func<ContentType, object>>[]
                    {
                        (ContentType ct) => ct.Id,
                        (ContentType ct) => ct.DocumentTemplate,
                        (ContentType ct) => (object)ct.ReadOnly
                    });
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    bool readOnly = byId.ReadOnly;
                    if (byId.ReadOnly)
                    {
                        byId.ReadOnly = false;
                        byId.Update(false);
                    }
                    byId.DocumentTemplate = documentTemplate;
                    if (byId.ReadOnly != readOnly)
                    {
                        byId.ReadOnly = readOnly;
                    }
                    byId.Update(false);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string AddFormTemplateToContentType(string targetListId, byte[] docTemplate, string cTypeXml, string changedLookupFields)
        {
            return this.NWSAdapter.AddFormTemplateToContentType(targetListId, docTemplate, cTypeXml, changedLookupFields);
        }

        public string AddSiteUser(string sUserXML, AddUserOptions options)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(sUserXML);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    if (firstChild.Attributes["LoginName"] == null)
                    {
                        throw new System.Exception("Could not add user. No login name specified.");
                    }
                    string text = firstChild.Attributes["LoginName"].Value;
                    string text2 = Utils.ConvertWinOrFormsUserToClaimString(text);
                    if (text == text2)
                    {
                        text = Utils.ConvertClaimStringUserToWinOrFormsUser(text);
                    }
                    User user = null;
                    try
                    {
                        user = web.EnsureUser(text2);
                        clientContext.Load<User>(user, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        user = null;
                    }
                    if (user == null)
                    {
                        user = web.EnsureUser(text);
                        clientContext.Load<User>(user, new System.Linq.Expressions.Expression<System.Func<User, object>>[0]);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    bool flag = false;
                    if (firstChild.Attributes["Email"] != null && !string.IsNullOrEmpty(firstChild.Attributes["Email"].Value))
                    {
                        user.Email = firstChild.Attributes["Email"].Value;
                        flag = true;
                    }
                    if (firstChild.Attributes["Name"] != null && !string.IsNullOrEmpty(firstChild.Attributes["Name"].Value))
                    {
                        user.Title = firstChild.Attributes["Name"].Value;
                        flag = true;
                    }
                    if (flag)
                    {
                        user.Update();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    this.AdapterData.AddUserMapping(user.LoginName, user.Id);
                    System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
                    System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
                    xmlTextWriter.WriteStartElement("User");
                    xmlTextWriter.WriteAttributeString("ID", user.Id.ToString());
                    string value = "";
                    if (user.UserId != null)
                    {
                        value = user.UserId.NameId;
                    }
                    xmlTextWriter.WriteAttributeString("SID", value);
                    xmlTextWriter.WriteAttributeString("IsSiteAdmin", user.IsSiteAdmin.ToString());
                    xmlTextWriter.WriteAttributeString("IsDomainGroup", (user.PrincipalType == PrincipalType.SecurityGroup || user.PrincipalType == PrincipalType.SharePointGroup).ToString());
                    xmlTextWriter.WriteAttributeString("LoginName", user.LoginName);
                    xmlTextWriter.WriteAttributeString("Name", user.Title);
                    xmlTextWriter.WriteAttributeString("Email", user.Email);
                    xmlTextWriter.WriteAttributeString("Notes", "");
                    xmlTextWriter.WriteEndElement();
                    result = stringWriter.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        public string AddOrUpdateGroup(string sGroupXml)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(new System.Text.StringBuilder(1024));
            System.Xml.XmlTextWriter xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter);
            try
            {
                XElement xElement = XElement.Parse(sGroupXml);
                string value = xElement.Attribute("Name").Value;
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Collections.Generic.List<int> list = new System.Collections.Generic.List<int>();
                    System.Collections.Generic.List<User> list2 = new System.Collections.Generic.List<User>();
                    System.Collections.Generic.List<string> list3 = new System.Collections.Generic.List<string>();
                    Microsoft.SharePoint.Client.GroupCollection siteGroups = clientContext.Web.SiteGroups;
                    UserCollection siteUsers = clientContext.Web.SiteUsers;
                    int iDFromGroup = this.GetIDFromGroup(value);
                    Microsoft.SharePoint.Client.Group group = null;
                    if (iDFromGroup >= 0)
                    {
                        group = siteGroups.GetById(iDFromGroup);
                    }
                    else
                    {
                        GroupCreationInformation parameters = new GroupCreationInformation
                        {
                            Title = value,
                            Description = xElement.Attribute("Description").Value
                        };
                        group = siteGroups.Add(parameters);
                    }
                    clientContext.Load<Microsoft.SharePoint.Client.Group>(group, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[0]);
                    clientContext.Load<UserCollection>(group.Users, new System.Linq.Expressions.Expression<System.Func<UserCollection, object>>[]
                    {
                        (UserCollection users) => users.Include(new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                        {
                            (User u) => (object)u.Id,
                            (User u) => u.LoginName
                        })
                    });
                    string value2 = xElement.Attribute("Owner").Value;
                    bool flag2;
                    bool flag = bool.TryParse(xElement.Attribute("OwnerIsUser").Value, out flag2) && flag2;
                    if (flag)
                    {
                        int iDFromUser = this.GetIDFromUser(value2);
                        if (iDFromUser >= 0)
                        {
                            clientContext.Load<User>(siteUsers.GetById(iDFromUser), new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                            {
                                (User u) => (object)u.Id,
                                (User u) => u.LoginName
                            });
                        }
                    }
                    else
                    {
                        int iDFromGroup2 = this.GetIDFromGroup(value2);
                        if (iDFromGroup2 >= 0)
                        {
                            clientContext.Load<Microsoft.SharePoint.Client.Group>(siteGroups.GetById(iDFromGroup2), new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[]
                            {
                                (Microsoft.SharePoint.Client.Group g) => g.LoginName
                            });
                        }
                    }
                    System.Collections.Generic.IEnumerable<XElement> source = xElement.Elements("Member");
                    int num = 100;
                    int num2 = 0;
                    if (source.Count<XElement>() == 0)
                    {
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                    else
                    {
                        while (source.Skip(num2).Take(num).Any<XElement>())
                        {
                            foreach (XElement current in source.Skip(num2).Take(num))
                            {
                                string value3 = current.Attribute("Login").Value;
                                int iDFromUser2 = this.GetIDFromUser(value3);
                                if (iDFromUser2 >= 0)
                                {
                                    list.Add(iDFromUser2);
                                    User byId = siteUsers.GetById(iDFromUser2);
                                    clientContext.Load<User>(byId, new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                                    {
                                        (User u) => (object)u.Id,
                                        (User u) => u.LoginName
                                    });
                                    list2.Add(byId);
                                }
                                else
                                {
                                    list3.Add(value3);
                                }
                            }
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            num2 += num;
                        }
                    }
                    this.AdapterData.AddGroupMapping(group.Title, group.Id);
                    Principal principal = null;
                    if (value == value2)
                    {
                        principal = group;
                    }
                    else if (flag)
                    {
                        int iDFromUser3 = this.GetIDFromUser(value2);
                        if (iDFromUser3 >= 0)
                        {
                            principal = siteUsers.GetById(iDFromUser3);
                        }
                    }
                    else
                    {
                        int iDFromGroup3 = this.GetIDFromGroup(value2);
                        if (iDFromGroup3 >= 0)
                        {
                            principal = siteGroups.GetById(iDFromGroup3);
                        }
                    }
                    if (principal == null)
                    {
                        principal = clientContext.Web.CurrentUser;
                    }
                    group.Owner = principal;
                    if (xElement.HasAttributes)
                    {
                        if (xElement.Attribute("OnlyAllowMembersViewMembership") != null)
                        {
                            group.OnlyAllowMembersViewMembership = (bool.TryParse(xElement.Attribute("OnlyAllowMembersViewMembership").Value, out flag2) && flag2);
                        }
                        if (xElement.Attribute("AllowMembersEditMembership") != null)
                        {
                            group.AllowMembersEditMembership = (bool.TryParse(xElement.Attribute("AllowMembersEditMembership").Value, out flag2) && flag2);
                        }
                        if (xElement.Attribute("AllowRequestToJoinLeave") != null)
                        {
                            group.AllowRequestToJoinLeave = (bool.TryParse(xElement.Attribute("AllowRequestToJoinLeave").Value, out flag2) && flag2);
                        }
                        if (xElement.Attribute("AutoAcceptRequestToJoinLeave") != null)
                        {
                            group.AutoAcceptRequestToJoinLeave = (bool.TryParse(xElement.Attribute("AutoAcceptRequestToJoinLeave").Value, out flag2) && flag2);
                        }
                        if (xElement.Attribute("RequestToJoinLeaveEmailSetting") != null)
                        {
                            group.RequestToJoinLeaveEmailSetting = xElement.Attribute("RequestToJoinLeaveEmailSetting").Value;
                        }
                    }
                    UserComparer comparer = new UserComparer();
                    System.Collections.Generic.IEnumerable<User> second = list2.Intersect(group.Users, comparer);
                    System.Collections.Generic.Dictionary<User, CSOMAdapter.BatchOperation> second2 = list2.Except(second, comparer).ToDictionary((User k) => k, (User v) => CSOMAdapter.BatchOperation.Add);
                    System.Collections.Generic.Dictionary<User, CSOMAdapter.BatchOperation> first = group.Users.ToList<User>().Except(second, comparer).ToDictionary((User k) => k, (User v) => CSOMAdapter.BatchOperation.Remove);
                    System.Collections.Generic.Dictionary<User, CSOMAdapter.BatchOperation> usersToAddOrRemove = first.Union(second2).ToDictionary((System.Collections.Generic.KeyValuePair<User, CSOMAdapter.BatchOperation> x) => x.Key, (System.Collections.Generic.KeyValuePair<User, CSOMAdapter.BatchOperation> x) => x.Value);
                    this.AddOrRemoveUsers(usersToAddOrRemove, group, clientContext, num);
                    group.Update();
                    clientContext.Load<Microsoft.SharePoint.Client.Group>(group, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[]
                    {
                        (Microsoft.SharePoint.Client.Group grp) => (object)grp.Id,
                        (Microsoft.SharePoint.Client.Group grp) => grp.Title,
                        (Microsoft.SharePoint.Client.Group grp) => grp.Description,
                        (Microsoft.SharePoint.Client.Group grp) => grp.Owner.LoginName,
                        (Microsoft.SharePoint.Client.Group grp) => (object)grp.Owner.PrincipalType,
                        (Microsoft.SharePoint.Client.Group grp) => (object)grp.OnlyAllowMembersViewMembership,
                        (Microsoft.SharePoint.Client.Group grp) => (object)grp.AllowMembersEditMembership,
                        (Microsoft.SharePoint.Client.Group grp) => (object)grp.AllowRequestToJoinLeave,
                        (Microsoft.SharePoint.Client.Group grp) => (object)grp.AutoAcceptRequestToJoinLeave,
                        (Microsoft.SharePoint.Client.Group grp) => grp.RequestToJoinLeaveEmailSetting,
                        (Microsoft.SharePoint.Client.Group grp) => grp.Users.Include(new System.Linq.Expressions.Expression<System.Func<User, object>>[]
                        {
                            (User u) => u.LoginName
                        })
                    });
                    this.SetGroupDescription(xElement, clientContext, group);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    xmlTextWriter.WriteStartElement("AddOrUpdateGroup");
                    xmlTextWriter.WriteStartElement("Results");
                    xmlTextWriter.WriteAttributeString("Failures", list3.Count.ToString());
                    foreach (string current2 in list3)
                    {
                        xmlTextWriter.WriteStartElement("Failure");
                        xmlTextWriter.WriteAttributeString("LoginName", current2);
                        xmlTextWriter.WriteEndElement();
                    }
                    this.WriteGroupXml(xmlTextWriter, group);
                    xmlTextWriter.WriteEndElement();
                    xmlTextWriter.WriteEndElement();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return stringWriter.ToString();
        }

        private void SetGroupDescription(XElement groupNode, ClientContext clientContext, Microsoft.SharePoint.Client.Group group)
        {
            try
            {
                ListItem itemById = clientContext.Web.SiteUserInfoList.GetItemById(group.Id);
                itemById["Notes"] = ((groupNode.Attribute("Description") != null) ? groupNode.Attribute("Description").Value : string.Empty);
                itemById.Update();
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
            }
        }

        private void AddOrRemoveUsers(System.Collections.Generic.Dictionary<User, CSOMAdapter.BatchOperation> usersToAddOrRemove, Microsoft.SharePoint.Client.Group group, ClientContext clientContext, int batchSize = 100)
        {
            if (usersToAddOrRemove.Count < 100)
            {
                using (System.Collections.Generic.Dictionary<User, CSOMAdapter.BatchOperation>.Enumerator enumerator = usersToAddOrRemove.GetEnumerator())
                {
                    while (enumerator.MoveNext())
                    {
                        System.Collections.Generic.KeyValuePair<User, CSOMAdapter.BatchOperation> current = enumerator.Current;
                        if (current.Value == CSOMAdapter.BatchOperation.Remove)
                        {
                            group.Users.Remove(current.Key);
                        }
                        else
                        {
                            group.Users.AddUser(current.Key);
                        }
                    }
                    return;
                }
            }
            int num = 0;
            while (usersToAddOrRemove.Skip(num).Take(batchSize).Any<System.Collections.Generic.KeyValuePair<User, CSOMAdapter.BatchOperation>>())
            {
                foreach (System.Collections.Generic.KeyValuePair<User, CSOMAdapter.BatchOperation> current2 in usersToAddOrRemove.Skip(num).Take(batchSize))
                {
                    if (current2.Value == CSOMAdapter.BatchOperation.Remove)
                    {
                        group.Users.Remove(current2.Key);
                    }
                    else
                    {
                        group.Users.AddUser(current2.Key);
                    }
                }
                CSOMAdapter.CallExecuteQuery(clientContext, this);
                num += batchSize;
            }
        }

        public string DeleteGroup(string sGroupName)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    Microsoft.SharePoint.Client.Group byName = web.SiteGroups.GetByName(sGroupName);
                    clientContext.Load<Microsoft.SharePoint.Client.Group>(byName, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.Group, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    if (byName != null)
                    {
                        web.SiteGroups.RemoveById(byName.Id);
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        this.AdapterData.RemoveGroupMapping(byName.Title);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string UpdateGroupQuickLaunch(string groups)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Xml.XmlNode xmlNode = XmlUtility.StringToXmlNode(groups);
                    string value = xmlNode.Attributes["AssociateGroups"].Value;
                    Web web = clientContext.Web;
                    clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                    {
                        (Web web6) => web6.AllProperties["vti_associategroups"]
                    });
                    System.Collections.Generic.List<string> groupNames = new System.Collections.Generic.List<string>(value.Split(new char[]
                    {
                        ';'
                    }, System.StringSplitOptions.RemoveEmptyEntries));
                    string associateGroupIDs = this.GetAssociateGroupIDs(groupNames);
                    web.AllProperties["vti_associategroups"] = associateGroupIDs;
                    web.Update();
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string AddOrUpdateRole(string sName, string sDescription, long lPermissionMask)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    RoleDefinitionCollection roleDefinitions = web.RoleDefinitions;
                    RoleDefinition roleDefinition = null;
                    try
                    {
                        roleDefinition = roleDefinitions.GetByName(sName);
                        clientContext.Load<RoleDefinition>(roleDefinition, new System.Linq.Expressions.Expression<System.Func<RoleDefinition, object>>[]
                        {
                            (RoleDefinition d) => d.BasePermissions,
                            (RoleDefinition d) => d.Name,
                            (RoleDefinition d) => (object)d.Hidden,
                            (RoleDefinition d) => d.Description,
                            (RoleDefinition d) => (object)d.Id,
                            (RoleDefinition d) => (object)d.Order,
                            (RoleDefinition d) => (object)d.RoleTypeKind
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        roleDefinition.Description = sDescription;
                        this.UpdateBasePermissionsFromMask(roleDefinition.BasePermissions, lPermissionMask);
                        roleDefinition.Update();
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        RoleDefinitionCreationInformation roleDefinitionCreationInformation = new RoleDefinitionCreationInformation();
                        roleDefinitionCreationInformation.Name = sName;
                        BasePermissions basePermissions = new BasePermissions();
                        this.UpdateBasePermissionsFromMask(basePermissions, lPermissionMask);
                        roleDefinitionCreationInformation.BasePermissions = basePermissions;
                        roleDefinitionCreationInformation.Description = sDescription;
                        roleDefinitions.Add(roleDefinitionCreationInformation);
                        roleDefinition = roleDefinitions.GetByName(sName);
                        clientContext.Load<RoleDefinition>(roleDefinition, new System.Linq.Expressions.Expression<System.Func<RoleDefinition, object>>[]
                        {
                            (RoleDefinition d) => d.BasePermissions,
                            (RoleDefinition d) => d.Name,
                            (RoleDefinition d) => (object)d.Hidden,
                            (RoleDefinition d) => d.Description,
                            (RoleDefinition d) => (object)d.Id,
                            (RoleDefinition d) => (object)d.Order,
                            (RoleDefinition d) => (object)d.RoleTypeKind
                        });
                    }
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                    using (System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder))
                    {
                        System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(stringWriter);
                        this.WriteRoleXML(roleDefinition, xmlWriter);
                    }
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void UpdateBasePermissionsFromMask(BasePermissions permissions, long permissionMask)
        {
            permissions.ClearAll();
            if (permissionMask == 0L)
            {
                permissions.Set(PermissionKind.EmptyMask);
                return;
            }
            if (permissionMask == 65L)
            {
                permissions.Set(PermissionKind.FullMask);
                return;
            }
            foreach (PermissionKind permissionKind in System.Enum.GetValues(typeof(PermissionKind)))
            {
                if (permissionKind != PermissionKind.FullMask && permissionKind != PermissionKind.EmptyMask)
                {
                    int num = (int)permissionKind;
                    long num2 = 1L << num - 1;
                    if ((permissionMask & num2) == num2)
                    {
                        permissions.Set(permissionKind);
                    }
                }
            }
        }

        public string DeleteRole(string sRoleName)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    RoleDefinition byName = web.RoleDefinitions.GetByName(sRoleName);
                    byName.DeleteObject();
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void AddFeatures(FeatureCollection featureCollection, ClientContext ctx, string sFeatureGuids, bool bMergeFeatures, bool bIgnorePublishingFeature)
        {
            string[] array = sFeatureGuids.Split(new char[]
            {
                ','
            }, System.StringSplitOptions.RemoveEmptyEntries);
            System.Collections.Generic.List<System.Guid> list = new System.Collections.Generic.List<System.Guid>(array.Length);
            System.Collections.Generic.List<System.Guid> list2 = new System.Collections.Generic.List<System.Guid>();
            string[] array2 = array;
            for (int i = 0; i < array2.Length; i++)
            {
                string g = array2[i];
                list.Add(new System.Guid(g));
            }
            bMergeFeatures = (bMergeFeatures || list.Contains(CSOMAdapter.RECORDSCENTERGUID));
            foreach (Feature current in featureCollection)
            {
                if (list.Contains(current.DefinitionId))
                {
                    list.Remove(current.DefinitionId);
                }
                else
                {
                    list2.Add(current.DefinitionId);
                }
            }
            if (!bMergeFeatures)
            {
                foreach (System.Guid current2 in list2)
                {
                    if (this.HasFeature(featureCollection, current2))
                    {
                        try
                        {
                            featureCollection.Remove(current2, true);
                            CSOMAdapter.CallExecuteQuery(ctx, this);
                        }
                        catch (ServerException ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            if (ex.ServerErrorCode != -1)
                            {
                                throw;
                            }
                        }
                    }
                }
            }
            if (bIgnorePublishingFeature && list.Contains(CSOMAdapter.PUBLISHINGGUID))
            {
                list.Remove(CSOMAdapter.PUBLISHINGGUID);
            }
            if (list.Contains(CSOMAdapter.RECORDSCENTERGUID))
            {
                list.Remove(CSOMAdapter.RECORDSCENTERGUID);
            }
            foreach (System.Guid current3 in list)
            {
                try
                {
                    featureCollection.Add(current3, false, FeatureDefinitionScope.Site);
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
                catch (System.Exception ex2)
                {
                    CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    try
                    {
                        featureCollection.Add(current3, false, FeatureDefinitionScope.None);
                        CSOMAdapter.CallExecuteQuery(ctx, this);
                    }
                    catch (System.Exception ex3)
                    {
                        CSOMAdapter.LogExceptionDetails(ex3, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    }
                }
            }
        }

        private bool HasFeature(FeatureCollection features, System.Guid featureGuid)
        {
            if (featureGuid != System.Guid.Empty)
            {
                foreach (Feature current in features)
                {
                    if (current.DefinitionId == featureGuid)
                    {
                        return true;
                    }
                }
                return false;
            }
            return false;
        }

        public string Apply2013Theme(string colorPaletteUrl, string spFontUrl, string bgImageUrl)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    Web web = clientContext.Web;
                    web.ApplyTheme(colorPaletteUrl, spFontUrl, bgImageUrl, false);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        public string SetWelcomePage(string sWelcomePage)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    this.SetWelcomePageOnRootFolder(clientContext, sWelcomePage);
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void SetWelcomePageOnRootFolder(ClientContext ctx, string sWelcomePage)
        {
            try
            {
                StandardizedUrl standardizedUrl = StandardizedUrl.StandardizeUrl(this, sWelcomePage);
                string serverRelative = standardizedUrl.ServerRelative;
                Microsoft.SharePoint.Client.File fileByServerRelativeUrl = ctx.Web.GetFileByServerRelativeUrl(serverRelative);
                ctx.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                CSOMAdapter.CallExecuteQuery(ctx, this);
                if (fileByServerRelativeUrl.Exists)
                {
                    Folder rootFolder = ctx.Web.RootFolder;
                    rootFolder.WelcomePage = sWelcomePage;
                    rootFolder.Update();
                    CSOMAdapter.CallExecuteQuery(ctx, this);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw ex;
            }
        }

        public string SetMasterPage(string sWebXML)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    clientContext.Load<Site>(clientContext.Site, new System.Linq.Expressions.Expression<System.Func<Site, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(clientContext, this);
                    Web web = clientContext.Site.OpenWeb(clientContext.Site.ServerRelativeUrl);
                    Web web2 = clientContext.Web;
                    System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                    xmlDocument.LoadXml(sWebXML);
                    System.Xml.XmlNode firstChild = xmlDocument.FirstChild;
                    bool flag = false;
                    Microsoft.SharePoint.Client.File file = null;
                    if (firstChild.Attributes["CustomMasterPage"] != null)
                    {
                        try
                        {
                            file = web.GetFileByServerRelativeUrl(firstChild.Attributes["CustomMasterPage"].Value);
                            clientContext.Load<Microsoft.SharePoint.Client.File>(file, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            if (file.Exists)
                            {
                                web2.CustomMasterUrl = file.ServerRelativeUrl;
                                flag = true;
                            }
                        }
                        catch (ServerException ex)
                        {
                            CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            if (ex.ServerErrorCode != -2147024894)
                            {
                                throw ex;
                            }
                        }
                    }
                    if (firstChild.Attributes["MasterPage"] != null)
                    {
                        try
                        {
                            Microsoft.SharePoint.Client.File fileByServerRelativeUrl = web.GetFileByServerRelativeUrl(firstChild.Attributes["MasterPage"].Value);
                            clientContext.Load<Microsoft.SharePoint.Client.File>(fileByServerRelativeUrl, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                            CSOMAdapter.CallExecuteQuery(clientContext, this);
                            if (fileByServerRelativeUrl.Exists)
                            {
                                web2.MasterUrl = fileByServerRelativeUrl.ServerRelativeUrl;
                                if (firstChild.Attributes["CustomMasterPage"] != null)
                                {
                                    web2.CustomMasterUrl = file.ServerRelativeUrl;
                                }
                                flag = true;
                            }
                        }
                        catch (ServerException ex2)
                        {
                            CSOMAdapter.LogExceptionDetails(ex2, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                            if (ex2.ServerErrorCode != -2147024894)
                            {
                                throw ex2;
                            }
                        }
                    }
                    if (flag)
                    {
                        web2.Update();
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                    }
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return string.Empty;
        }

        private void DeleteItemsFromRecycleBin()
        {
            using (ClientContext clientContext = this.GetClientContext(this, false))
            {
                RecycleBinItemCollection recycleBin = clientContext.Site.RecycleBin;
                recycleBin.DeleteAll();
                clientContext.ExecuteQuery();
            }
        }

        private void UpdateColumnSettings(System.Xml.XmlNode fieldRefNode, FieldLink existingfieldLink)
        {
            if (fieldRefNode.Attributes["Required"] != null)
            {
                bool attributeValueAsBoolean = fieldRefNode.GetAttributeValueAsBoolean("Required");
                if (!existingfieldLink.IsPropertyAvailable("Required") || existingfieldLink.Required != attributeValueAsBoolean)
                {
                    existingfieldLink.Required = attributeValueAsBoolean;
                }
            }
            if (fieldRefNode.Attributes["Hidden"] != null)
            {
                bool attributeValueAsBoolean2 = fieldRefNode.GetAttributeValueAsBoolean("Hidden");
                if (!existingfieldLink.IsPropertyAvailable("Hidden") || existingfieldLink.Hidden != attributeValueAsBoolean2)
                {
                    existingfieldLink.Hidden = attributeValueAsBoolean2;
                }
            }
        }

        public string HasWorkflows(string listID, string itemID)
        {
            return bool.FalseString;
        }

        public string GetWorkflowAssociations(string objectID, string objectScope)
        {
            if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
            {
                this.CookieManager.AquireCookieLock();
            }
            string result;
            try
            {
                using (ClientContext clientContext = this.GetClientContext())
                {
                    System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder(1024);
                    using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(stringBuilder, new System.Xml.XmlWriterSettings
                    {
                        OmitXmlDeclaration = true
                    }))
                    {
                        Web web = clientContext.Web;
                        clientContext.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                        {
                            (Web web2) => web2.Lists,
                            (Web web3) => (object)web3.Id,
                            (Web web4) => web4.Url,
                            (Web web5) => (object)web5.Language
                        });
                        CSOMAdapter.CallExecuteQuery(clientContext, this);
                        xmlWriter.WriteStartElement("WorkflowAssociations");
                        try
                        {
                            if (objectScope.Equals("list", System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                this.GetListWorkflowAssociation(objectID, web, clientContext, xmlWriter);
                            }
                            else if (objectScope.Equals("web", System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                this.GetWorkflowAssociationsXML(clientContext, web, xmlWriter);
                            }
                            else if (objectScope.Equals("contenttype", System.StringComparison.InvariantCultureIgnoreCase))
                            {
                                this.GetContentTypeWorkflowAssociation(objectID, web, clientContext, xmlWriter);
                            }
                            else
                            {
                                this.GetListContentTypeWorkflowAssociation(objectScope, objectID, web, clientContext, xmlWriter);
                            }
                        }
                        finally
                        {
                            xmlWriter.WriteEndElement();
                        }
                        xmlWriter.Flush();
                    }
                    result = stringBuilder.ToString();
                }
            }
            finally
            {
                if (base.HasActiveCookieManager && this.CookieManager.LockCookie)
                {
                    this.CookieManager.ReleaseCookieLock();
                }
            }
            return result;
        }

        private void GetListWorkflowAssociation(string objectID, Web currentWeb, ClientContext clientContext, System.Xml.XmlWriter xmlWriter)
        {
            List byId = currentWeb.Lists.GetById(new System.Guid(objectID));
            clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            if (byId == null)
            {
                this.WriteErrorElement(xmlWriter, string.Format("Unable to find list with Id '{0}' in site '{1}'", objectID, currentWeb.Url), null);
                return;
            }
            this.GetWorkflowAssociationsXML(clientContext, currentWeb, byId, xmlWriter);
        }

        private void GetContentTypeWorkflowAssociation(string objectID, Web currentWeb, ClientContext clientContext, System.Xml.XmlWriter xmlWriter)
        {
            ContentType contentTypeByID = this.GetContentTypeByID(clientContext, currentWeb.ContentTypes, objectID);
            if (contentTypeByID == null)
            {
                this.WriteErrorElement(xmlWriter, string.Format("Unable to find content type with Id '{0}' in site '{1}'", objectID, currentWeb.Url), null);
                return;
            }
            this.GetWorkflowAssociationsXML(clientContext, currentWeb, contentTypeByID, xmlWriter, null);
        }

        private void GetListContentTypeWorkflowAssociation(string objectScope, string objectID, Web currentWeb, ClientContext clientContext, System.Xml.XmlWriter xmlWriter)
        {
            List byId = currentWeb.Lists.GetById(new System.Guid(objectScope));
            clientContext.Load<List>(byId, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
            CSOMAdapter.CallExecuteQuery(clientContext, this);
            ContentType contentTypeByID = this.GetContentTypeByID(clientContext, byId.ContentTypes, objectID);
            if (contentTypeByID == null)
            {
                this.WriteErrorElement(xmlWriter, string.Format("Unable to find content type with Id '{0}' in List '{1}' within site '{2}'", objectID, (byId != null) ? string.Format("{0} ({1})", byId.Title, byId.Id) : objectScope, currentWeb.Url), null);
                return;
            }
            this.GetWorkflowAssociationsXML(clientContext, currentWeb, contentTypeByID, xmlWriter, byId.Id.ToString());
        }

        private void GetWorkflowAssociationsXML(ClientContext ctx, Web currentWeb, List workflowParent, System.Xml.XmlWriter xmlWriter)
        {
            ctx.Load<WorkflowAssociationCollection>(workflowParent.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            System.Guid defaultContentApprovalWorkflowId = System.Guid.Empty;
            if (workflowParent.BaseType == BaseType.DocumentLibrary)
            {
                defaultContentApprovalWorkflowId = workflowParent.DefaultContentApprovalWorkflowId;
            }
            foreach (WorkflowAssociation current in workflowParent.WorkflowAssociations)
            {
                this.WriteWorkflowXml(currentWeb, current, xmlWriter, workflowParent.Id.ToString(), workflowParent.Id.ToString(), null, defaultContentApprovalWorkflowId);
            }
        }

        private void GetWorkflowAssociationsXML(ClientContext ctx, Web workflowParent, System.Xml.XmlWriter xmlWriter)
        {
            ctx.Load<WorkflowAssociationCollection>(workflowParent.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            foreach (WorkflowAssociation current in workflowParent.WorkflowAssociations)
            {
                this.WriteWorkflowXml(workflowParent, current, xmlWriter, workflowParent.Id.ToString(), null, null, System.Guid.Empty);
            }
        }

        private void GetWorkflowAssociationsXML(ClientContext ctx, Web currentWeb, ContentType workflowParent, System.Xml.XmlWriter xmlWriter, string parentListID)
        {
            ctx.Load<WorkflowAssociationCollection>(workflowParent.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
            CSOMAdapter.CallExecuteQuery(ctx, this);
            foreach (WorkflowAssociation current in workflowParent.WorkflowAssociations)
            {
                this.WriteWorkflowXml(currentWeb, current, xmlWriter, workflowParent.StringId, parentListID, workflowParent.Name, System.Guid.Empty);
            }
        }

        private void WriteErrorElement(System.Xml.XmlWriter xmlWriter, string message, string stack)
        {
            if (!string.IsNullOrEmpty(message))
            {
                xmlWriter.WriteStartElement("Error");
                xmlWriter.WriteAttributeString("Message", message);
                if (!string.IsNullOrEmpty(stack))
                {
                    xmlWriter.WriteAttributeString("Stack", message);
                }
                xmlWriter.WriteEndElement();
            }
        }

        public string GetWorkflows(string sListID, int iItemID)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            operationReporting.LogWarning("Workflow instances not supported in CSOM", string.Empty);
            operationReporting.End();
            return operationReporting.ResultXml;
        }

        private WorkflowTemplate GetWorkflowTemplateByID(Web web, string worklowTemplateID)
        {
            System.Linq.IQueryable<WorkflowTemplate> source = from wfTemplate in web.WorkflowTemplates
                                                              where wfTemplate.Id == new System.Guid(worklowTemplateID)
                                                              select wfTemplate;
            if (source.Count<WorkflowTemplate>() > 0)
            {
                return source.FirstOrDefault<WorkflowTemplate>();
            }
            return null;
        }

        private WorkflowTemplate GetWorkflowTemplateByName(Web web, string worklowTemplateName)
        {
            WorkflowTemplate result;
            try
            {
                System.Linq.IQueryable<WorkflowTemplate> source = from wfTemplate in web.WorkflowTemplates
                                                                  where wfTemplate.Name.Equals(worklowTemplateName, System.StringComparison.OrdinalIgnoreCase)
                                                                  select wfTemplate;
                if (source.Any<WorkflowTemplate>())
                {
                    result = source.FirstOrDefault<WorkflowTemplate>();
                }
                else
                {
                    CSOMAdapter.LogMessageDetails(string.Format("Workflow Template '{0}' is not available on target", worklowTemplateName), System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    result = null;
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = null;
            }
            return result;
        }

        private WorkflowAssociation GetWorkflowAssociationByName(WorkflowAssociationCollection workflowAssociations, string wfAssociationName)
        {
            try
            {
                System.Linq.IQueryable<WorkflowAssociation> source = from wfAssociation in workflowAssociations
                                                                     where wfAssociation.Name.Equals(wfAssociationName, System.StringComparison.InvariantCultureIgnoreCase)
                                                                     select wfAssociation;
                if (source.Count<WorkflowAssociation>() > 0)
                {
                    return source.FirstOrDefault<WorkflowAssociation>();
                }
            }
            catch (ServerException ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                if (ex.ServerErrorCode != -2130575322)
                {
                    throw ex;
                }
            }
            return null;
        }

        private void WriteWorkflowXml(Web web, WorkflowAssociation wfa, System.Xml.XmlWriter xmlWriter, string parentID, string parentListID, string parentContentTypeName, System.Guid defaultContentApprovalWorkflowId)
        {
            if (!wfa.Enabled)
            {
                return;
            }
            xmlWriter.WriteStartElement("WorkflowAssociation");
            xmlWriter.WriteAttributeString("ParentID", parentID);
            xmlWriter.WriteAttributeString("AllowManual", wfa.AllowManual.ToString());
            xmlWriter.WriteAttributeString("AssociationData", wfa.AssociationData);
            xmlWriter.WriteAttributeString("AutoStartChange", wfa.AutoStartChange.ToString());
            xmlWriter.WriteAttributeString("AutoStartCreate", wfa.AutoStartCreate.ToString());
            xmlWriter.WriteAttributeString("BaseId", wfa.BaseId.ToString());
            xmlWriter.WriteAttributeString("Created", Utils.FormatDate(Utils.MakeTrueUTCDateTime(wfa.Created)));
            xmlWriter.WriteAttributeString("Modified", Utils.FormatDate(Utils.MakeTrueUTCDateTime(wfa.Modified)));
            xmlWriter.WriteAttributeString("Enabled", wfa.Enabled.ToString());
            xmlWriter.WriteAttributeString("Id", wfa.Id.ToString());
            xmlWriter.WriteAttributeString("IsDeclarative", wfa.IsDeclarative.ToString());
            xmlWriter.WriteAttributeString("Name", wfa.Name);
            xmlWriter.WriteAttributeString("BaseTemplate", wfa.BaseId.ToString());
            xmlWriter.WriteAttributeString("TaskListTitle", wfa.TaskListTitle);
            xmlWriter.WriteAttributeString("HistoryListTitle", wfa.HistoryListTitle);
            if (defaultContentApprovalWorkflowId != System.Guid.Empty && defaultContentApprovalWorkflowId.Equals(wfa.Id))
            {
                xmlWriter.WriteAttributeString("DefaultContentApprovalWorkflowId", defaultContentApprovalWorkflowId.ToString());
            }
            if (wfa.Description != null)
            {
                xmlWriter.WriteAttributeString("Description", wfa.Description.ToString());
            }
            System.Guid arg_1D5_0 = wfa.BaseId;
            if (!Utils.IsOOBWorkflowAssociation(wfa.BaseId, System.Convert.ToInt32(web.Language), false))
            {
                xmlWriter.WriteAttributeString("Is2010SharePointDesignerWorkflow", wfa.BaseId.ToString());
            }
            if (!string.IsNullOrEmpty(parentListID))
            {
                List listByTitle = CSOMAdapter.GetListByTitle(web, wfa.TaskListTitle);
                if (listByTitle != null)
                {
                    xmlWriter.WriteAttributeString("TaskListId", listByTitle.Id.ToString());
                }
                List listByTitle2 = CSOMAdapter.GetListByTitle(web, wfa.HistoryListTitle);
                if (listByTitle2 != null)
                {
                    xmlWriter.WriteAttributeString("HistoryListId", listByTitle2.Id.ToString());
                }
            }
            if (!string.IsNullOrEmpty(parentListID))
            {
                xmlWriter.WriteAttributeString("ContentTypeParentListId", parentListID);
            }
            if (!string.IsNullOrEmpty(parentContentTypeName))
            {
                xmlWriter.WriteAttributeString("ParentContentType", parentContentTypeName);
            }
            if (!string.IsNullOrEmpty(parentListID))
            {
                xmlWriter.WriteAttributeString("ParentListID", parentListID);
            }
            xmlWriter.WriteEndElement();
        }

        public string AddWorkflowAssociation(string targetID, string workflowXml, bool allowDBWrite)
        {
            string result;
            using (ClientContext clientContext = this.GetClientContext())
            {
                Web web = clientContext.Web;
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                xmlDocument.LoadXml(workflowXml);
                System.Xml.XmlNode documentElement = xmlDocument.DocumentElement;
                string attributeValueAsString = documentElement.Attributes.GetAttributeValueAsString("Scope");
                if (string.IsNullOrEmpty(attributeValueAsString))
                {
                    throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowScopeNotFound);
                }
                if (attributeValueAsString.Equals("ContentType", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = this.AddContentTypeWorkflowAssociation(web, targetID, documentElement);
                }
                else if (attributeValueAsString.Equals("List", System.StringComparison.OrdinalIgnoreCase))
                {
                    result = this.AddListWorkflowAssociation(web, targetID, documentElement);
                }
                else
                {
                    if (!attributeValueAsString.Equals("Web", System.StringComparison.OrdinalIgnoreCase))
                    {
                        throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowScopeInvalid);
                    }
                    result = this.AddWebWorkflowAssociation(web, targetID, documentElement);
                }
            }
            return result;
        }

        public string ActivateReusableWorkflowTemplates()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            using (ClientContext clientContext = this.GetClientContext())
            {
                Web web = clientContext.Web;
                List byTitle = web.Lists.GetByTitle(CSOMAdapter.s_WorkflowListTitle);
                clientContext.Load<List>(byTitle, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                CSOMAdapter.CallExecuteQuery(web.Context, this);
                ListItemCollection items = byTitle.GetItems(new CamlQuery
                {
                    ViewXml = "<View><Query><Where><Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">1</Value></Eq></Where></Query></View>",
                    FolderServerRelativeUrl = UrlUtils.ConcatUrls(new string[]
                    {
                        this.ServerRelativeUrl,
                        CSOMAdapter.s_WorkflowListTitle
                    })
                });
                byTitle.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
                {
                    (ListItemCollection folders) => folders.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                    {
                        (ListItem folder) => (object)folder.Id,
                        (ListItem folder) => folder["FileLeafRef"]
                    })
                });
                CSOMAdapter.CallExecuteQuery(byTitle.Context, this);
                foreach (ListItem current in items)
                {
                    string text = current["FileLeafRef"].ToString();
                    try
                    {
                        this.AddSPDWorkflowAssociation(web, text, false);
                    }
                    catch (System.Exception ex)
                    {
                        CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                        stringBuilder.AppendLine(string.Format("Folder:{0}; Error:{1};", text, ex.Message));
                    }
                }
            }
            return stringBuilder.ToString();
        }

        public string AddWorkflow(string objectId, string workflowInstanceXml)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            operationReporting.LogWarning(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowInstanceNotSupportedInCSOM, string.Empty);
            operationReporting.End();
            return operationReporting.ResultXml;
        }

        private void AddSPDWorkflowAssociation(Web web, string workflowName, bool ignoreReusableCheck)
        {
            bool flag = false;
            List byTitle = web.Lists.GetByTitle(CSOMAdapter.s_WorkflowListTitle);
            web.Context.Load<List>(byTitle, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
            CSOMAdapter.CallExecuteQuery(web.Context, this);
            ListItemCollection items = byTitle.GetItems(new CamlQuery
            {
                ViewXml = "<View><Query><Where><Eq><FieldRef Name=\"FSObjType\"/><Value Type=\"Integer\">0</Value></Eq></Where></Query></View>",
                FolderServerRelativeUrl = UrlUtils.ConcatUrls(new string[]
                {
                    this.ServerRelativeUrl,
                    CSOMAdapter.s_WorkflowListTitle,
                    workflowName
                })
            });
            byTitle.Context.Load<ListItemCollection>(items, new System.Linq.Expressions.Expression<System.Func<ListItemCollection, object>>[]
            {
                (ListItemCollection items8) => items8.Include(new System.Linq.Expressions.Expression<System.Func<ListItem, object>>[]
                {
                    (ListItem item) => (object)item.Id,
                    (ListItem item) => item["FileLeafRef"],
                    (ListItem item) => item["_UIVersionString"]
                })
            });
            CSOMAdapter.CallExecuteQuery(byTitle.Context, this);
            foreach (ListItem current in items)
            {
                string text = current["FileLeafRef"].ToString();
                if (text.EndsWith(".xoml.wfconfig.xml", System.StringComparison.OrdinalIgnoreCase) && (ignoreReusableCheck || this.IsRecurringWorkflowXml(current)))
                {
                    string configVersion = current["_UIVersionString"].ToString();
                    this.NWSAdapter.AssociateWorkflowAssociation(UrlUtils.ConcatUrls(new string[]
                    {
                        CSOMAdapter.s_WorkflowListTitle,
                        workflowName,
                        text
                    }), configVersion);
                    flag = true;
                    foreach (ListItem current2 in items)
                    {
                        string text2 = current2["FileLeafRef"].ToString();
                        if (text2.EndsWith(".xsn", System.StringComparison.OrdinalIgnoreCase))
                        {
                            this.NWSAdapter.PublishInfoPathForm(UrlUtils.ConcatUrls(new string[]
                            {
                                this.Url,
                                CSOMAdapter.s_WorkflowListTitle,
                                workflowName,
                                text2
                            }));
                        }
                    }
                }
            }
            if (!flag && ignoreReusableCheck)
            {
                throw new System.Exception(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.UnableToRetrieveSPDWorkflow, workflowName));
            }
        }

        private bool IsRecurringWorkflowXml(ListItem item)
        {
            bool result;
            try
            {
                item.Context.Load<Microsoft.SharePoint.Client.File>(item.File, new System.Linq.Expressions.Expression<System.Func<Microsoft.SharePoint.Client.File, object>>[0]);
                CSOMAdapter.CallExecuteQuery(item.Context, this);
                System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();
                FileInformation fileInformation = Microsoft.SharePoint.Client.File.OpenBinaryDirect(this.GetClientContext(), item.File.ServerRelativeUrl);
                System.IO.Stream stream = fileInformation.Stream;
                xmlDocument.Load(stream);
                result = Utils.IsRecurringWorkflowXml(xmlDocument);
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                result = false;
            }
            return result;
        }

        private string AddWebWorkflowAssociation(Web web, string targetID, System.Xml.XmlNode workflowAssociationNode)
        {
            WorkflowAssociation workflowAssociation = null;
            web.Context.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
            {
                (Web currentWeb) => currentWeb.WorkflowTemplates,
                (Web currentWeb) => currentWeb.Lists,
                (Web currentWeb) => (object)currentWeb.Id,
                (Web currentWeb) => (object)currentWeb.Language
            });
            CSOMAdapter.CallExecuteQuery(web.Context, this);
            WorkflowTemplate workflowTemplate = null;
            string attributeValueAsString = workflowAssociationNode.Attributes.GetAttributeValueAsString("BaseTemplate");
            string text = workflowAssociationNode.Attributes.GetAttributeValueAsString("Name");
            if (!string.IsNullOrEmpty(attributeValueAsString))
            {
                workflowTemplate = this.GetWorkflowTemplateByID(web, attributeValueAsString);
            }
            if (workflowTemplate == null)
            {
                try
                {
                    text = Utils.GetWorkflowName(text);
                    this.AddSPDWorkflowAssociation(web, text, true);
                    web.Context.Load<WorkflowAssociationCollection>(web.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(web.Context, this);
                    foreach (WorkflowAssociation current in web.WorkflowAssociations)
                    {
                        if (current.Name == text)
                        {
                            workflowAssociation = current;
                            break;
                        }
                    }
                    if (workflowAssociation != null)
                    {
                        string attributeValueAsString2 = workflowAssociationNode.Attributes.GetAttributeValueAsString("HistoryListTitle");
                        if (!string.IsNullOrEmpty(attributeValueAsString2) && !workflowAssociation.HistoryListTitle.Equals(attributeValueAsString2, System.StringComparison.InvariantCultureIgnoreCase))
                        {
                            List historyList = this.GetHistoryList(workflowAssociationNode, web, false);
                            workflowAssociation.HistoryListTitle = historyList.Title;
                            workflowAssociation.Update();
                            web.Update();
                            CSOMAdapter.CallExecuteQuery(web.Context, this);
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    SoapException ex2 = ex as SoapException;
                    if (ex2 != null)
                    {
                        throw new System.Exception(ex2.Detail.OuterXml);
                    }
                    throw;
                }
            }
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            if (workflowAssociation != null)
            {
                System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                this.WriteWorkflowXml(web, workflowAssociation, xmlWriter, web.Id.ToString(), null, null, System.Guid.Empty);
                return stringBuilder.ToString();
            }
            throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.UnableToFindWorkflowAssociationInWeb);
        }

        private string AddListWorkflowAssociation(Web web, string targetID, System.Xml.XmlNode workflowAssociationNode)
        {
            WorkflowAssociation workflowAssociation = null;
            web.Context.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
            {
                (Web currentWeb) => currentWeb.WorkflowTemplates,
                (Web currentWeb) => currentWeb.Lists,
                (Web currentWeb) => (object)currentWeb.Language
            });
            CSOMAdapter.CallExecuteQuery(web.Context, this);
            List listByID = CSOMAdapter.GetListByID(web, new System.Guid(targetID));
            if (listByID == null)
            {
                throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowTargetListNotFound);
            }
            WorkflowTemplate workflowTemplate = null;
            string attributeValueAsString = workflowAssociationNode.Attributes.GetAttributeValueAsString("BaseTemplate");
            if (!string.IsNullOrEmpty(attributeValueAsString))
            {
                workflowTemplate = this.GetWorkflowTemplateByID(web, attributeValueAsString);
            }
            string text = workflowAssociationNode.Attributes.GetAttributeValueAsString("Name");
            if (workflowTemplate != null)
            {
                List historyList = this.GetHistoryList(workflowAssociationNode, web, false);
                List tasksList = this.GetTasksList(workflowAssociationNode, web, false);
                web.Context.Load<WorkflowAssociationCollection>(listByID.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(web.Context, this);
                workflowAssociation = this.GetWorkflowAssociationByName(listByID.WorkflowAssociations, text);
                if (workflowAssociation == null)
                {
                    WorkflowAssociationCreationInformation workflowAssociationCreationInformation = new WorkflowAssociationCreationInformation();
                    workflowAssociationCreationInformation.Template = workflowTemplate;
                    workflowAssociationCreationInformation.Name = text;
                    workflowAssociationCreationInformation.TaskList = tasksList;
                    workflowAssociationCreationInformation.HistoryList = historyList;
                    workflowAssociation = listByID.WorkflowAssociations.Add(workflowAssociationCreationInformation);
                }
                this.SetWorkflowData(workflowAssociation, workflowAssociationNode);
                workflowAssociation.Update();
                listByID.Update();
                web.Context.Load<WorkflowAssociation>(workflowAssociation, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociation, object>>[0]);
                CSOMAdapter.CallExecuteQuery(web.Context, this);
                if (!string.IsNullOrEmpty(workflowAssociationNode.GetAttributeValueAsString("DefaultContentApprovalWorkflowId")))
                {
                    listByID.DefaultContentApprovalWorkflowId = workflowAssociation.Id;
                    listByID.Update();
                    web.Context.Load<List>(listByID, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(web.Context, this);
                }
            }
            else
            {
                try
                {
                    text = Utils.GetWorkflowName(text);
                    this.AddSPDWorkflowAssociation(web, text, true);
                    web.Context.Load<WorkflowAssociationCollection>(listByID.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(web.Context, this);
                    foreach (WorkflowAssociation current in listByID.WorkflowAssociations)
                    {
                        if (current.Name == text)
                        {
                            workflowAssociation = current;
                            break;
                        }
                    }
                    if (workflowAssociation != null)
                    {
                        string attributeValueAsString2 = workflowAssociationNode.Attributes.GetAttributeValueAsString("HistoryListTitle");
                        if (!string.IsNullOrEmpty(attributeValueAsString2) && !workflowAssociation.HistoryListTitle.Equals(attributeValueAsString2, System.StringComparison.InvariantCultureIgnoreCase))
                        {
                            List historyList2 = this.GetHistoryList(workflowAssociationNode, web, false);
                            workflowAssociation.HistoryListTitle = historyList2.Title;
                            workflowAssociation.Update();
                            listByID.Update();
                            CSOMAdapter.CallExecuteQuery(web.Context, this);
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                    SoapException ex2 = ex as SoapException;
                    if (ex2 != null)
                    {
                        throw new System.Exception(ex2.Detail.OuterXml);
                    }
                    throw;
                }
            }
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            if (workflowAssociation != null)
            {
                System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                this.WriteWorkflowXml(web, workflowAssociation, xmlWriter, listByID.Id.ToString(), listByID.Id.ToString(), null, System.Guid.Empty);
                return stringBuilder.ToString();
            }
            throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.UnableToFindWorkflowAssociationInList);
        }

        private string AddContentTypeWorkflowAssociation(Web web, string targetID, System.Xml.XmlNode workflowAssociationNode)
        {
            string result;
            try
            {
                WorkflowTemplate workflowTemplate = null;
                List list = null;
                string parentListID = null;
                web.Context.Load<Web>(web, new System.Linq.Expressions.Expression<System.Func<Web, object>>[]
                {
                    (Web currentWeb) => currentWeb.WorkflowTemplates,
                    (Web currentWeb) => currentWeb.Lists,
                    (Web currentWeb) => currentWeb.ContentTypes,
                    (Web currentWeb) => (object)currentWeb.Language
                });
                CSOMAdapter.CallExecuteQuery(web.Context, this);
                string attributeValueAsString = workflowAssociationNode.Attributes.GetAttributeValueAsString("BaseTemplate");
                if (!string.IsNullOrEmpty(attributeValueAsString))
                {
                    workflowTemplate = this.GetWorkflowTemplateByID(web, attributeValueAsString);
                }
                if (workflowTemplate == null)
                {
                    string attributeValueAsString2 = workflowAssociationNode.Attributes.GetAttributeValueAsString("BaseTemplateName");
                    if (!string.IsNullOrEmpty(attributeValueAsString2))
                    {
                        workflowTemplate = this.GetWorkflowTemplateByName(web, attributeValueAsString2);
                    }
                }
                if (workflowTemplate == null)
                {
                    throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.UnableToRetrieveWorkflowTemplate);
                }
                bool isListContentType = false;
                string attributeValueAsString3 = workflowAssociationNode.Attributes.GetAttributeValueAsString("ContentTypeParentListId");
                ContentType contentTypeByID;
                if (!string.IsNullOrEmpty(attributeValueAsString3))
                {
                    isListContentType = true;
                    list = CSOMAdapter.GetListByID(web, new System.Guid(attributeValueAsString3));
                    if (list == null)
                    {
                        throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowTargetListNotFound);
                    }
                    parentListID = list.Id.ToString();
                    web.Context.Load<ContentTypeCollection>(list.ContentTypes, new System.Linq.Expressions.Expression<System.Func<ContentTypeCollection, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(web.Context, this);
                    contentTypeByID = this.GetContentTypeByID(list.ContentTypes, targetID);
                }
                else
                {
                    contentTypeByID = this.GetContentTypeByID(web.ContentTypes, targetID);
                }
                if (contentTypeByID == null)
                {
                    throw new System.Exception(Metalogix.SharePoint.Adapters.Properties.Resources.MsgCannotFindContentType);
                }
                string attributeValueAsString4 = workflowAssociationNode.Attributes.GetAttributeValueAsString("Name");
                web.Context.Load<WorkflowAssociationCollection>(contentTypeByID.WorkflowAssociations, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociationCollection, object>>[0]);
                CSOMAdapter.CallExecuteQuery(web.Context, this);
                WorkflowAssociation workflowAssociation = this.GetWorkflowAssociationByName(contentTypeByID.WorkflowAssociations, attributeValueAsString4);
                if (workflowAssociation == null)
                {
                    WorkflowAssociationCreationInformation workflowAssociationCreationInformation = new WorkflowAssociationCreationInformation();
                    workflowAssociationCreationInformation.Template = workflowTemplate;
                    workflowAssociationCreationInformation.Name = attributeValueAsString4;
                    List historyList = this.GetHistoryList(workflowAssociationNode, web, isListContentType);
                    List tasksList = this.GetTasksList(workflowAssociationNode, web, isListContentType);
                    if (historyList != null && tasksList != null)
                    {
                        workflowAssociationCreationInformation.TaskList = tasksList;
                        workflowAssociationCreationInformation.HistoryList = historyList;
                    }
                    else
                    {
                        workflowAssociationCreationInformation.ContentTypeAssociationHistoryListName = workflowAssociationNode.Attributes.GetAttributeValueAsString("HistoryListTitle");
                        workflowAssociationCreationInformation.ContentTypeAssociationTaskListName = workflowAssociationNode.Attributes.GetAttributeValueAsString("TaskListTitle");
                    }
                    workflowAssociation = contentTypeByID.WorkflowAssociations.Add(workflowAssociationCreationInformation);
                }
                this.SetWorkflowData(workflowAssociation, workflowAssociationNode);
                workflowAssociation.Update();
                if (list != null)
                {
                    list.Update();
                }
                else
                {
                    contentTypeByID.Update(false);
                }
                web.Context.Load<WorkflowAssociation>(workflowAssociation, new System.Linq.Expressions.Expression<System.Func<WorkflowAssociation, object>>[0]);
                CSOMAdapter.CallExecuteQuery(web.Context, this);
                System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
                System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(new System.IO.StringWriter(stringBuilder));
                this.WriteWorkflowXml(web, workflowAssociation, xmlWriter, contentTypeByID.StringId, parentListID, contentTypeByID.Name, System.Guid.Empty);
                result = stringBuilder.ToString();
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                throw new System.Exception(string.Format(Metalogix.SharePoint.Adapters.Properties.Resources.FS_UnableToMigrateContentTypeWorkflow, ex.Message));
            }
            return result;
        }

        private List GetHistoryList(System.Xml.XmlNode workflowAssociationNode, Web web, bool isListContentType = false)
        {
            List list = null;
            string attributeValueAsString = workflowAssociationNode.Attributes.GetAttributeValueAsString("HistoryListId");
            System.Guid empty = System.Guid.Empty;
            if (!string.IsNullOrEmpty(attributeValueAsString))
            {
                empty = new System.Guid(attributeValueAsString);
            }
            if (empty == System.Guid.Empty && !isListContentType)
            {
                return null;
            }
            if (empty != System.Guid.Empty)
            {
                list = CSOMAdapter.GetListByID(web, empty);
            }
            string attributeValueAsString2 = workflowAssociationNode.Attributes.GetAttributeValueAsString("HistoryListTitle");
            if (list == null)
            {
                list = CSOMAdapter.GetListByTitle(web, attributeValueAsString2);
            }
            string text = null;
            if (list == null && isListContentType)
            {
                list = this.CreateWorkflowList(web, attributeValueAsString2, ListTemplateType.WorkflowHistory, ref text);
            }
            if (list == null)
            {
                string text2 = Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowHistoryListNotFound;
                if (!string.IsNullOrEmpty(text))
                {
                    text2 += " Exception: " + text;
                }
                throw new System.Exception(text2);
            }
            return list;
        }

        private List GetTasksList(System.Xml.XmlNode workflowAssociationNode, Web web, bool isListContentType = false)
        {
            List list = null;
            string attributeValueAsString = workflowAssociationNode.Attributes.GetAttributeValueAsString("TaskListId");
            System.Guid empty = System.Guid.Empty;
            if (!string.IsNullOrEmpty(attributeValueAsString))
            {
                empty = new System.Guid(attributeValueAsString);
            }
            if (empty == System.Guid.Empty && !isListContentType)
            {
                return null;
            }
            if (empty != System.Guid.Empty)
            {
                list = CSOMAdapter.GetListByID(web, empty);
            }
            string attributeValueAsString2 = workflowAssociationNode.Attributes.GetAttributeValueAsString("TaskListTitle");
            if (list == null)
            {
                list = CSOMAdapter.GetListByTitle(web, attributeValueAsString2);
            }
            string text = null;
            if (list == null && isListContentType)
            {
                list = this.CreateWorkflowList(web, attributeValueAsString2, ListTemplateType.Tasks, ref text);
            }
            if (list == null)
            {
                string text2 = Metalogix.SharePoint.Adapters.Properties.Resources.WorkflowTaskListNotFound;
                if (!string.IsNullOrEmpty(text))
                {
                    text2 += " Exception: " + text;
                }
                throw new System.Exception(text2);
            }
            return list;
        }

        private void SetWorkflowData(WorkflowAssociation wfa, System.Xml.XmlNode workflowAssociationNode)
        {
            string attributeValueAsString = workflowAssociationNode.Attributes.GetAttributeValueAsString("Configuration");
            if (!string.IsNullOrEmpty(attributeValueAsString))
            {
                WorkflowPropertyConfiguration workflowPropertyConfiguration = (WorkflowPropertyConfiguration)System.Enum.Parse(typeof(WorkflowPropertyConfiguration), attributeValueAsString);
                wfa.AllowManual = ((workflowPropertyConfiguration & WorkflowPropertyConfiguration.AllowManualStart) != WorkflowPropertyConfiguration.None);
                wfa.AutoStartChange = ((workflowPropertyConfiguration & WorkflowPropertyConfiguration.AutoStartChange) != WorkflowPropertyConfiguration.None);
                wfa.AutoStartCreate = ((workflowPropertyConfiguration & WorkflowPropertyConfiguration.AutoStartAdd) != WorkflowPropertyConfiguration.None);
            }
            else
            {
                wfa.AllowManual = workflowAssociationNode.Attributes.GetAttributeValueAsBoolean("AllowManual");
                wfa.AutoStartChange = workflowAssociationNode.Attributes.GetAttributeValueAsBoolean("AutoStartChange");
                wfa.AutoStartCreate = workflowAssociationNode.Attributes.GetAttributeValueAsBoolean("AutoStartCreate");
            }
            wfa.AssociationData = workflowAssociationNode.Attributes.GetAttributeValueAsString("AssociationData");
            wfa.Description = workflowAssociationNode.Attributes.GetAttributeValueAsString("Description");
        }

        private List CreateWorkflowList(Web web, string listTitle, ListTemplateType listTemplate, ref string errorOccured)
        {
            List list = null;
            try
            {
                ListCreationInformation parameters = new ListCreationInformation
                {
                    Title = listTitle,
                    TemplateType = (int)listTemplate
                };
                list = web.Lists.Add(parameters);
                if (list != null)
                {
                    web.Context.Load<List>(list, new System.Linq.Expressions.Expression<System.Func<List, object>>[0]);
                    CSOMAdapter.CallExecuteQuery(web.Context, this);
                }
            }
            catch (System.Exception ex)
            {
                CSOMAdapter.LogExceptionDetails(ex, System.Reflection.MethodBase.GetCurrentMethod().Name, null);
                errorOccured = ex.Message;
            }
            return list;
        }
    }
}
