using Metalogix.Core.OperationLog;
using Metalogix.Permissions;
using Metalogix.SharePoint.Adapters;
using Metalogix.SharePoint.Adapters.Enums;
using Metalogix.SharePoint.Adapters.Exceptions;
using Metalogix.SharePoint.Adapters.Expert;
using Metalogix.SharePoint.Adapters.Properties;
using Metalogix.SharePoint.Common;
using Metalogix.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Web.UI;
using System.Xml;

namespace Metalogix.SharePoint.Adapters.DB
{
    [AdapterDisplayName("SharePoint Database")]
    [AdapterShortName("DB")]
    [AdapterSupports(AdapterSupportedFlags.SiteScope | AdapterSupportedFlags.LegacyLicense |
                     AdapterSupportedFlags.CurrentLicense)]
    public class DBAdapter : SharePointAdapter, IDBWriter, IDBReader, ISharePointReader, IDB2013CheckOverride,
        ISharePointAdapterCommand, IMigrationExpertReports
    {
        private const int SHAREPOINT_VERSION_ID_INCREMENT_VALUE = 512;

        private const string ROW_ORDINAL_SELECTION =
            "(SELECT {0} FROM AllUserData u2 WHERE u2.tp_RowOrdinal='{1}' AND u.tp_Version = u2.tp_Version AND u.tp_ListID=u2.tp_ListId AND u.tp_ID=u2.tp_ID AND u.tp_IsCurrent = u2.tp_IsCurrent)";

        private const string RECENT_QUICK_LAUNCH_ID = "1033";

        public const string BASE_TEMPLATE_FILE_LOCATION = "Metalogix.SharePoint.Adapters.DB.Template";

        private const string METAINFO_OWNERKEY = "vti_associateownergroup:SW|";

        private const string METAINFO_MEMBERKEY = "vti_associatemembergroup:SW|";

        private const string METAINFO_VISITORKEY = "vti_associatevisitorgroup:SW|";

        private const string METAINFO_AGROUPSKEY = "vti_associategroups:SW|";

        private static DoubleConverter s_DoubleConverter;

        private static CultureInfo s_CultureInfo;

        private static List<string> SharePoint2003VersionedTemplateFields;

        private readonly static string assetLibraryFields;

        private readonly static string s2007AttendeesFields;

        private readonly static string s2010AttendeesFields;

        private readonly static string s2007AgendaFields;

        private readonly static string s2010AgendaFields;

        private readonly static string s2007DecisionFields;

        private readonly static string s2010DecisionFields;

        private readonly static string s2007ObjectivesFields;

        private readonly static string s2010ObjectivesFields;

        private readonly static string s2007ThingsToBringFields;

        private readonly static string s2010ThingsToBringFields;

        private readonly static string s2007DirectionsFields;

        private readonly static string s2010DirectionsFields;

        private readonly static string s2007Fields;

        private readonly static string s2010Fields;

        private string m_sCustomTemplateLocation;

        private bool m_bFindTemplatesLocally;

        private string m_sServer;

        private string m_sDatabase;

        private string m_sWebID;

        private string m_sSiteID;

        private string m_sServerRelativeUrl;

        private object m_utcDateOffset;

        private object m_iDatabaseVersion;

        private string m_sAdapterIdentity;

        private string m_sConnectionString;

        private Metalogix.Permissions.Credentials m_credentials = new Metalogix.Permissions.Credentials();

        private IEnumerable m_visitedServers;

        private bool m_bAllowBrowsingNetworkServers = true;

        private string m_sHostHeader;

        private string m_sLinkName;

        private static Dictionary<string, SPListTemplateCollection> s_listTemplates;

        private bool m_bConnectedToSPS2003DB;

        private bool m_bConnectedToSPS2003DBChecked;

        private static Dictionary<string, WebPartTemplateResourceManager> s_webPartPageTemplates;

        private static Dictionary<string, ContentTypeResourceManager> s_contentTypeManager;

        private string m_sqlServerVersion;

        private int? _locale;

        private int? m_iTimeZoneID = null;

        private TimeZoneInformation m_timeZone;

        private Dictionary<string, string> m_userMap;

        private object m_oLockUserMap = new object();

        private bool? m_bIsPortal = null;

        private XmlNode m_webPartTypes;

        private bool m_bCachingWebPartGallery = true;

        private XmlNode m_WebPartTypesInGallery;

        private string m_sCurrentWebTemplate;

        private readonly static string s2007MeetingInstancesFields;

        private readonly static string s2010MeetingInstancesFields;

        private static Dictionary<string, string> s_WebTemplateCodeDictionary;

        private static Dictionary<string, string> s_WebTemplateTitleDictionary;

        public bool AllowBrowsingNetworkServers
        {
            get { return this.m_bAllowBrowsingNetworkServers; }
            set { this.m_bAllowBrowsingNetworkServers = value; }
        }

        public override bool CanIdentifyDifferentWorkflows
        {
            get { return base.SharePointVersion.IsSharePoint2010OrEarlier; }
        }

        public string ConnectionString
        {
            get
            {
                if (this.m_sConnectionString == null)
                {
                    if (this.m_sServer.ToUpper().Contains("MICROSOFT##SSEE") &&
                        this.m_sServer != "\\\\.\\pipe\\MSSQL$MICROSOFT##SSEE\\sql\\query")
                    {
                        this.m_sServer = "\\\\.\\pipe\\MSSQL$MICROSOFT##SSEE\\sql\\query";
                    }

                    int num = Math.Max(100, Environment.ProcessorCount * 10);
                    if (!this.Credentials.IsDefault)
                    {
                        object[] userName = new object[]
                        {
                            this.Credentials.UserName, this.Credentials.Password.ToInsecureString(), this.m_sServer,
                            this.Database, AdapterConfigurationVariables.SQLQueryTimeoutTime,
                            string.Concat(typeof(DBAdapter).Name, this.m_sAdapterIdentity), num
                        };
                        this.m_sConnectionString =
                            string.Format(
                                "user id={0};password={1};server={2};database={3};connection timeout={4};Application Name={5};Max Pool Size={6}",
                                userName);
                    }
                    else
                    {
                        object[] mSServer = new object[]
                        {
                            this.m_sServer, this.Database, AdapterConfigurationVariables.SQLQueryTimeoutTime,
                            string.Concat(typeof(DBAdapter).Name, this.m_sAdapterIdentity), num
                        };
                        this.m_sConnectionString =
                            string.Format(
                                "Integrated Security=true;server={0};database={1};connection timeout={2};Application Name={3};Max Pool Size={4}",
                                mSServer);
                    }
                }

                return this.m_sConnectionString;
            }
        }

        internal ContentTypeResourceManager ContentTypeManager
        {
            get
            {
                TemplateResourceLocation templateResourceLocation;
                if (string.IsNullOrEmpty(this.m_sCustomTemplateLocation))
                {
                    templateResourceLocation = (this.m_bFindTemplatesLocally
                        ? TemplateResourceLocation.SharePointDirectory
                        : TemplateResourceLocation.EmbeddedWithinAssembly);
                }
                else
                {
                    templateResourceLocation = TemplateResourceLocation.CustomFileLocation;
                }

                TemplateResourceLocation templateResourceLocation1 = templateResourceLocation;
                string str = string.Concat(templateResourceLocation1.ToString(), base.SharePointVersion.ToString(),
                    (string.IsNullOrEmpty(this.m_sCustomTemplateLocation)
                        ? string.Empty
                        : this.m_sCustomTemplateLocation));
                if (!DBAdapter.s_contentTypeManager.ContainsKey(str))
                {
                    ContentTypeResourceManager contentTypeResourceManager =
                        new ContentTypeResourceManager(templateResourceLocation1, base.SharePointVersion,
                            this.m_sCustomTemplateLocation);
                    lock (DBAdapter.s_contentTypeManager)
                    {
                        if (!DBAdapter.s_contentTypeManager.ContainsKey(str))
                        {
                            DBAdapter.s_contentTypeManager.Add(str, contentTypeResourceManager);
                        }
                    }
                }

                return DBAdapter.s_contentTypeManager[str];
            }
        }

        public override Metalogix.Permissions.Credentials Credentials
        {
            get { return this.m_credentials; }
            set
            {
                this.m_credentials = value;
                this.m_sConnectionString = null;
            }
        }

        protected string CurrentWebTemplate
        {
            get
            {
                if (this.m_sCurrentWebTemplate == null)
                {
                    this.GetWeb(false);
                }

                return this.m_sCurrentWebTemplate;
            }
        }

        public string CustomTemplatePath
        {
            get { return this.m_sCustomTemplateLocation; }
        }

        public string Database
        {
            get { return this.m_sDatabase; }
        }

        public override Metalogix.SharePoint.Adapters.ExternalizationSupport ExternalizationSupport
        {
            get { return Metalogix.SharePoint.Adapters.ExternalizationSupport.Required; }
        }

        public string HostHeader
        {
            get { return this.m_sHostHeader; }
            set { this.m_sHostHeader = value; }
        }

        public override bool IsDB
        {
            get { return true; }
        }

        public bool IsPortal
        {
            get
            {
                if (!this.m_bIsPortal.HasValue)
                {
                    this.m_bIsPortal = new bool?(this.GetIsPortal());
                }

                return this.m_bIsPortal.Value;
            }
        }

        public override bool IsPortal2003Connection
        {
            get
            {
                if (!this.m_bConnectedToSPS2003DBChecked)
                {
                    if (base.SharePointVersion.IsSharePoint2003)
                    {
                        using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                        {
                            SqlCommand sqlCommand = this.GetSqlCommand(
                                "select TABLE_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'PortalPermDelta'",
                                sqlConnection);
                            sqlConnection.Open();
                            if (sqlCommand.ExecuteScalar() != null)
                            {
                                this.m_bConnectedToSPS2003DB = true;
                            }
                        }
                    }
                    else
                    {
                        this.m_bConnectedToSPS2003DB = false;
                    }

                    this.m_bConnectedToSPS2003DBChecked = true;
                }

                return this.m_bConnectedToSPS2003DB;
            }
        }

        public override bool IsReadOnlyAdapter
        {
            get { return true; }
            set { }
        }

        internal SPListTemplateCollection ListTemplates
        {
            get
            {
                TemplateResourceLocation templateResourceLocation;
                if (string.IsNullOrEmpty(this.m_sCustomTemplateLocation))
                {
                    templateResourceLocation = (this.m_bFindTemplatesLocally
                        ? TemplateResourceLocation.SharePointDirectory
                        : TemplateResourceLocation.EmbeddedWithinAssembly);
                }
                else
                {
                    templateResourceLocation = TemplateResourceLocation.CustomFileLocation;
                }

                TemplateResourceLocation templateResourceLocation1 = templateResourceLocation;
                string str = string.Concat(templateResourceLocation1.ToString(), base.SharePointVersion.ToString(),
                    this.IsPortal2003Connection.ToString(),
                    (string.IsNullOrEmpty(this.m_sCustomTemplateLocation)
                        ? string.Empty
                        : this.m_sCustomTemplateLocation));
                if (!DBAdapter.s_listTemplates.ContainsKey(str))
                {
                    SPListTemplateResourceManager sPListTemplateResourceManager =
                        new SPListTemplateResourceManager(templateResourceLocation1, base.SharePointVersion,
                            this.IsPortal2003Connection, this.m_sCustomTemplateLocation);
                    SPListTemplateCollection listTemplates = sPListTemplateResourceManager.GetListTemplates();
                    lock (DBAdapter.s_listTemplates)
                    {
                        if (!DBAdapter.s_listTemplates.ContainsKey(str))
                        {
                            DBAdapter.s_listTemplates.Add(str, listTemplates);
                        }
                    }
                }

                return DBAdapter.s_listTemplates[str];
            }
        }

        public int Locale
        {
            get
            {
                if (!this._locale.HasValue)
                {
                    this.GetSiteAndWebIDsByUrl(this.ServerRelativeUrl);
                }

                return this._locale.GetValueOrDefault();
            }
        }

        public override ISharePointReader Reader
        {
            get { return SharePointReader.GetSharePointReader(this); }
        }

        public override string Server
        {
            get
            {
                if (this.m_sHostHeader != null)
                {
                    return this.m_sHostHeader;
                }

                return this.m_sServer;
            }
        }

        public override string ServerDisplayName
        {
            get { return string.Concat(this.Server, ".", this.Database); }
        }

        public override string ServerLinkName
        {
            get { return this.m_sLinkName; }
        }

        public override string ServerRelativeUrl
        {
            get { return this.m_sServerRelativeUrl; }
        }

        public override string ServerType
        {
            get { return "SQL Server"; }
        }

        public override string ServerUrl
        {
            get { return this.m_sLinkName; }
        }

        public string SiteID
        {
            get
            {
                if (this.m_sSiteID == null)
                {
                    this.GetSiteAndWebIDsByUrl(this.ServerRelativeUrl);
                }

                return this.m_sSiteID;
            }
        }

        private XmlNode StandardWebPartTypes
        {
            get
            {
                if (this.m_webPartTypes == null)
                {
                    Assembly executingAssembly = Assembly.GetExecutingAssembly();
                    using (TextReader streamReader =
                           new StreamReader(
                               executingAssembly.GetManifestResourceStream(typeof(DBAdapter), "WebPartTypeIds.xml")))
                    {
                        this.m_webPartTypes = XmlUtility.StringToXmlNode(streamReader.ReadToEnd());
                    }
                }

                return this.m_webPartTypes;
            }
        }

        public override bool SupportsWorkflows
        {
            get { return true; }
        }

        public TimeZoneInformation TimeZone
        {
            get
            {
                if (this.m_timeZone == null)
                {
                    try
                    {
                        this.m_timeZone = TimeZoneInformation.GetTimeZone(this.TimeZoneID);
                    }
                    catch
                    {
                        this.m_timeZone = TimeZoneInformation.GetLocalTimeZone();
                    }
                }

                return this.m_timeZone;
            }
        }

        public int TimeZoneID
        {
            get
            {
                if (!this.m_iTimeZoneID.HasValue)
                {
                    this.m_iTimeZoneID = new int?(this.GetTimeZoneID());
                }

                return this.m_iTimeZoneID.Value;
            }
        }

        public override string Url
        {
            get { return this.ServerRelativeUrl; }
            set
            {
                this.m_sServerRelativeUrl = value;
                this.m_sWebID = null;
            }
        }

        private Dictionary<string, string> UserMap
        {
            get
            {
                if (this.m_userMap == null)
                {
                    lock (this.m_oLockUserMap)
                    {
                        if (this.m_userMap == null)
                        {
                            Dictionary<string, string> strs = new Dictionary<string, string>();
                            if (base.SharePointVersion.IsSharePoint2003)
                            {
                                DataTable dataTable = new DataTable("Users");
                                DataTable dataTable1 = new DataTable("Groups");
                                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                                {
                                    SqlCommand sqlCommand = this.GetSqlCommand(
                                        "Select tp_ID as ID, tp_Login as LoginName from userinfo where  tp_SiteID = @SiteID and tp_Deleted = 0",
                                        sqlConnection);
                                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                                    SqlCommand sqlCommand1 = this.GetSqlCommand(
                                        "Select ID, Title from SiteGroups Where SiteID=@SiteID", sqlConnection);
                                    sqlCommand1.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                                    sqlConnection.Open();
                                    (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
                                    (new SqlDataAdapter(sqlCommand1)).Fill(dataTable1);
                                }

                                foreach (DataRow row in dataTable.Rows)
                                {
                                    strs.Add(row["ID"].ToString(), row["LoginName"].ToString());
                                }

                                foreach (DataRow dataRow in dataTable1.Rows)
                                {
                                    strs.Add(dataRow["ID"].ToString(), dataRow["Title"].ToString());
                                }
                            }

                            this.m_userMap = strs;
                        }
                    }
                }

                return this.m_userMap;
            }
        }

        public decimal UTCOffset
        {
            get
            {
                if (this.m_utcDateOffset == null)
                {
                    this.m_utcDateOffset = this.GetUTCOffset();
                }

                return (decimal)this.m_utcDateOffset;
            }
        }

        public IEnumerable VisitedServers
        {
            get { return this.m_visitedServers; }
            set { this.m_visitedServers = value; }
        }

        public override string WebID
        {
            get
            {
                if (this.m_sWebID == null)
                {
                    this.GetSiteAndWebIDsByUrl(this.ServerRelativeUrl);
                }

                return this.m_sWebID;
            }
            set { this.m_sWebID = value; }
        }

        internal WebPartTemplateResourceManager WebPartPageTemplateManager
        {
            get
            {
                WebPartTemplateResourceLocation webPartTemplateResourceLocation;
                if (string.IsNullOrEmpty(this.m_sCustomTemplateLocation))
                {
                    webPartTemplateResourceLocation = (this.m_bFindTemplatesLocally
                        ? WebPartTemplateResourceLocation.SharePointDirectory
                        : WebPartTemplateResourceLocation.EmbeddedWithinAssembly);
                }
                else
                {
                    webPartTemplateResourceLocation = WebPartTemplateResourceLocation.CustomFileLocation;
                }

                WebPartTemplateResourceLocation webPartTemplateResourceLocation1 = webPartTemplateResourceLocation;
                string str = string.Concat(webPartTemplateResourceLocation1.ToString(),
                    base.SharePointVersion.ToString(),
                    (string.IsNullOrEmpty(this.m_sCustomTemplateLocation)
                        ? string.Empty
                        : this.m_sCustomTemplateLocation));
                if (!DBAdapter.s_webPartPageTemplates.ContainsKey(str))
                {
                    WebPartTemplateResourceManager webPartTemplateResourceManager =
                        new WebPartTemplateResourceManager(webPartTemplateResourceLocation1, base.SharePointVersion,
                            this.m_sCustomTemplateLocation);
                    lock (DBAdapter.s_webPartPageTemplates)
                    {
                        if (!DBAdapter.s_webPartPageTemplates.ContainsKey(str))
                        {
                            DBAdapter.s_webPartPageTemplates.Add(str, webPartTemplateResourceManager);
                        }
                    }
                }

                return DBAdapter.s_webPartPageTemplates[str];
            }
        }

        private XmlNode WebPartTypesInGallery
        {
            get
            {
                if (this.m_WebPartTypesInGallery == null || !this.m_bCachingWebPartGallery)
                {
                    this.m_WebPartTypesInGallery = XmlUtility.StringToXmlNode(this.GetWebPartsInGallery());
                }

                return this.m_WebPartTypesInGallery;
            }
        }

        private static Dictionary<string, string> WebTemplateCodeDictionary
        {
            get
            {
                if (DBAdapter.s_WebTemplateCodeDictionary == null)
                {
                    Dictionary<string, string> strs = new Dictionary<string, string>()
                    {
                        { "0", "GLOBAL" },
                        { "1", "STS" },
                        { "2", "MPS" },
                        { "3", "CENTRALADMIN" },
                        { "4", "WIKI" },
                        { "5", "BUSINESS" },
                        { "7", "BDR" },
                        { "9", "BLOG" },
                        { "14483", "OFFILE" },
                        { "40", "OSRV" },
                        { "20", "SPS" },
                        { "21", "SPSPERS" },
                        { "22", "SPSMSITE" },
                        { "30", "SPSTOC" },
                        { "31", "SPSTOPIC" },
                        { "32", "SPSNEWS" },
                        { "39", "CMSPUBLISHING" },
                        { "53", "BLANKINTERNET" },
                        { "33", "SPSNHOME" },
                        { "34", "SPSSITES" },
                        { "35", "SPSBWEB" },
                        { "36", "SPSCOMMU" },
                        { "38", "SPSREPORTCENTER" },
                        { "47", "SPSPORTAL" },
                        { "50", "SRCHCEN" },
                        { "51", "PROFILES" },
                        { "52", "BLANKINTERNETCONTAINER" },
                        { "54", "SPSMSITEHOST" },
                        { "90", "SRCHCENTERLITE" },
                        { "1001", "FUSIONTEAMSITES" }
                    };
                    DBAdapter.s_WebTemplateCodeDictionary = strs;
                }

                return DBAdapter.s_WebTemplateCodeDictionary;
            }
        }

        private static Dictionary<string, string> WebTemplateTitleDictionary
        {
            get
            {
                if (DBAdapter.s_WebTemplateTitleDictionary == null)
                {
                    Dictionary<string, string> strs = new Dictionary<string, string>()
                    {
                        { "GLOBAL#0", "Global template" },
                        { "STS#-1", "Un-configured" },
                        { "STS#0", "Team Site" },
                        { "STS#1", "Blank Site" },
                        { "STS#2", "Document Workspace" },
                        { "MPS#0", "Basic Meeting Workspace" },
                        { "MPS#1", "Blank Meeting Workspace" },
                        { "MPS#2", "Decision Meeting Workspace" },
                        { "MPS#3", "Social Meeting Workspace" },
                        { "MPS#4", "Multipage Meeting Workspace" },
                        { "CENTRALADMIN#0", "Central Admin Site" },
                        { "WIKI#0", "Wiki Site" },
                        { "BLOG#0", "Blog" },
                        { "BDR#0", "Document Center" },
                        { "BUSINESS#0", "Business Tools Team Site" },
                        { "BUSINESS#1", "Business Blank Site" },
                        { "BUSINESS#2", "Business Document Workspace" },
                        { "OFFILE#0", "Records Center" },
                        { "OFFILE#1", "Records Center" },
                        { "OSRV#0", "Shared Services Administration Site" },
                        { "SPS#0", "SharePoint Portal Server Site" },
                        { "SPSPERS#0", "SharePoint Portal Server Personal Space" },
                        { "SPSMSITE#0", "Personalization Site" },
                        { "SPSTOC#0", "Contents area Template" },
                        { "SPSTOPIC#0", "Topic area template" },
                        { "SPSNEWS#0", "News Site" },
                        { "CMSPUBLISHING#0", "Publishing Site" },
                        { "BLANKINTERNET#0", "Publishing Site" },
                        { "BLANKINTERNET#1", "Press Releases Site" },
                        { "BLANKINTERNET#2", "Publishing Site with Workflow" },
                        { "SPSNHOME#0", "News Site" },
                        { "SPSSITES#0", "Site Directory" },
                        { "SPSCOMMU#0", "Community area template" },
                        { "SPSREPORTCENTER#0", "Report Center" },
                        { "SPSPORTAL#0", "Collaboration Portal" },
                        { "SRCHCEN#0", "Search Center with Tabs" },
                        { "PROFILES#0", "Profiles" },
                        { "BLANKINTERNETCONTAINER#0", "Publishing Portal" },
                        { "SPSMSITEHOST#0", "My Site Host" },
                        { "SRCHCENTERLITE#0", "Search Center" },
                        { "SRCHCENTERLITE#1", "Search Center" }
                    };
                    DBAdapter.s_WebTemplateTitleDictionary = strs;
                }

                return DBAdapter.s_WebTemplateTitleDictionary;
            }
        }

        public override ISharePointWriter Writer
        {
            get { return null; }
        }

        static DBAdapter()
        {
            DBAdapter.s_DoubleConverter = new DoubleConverter();
            DBAdapter.s_CultureInfo = new CultureInfo("en-US");
            string[] strArrays = new string[]
            {
                "title", "spsdescription", "owner", "status", "author", "description", "keywords", "imagecreatedate",
                "templatetitle", "templatedescription", "templateurl"
            };
            DBAdapter.SharePoint2003VersionedTemplateFields = new List<string>(strArrays);
            DBAdapter.assetLibraryFields =
                "<Fields><Field ID=\"{f08ab41d-9a03-49ae-9413-6cd284a15625}\" Type=\"Text\" Group=\"Core Document Columns\" Name=\"wic_System_Copyright\" DisplayName=\"Copyright\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3/fields\" StaticName=\"wic_System_Copyright\" ColName=\"nvarchar9\" /><Field ID=\"{52578fc3-1f01-4f4d-b016-94ccbcf428cf}\" Name=\"_Comments\" StaticName=\"_Comments\" Type=\"Note\" DisplayName=\"Comments\" Sortable=\"FALSE\" Description=\"A summary of this asset\" Sealed=\"TRUE\" UnlimitedLengthInDocumentLibrary=\"TRUE\" AllowDeletion=\"TRUE\" ShowInFileDlg=\"FALSE\" ColName=\"ntext2\" SourceID=\"{7D13045C-3791-408F-AB1B-6C34C83BB9C9}\" /><Field ID=\"{246d0907-637c-46b7-9aa0-0bb914daa832}\" Name=\"_Author\" Group=\"Core Document Columns\" Type=\"Text\" DisplayName=\"Author\" StaticName=\"_Author\" Description=\"The primary author\" Sealed=\"TRUE\" AllowDeletion=\"TRUE\" ShowInFileDlg=\"FALSE\" ColName=\"nvarchar7\" SourceID=\"{7D13045C-3791-408F-AB1B-6C34C83BB9C9}\" /><Field ID=\"{b66e9b50-a28e-469b-b1a0-af0e45486874}\" Type=\"Note\" Name=\"Keywords\" ShowInNewForm=\"FALSE\" ShowInFileDlg=\"FALSE\" DisplayName=\"Keywords\" Sealed=\"TRUE\" Sortable=\"FALSE\" UnlimitedLengthInDocumentLibrary=\"TRUE\" Description=\"For example: scenery, mountains, trees, nature\" ColName=\"ntext3\" StaticName=\"Keywords\" SourceID=\"{7D13045C-3791-408F-AB1B-6C34C83BB9C9}\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" ShowInNewForm=\"FALSE\" ShowInFileDlg=\"FALSE\" DisplayName=\"Title\" Sealed=\"TRUE\" ColName=\"nvarchar8\" StaticName=\"Title\" SourceID=\"{7D13045C-3791-408F-AB1B-6C34C83BB9C9}\" /><Field ID=\"{84cd09bd-85a9-461f-86e3-4c3c1738ad6b}\" Name=\"VideoHeightInPixels\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"VideoHeightInPixels\" Group=\"_Hidden\" Type=\"Integer\" DisplayName=\"Frame Height\" ShowInNewForm=\"TRUE\" ShowInEditForm=\"TRUE\" ColName=\"int5\" /><Field ID=\"{59cd571e-e2d9-485d-bb5d-e70d12f8d0b7}\" Name=\"VideoWidthInPixels\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"VideoWidthInPixels\" Group=\"_Hidden\" Type=\"Integer\" DisplayName=\"Frame Width\" ShowInNewForm=\"TRUE\" ShowInEditForm=\"TRUE\" ColName=\"int4\" /></Fields>";
            DBAdapter.s2007AttendeesFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Name\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Sealed=\"TRUE\" ShowInEditForm=\"FALSE\" ShowAddressBookButton=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\" Sealed=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&nbsp;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\">]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table height=\"100%\" cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility:hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');return false;\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\">]]></HTML></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A TABINDEX=-1 HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\"></A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 ALT=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/]]></HTML><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon><HTML><![CDATA[\"></A>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b5cc44d3-4443-4fdb-8de2-94237572ebe3}\" Name=\"NameOverloaded\" Type=\"Text\" DisplayName=\"Name\" ReadOnly=\"TRUE\" Sealed=\"TRUE\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(display)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"NameOverloaded\" ColName=\"nvarchar3\" /><Field ID=\"{db3e907b-7694-486f-8218-ad06cdb19805}\" Name=\"NameDisplay\" Type=\"Computed\" DisplayName=\"Name\" ReadOnly=\"TRUE\" Sealed=\"TRUE\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(with presence information)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"NameDisplay\"><FieldRefs><FieldRef Name=\"NameOverloaded\" /><FieldRef Name=\"AssignedTo\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table cellSpacing=0 cellPadding=0><tr><td nowrap>]]></HTML><Field Name=\"AssignedTo\" /><HTML><![CDATA[</td><td nowrap style=\"padding: 1px 0px 0px 0px;\" class=\"ms-vb\">]]></HTML><Column Name=\"NameOverloaded\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[</td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{5cb01a8b-88d2-470c-8706-079c191ecf3d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"NameDisplayLink\" DisplayName=\"Name\" DisplayNameSrcField=\"Title\" Sealed=\"TRUE\" AuthoringInfo=\"(linked, with presence information)\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"NameDisplayLink\"><FieldRefs><FieldRef Name=\"NameOverloaded\" /><FieldRef Name=\"AssignedTo\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML><HTML><![CDATA[<table cellSpacing=0 cellPadding=0><tr><td nowrap>]]></HTML><Field Name=\"AssignedTo\" /><HTML><![CDATA[</td><td nowrap style=\"padding: 1px 0px 0px 0px;\" class=\"ms-vb\">]]></HTML><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK='GoToLink(this);return false;' target=\"_self\">]]></HTML><Column Name=\"NameOverloaded\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[</a>]]></HTML><HTML><![CDATA[</td></tr></table>]]></HTML><HTML><![CDATA[</td><td><img src=\"]]></HTML><ImagesPath /><HTML><![CDATA[blank.gif\" width=13 style=\"visibility: hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{5fd0c44d-228f-4af1-8256-101af9167ae9}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"EditUser\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" Sealed=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EditUser\"><FieldRefs><FieldRef Name=\"AssignedTo\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><Column Name=\"AssignedTo\" /></Expr1><Expr2><UserID /></Expr2><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick='GoToLink(this);return false;' target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"]]></HTML><ImagesPath /><HTML><![CDATA[edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then></IfEqual></DisplayPattern></Field><Field ID=\"{53101f38-dd2e-458c-b245-0c236cc13d1a}\" ColName=\"int1\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"AssignedTo\" DisplayName=\"User\" Sealed=\"TRUE\" SuppressNameDisplay=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"AssignedTo\" /><Field ID=\"{6df9bd52-550e-4a30-bc31-a4366832a87f}\" Type=\"Note\" Name=\"Comment\" DisplayName=\"Comment\" SeparateLine=\"TRUE\" Sealed=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Comment\" ColName=\"ntext2\" /><Field Type=\"Choice\" ID=\"{3329f39d-70ed-4858-b8c8-c5237634bf08}\" Name=\"Status\" DisplayName=\"Response\" Required=\"TRUE\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Status\" ColName=\"nvarchar4\"><CHOICES><CHOICE>None</CHOICE><CHOICE>Accepted</CHOICE><CHOICE>Tentative</CHOICE><CHOICE>Declined</CHOICE></CHOICES><Default>None</Default></Field><Field ID=\"{ab76c918-8491-48eb-be13-2dc4497819a7}\" Type=\"Choice\" Name=\"Attendance\" DisplayName=\"Attendance\" Required=\"TRUE\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attendance\" ColName=\"nvarchar5\"><CHOICES><CHOICE>Required</CHOICE><CHOICE>Optional</CHOICE><CHOICE>Organizer</CHOICE></CHOICES><Default>Required</Default></Field><Field ID=\"{75df8e7b-14a1-48b0-93e4-15d31c013cd1}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Boolean\" Name=\"FromICal\" DisplayName=\"From ICal?\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FromICal\" ColName=\"bit1\"><Default>0</Default></Field><Field ID=\"{316c470a-05d6-4bc1-bf83-64d5898b4821}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Boolean\" Name=\"FromExternal\" DisplayName=\"From External?\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FromExternal\" ColName=\"bit2\"><Default>0</Default></Field><Field ID=\"{ead0ed9d-6a7a-4252-9d27-e0d006746bc8}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"DateTime\" Name=\"ICalDTStamp\" DisplayName=\"ICalDTStamp\" Format=\"DateTime\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ICalDTStamp\" ColName=\"datetime1\" /><Field ID=\"{efbdbfc5-5e4e-4109-93f2-150c3720605b}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Name=\"ICalSequence\" DisplayName=\"ICalSequence\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ICalSequence\" ColName=\"int2\" /></Fields>";
            DBAdapter.s2010AttendeesFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Name\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Sealed=\"TRUE\" ShowInEditForm=\"FALSE\" ShowAddressBookButton=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\" Sealed=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"EditLink(this, ]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&#160;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"EditLink2(this,]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkTitleNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{5f190d91-3dbc-4489-9878-3c092caf35b6}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle2\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\"/>]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{423874f8-c300-4bfb-b7a1-42e2159e3b19}\" Name=\"SortBehavior\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Sort Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SortBehavior\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SortBehavior\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{6d2c4fde-3605-428e-a236-ce5f3dc2b4d4}\" Name=\"SyncClientId\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" DisplayName=\"Client Id\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SyncClientId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SyncClientId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Default></Switch><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[\">]]></HTML></Case><Default><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{1344423c-c7f9-4134-88e4-ad842e2d723c}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onmousedown=\"javascript:VerifyFolderHref(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[')\"]]></HTML><HTML><![CDATA[\" onclick=\"return HandleFolder(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[');\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkFilenameNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{224ba411-da77-4050-b0eb-62d422f13d3e}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"IconOverlay\" /></FieldRefs><DisplayPattern><SetVar Name=\"DocIconImg\"><SetVar Name=\"DocIconAltText\"><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfSubString><Expr1>0x0120D5</Expr1><Expr2><Column Name=\"ContentTypeId\" /></Expr2><Then><HTML>Document Collection: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Else></IfSubString></Then><Else><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /></Else></IfEqual></SetVar><SetVar Name=\"DocIconFileName\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfEqual><Expr1><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></Expr1><Expr2><HTML>|</HTML></Expr2><Then><HTML>folder.gif</HTML></Then><Else><SetVar Name=\"FolderIconFromMap\"><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></SetVar><IfEqual><Expr1><GetVar Name=\"FolderIconFromMap\" /></Expr1><Expr2><MapToIcon /></Expr2><Then><HTML>folder.gif</HTML></Then><Else><GetVar Name=\"FolderIconFromMap\" /></Else></IfEqual></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"IconOverlay\" /></MapToIcon></Else></IfEqual></SetVar><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" title=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" src=\"/_layouts/images/]]></HTML><GetVar Name=\"DocIconFileName\" /><HTML><![CDATA[\" />]]></HTML></SetVar><SetVar Name=\"DocIconOverlayImg\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then /><Else><HTML><![CDATA[<img class=\"ms-vb-icon-overlay\" alt=\"*\" src=\"/_layouts/images/]]></HTML><MapToOverlay><Column Name=\"IconOverlay\" /></MapToOverlay><HTML><![CDATA[\" />]]></HTML></Else></IfEqual></SetVar><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><FieldSwitch><Expr><GetVar Name=\"FileDialog\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><HTML><![CDATA[<a href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" IncludeVersions=\"TRUE\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b824e17e-a1b3-426e-aecf-f0184d900485}\" Name=\"ItemChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ItemChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ItemChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{960ff01f-2b6d-4f1b-9c3f-e19ad8927341}\" Name=\"FolderChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Folder Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FolderChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FolderChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{b5cc44d3-4443-4fdb-8de2-94237572ebe3}\" Name=\"NameOverloaded\" Type=\"Text\" DisplayName=\"Name\" ReadOnly=\"TRUE\" Sealed=\"TRUE\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(display)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"NameOverloaded\" ColName=\"nvarchar3\" /><Field ID=\"{db3e907b-7694-486f-8218-ad06cdb19805}\" Name=\"NameDisplay\" Type=\"Computed\" DisplayName=\"Name\" ReadOnly=\"TRUE\" Sealed=\"TRUE\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(with presence information)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"NameDisplay\"><FieldRefs><FieldRef Name=\"NameOverloaded\" /><FieldRef Name=\"AssignedTo\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table cellspacing=\"0\" cellpadding=\"0\"><tr><td nowrap=\"nowrap\">]]></HTML><Field Name=\"AssignedTo\" /><HTML><![CDATA[</td><td nowrap=\"nowrap\" style=\"padding: 1px 0px 0px 0px;\" class=\"ms-vb\">]]></HTML><Column Name=\"NameOverloaded\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[</td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{5cb01a8b-88d2-470c-8706-079c191ecf3d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"NameDisplayLink\" DisplayName=\"Name\" DisplayNameSrcField=\"Title\" Sealed=\"TRUE\" AuthoringInfo=\"(linked, with presence information)\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"NameDisplayLink\"><FieldRefs><FieldRef Name=\"NameOverloaded\" /><FieldRef Name=\"AssignedTo\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><HTML><![CDATA[<table cellspacing=\"0\" cellpadding=\"0\"><tr><td nowrap=\"nowrap\">]]></HTML><Field Name=\"AssignedTo\" /><HTML><![CDATA[</td><td nowrap=\"nowrap\" style=\"padding: 1px 0px 0px 0px;\" class=\"ms-vb\">]]></HTML><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick='GoToLink(this);return false;' target=\"_self\">]]></HTML><Column Name=\"NameOverloaded\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[</a>]]></HTML><HTML><![CDATA[</td></tr></table>]]></HTML><HTML><![CDATA[</td><td><img src=\"]]></HTML><ImagesPath /><HTML><![CDATA[blank.gif\" width=\"13\" style=\"visibility: hidden\" alt=\"\" /></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{5fd0c44d-228f-4af1-8256-101af9167ae9}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"EditUser\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" Sealed=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EditUser\"><FieldRefs><FieldRef Name=\"AssignedTo\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><Column Name=\"AssignedTo\" /></Expr1><Expr2><UserID /></Expr2><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick='GoToLink(this);return false;' target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"]]></HTML><ImagesPath /><HTML><![CDATA[edititem.gif\" />]]></HTML><HTML><![CDATA[</a>]]></HTML></Then></IfEqual></DisplayPattern></Field><Field ID=\"{53101f38-dd2e-458c-b245-0c236cc13d1a}\" ColName=\"int1\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"AssignedTo\" DisplayName=\"User\" Sealed=\"TRUE\" SuppressNameDisplay=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"AssignedTo\" /><Field ID=\"{6df9bd52-550e-4a30-bc31-a4366832a87f}\" Type=\"Note\" Name=\"Comment\" DisplayName=\"Comment\" SeparateLine=\"TRUE\" Sealed=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Comment\" ColName=\"ntext2\" /><Field Type=\"Choice\" ID=\"{3329f39d-70ed-4858-b8c8-c5237634bf08}\" Name=\"Status\" DisplayName=\"Response\" Required=\"TRUE\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Status\" ColName=\"nvarchar4\"><CHOICES><CHOICE>None</CHOICE><CHOICE>Accepted</CHOICE><CHOICE>Tentative</CHOICE><CHOICE>Declined</CHOICE></CHOICES><Default>None</Default></Field><Field ID=\"{ab76c918-8491-48eb-be13-2dc4497819a7}\" Type=\"Choice\" Name=\"Attendance\" DisplayName=\"Attendance\" Required=\"TRUE\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attendance\" ColName=\"nvarchar5\"><CHOICES><CHOICE>Required</CHOICE><CHOICE>Optional</CHOICE><CHOICE>Organizer</CHOICE></CHOICES><Default>Required</Default></Field><Field ID=\"{75df8e7b-14a1-48b0-93e4-15d31c013cd1}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Boolean\" Name=\"FromICal\" DisplayName=\"From ICal?\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FromICal\" ColName=\"bit1\"><Default>0</Default></Field><Field ID=\"{316c470a-05d6-4bc1-bf83-64d5898b4821}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Boolean\" Name=\"FromExternal\" DisplayName=\"From External?\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FromExternal\" ColName=\"bit2\"><Default>0</Default></Field><Field ID=\"{ead0ed9d-6a7a-4252-9d27-e0d006746bc8}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"DateTime\" Name=\"ICalDTStamp\" DisplayName=\"ICalDTStamp\" Format=\"DateTime\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ICalDTStamp\" ColName=\"datetime1\" /><Field ID=\"{efbdbfc5-5e4e-4109-93f2-150c3720605b}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Name=\"ICalSequence\" DisplayName=\"ICalSequence\" Sealed=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ICalSequence\" ColName=\"int2\" /></Fields>";
            DBAdapter.s2007AgendaFields =
                "<Fields><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" ColName=\"nvarchar1\" Version=\"1\" RowOrdinal=\"0\" /><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ID=\"{549ae04a-85a2-4ae7-9b63-1617e69c1a1d}\" Name=\"Owner\" Type=\"Text\" DisplayName=\"Owner\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Owner\" ColName=\"nvarchar3\" /><Field ID=\"{6756b26b-a985-4830-b685-7e0c931e18c5}\" Name=\"Time\" Type=\"Text\" DisplayName=\"Time\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Time\" ColName=\"nvarchar4\" /><Field ID=\"{e241f186-9b94-415c-9f66-255ce7f86235}\" Name=\"Notes\" Type=\"Note\" DisplayName=\"Notes\" SeparateLine=\"TRUE\" NumLines=\"15\" Sortable=\"FALSE\" RichText=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Notes\" ColName=\"ntext2\" /><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&nbsp;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\">]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table height=\"100%\" cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility:hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');return false;\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\">]]></HTML></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A TABINDEX=-1 HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\"></A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 ALT=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/]]></HTML><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon><HTML><![CDATA[\"></A>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /></Fields>";
            DBAdapter.s2010AgendaFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Subject\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"EditLink(this, ]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&#160;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Subject\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"EditLink2(this,]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Subject\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkTitleNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{5f190d91-3dbc-4489-9878-3c092caf35b6}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle2\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\"/>]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{423874f8-c300-4bfb-b7a1-42e2159e3b19}\" Name=\"SortBehavior\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Sort Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SortBehavior\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SortBehavior\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{6d2c4fde-3605-428e-a236-ce5f3dc2b4d4}\" Name=\"SyncClientId\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" DisplayName=\"Client Id\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SyncClientId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SyncClientId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Default></Switch><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[\">]]></HTML></Case><Default><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{1344423c-c7f9-4134-88e4-ad842e2d723c}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onmousedown=\"javascript:VerifyFolderHref(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[')\"]]></HTML><HTML><![CDATA[\" onclick=\"return HandleFolder(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[');\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkFilenameNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{224ba411-da77-4050-b0eb-62d422f13d3e}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"IconOverlay\" /></FieldRefs><DisplayPattern><SetVar Name=\"DocIconImg\"><SetVar Name=\"DocIconAltText\"><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfSubString><Expr1>0x0120D5</Expr1><Expr2><Column Name=\"ContentTypeId\" /></Expr2><Then><HTML>Document Collection: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Else></IfSubString></Then><Else><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /></Else></IfEqual></SetVar><SetVar Name=\"DocIconFileName\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfEqual><Expr1><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></Expr1><Expr2><HTML>|</HTML></Expr2><Then><HTML>folder.gif</HTML></Then><Else><SetVar Name=\"FolderIconFromMap\"><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></SetVar><IfEqual><Expr1><GetVar Name=\"FolderIconFromMap\" /></Expr1><Expr2><MapToIcon /></Expr2><Then><HTML>folder.gif</HTML></Then><Else><GetVar Name=\"FolderIconFromMap\" /></Else></IfEqual></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"IconOverlay\" /></MapToIcon></Else></IfEqual></SetVar><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" title=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" src=\"/_layouts/images/]]></HTML><GetVar Name=\"DocIconFileName\" /><HTML><![CDATA[\" />]]></HTML></SetVar><SetVar Name=\"DocIconOverlayImg\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then /><Else><HTML><![CDATA[<img class=\"ms-vb-icon-overlay\" alt=\"*\" src=\"/_layouts/images/]]></HTML><MapToOverlay><Column Name=\"IconOverlay\" /></MapToOverlay><HTML><![CDATA[\" />]]></HTML></Else></IfEqual></SetVar><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><FieldSwitch><Expr><GetVar Name=\"FileDialog\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><HTML><![CDATA[<a href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" IncludeVersions=\"TRUE\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b824e17e-a1b3-426e-aecf-f0184d900485}\" Name=\"ItemChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ItemChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ItemChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{960ff01f-2b6d-4f1b-9c3f-e19ad8927341}\" Name=\"FolderChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Folder Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FolderChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FolderChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{549ae04a-85a2-4ae7-9b63-1617e69c1a1d}\" Name=\"Owner\" Type=\"Text\" DisplayName=\"Owner\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Owner\" ColName=\"nvarchar3\" /><Field ID=\"{6756b26b-a985-4830-b685-7e0c931e18c5}\" Name=\"Time\" Type=\"Text\" DisplayName=\"Time\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Time\" ColName=\"nvarchar4\" /><Field ID=\"{e241f186-9b94-415c-9f66-255ce7f86235}\" Name=\"Notes\" Type=\"Note\" DisplayName=\"Notes\" SeparateLine=\"TRUE\" NumLines=\"15\" Sortable=\"FALSE\" RichText=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Notes\" ColName=\"ntext2\" /></Fields>";
            DBAdapter.s2007DecisionFields =
                "<Fields><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Sealed=\"TRUE\" ColName=\"nvarchar1\" Description=\"\" /><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\" Sealed=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ID=\"{38a4e8fb-5b7d-4a5b-9720-3103df0203d2}\" Type=\"Text\" Name=\"Contact\" DisplayName=\"Contact\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Contact\" ColName=\"nvarchar3\" /><Field ID=\"{ac3a1092-34ad-42b2-8d47-a79d01d9f516}\" Type=\"Choice\" Name=\"Status\" DisplayName=\"Status\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Status\" ColName=\"nvarchar4\"><CHOICES><CHOICE>Final</CHOICE><CHOICE>Pending Approval</CHOICE><CHOICE>Proposed</CHOICE></CHOICES><Default>Final</Default></Field><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&nbsp;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\">]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table height=\"100%\" cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility:hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');return false;\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\">]]></HTML></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A TABINDEX=-1 HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\"></A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 ALT=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/]]></HTML><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon><HTML><![CDATA[\"></A>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /></Fields>";
            DBAdapter.s2010DecisionFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Decision\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Sealed=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"EditLink(this, ]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&#160;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"EditLink2(this,]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Decision\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\" Sealed=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkTitleNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{5f190d91-3dbc-4489-9878-3c092caf35b6}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle2\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\"/>]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{423874f8-c300-4bfb-b7a1-42e2159e3b19}\" Name=\"SortBehavior\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Sort Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SortBehavior\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SortBehavior\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{6d2c4fde-3605-428e-a236-ce5f3dc2b4d4}\" Name=\"SyncClientId\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" DisplayName=\"Client Id\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SyncClientId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SyncClientId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Default></Switch><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[\">]]></HTML></Case><Default><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{1344423c-c7f9-4134-88e4-ad842e2d723c}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onmousedown=\"javascript:VerifyFolderHref(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[')\"]]></HTML><HTML><![CDATA[\" onclick=\"return HandleFolder(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[');\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkFilenameNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{224ba411-da77-4050-b0eb-62d422f13d3e}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"IconOverlay\" /></FieldRefs><DisplayPattern><SetVar Name=\"DocIconImg\"><SetVar Name=\"DocIconAltText\"><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfSubString><Expr1>0x0120D5</Expr1><Expr2><Column Name=\"ContentTypeId\" /></Expr2><Then><HTML>Document Collection: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Else></IfSubString></Then><Else><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /></Else></IfEqual></SetVar><SetVar Name=\"DocIconFileName\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfEqual><Expr1><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></Expr1><Expr2><HTML>|</HTML></Expr2><Then><HTML>folder.gif</HTML></Then><Else><SetVar Name=\"FolderIconFromMap\"><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></SetVar><IfEqual><Expr1><GetVar Name=\"FolderIconFromMap\" /></Expr1><Expr2><MapToIcon /></Expr2><Then><HTML>folder.gif</HTML></Then><Else><GetVar Name=\"FolderIconFromMap\" /></Else></IfEqual></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"IconOverlay\" /></MapToIcon></Else></IfEqual></SetVar><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" title=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" src=\"/_layouts/images/]]></HTML><GetVar Name=\"DocIconFileName\" /><HTML><![CDATA[\" />]]></HTML></SetVar><SetVar Name=\"DocIconOverlayImg\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then /><Else><HTML><![CDATA[<img class=\"ms-vb-icon-overlay\" alt=\"*\" src=\"/_layouts/images/]]></HTML><MapToOverlay><Column Name=\"IconOverlay\" /></MapToOverlay><HTML><![CDATA[\" />]]></HTML></Else></IfEqual></SetVar><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><FieldSwitch><Expr><GetVar Name=\"FileDialog\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><HTML><![CDATA[<a href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" IncludeVersions=\"TRUE\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b824e17e-a1b3-426e-aecf-f0184d900485}\" Name=\"ItemChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ItemChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ItemChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{960ff01f-2b6d-4f1b-9c3f-e19ad8927341}\" Name=\"FolderChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Folder Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FolderChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FolderChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{38a4e8fb-5b7d-4a5b-9720-3103df0203d2}\" Type=\"Text\" Name=\"Contact\" DisplayName=\"Contact\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Contact\" ColName=\"nvarchar3\" /><Field ID=\"{ac3a1092-34ad-42b2-8d47-a79d01d9f516}\" Type=\"Choice\" Name=\"Status\" DisplayName=\"Status\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Status\" ColName=\"nvarchar4\"><CHOICES><CHOICE>Final</CHOICE><CHOICE>Pending Approval</CHOICE><CHOICE>Proposed</CHOICE></CHOICES><Default>Final</Default></Field></Fields>";
            DBAdapter.s2007ObjectivesFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Hidden=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&nbsp;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\">]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table height=\"100%\" cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility:hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');return false;\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\">]]></HTML></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A TABINDEX=-1 HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\"></A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 ALT=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/]]></HTML><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon><HTML><![CDATA[\"></A>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{c6960011-2b59-49ea-938d-9f7be684fcb3}\" Name=\"Objective\" Type=\"Note\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Objective\" Required=\"TRUE\" Sealed=\"TRUE\" TitleField=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Objective\" ColName=\"ntext2\" /><Field ID=\"{5f01c025-f8f0-49e3-8174-0341102cdfeb}\" Type=\"Computed\" Name=\"LinkObjectiveNoMenu\" ReadOnly=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" DisplayName=\"Objective\" Dir=\"\" DisplayNameSrcField=\"Objective\" AuthoringInfo=\"(linked to item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkObjectiveNoMenu\"><FieldRefs><FieldRef Name=\"Objective\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK='GoToLink(this);return false;' target=\"_self\">]]></HTML><Limit Len=\"250\" MoreText=\"...\" AutoHyperLink=\"TRUE\" AutoNewLine=\"TRUE\"><Column Name=\"Objective\" Default=\"(no title)\" /></Limit><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></DisplayPattern></Field><Field ID=\"{19c07e89-d7c3-483c-b03d-c82cca2a9db2}\" Type=\"Computed\" Name=\"LinkObjective\" Sortable=\"FALSE\" ClassInfo=\"Menu\" Filterable=\"FALSE\" ReadOnly=\"TRUE\" DisplayName=\"Objective\" DisplayNameSrcField=\"Objective\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkObjective\"><FieldRefs><FieldRef Name=\"Objective\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"LinkObjectiveNoMenu\" /><FieldRef Name=\"ServerUrl\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML><Field Name=\"LinkObjectiveNoMenu\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility: hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field></Fields>";
            DBAdapter.s2010ObjectivesFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Hidden=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"EditLink(this, ]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&#160;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"EditLink2(this,]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkTitleNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{5f190d91-3dbc-4489-9878-3c092caf35b6}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle2\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\"/>]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{423874f8-c300-4bfb-b7a1-42e2159e3b19}\" Name=\"SortBehavior\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Sort Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SortBehavior\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SortBehavior\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{6d2c4fde-3605-428e-a236-ce5f3dc2b4d4}\" Name=\"SyncClientId\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" DisplayName=\"Client Id\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SyncClientId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SyncClientId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Default></Switch><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[\">]]></HTML></Case><Default><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{1344423c-c7f9-4134-88e4-ad842e2d723c}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onmousedown=\"javascript:VerifyFolderHref(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[')\"]]></HTML><HTML><![CDATA[\" onclick=\"return HandleFolder(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[');\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkFilenameNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{224ba411-da77-4050-b0eb-62d422f13d3e}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"IconOverlay\" /></FieldRefs><DisplayPattern><SetVar Name=\"DocIconImg\"><SetVar Name=\"DocIconAltText\"><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfSubString><Expr1>0x0120D5</Expr1><Expr2><Column Name=\"ContentTypeId\" /></Expr2><Then><HTML>Document Collection: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Else></IfSubString></Then><Else><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /></Else></IfEqual></SetVar><SetVar Name=\"DocIconFileName\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfEqual><Expr1><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></Expr1><Expr2><HTML>|</HTML></Expr2><Then><HTML>folder.gif</HTML></Then><Else><SetVar Name=\"FolderIconFromMap\"><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></SetVar><IfEqual><Expr1><GetVar Name=\"FolderIconFromMap\" /></Expr1><Expr2><MapToIcon /></Expr2><Then><HTML>folder.gif</HTML></Then><Else><GetVar Name=\"FolderIconFromMap\" /></Else></IfEqual></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"IconOverlay\" /></MapToIcon></Else></IfEqual></SetVar><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" title=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" src=\"/_layouts/images/]]></HTML><GetVar Name=\"DocIconFileName\" /><HTML><![CDATA[\" />]]></HTML></SetVar><SetVar Name=\"DocIconOverlayImg\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then /><Else><HTML><![CDATA[<img class=\"ms-vb-icon-overlay\" alt=\"*\" src=\"/_layouts/images/]]></HTML><MapToOverlay><Column Name=\"IconOverlay\" /></MapToOverlay><HTML><![CDATA[\" />]]></HTML></Else></IfEqual></SetVar><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><FieldSwitch><Expr><GetVar Name=\"FileDialog\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><HTML><![CDATA[<a href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" IncludeVersions=\"TRUE\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b824e17e-a1b3-426e-aecf-f0184d900485}\" Name=\"ItemChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ItemChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ItemChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{960ff01f-2b6d-4f1b-9c3f-e19ad8927341}\" Name=\"FolderChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Folder Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FolderChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FolderChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{c6960011-2b59-49ea-938d-9f7be684fcb3}\" Name=\"Objective\" Type=\"Note\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Objective\" Required=\"TRUE\" Sealed=\"TRUE\" TitleField=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Objective\" ColName=\"ntext2\" /><Field ID=\"{5f01c025-f8f0-49e3-8174-0341102cdfeb}\" Type=\"Computed\" Name=\"LinkObjectiveNoMenu\" ReadOnly=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" DisplayName=\"Objective\" Dir=\"\" DisplayNameSrcField=\"Objective\" AuthoringInfo=\"(linked to item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkObjectiveNoMenu\"><FieldRefs><FieldRef Name=\"Objective\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick='GoToLink(this);return false;' target=\"_self\">]]></HTML><Limit Len=\"250\" MoreText=\"...\" AutoHyperLink=\"TRUE\" AutoNewLine=\"TRUE\"><Column Name=\"Objective\" Default=\"(no title)\" /></Limit><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></DisplayPattern></Field><Field ID=\"{19c07e89-d7c3-483c-b03d-c82cca2a9db2}\" Type=\"Computed\" Name=\"LinkObjective\" Sortable=\"FALSE\" ClassInfo=\"Menu\" Filterable=\"FALSE\" ReadOnly=\"TRUE\" DisplayName=\"Objective\" DisplayNameSrcField=\"Objective\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkObjective\"><FieldRefs><FieldRef Name=\"Objective\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"LinkObjectiveNoMenu\" /><FieldRef Name=\"ServerUrl\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML><Field Name=\"LinkObjectiveNoMenu\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility: hidden\" alt=\"\" /></td></tr></table>]]></HTML></DisplayPattern></Field></Fields>";
            DBAdapter.s2007ThingsToBringFields =
                "<Fields><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Sealed=\"TRUE\" ColName=\"nvarchar1\" Description=\"\" /><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\" Sealed=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ID=\"{6df9bd52-550e-4a30-bc31-a4366832a87f}\" Name=\"Comment\" Type=\"Text\" DisplayName=\"Comment\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Comment\" ColName=\"nvarchar3\" /><Field ID=\"{549ae04a-85a2-4ae7-9b63-1617e69c1a1d}\" Name=\"Owner\" Type=\"Text\" DisplayName=\"Owner\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Owner\" ColName=\"nvarchar4\" /><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&nbsp;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\">]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table height=\"100%\" cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility:hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');return false;\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\">]]></HTML></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A TABINDEX=-1 HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\"></A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 ALT=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/]]></HTML><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon><HTML><![CDATA[\"></A>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /></Fields>";
            DBAdapter.s2010ThingsToBringFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Item\" Required=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" Sealed=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"EditLink(this, ]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&#160;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"EditLink2(this,]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Item\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\" Sealed=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkTitleNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{5f190d91-3dbc-4489-9878-3c092caf35b6}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle2\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\"/>]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{423874f8-c300-4bfb-b7a1-42e2159e3b19}\" Name=\"SortBehavior\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Sort Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SortBehavior\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SortBehavior\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{6d2c4fde-3605-428e-a236-ce5f3dc2b4d4}\" Name=\"SyncClientId\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" DisplayName=\"Client Id\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SyncClientId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SyncClientId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Default></Switch><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[\">]]></HTML></Case><Default><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{1344423c-c7f9-4134-88e4-ad842e2d723c}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onmousedown=\"javascript:VerifyFolderHref(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[')\"]]></HTML><HTML><![CDATA[\" onclick=\"return HandleFolder(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[');\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkFilenameNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{224ba411-da77-4050-b0eb-62d422f13d3e}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"IconOverlay\" /></FieldRefs><DisplayPattern><SetVar Name=\"DocIconImg\"><SetVar Name=\"DocIconAltText\"><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfSubString><Expr1>0x0120D5</Expr1><Expr2><Column Name=\"ContentTypeId\" /></Expr2><Then><HTML>Document Collection: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Else></IfSubString></Then><Else><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /></Else></IfEqual></SetVar><SetVar Name=\"DocIconFileName\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfEqual><Expr1><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></Expr1><Expr2><HTML>|</HTML></Expr2><Then><HTML>folder.gif</HTML></Then><Else><SetVar Name=\"FolderIconFromMap\"><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></SetVar><IfEqual><Expr1><GetVar Name=\"FolderIconFromMap\" /></Expr1><Expr2><MapToIcon /></Expr2><Then><HTML>folder.gif</HTML></Then><Else><GetVar Name=\"FolderIconFromMap\" /></Else></IfEqual></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"IconOverlay\" /></MapToIcon></Else></IfEqual></SetVar><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" title=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" src=\"/_layouts/images/]]></HTML><GetVar Name=\"DocIconFileName\" /><HTML><![CDATA[\" />]]></HTML></SetVar><SetVar Name=\"DocIconOverlayImg\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then /><Else><HTML><![CDATA[<img class=\"ms-vb-icon-overlay\" alt=\"*\" src=\"/_layouts/images/]]></HTML><MapToOverlay><Column Name=\"IconOverlay\" /></MapToOverlay><HTML><![CDATA[\" />]]></HTML></Else></IfEqual></SetVar><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><FieldSwitch><Expr><GetVar Name=\"FileDialog\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><HTML><![CDATA[<a href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" IncludeVersions=\"TRUE\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b824e17e-a1b3-426e-aecf-f0184d900485}\" Name=\"ItemChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ItemChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ItemChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{960ff01f-2b6d-4f1b-9c3f-e19ad8927341}\" Name=\"FolderChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Folder Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FolderChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FolderChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{6df9bd52-550e-4a30-bc31-a4366832a87f}\" Name=\"Comment\" Type=\"Text\" DisplayName=\"Comment\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Comment\" ColName=\"nvarchar3\" /><Field ID=\"{549ae04a-85a2-4ae7-9b63-1617e69c1a1d}\" Name=\"Owner\" Type=\"Text\" DisplayName=\"Owner\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Owner\" ColName=\"nvarchar4\" /></Fields>";
            DBAdapter.s2007DirectionsFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&nbsp;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\" Hidden=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\">]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\">]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><HTML><![CDATA[<table height=\"100%\" cellspacing=0 class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Counter Type=\"View\" /><HTML>\" Id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" Type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><HTML><![CDATA[\"><tr><td width=\"100%\" Class=\"ms-vb\">]]></HTML></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=13 style=\"visibility:hidden\" alt=\"\"></td></tr></table>]]></HTML></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');return false;\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<A onfocus=\"OnLink(this)\" HREF=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=0 width=1 height=1 alt=\"]]></HTML><HTML>Use SHIFT+ENTER to open the menu (new window).</HTML><HTML><![CDATA[\">]]></HTML></Then></IfEqual><HTML><![CDATA[</A>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<IMG SRC=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\">]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\">]]></HTML></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<A TABINDEX=-1 HREF=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 alt=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/folder.gif\"></A>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" ONCLICK=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<IMG BORDER=0 ALT=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" title=\"]]></HTML><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" SRC=\"/_layouts/images/]]></HTML><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon><HTML><![CDATA[\"></A>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{f09a8636-9713-4467-a752-cc75346dcef5}\" Type=\"Note\" Name=\"Text\" DisplayName=\"Text\" Required=\"TRUE\" NumLines=\"20\" Sortable=\"FALSE\" RichText=\"TRUE\" TitleField=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Text\" ColName=\"ntext2\" /></Fields>";
            DBAdapter.s2010DirectionsFields =
                "<Fields><Field ID=\"{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}\" ColName=\"tp_ID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Counter\" Name=\"ID\" PrimaryKey=\"TRUE\" DisplayName=\"ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ID\" FromBaseType=\"TRUE\" /><Field ID=\"{03e45e84-1992-4d42-9116-26f756012634}\" RowOrdinal=\"0\" Type=\"ContentTypeId\" Sealed=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Content Type ID\" Name=\"ContentTypeId\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field><Field ID=\"{fa564e0f-0c70-4ab9-b863-0177e6ddd247}\" Type=\"Text\" Name=\"Title\" DisplayName=\"Title\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Title\" FromBaseType=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ColName=\"nvarchar1\" /><Field ID=\"{28cf69c5-fa48-462a-b5cd-27b6f9d2bd5f}\" ColName=\"tp_Modified\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Modified\" DisplayName=\"Modified\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{8c06beca-0777-48f7-91c7-6da68bc07b69}\" ColName=\"tp_Created\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"DateTime\" Name=\"Created\" DisplayName=\"Created\" StorageTZ=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created\" FromBaseType=\"TRUE\" /><Field ID=\"{1df5e554-ec7e-46a6-901d-d85a3881cb18}\" ColName=\"tp_Author\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Author\" DisplayName=\"Created By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Author\" FromBaseType=\"TRUE\" /><Field ID=\"{d31655d1-1d5b-4511-95a1-7a09e9b75bf2}\" ColName=\"tp_Editor\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"User\" List=\"UserInfo\" Name=\"Editor\" DisplayName=\"Modified By\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Editor\" FromBaseType=\"TRUE\" /><Field ID=\"{26d0756c-986a-48a7-af35-bf18ab85ff4a}\" ColName=\"tp_HasCopyDestinations\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_HasCopyDestinations\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Has Copy Destinations\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_HasCopyDestinations\" FromBaseType=\"TRUE\" /><Field ID=\"{6b4e226d-3d88-4a36-808d-a129bf52bccf}\" ColName=\"tp_CopySource\" RowOrdinal=\"0\" Sealed=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_CopySource\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Copy Source\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_CopySource\" FromBaseType=\"TRUE\" /><Field ID=\"{d4e44a66-ee3a-4d02-88c9-4ec5ff3f4cd5}\" ColName=\"tp_Version\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" SetAs=\"owshiddenversion\" Name=\"owshiddenversion\" DisplayName=\"owshiddenversion\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"owshiddenversion\" FromBaseType=\"TRUE\" /><Field ID=\"{f1e020bc-ba26-443f-bf2f-b68715017bbc}\" ColName=\"tp_WorkflowVersion\" RowOrdinal=\"0\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"WorkflowVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Version\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{7841bf41-43d0-4434-9f50-a673baef7631}\" ColName=\"tp_UIVersion\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_UIVersion\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"UI Version\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{dce8262a-3ae9-45aa-aab4-83bd75fb738a}\" ColName=\"tp_UIVersionString\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Text\" Name=\"_UIVersionString\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Version\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_UIVersionString\" FromBaseType=\"TRUE\" /><Field ID=\"{67df98f4-9dec-48ff-a553-29bece9c5bf4}\" ColName=\"tp_HasAttachment\" RowOrdinal=\"0\" Type=\"Attachments\" Name=\"Attachments\" DisplayName=\"Attachments\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Attachments\" FromBaseType=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" /><Field ID=\"{fdc3b2ed-5bf2-4835-a4bc-b885f3396a61}\" ColName=\"tp_ModerationStatus\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"ModStat\" Name=\"_ModerationStatus\" DisplayName=\"Approval Status\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationStatus\" FromBaseType=\"TRUE\"><CHOICES><CHOICE>0;#Approved</CHOICE><CHOICE>1;#Rejected</CHOICE><CHOICE>2;#Pending</CHOICE><CHOICE>3;#Draft</CHOICE><CHOICE>4;#Scheduled</CHOICE></CHOICES><Default>0</Default></Field><Field ID=\"{34ad21eb-75bd-4544-8c73-0e08330291fe}\" ReadOnly=\"TRUE\" Type=\"Note\" Name=\"_ModerationComments\" DisplayName=\"Approver Comments\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" Filterable=\"FALSE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_ModerationComments\" FromBaseType=\"TRUE\" ColName=\"ntext1\" /><Field ID=\"{503f1caa-358e-4918-9094-4a2cdc4bc034}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"Edit\" Sortable=\"FALSE\" Filterable=\"FALSE\" DisplayName=\"Edit\" ClassInfo=\"Icon\" AuthoringInfo=\"(link to edit item)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Edit\" FromBaseType=\"TRUE\"><DisplayPattern><IfHasRights><RightsChoices><RightsGroup PermEditListItems=\"required\" /></RightsChoices><Then><HTML><![CDATA[<a href=\"]]></HTML><URL Cmd=\"Edit\" /><HTML><![CDATA[\" onclick=\"EditLink(this, ]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><HTML>Edit</HTML><HTML><![CDATA[\" src=\"/_layouts/images/edititem.gif\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Then><Else><HTML><![CDATA[&#160;]]></HTML></Else></IfHasRights></DisplayPattern></Field><Field ID=\"{bc91a437-52e7-49e1-8c4e-4698904b2b6d}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitleNoMenu\" DisplayName=\"Title\" Dir=\"\" DisplayNameSrcField=\"Title\" AuthoringInfo=\"(linked to item)\" EnableLookup=\"TRUE\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitleNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkFilenameNoMenu\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><Field Name=\"LinkFilenameNoMenu\" /></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"EditLink2(this,]]></HTML><Counter Type=\"View\" /><HTML><![CDATA[);return false;\" target=\"_self\">]]></HTML><Column HTMLEncode=\"TRUE\" Name=\"Title\" Default=\"(no title)\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{82642ec8-ef9b-478f-acf9-31f7d45fbc31}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle\" FromBaseType=\"TRUE\" Hidden=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkTitleNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{5f190d91-3dbc-4489-9878-3c092caf35b6}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkTitle2\" DisplayName=\"Title\" DisplayNameSrcField=\"Title\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to item with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkTitle2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"Title\" /><FieldRef Name=\"LinkTitleNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkTitleNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkTitleNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{b1f7969b-ea65-42e1-8b54-b588292635f2}\" ReadOnly=\"TRUE\" Type=\"Computed\" Sortable=\"FALSE\" Filterable=\"FALSE\" Name=\"SelectTitle\" Hidden=\"TRUE\" CanToggleHidden=\"TRUE\" DisplayName=\"Select\" Dir=\"\" AuthoringInfo=\"(web part connection)\" HeaderImage=\"blank.gif\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SelectTitle\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><GetVar Name=\"SelectedID\" /></Expr1><Expr2><Column Name=\"ID\" /></Expr2><Then><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbsel.gif\" alt=\"]]></HTML><HTML>Selected</HTML><HTML><![CDATA[\"/>]]></HTML></Then><Else><HTML><![CDATA[<a href=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" onclick=\"javascript:SelectField(']]></HTML><GetVar Name=\"View\" /><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"ID\" /></ScriptQuote><HTML><![CDATA[');return false;\" target=\"_self\">]]></HTML><HTML><![CDATA[<img border=\"0\" align=\"absmiddle\" style=\"cursor: pointer\" src=\"/_layouts/images/rbunsel.gif\"  alt=\"]]></HTML><HTML>Normal</HTML><HTML><![CDATA[\"/>]]></HTML><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{50a54da4-1528-4e67-954a-e2d24f1e9efb}\" Name=\"InstanceID\" DisplayName=\"Instance ID\" ColName=\"tp_InstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Integer\" Min=\"0\" Max=\"99991231\" Filterable=\"TRUE\" Sortable=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"InstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{ca4addac-796f-4b23-b093-d2a3f65c0774}\" ColName=\"tp_ItemOrder\" RowOrdinal=\"0\" Name=\"Order\" DisplayName=\"Order\" Type=\"Number\" Hidden=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Order\" FromBaseType=\"TRUE\" /><Field ID=\"{ae069f25-3ac2-4256-b9c3-15dbc15da0e0}\" ColName=\"tp_GUID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"GUID\" DisplayName=\"GUID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"GUID\" FromBaseType=\"TRUE\" /><Field ID=\"{de8beacf-5505-47cd-80a6-aa44e7ffe2f4}\" ColName=\"tp_WorkflowInstanceID\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Guid\" Name=\"WorkflowInstanceID\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Workflow Instance ID\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"WorkflowInstanceID\" FromBaseType=\"TRUE\" /><Field ID=\"{94f89715-e097-4e8b-ba79-ea02aa8b7adb}\" Name=\"FileRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"URL Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FullUrl\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileRef\" FromBaseType=\"TRUE\" /><Field ID=\"{56605df6-8fa1-47e4-a04c-5b384d59609f}\" Name=\"FileDirRef\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Lookup\" DisplayName=\"Path\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"DirName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileDirRef\" FromBaseType=\"TRUE\" /><Field ID=\"{173f76c8-aebd-446a-9bc9-769a2bd2c18f}\" Name=\"Last_x0020_Modified\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Modified\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeLastModified\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Last_x0020_Modified\" FromBaseType=\"TRUE\" /><Field ID=\"{998b5cff-4a35-47a7-92f3-3914aa6aa4a2}\" Name=\"Created_x0020_Date\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Created\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"TimeCreated\" Format=\"TRUE\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Created_x0020_Date\" FromBaseType=\"TRUE\" /><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{423874f8-c300-4bfb-b7a1-42e2159e3b19}\" Name=\"SortBehavior\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Sort Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SortBehavior\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SortBehavior\" FromBaseType=\"TRUE\" /><Field ID=\"{ba3c27ee-4791-4867-8821-ff99000bac98}\" Name=\"PermMask\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Computed\" DisplayName=\"Effective Permissions Mask\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"PermMask\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><CurrentRights /></DisplayPattern></Field><Field ID=\"{8553196d-ec8d-4564-9861-3dbe931050c8}\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" ShowInVersionHistory=\"FALSE\" Type=\"File\" Name=\"FileLeafRef\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" AuthoringInfo=\"(for use in forms)\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"LeafName\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FileLeafRef\" FromBaseType=\"TRUE\" /><Field ID=\"{4b7403de-8d94-43e8-9f0f-137a3e298126}\" Name=\"UniqueId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Unique Id\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"UniqueId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"UniqueId\" FromBaseType=\"TRUE\" /><Field ID=\"{6d2c4fde-3605-428e-a236-ce5f3dc2b4d4}\" Name=\"SyncClientId\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" DisplayName=\"Client Id\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"SyncClientId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"SyncClientId\" FromBaseType=\"TRUE\" /><Field ID=\"{c5c4b81c-f1d9-4b43-a6a2-090df32ebb68}\" Name=\"ProgId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ProgId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ProgId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ProgId\" FromBaseType=\"TRUE\" /><Field ID=\"{dddd2420-b270-4735-93b5-92b713d0944d}\" Name=\"ScopeId\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"ScopeId\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ScopeId\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ScopeId\" FromBaseType=\"TRUE\" /><Field ID=\"{39360f11-34cf-4356-9945-25c44e68dade}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Text\" Name=\"File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"File_x0020_Type\" FromBaseType=\"TRUE\" ColName=\"nvarchar2\" /><Field ReadOnly=\"TRUE\" ID=\"{4ef1b78f-fdba-48dc-b8ab-3fa06a0c9804}\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"HTML_x0020_File_x0020_Type\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"HTML File Type\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"HTML_x0020_File_x0020_Type\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /></FieldRefs><DisplayPattern /></Field><Field ID=\"{3c6303be-e21f-4366-80d7-d6d0a3b22c7a}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FileDirRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"ID\" /><FieldRef Name=\"ServerUrl\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"_HasCopyDestinations\" /><FieldRef Name=\"_CopySource\" /><FieldRef Name=\"ContentType\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"_ModerationStatus\" /><FieldRef Name=\"_UIVersion\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML></Default></Switch><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /><HTML>\" Url=\"</HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML>\" DRef=\"</HTML><Field Name=\"FileDirRef\" /><HTML>\" Perm=\"</HTML><Field Name=\"PermMask\" /><HTML>\" type=\"</HTML><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>\" Ext=\"</HTML><Column Name=\"File_x0020_Type\" /><HTML>\" Icon=\"</HTML><MapToAll><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToAll><HTML>\" OType=\"</HTML><LookupColumn Name=\"FSObjType\" /><HTML>\" COUId=\"</HTML><HTML>\" HCD=\"</HTML><Column Name=\"_HasCopyDestinations\" /><HTML>\" CSrc=\"</HTML><Column Name=\"_CopySource\" URLEncodeAsURL=\"TRUE\" /><HTML>\" MS=\"</HTML><Column Name=\"_ModerationStatus\" /><HTML><![CDATA[\" CType=\"]]></HTML><Column Name=\"ContentType\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" CId=\"]]></HTML><Column Name=\"ContentTypeId\" /><HTML>\" UIS=\"</HTML><Column Name=\"_UIVersion\" /><GetVar Name=\"_EditMenuTableExtra\" /><HTML>\" SUrl=\"</HTML><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[\">]]></HTML></Case><Default><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{1344423c-c7f9-4134-88e4-ad842e2d723c}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableStart2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table Start\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableStart2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Counter Type=\"View\" /><HTML>\" id=\"</HTML><Column Name=\"ID\" HTMLEncode=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{2ea78cef-1bf9-4019-960a-02c41636cb47}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"_EditMenuTableEnd\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Edit Menu Table End\" ClassInfo=\"Menu\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_EditMenuTableEnd\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"ID\" /></FieldRefs><DisplayPattern><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></DisplayPattern></Field><Field ID=\"{9d30f126-ba48-446b-b8f9-83745f322ebe}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilenameNoMenu\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" Hidden=\"TRUE\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" AuthoringInfo=\"(linked to document)\" ListItemMenuAllowed=\"Prohibited\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilenameNoMenu\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"Created_x0020_Date\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"ContentTypeId\" /><FieldRef Name=\"PermMask\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onmousedown=\"javascript:VerifyFolderHref(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[')\"]]></HTML><HTML><![CDATA[\" onclick=\"return HandleFolder(this,event, ']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[');\">]]></HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><Field Name=\"ServerUrl\" URLEncodeAsURL=\"TRUE\" /><HTML><![CDATA[\" onclick=\"return DispEx(this,event,']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ServerProperty Select=\"HtmlTransform\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"DefaultItemOpen\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><MapToControl><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToControl></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Column Name=\"HTML_x0020_File_x0020_Type\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><UserID AllowAnonymous=\"TRUE\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><ListProperty Select=\"ForceCheckout\" /></ScriptQuote><HTML><![CDATA[',']]></HTML><HTML><![CDATA[',']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><Field Name=\"PermMask\" /></ScriptQuote><HTML><![CDATA[')\">]]></HTML><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName><IfEqual><Expr1><GetVar Name=\"ShowAccessibleIcon\" /></Expr1><Expr2>1</Expr2><Then><HTML><![CDATA[<img src=\"/_layouts/images/blank.gif\" class=\"ms-hidden\" border=\"0\" width=\"1\" height=\"1\" alt=\"Use SHIFT+ENTER to open the menu (new window).\"/>]]></HTML></Then></IfEqual><HTML><![CDATA[</a>]]></HTML><IfNew Name=\"Created_x0020_Date\"><HTML><![CDATA[<img src=\"/_layouts/1033/images/new.gif\" alt=\"]]></HTML><HTML>New</HTML><HTML><![CDATA[\" class=\"ms-newgif\" />]]></HTML></IfNew></Else></IfEqual></DisplayPattern></Field><Field ID=\"{5cc6dc79-3710-4374-b433-61cb4a686c12}\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu)\" ListItemMenuAllowed=\"Required\" LinkToItemAllowed=\"Prohibited\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart2\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Switch><Expr><GetVar Name=\"MasterVersion\" /></Expr><Case Value=\"4\"><HTML><![CDATA[<div class=\"ms-vb itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\">]]></HTML><Field Name=\"LinkFilenameNoMenu\" /><HTML><![CDATA[</div>]]></HTML><HTML><![CDATA[<div class=\"s4-ctx\" onmouseover=\"OnChildItem(this.parentNode); return false;\">]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[<a onfocus=\"OnChildItem(this.parentNode.parentNode); return false;\" onclick=\"PopMenuFromChevron(event); return false;\" href=\"javascript:;\" title=\"Open Menu\"></a>]]></HTML><HTML><![CDATA[<span>&nbsp;</span>]]></HTML><HTML><![CDATA[</div>]]></HTML></Case><Default><HTML><![CDATA[<table height=\"100%\" cellspacing=\"0\" class=\"ms-unselectedtitle itx\" onmouseover=\"OnItem(this)\" CTXName=\"ctx]]></HTML><Field Name=\"_EditMenuTableStart2\" /><HTML><![CDATA[\"><tr><td width=\"100%\" class=\"ms-vb\">]]></HTML><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><HTML><![CDATA[</td><td><img src=\"/_layouts/images/blank.gif\" width=\"13\" style=\"visibility:hidden\" alt=\"\"/></td></tr></table>]]></HTML></Default></Switch></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{224ba411-da77-4050-b0eb-62d422f13d3e}\" Hidden=\"TRUE\" ReadOnly=\"TRUE\" Type=\"Computed\" Name=\"LinkFilename2\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Name\" DisplayNameSrcField=\"FileLeafRef\" Filterable=\"FALSE\" ClassInfo=\"Menu\" AuthoringInfo=\"(linked to document with edit menu) (old)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"LinkFilename2\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"LinkFilenameNoMenu\" /><FieldRef Name=\"_EditMenuTableStart\" /><FieldRef Name=\"_EditMenuTableEnd\" /></FieldRefs><DisplayPattern><FieldSwitch><Expr><GetVar Name=\"FreeForm\" /></Expr><Case Value=\"TRUE\"><Field Name=\"LinkFilenameNoMenu\" /></Case><Default><Field Name=\"_EditMenuTableStart\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"1\" /><Field Name=\"LinkFilenameNoMenu\" /><SetVar Name=\"ShowAccessibleIcon\" Value=\"0\" /><Field Name=\"_EditMenuTableEnd\" /></Default></FieldSwitch></DisplayPattern></Field><Field ID=\"{081c6e4c-5c14-4f20-b23e-1a71ceb6a67c}\" Type=\"Computed\" ReadOnly=\"TRUE\" Name=\"DocIcon\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Type\" TextOnly=\"TRUE\" ClassInfo=\"Icon\" AuthoringInfo=\"(icon linked to document)\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"DocIcon\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"File_x0020_Type\" /><FieldRef Name=\"FSObjType\" /><FieldRef Name=\"FileRef\" /><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"HTML_x0020_File_x0020_Type\" /><FieldRef Name=\"PermMask\" /><FieldRef Name=\"IconOverlay\" /></FieldRefs><DisplayPattern><SetVar Name=\"DocIconImg\"><SetVar Name=\"DocIconAltText\"><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfSubString><Expr1>0x0120D5</Expr1><Expr2><Column Name=\"ContentTypeId\" /></Expr2><Then><HTML>Document Collection: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><HTML>Folder: </HTML><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Else></IfSubString></Then><Else><LookupColumn Name=\"Title\" HTMLEncode=\"TRUE\" /></Else></IfEqual></SetVar><SetVar Name=\"DocIconFileName\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><IfEqual><Expr1><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></Expr1><Expr2><HTML>|</HTML></Expr2><Then><HTML>folder.gif</HTML></Then><Else><SetVar Name=\"FolderIconFromMap\"><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></SetVar><IfEqual><Expr1><GetVar Name=\"FolderIconFromMap\" /></Expr1><Expr2><MapToIcon /></Expr2><Then><HTML>folder.gif</HTML></Then><Else><GetVar Name=\"FolderIconFromMap\" /></Else></IfEqual></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"HTML_x0020_File_x0020_Type\" /><HTML>|</HTML><Column Name=\"File_x0020_Type\" /></MapToIcon></Else></IfEqual></Then><Else><MapToIcon><Column Name=\"IconOverlay\" /></MapToIcon></Else></IfEqual></SetVar><HTML><![CDATA[<img border=\"0\" alt=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" title=\"]]></HTML><GetVar Name=\"DocIconAltText\" /><HTML><![CDATA[\" src=\"/_layouts/images/]]></HTML><GetVar Name=\"DocIconFileName\" /><HTML><![CDATA[\" />]]></HTML></SetVar><SetVar Name=\"DocIconOverlayImg\"><IfEqual><Expr1><Column Name=\"IconOverlay\" /></Expr1><Expr2 /><Then /><Else><HTML><![CDATA[<img class=\"ms-vb-icon-overlay\" alt=\"*\" src=\"/_layouts/images/]]></HTML><MapToOverlay><Column Name=\"IconOverlay\" /></MapToOverlay><HTML><![CDATA[\" />]]></HTML></Else></IfEqual></SetVar><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><FieldSwitch><Expr><GetVar Name=\"RecursiveView\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><SetVar Name=\"UnencodedFilterLink\"><SetVar Name=\"RootFolder\"><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></SetVar><SetVar Name=\"SkipHost\">1</SetVar><SetVar Name=\"FolderCTID\"><FieldSwitch><Expr><ListProperty Select=\"EnableContentTypes\" /></Expr><Case Value=\"1\"><Column Name=\"ContentTypeId\" /></Case></FieldSwitch></SetVar><FilterLink Default=\"\" Paged=\"FALSE\" /></SetVar><FieldSwitch><Expr><GetVar Name=\"FileDialog\" /></Expr><Case Value=\"1\"><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /></Case><Default><HTML><![CDATA[<a href=\"]]></HTML><GetVar Name=\"UnencodedFilterLink\" HTMLEncode=\"TRUE\" /><HTML><![CDATA[\" onclick=\"javascript:EnterFolder(']]></HTML><ScriptQuote NotAddingQuote=\"TRUE\"><GetVar Name=\"UnencodedFilterLink\" /></ScriptQuote><HTML><![CDATA[');javascript:return false;\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Default></FieldSwitch></Default></FieldSwitch></Then><Else><HTML><![CDATA[<a onfocus=\"OnLink(this)\" href=\"]]></HTML><URL /><HTML><![CDATA[\" onclick=\"GoToLink(this);return false;\" target=\"_self\">]]></HTML><GetVar Name=\"DocIconImg\" /><GetVar Name=\"DocIconOverlayImg\" /><HTML><![CDATA[</a>]]></HTML></Else></IfEqual></DisplayPattern></Field><Field ID=\"{105f76ce-724a-4bba-aece-f81f2fce58f5}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"ServerUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Server Relative URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ServerUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HTML>/</HTML><LookupColumn Name=\"FileRef\" /></DisplayPattern></Field><Field ID=\"{7177cfc7-f399-4d4d-905d-37dd51bc90bf}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"EncodedAbsUrl\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Encoded Absolute URL\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"EncodedAbsUrl\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileRef\" /></FieldRefs><DisplayPattern><HttpHost URLEncodeAsURL=\"TRUE\" /><HTML>/</HTML><LookupColumn Name=\"FileRef\" IncludeVersions=\"TRUE\" URLEncodeAsURL=\"TRUE\" /></DisplayPattern></Field><Field ID=\"{7615464b-559e-4302-b8e2-8f440b913101}\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" Type=\"Computed\" Name=\"BaseName\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"File Name\" Filterable=\"FALSE\" RenderXMLUsingPattern=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"BaseName\" FromBaseType=\"TRUE\"><FieldRefs><FieldRef Name=\"FileLeafRef\" /><FieldRef Name=\"FSObjType\" /></FieldRefs><DisplayPattern><IfEqual><Expr1><LookupColumn Name=\"FSObjType\" /></Expr1><Expr2>1</Expr2><Then><LookupColumn Name=\"FileLeafRef\" HTMLEncode=\"TRUE\" /></Then><Else><UrlBaseName HTMLEncode=\"TRUE\"><LookupColumn Name=\"FileLeafRef\" /></UrlBaseName></Else></IfEqual></DisplayPattern></Field><Field ID=\"{687c7f94-686a-42d3-9b67-2782eac4b4f8}\" Name=\"MetaInfo\" DisplaceOnUpgrade=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Property Bag\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"MetaInfo\" JoinColName=\"DoclibRowId\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"MetaInfo\" FromBaseType=\"TRUE\" /><Field ID=\"{43bdd51b-3c5b-4e78-90a8-fb2087f71e70}\" ColName=\"tp_Level\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Integer\" Name=\"_Level\" DisplaceOnUpgrade=\"TRUE\" DisplayName=\"Level\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_Level\" FromBaseType=\"TRUE\" /><Field ID=\"{c101c3e7-122d-4d4d-bc34-58e94a38c816}\" ColName=\"tp_IsCurrentVersion\" DisplaceOnUpgrade=\"TRUE\" RowOrdinal=\"0\" ReadOnly=\"TRUE\" Type=\"Boolean\" Name=\"_IsCurrentVersion\" DisplayName=\"Is Current Version\" Hidden=\"TRUE\" Required=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"_IsCurrentVersion\" FromBaseType=\"TRUE\" /><Field ID=\"{b824e17e-a1b3-426e-aecf-f0184d900485}\" Name=\"ItemChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"ItemChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ItemChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{960ff01f-2b6d-4f1b-9c3f-e19ad8927341}\" Name=\"FolderChildCount\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Folder Child Count\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FolderChildCount\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FolderChildCount\" FromBaseType=\"TRUE\" /><Field ID=\"{f09a8636-9713-4467-a752-cc75346dcef5}\" Type=\"Note\" Name=\"Text\" DisplayName=\"Text\" Required=\"TRUE\" NumLines=\"20\" Sortable=\"FALSE\" RichText=\"TRUE\" TitleField=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"Text\" ColName=\"ntext2\" /></Fields>";
            DBAdapter.s2007Fields =
                "<Fields><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" RowOrdinal=\"0\" Type=\"Text\" DisplayName=\"Content Type\" ReadOnly=\"TRUE\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" ColName=\"tp_ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" /></Fields>";
            DBAdapter.s2010Fields =
                "<Fields><Field ID=\"{30bb605f-5bae-48fe-b4e3-1f81d9772af9}\" Name=\"FSObjType\" DisplaceOnUpgrade=\"TRUE\" ReadOnly=\"TRUE\" Hidden=\"TRUE\" ShowInFileDlg=\"FALSE\" Type=\"Lookup\" DisplayName=\"Item Type\" List=\"Docs\" FieldRef=\"ID\" ShowField=\"FSType\" JoinColName=\"DoclibRowId\" JoinRowOrdinal=\"0\" JoinType=\"INNER\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"FSObjType\" FromBaseType=\"TRUE\" /><Field ID=\"{c042a256-787d-4a6f-8a8a-cf6ab767f12d}\" Type=\"Computed\" DisplayName=\"Content Type\" Name=\"ContentType\" DisplaceOnUpgrade=\"TRUE\" RenderXMLUsingPattern=\"TRUE\" Sortable=\"FALSE\" SourceID=\"http://schemas.microsoft.com/sharepoint/v3\" StaticName=\"ContentType\" Group=\"_Hidden\" PITarget=\"MicrosoftWindowsSharePointServices\" PIAttribute=\"ContentTypeID\" FromBaseType=\"TRUE\" ColName=\"tp_ContentType\"><FieldRefs><FieldRef Name=\"ContentTypeId\" /></FieldRefs><DisplayPattern><MapToContentType><Column Name=\"ContentTypeId\" /></MapToContentType></DisplayPattern></Field></Fields>";
            DBAdapter.s_listTemplates = new Dictionary<string, SPListTemplateCollection>();
            DBAdapter.s_webPartPageTemplates = new Dictionary<string, WebPartTemplateResourceManager>();
            DBAdapter.s_contentTypeManager = new Dictionary<string, ContentTypeResourceManager>();
            DBAdapter.s2007MeetingInstancesFields =
                "<Fields><Field Name=\"ID\" ColName=\"tp_ID\" Type=\"Counter\" /><Field Name=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" Type=\"ContentTypeId\" /><Field Name=\"ContentType\" ColName=\"tp_ContentType\" Type=\"Text\" /><Field Name=\"Title\" ColName=\"nvarchar6\" Type=\"Text\" /><Field Name=\"Modified\" ColName=\"tp_Modified\" Type=\"DateTime\" /><Field Name=\"Created\" ColName=\"tp_Created\" Type=\"DateTime\" /><Field Name=\"Author\" ColName=\"tp_Author\" Type=\"User\" /><Field Name=\"Editor\" ColName=\"tp_Editor\" Type=\"User\" /><Field Name=\"_HasCopyDestinations\" ColName=\"tp_HasCopyDestinations\" Type=\"Boolean\" /><Field Name=\"_CopySource\" ColName=\"tp_CopySource\" Type=\"Text\" /><Field Name=\"owshiddenversion\" ColName=\"tp_Version\" Type=\"Integer\" /><Field Name=\"WorkflowVersion\" ColName=\"tp_WorkflowVersion\" Type=\"Integer\" /><Field Name=\"_UIVersion\" ColName=\"tp_UIVersion\" Type=\"Integer\" /><Field Name=\"_UIVersionString\" ColName=\"tp_UIVersionString\" Type=\"Text\" /><Field Name=\"Attachments\" ColName=\"tp_HasAttachment\" Type=\"Attachments\" /><Field Name=\"_ModerationStatus\" ColName=\"tp_ModerationStatus\" Type=\"ModStat\" /><Field Name=\"_ModerationComments\" ColName=\"ntext4\" Type=\"Note\" /><Field Name=\"InstanceID\" ColName=\"tp_InstanceID\" Type=\"Integer\" /><Field Name=\"Order\" ColName=\"tp_ItemOrder\" Type=\"Number\" /><Field Name=\"GUID\" ColName=\"tp_GUID\" Type=\"Guid\" /><Field Name=\"WorkflowInstanceID\" ColName=\"tp_WorkflowInstanceID\" Type=\"Guid\" /><Field Name=\"File_x0020_Type\" ColName=\"nvarchar7\" Type=\"Text\" /><Field Name=\"_Level\" ColName=\"tp_Level\" Type=\"Integer\" /><Field Name=\"_IsCurrentVersion\" ColName=\"tp_IsCurrentVersion\" Type=\"Boolean\" /><Field Name=\"EventType\" ColName=\"int1\" Type=\"Integer\" /><Field Name=\"UID\" ColName=\"uniqueidentifier1\" Type=\"Guid\" /><Field Name=\"RecurrenceID\" ColName=\"datetime3\" Type=\"DateTime\" /><Field Name=\"EventDate\" ColName=\"datetime1\" Type=\"DateTime\" /><Field Name=\"EndDate\" ColName=\"datetime2\" Type=\"DateTime\" /><Field Name=\"Duration\" ColName=\"int2\" Type=\"Integer\" /><Field Name=\"Location\" ColName=\"nvarchar3\" Type=\"Text\" /><Field Name=\"RecurrenceData\" ColName=\"ntext1\" Type=\"Note\" /><Field Name=\"TimeZone\" ColName=\"int3\" Type=\"Integer\" /><Field Name=\"fAllDayEvent\" ColName=\"bit4\" Type=\"AllDayEvent\" /><Field Name=\"fRecurrence\" ColName=\"bit3\" Type=\"Recurrence\" /><Field Name=\"EventUID\" ColName=\"nvarchar1\" Type=\"Text\" /><Field Name=\"RRule\" ColName=\"ntext2\" Type=\"Note\" /><Field Name=\"ExRule\" ColName=\"ntext3\" Type=\"Note\" /><Field Name=\"SuppressUntil\" ColName=\"datetime5\" Type=\"DateTime\" /><Field Name=\"IsException\" ColName=\"bit2\" Type=\"Boolean\" /><Field Name=\"IsOrphaned\" ColName=\"bit1\" Type=\"Boolean\" /><Field Name=\"IsDetached\" ColName=\"int4\" Type=\"Integer\" /><Field Name=\"Sequence\" ColName=\"int5\" Type=\"Integer\" /><Field Name=\"DTStamp\" ColName=\"datetime4\" Type=\"DateTime\" /><Field Name=\"Organizer\" ColName=\"int6\" Type=\"User\" /><Field Name=\"EventUrl\" ColName=\"nvarchar4\" Type=\"URL\" /></Fields>";
            DBAdapter.s2010MeetingInstancesFields =
                "<Fields><Field Name=\"ID\" ColName=\"tp_ID\" Type=\"Counter\" /><Field Name=\"ContentTypeId\" ColName=\"tp_ContentTypeId\" Type=\"ContentTypeId\" /><Field Name=\"Title\" ColName=\"nvarchar6\" Type=\"Text\" /><Field Name=\"Modified\" ColName=\"tp_Modified\" Type=\"DateTime\" /><Field Name=\"Created\" ColName=\"tp_Created\" Type=\"DateTime\" /><Field Name=\"Author\" ColName=\"tp_Author\" Type=\"User\" /><Field Name=\"Editor\" ColName=\"tp_Editor\" Type=\"User\" /><Field Name=\"_HasCopyDestinations\" ColName=\"tp_HasCopyDestinations\" Type=\"Boolean\" /><Field Name=\"_CopySource\" ColName=\"tp_CopySource\" Type=\"Text\" /><Field Name=\"owshiddenversion\" ColName=\"tp_Version\" Type=\"Integer\" /><Field Name=\"WorkflowVersion\" ColName=\"tp_WorkflowVersion\" Type=\"Integer\" /><Field Name=\"_UIVersion\" ColName=\"tp_UIVersion\" Type=\"Integer\" /><Field Name=\"_UIVersionString\" ColName=\"tp_UIVersionString\" Type=\"Text\" /><Field Name=\"Attachments\" ColName=\"tp_HasAttachment\" Type=\"Attachments\" /><Field Name=\"_ModerationStatus\" ColName=\"tp_ModerationStatus\" Type=\"ModStat\" /><Field Name=\"_ModerationComments\" ColName=\"ntext4\" Type=\"Note\" /><Field Name=\"InstanceID\" ColName=\"tp_InstanceID\" Type=\"Integer\" /><Field Name=\"Order\" ColName=\"tp_ItemOrder\" Type=\"Number\" /><Field Name=\"GUID\" ColName=\"tp_GUID\" Type=\"Guid\" /><Field Name=\"WorkflowInstanceID\" ColName=\"tp_WorkflowInstanceID\" Type=\"Guid\" /><Field Name=\"File_x0020_Type\" ColName=\"nvarchar7\" Type=\"Text\" /><Field Name=\"_Level\" ColName=\"tp_Level\" Type=\"Integer\" /><Field Name=\"_IsCurrentVersion\" ColName=\"tp_IsCurrentVersion\" Type=\"Boolean\" /><Field Name=\"EventType\" ColName=\"int1\" Type=\"Integer\" /><Field Name=\"UID\" ColName=\"uniqueidentifier1\" Type=\"Guid\" /><Field Name=\"RecurrenceID\" ColName=\"datetime3\" Type=\"DateTime\" /><Field Name=\"EventDate\" ColName=\"datetime1\" Type=\"DateTime\" /><Field Name=\"EndDate\" ColName=\"datetime2\" Type=\"DateTime\" /><Field Name=\"Duration\" ColName=\"int2\" Type=\"Integer\" /><Field Name=\"Location\" ColName=\"nvarchar3\" Type=\"Text\" /><Field Name=\"RecurrenceData\" ColName=\"ntext1\" Type=\"Note\" /><Field Name=\"TimeZone\" ColName=\"int3\" Type=\"Integer\" /><Field Name=\"fAllDayEvent\" ColName=\"bit4\" Type=\"AllDayEvent\" /><Field Name=\"fRecurrence\" ColName=\"bit3\" Type=\"Recurrence\" /><Field Name=\"EventUID\" ColName=\"nvarchar1\" Type=\"Text\" /><Field Name=\"RRule\" ColName=\"ntext2\" Type=\"Note\" /><Field Name=\"ExRule\" ColName=\"ntext3\" Type=\"Note\" /><Field Name=\"SuppressUntil\" ColName=\"datetime5\" Type=\"DateTime\" /><Field Name=\"IsException\" ColName=\"bit2\" Type=\"Boolean\" /><Field Name=\"IsOrphaned\" ColName=\"bit1\" Type=\"Boolean\" /><Field Name=\"IsDetached\" ColName=\"int4\" Type=\"Integer\" /><Field Name=\"Sequence\" ColName=\"int5\" Type=\"Integer\" /><Field Name=\"DTStamp\" ColName=\"datetime4\" Type=\"DateTime\" /><Field Name=\"Organizer\" ColName=\"int6\" Type=\"User\" /><Field Name=\"EventUrl\" ColName=\"nvarchar4\" Type=\"URL\" /></Fields>";
            DBAdapter.s_WebTemplateCodeDictionary = null;
            DBAdapter.s_WebTemplateTitleDictionary = null;
        }

        public DBAdapter()
        {
            this.m_sAdapterIdentity = Guid.NewGuid().ToString();
        }

        public DBAdapter(string connectionString, Guid webID, Guid siteID)
        {
            SqlConnectionStringBuilder sqlConnectionStringBuilder = new SqlConnectionStringBuilder(connectionString);
            this.m_sAdapterIdentity = null;
            this.m_sConnectionString = connectionString;
            this.m_sServer = sqlConnectionStringBuilder.DataSource;
            this.m_sDatabase = sqlConnectionStringBuilder.InitialCatalog;
            this.m_sWebID = webID.ToString();
            this.m_sSiteID = siteID.ToString();
            this.m_bFindTemplatesLocally = true;
        }

        public DBAdapter(string sServer, string sDatabase, Metalogix.Permissions.Credentials credentials)
        {
            this.m_sAdapterIdentity = Guid.NewGuid().ToString();
            this.m_sServer = sServer;
            this.m_sDatabase = sDatabase;
            this.m_credentials = credentials;
            this.m_sServerRelativeUrl = "/";
        }

        public DBAdapter(string sServer, string sDatabase, string sServerRelativeUrl,
            Metalogix.Permissions.Credentials credentials)
        {
            this.m_sAdapterIdentity = Guid.NewGuid().ToString();
            this.m_sServer = sServer;
            this.m_sDatabase = sDatabase;
            this.m_credentials = credentials;
            this.m_sServerRelativeUrl = sServerRelativeUrl;
        }

        public override bool AdapterEquals(XmlNode adapterXML)
        {
            if (!base.AdapterEquals(adapterXML))
            {
                return false;
            }

            XmlAttribute itemOf = adapterXML.Attributes["Server"];
            if (itemOf == null || itemOf.Value != this.Server)
            {
                return false;
            }

            XmlAttribute xmlAttribute = adapterXML.Attributes["Database"];
            if (xmlAttribute != null && !(xmlAttribute.Value != this.Database))
            {
                return true;
            }

            return false;
        }

        private void AddAssetLibraryOOBColumns(XmlNode xmlFieldNode)
        {
            this.AddFieldsToXML(xmlFieldNode, XmlUtility.StringToXmlNode(DBAdapter.assetLibraryFields));
        }

        private void AddBaseFields(XmlNode fieldsXMLNode, int iBaseTemplate, int iBaseType, string featureID)
        {
            SPListTemplate sPListTemplate = this.FindTemplateByID(iBaseTemplate, featureID) ??
                                            this.FindTemplateByID(iBaseType, featureID);
            if (sPListTemplate == null)
            {
                return;
            }

            foreach (XmlNode childNode in sPListTemplate.FieldsXML.ChildNodes)
            {
                if (XmlUtility.MatchFirstAttributeValue("Name", childNode.Attributes["Name"].Value,
                        fieldsXMLNode.SelectNodes("./Field")) != null)
                {
                    continue;
                }

                XmlNode xmlNodes = fieldsXMLNode.OwnerDocument.CreateElement("Field");
                XmlNode xmlNodes1 = XmlUtility.MatchFirstAttributeValue("Name", childNode.Attributes["Name"].Value,
                    fieldsXMLNode.SelectNodes("./FieldRef"));
                if (xmlNodes1 != null)
                {
                    foreach (XmlAttribute attribute in xmlNodes1.Attributes)
                    {
                        XmlAttribute value = fieldsXMLNode.OwnerDocument.CreateAttribute(attribute.Name);
                        value.Value = attribute.Value;
                        xmlNodes.Attributes.Append(value);
                    }
                }

                foreach (XmlAttribute xmlAttribute in childNode.Attributes)
                {
                    if (xmlNodes.Attributes[xmlAttribute.Name] != null)
                    {
                        continue;
                    }

                    XmlAttribute value1 = fieldsXMLNode.OwnerDocument.CreateAttribute(xmlAttribute.Name);
                    value1.Value = xmlAttribute.Value;
                    xmlNodes.Attributes.Append(value1);
                }

                XmlAttribute xmlAttribute1 = fieldsXMLNode.OwnerDocument.CreateAttribute("FromTemplate");
                xmlAttribute1.Value = "True";
                xmlNodes.Attributes.Append(xmlAttribute1);
                fieldsXMLNode.AppendChild(xmlNodes);
                if (xmlNodes1 == null)
                {
                    continue;
                }

                fieldsXMLNode.RemoveChild(xmlNodes1);
            }

            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                XmlNode xmlNodes2 = null;
                if (iBaseTemplate == 202)
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010AttendeesFields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007AttendeesFields));
                }
                else if (iBaseTemplate == 201)
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010AgendaFields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007AgendaFields));
                }
                else if (iBaseTemplate == 207)
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010ObjectivesFields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007ObjectivesFields));
                }
                else if (iBaseTemplate == 210)
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010DirectionsFields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007DirectionsFields));
                }
                else if (iBaseTemplate == 211)
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010ThingsToBringFields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007ThingsToBringFields));
                }
                else if (iBaseTemplate != 204)
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010Fields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007Fields));
                }
                else
                {
                    xmlNodes2 = (!base.SharePointVersion.IsSharePoint2007
                        ? XmlUtility.StringToXmlNode(DBAdapter.s2010DecisionFields)
                        : XmlUtility.StringToXmlNode(DBAdapter.s2007DecisionFields));
                }

                this.AddFieldsToXML(fieldsXMLNode, xmlNodes2);
            }
        }

        private void AddBaseViews(XmlNode viewXMLNode, int iBaseTemplate, string sListUrl, string featureId)
        {
            SPListTemplate sPListTemplate = this.FindTemplateByID(iBaseTemplate, featureId);
            if (sPListTemplate == null)
            {
                return;
            }

            foreach (XmlNode childNode in sPListTemplate.ViewXML.ChildNodes)
            {
                try
                {
                    if (childNode.Attributes["Url"] != null)
                    {
                        XmlNode xmlNodes = XmlUtility.MatchFirstAttributeValue("Url",
                            string.Concat(sListUrl, childNode.Attributes["Url"].Value),
                            viewXMLNode.SelectNodes("./View"));
                        if (xmlNodes != null)
                        {
                            foreach (XmlNode xmlNodes1 in childNode)
                            {
                                if (xmlNodes.SelectSingleNode(string.Concat("./", xmlNodes1.Name)) != null)
                                {
                                    continue;
                                }

                                XmlUtility.CloneXMLNodeInto(xmlNodes1, xmlNodes, false);
                            }
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
                catch (Exception exception)
                {
                    string message = exception.Message;
                }
            }
        }

        private void AddDisplayNamesToFieldRefs(XmlNode xmlFieldNode)
        {
            foreach (XmlNode xmlNodes in xmlFieldNode.SelectNodes("//Field[@Type='Calculated']"))
            {
                XmlNodeList xmlNodeLists = xmlNodes.SelectNodes("./FieldRefs/FieldRef");
                XmlNode[] itemOf = new XmlNode[xmlNodeLists.Count];
                for (int i = 0; i < xmlNodeLists.Count; i++)
                {
                    itemOf[i] = xmlNodeLists[i];
                }

                XmlNode[] xmlNodeArrays = itemOf;
                for (int j = 0; j < (int)xmlNodeArrays.Length; j++)
                {
                    XmlNode xmlNodes1 = xmlNodeArrays[j];
                    string value = xmlNodes1.Attributes["Name"].Value;
                    XmlNode xmlNodes2 =
                        XmlUtility.MatchFirstAttributeValue("Name", value, xmlFieldNode.SelectNodes("//Field"));
                    if (xmlNodes2 == null)
                    {
                        xmlNodes1.ParentNode.RemoveChild(xmlNodes1);
                    }
                    else if (xmlNodes2.Attributes["DisplayName"] != null)
                    {
                        string str = xmlNodes2.Attributes["DisplayName"].Value;
                        XmlAttribute xmlAttribute = xmlNodes1.OwnerDocument.CreateAttribute("DisplayName");
                        xmlAttribute.Value = str;
                        xmlNodes1.Attributes.Append(xmlAttribute);
                    }
                }
            }
        }

        private void AddFieldsToXML(XmlNode fieldsXMLNode, XmlNode hardCodedFields)
        {
            if (hardCodedFields != null)
            {
                fieldsXMLNode.SelectNodes("./Field");
                foreach (XmlNode xmlNodes in hardCodedFields.SelectNodes("//Fields/Field"))
                {
                    string attributeValueAsString = xmlNodes.GetAttributeValueAsString("Name");
                    XmlNode xmlNodes1 =
                        fieldsXMLNode.SelectSingleNode(string.Concat("./Field[@Name='", attributeValueAsString, "']"));
                    if (xmlNodes1 != null)
                    {
                        if (xmlNodes1.Attributes["ColName"] != null || xmlNodes.Attributes["ColName"] == null)
                        {
                            continue;
                        }

                        XmlAttribute xmlAttribute = xmlNodes1.OwnerDocument.CreateAttribute("ColName");
                        xmlAttribute.Value = xmlNodes.GetAttributeValueAsString("ColName");
                        xmlNodes1.Attributes.Append(xmlAttribute);
                    }
                    else
                    {
                        XmlNode xmlNodes2 = fieldsXMLNode;
                        xmlNodes2.InnerXml = string.Concat(xmlNodes2.InnerXml, xmlNodes.OuterXml);
                    }
                }
            }
        }

        private void AddInternalNamesToFieldRefs(XmlNode viewNode, XmlNode fieldsNode)
        {
            foreach (XmlNode value in viewNode.SelectNodes("//FieldRef"))
            {
                string str = value.Attributes["Name"].Value;
                string str1 = XmlConvert.DecodeName(str);
                XmlNode xmlNodes = XmlUtility.MatchFirstAttributeValue("Name", str, fieldsNode.SelectNodes("//Field"));
                if (xmlNodes != null)
                {
                    continue;
                }

                xmlNodes = XmlUtility.MatchFirstAttributeValue("DisplayName", str1, fieldsNode.SelectNodes("//Field"));
                if (xmlNodes == null)
                {
                    continue;
                }

                value.Attributes["Name"].Value = xmlNodes.Attributes["Name"].Value;
            }
        }

        private void AddListNamesToLookups(XmlNode xmlFieldNode)
        {
            string value;
            foreach (XmlNode xmlNodes in xmlFieldNode.SelectNodes("//Field[@Type='Lookup' or @Type='LookupMulti']"))
            {
                if (xmlNodes.Attributes["Hidden"] != null)
                {
                    continue;
                }

                string str = xmlNodes.Attributes["List"].Value;
                if (!Metalogix.SharePoint.Adapters.Utils.IsGuid(str))
                {
                    continue;
                }

                if (xmlNodes.Attributes["WebId"] != null)
                {
                    value = xmlNodes.Attributes["WebId"].Value;
                }
                else
                {
                    value = null;
                }

                string str1 = value;
                string listNameByID = null;
                if (string.IsNullOrEmpty(str1) || !Metalogix.SharePoint.Adapters.Utils.IsGuid(str1))
                {
                    XmlAttribute itemOf = xmlNodes.Attributes["WebId"];
                    if (itemOf != null)
                    {
                        xmlNodes.Attributes.Remove(itemOf);
                    }

                    listNameByID = this.GetListNameByID(str);
                }
                else
                {
                    string str2 = null;
                    string str3 = null;
                    this.GetWebNameAndUrl(str1, out str3, out str2, false);
                    if (str3 == null && str2 == null)
                    {
                        continue;
                    }

                    XmlAttribute xmlAttribute = xmlFieldNode.OwnerDocument.CreateAttribute("TargetWebSRURL");
                    xmlAttribute.Value = str2;
                    xmlNodes.Attributes.Append(xmlAttribute);
                    XmlAttribute xmlAttribute1 = xmlFieldNode.OwnerDocument.CreateAttribute("TargetWebName");
                    xmlAttribute1.Value = str3;
                    xmlNodes.Attributes.Append(xmlAttribute1);
                    listNameByID = this.GetListNameByID(str, str1);
                }

                if (listNameByID == null)
                {
                    continue;
                }

                XmlAttribute xmlAttribute2 = xmlNodes.OwnerDocument.CreateAttribute("TargetListName");
                xmlAttribute2.Value = listNameByID;
                xmlNodes.Attributes.Append(xmlAttribute2);
            }
        }

        private void AddListRecordDeclarationSettings(XmlWriter xmlWriter, string metaInfo)
        {
            if (base.SharePointVersion.IsSharePoint2010OrLater)
            {
                string empty = string.Empty;
                if (metaInfo.IndexOf("ecm_ListReadyForIPR:SW|") > 0)
                {
                    empty = metaInfo.Substring(metaInfo.IndexOf("ecm_ListReadyForIPR:SW|") +
                                               "ecm_ListReadyForIPR:SW|".Length);
                    xmlWriter.WriteAttributeString("ListReadyForIPR", empty.Substring(0, empty.IndexOf("\r\n")));
                }

                if (metaInfo.IndexOf("ecm_IPRListUseListSpecific:SW|") > 0)
                {
                    empty = metaInfo.Substring(metaInfo.IndexOf("ecm_IPRListUseListSpecific:SW|") +
                                               "ecm_IPRListUseListSpecific:SW|".Length);
                    xmlWriter.WriteAttributeString("IPRListUseListSpecific", empty.Substring(0, empty.IndexOf("\r\n")));
                }

                if (metaInfo.IndexOf("ecm_ListFieldsReadyForIPR:SW|") > 0)
                {
                    empty = metaInfo.Substring(metaInfo.IndexOf("ecm_ListFieldsReadyForIPR:SW|") +
                                               "ecm_ListFieldsReadyForIPR:SW|".Length);
                    xmlWriter.WriteAttributeString("ListFieldsReadyForIPR", empty.Substring(0, empty.IndexOf("\r\n")));
                }

                if (metaInfo.IndexOf("ecm_ListReadyForLocking:SW|") > 0)
                {
                    empty = metaInfo.Substring(metaInfo.IndexOf("ecm_ListReadyForLocking:SW|") +
                                               "ecm_ListReadyForLocking:SW|".Length);
                    xmlWriter.WriteAttributeString("ListReadyForLocking", empty.Substring(0, empty.IndexOf("\r\n")));
                }

                if (metaInfo.IndexOf("ecm_AutoDeclareRecords:SW|") > 0)
                {
                    empty = metaInfo.Substring(metaInfo.IndexOf("ecm_AutoDeclareRecords:SW|") +
                                               "ecm_AutoDeclareRecords:SW|".Length);
                    xmlWriter.WriteAttributeString("AutoDeclareRecords", empty.Substring(0, empty.IndexOf("\r\n")));
                }

                if (metaInfo.IndexOf("ecm_AllowManualDeclaration:SW|") > 0)
                {
                    empty = metaInfo.Substring(metaInfo.IndexOf("ecm_AllowManualDeclaration:SW|") +
                                               "ecm_AllowManualDeclaration:SW|".Length);
                    xmlWriter.WriteAttributeString("AllowManualDeclaration", empty.Substring(0, empty.IndexOf("\r\n")));
                }
            }
        }

        private void AddRecordDecalarationSettings(XmlWriter xmlWriter, string sMetaInfo)
        {
            Regex regex = new Regex(string.Format("^.*{0}.*$", Regex.Escape("ecm_siterecorddeclarationby:SW|")),
                RegexOptions.Multiline);
            System.Text.RegularExpressions.Match match = regex.Match(sMetaInfo);
            if (match.Success)
            {
                xmlWriter.WriteAttributeString("SiteRecordDeclarationBy",
                    match.Value.Substring("ecm_siterecorddeclarationby:SW|".Length).Trim());
            }

            regex = new Regex(string.Format("^.*{0}.*$", Regex.Escape("ecm_siterecordundeclarationby:SW|")),
                RegexOptions.Multiline);
            match = regex.Match(sMetaInfo);
            if (match.Success)
            {
                xmlWriter.WriteAttributeString("SiteRecordUndeclarationBy",
                    match.Value.Substring("ecm_siterecordundeclarationby:SW|".Length).Trim());
            }

            regex = new Regex(string.Format("^.*{0}.*$", Regex.Escape("ecm_siterecordrestrictions:SW|")),
                RegexOptions.Multiline);
            match = regex.Match(sMetaInfo);
            if (match.Success)
            {
                xmlWriter.WriteAttributeString("SiteRecordRestrictions",
                    match.Value.Substring("ecm_siterecordrestrictions:SW|".Length).Trim());
            }

            regex = new Regex(string.Format("^.*{0}.*$", Regex.Escape("ecm_siterecorddeclarationdefault:SW|")),
                RegexOptions.Multiline);
            match = regex.Match(sMetaInfo);
            if (match.Success)
            {
                xmlWriter.WriteAttributeString("SiteRecordDeclarationDefault",
                    match.Value.Substring("ecm_siterecorddeclarationdefault:SW|".Length).Trim());
            }
        }

        public bool AddSiteUser(XmlNode user, Guid sSPSiteID, Guid sCurrentWebID, Guid sUserInfoListID,
            string currentUserName)
        {
            bool flag;
            byte[] sid = null;
            string attributeValueAsString = user.GetAttributeValueAsString("SID");
            if (string.IsNullOrEmpty(attributeValueAsString))
            {
                attributeValueAsString = user.GetAttributeValueAsString("Sid");
            }

            if (string.IsNullOrEmpty(attributeValueAsString))
            {
                throw new Exception(string.Format(
                    "User not added. The SID for '{0}' could not be found, the user may have been removed from Active Directory",
                    user.GetAttributeValueAsString("LoginName")));
            }

            sid = this.StringToSid(attributeValueAsString);
            if (sid == null)
            {
                throw new Exception("Failed to convert string sid to bytes");
            }

            byte[] bytes = null;
            if (user.Attributes["UserToken"] != null)
            {
                UnicodeEncoding unicodeEncoding = new UnicodeEncoding();
                bytes = unicodeEncoding.GetBytes(user.Attributes["UserToken"].Value);
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                SqlCommand sqlCommand = null;
                SqlCommand sQLQueryTimeoutTime = null;
                SqlCommand sqlCommand1 = null;
                try
                {
                    sqlCommand = new SqlCommand();
                    sQLQueryTimeoutTime = new SqlCommand();
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.CommandTimeout = AdapterConfigurationVariables.SQLQueryTimeoutTime;
                    sqlCommand.CommandText = "proc_SecAddUser";
                    sqlCommand.CommandType = CommandType.StoredProcedure;
                    sqlCommand.Parameters.Add("@SiteID", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@SiteID"].Value = sSPSiteID;
                    sqlCommand.Parameters.Add("@SystemId", SqlDbType.VarBinary, 512);
                    if (sid == null)
                    {
                        sqlCommand.Parameters["@SystemId"].Value = DBNull.Value;
                    }
                    else
                    {
                        sqlCommand.Parameters["@SystemId"].Value = sid;
                    }

                    sqlCommand.Parameters.Add("@IsDomainGroup", SqlDbType.Bit);
                    sqlCommand.Parameters["@IsDomainGroup"].Value = bool.Parse(user.Attributes["IsDomainGroup"].Value);
                    sqlCommand.Parameters.Add("@Login", SqlDbType.NVarChar, 255);
                    sqlCommand.Parameters["@Login"].Value = user.Attributes["LoginName"].Value;
                    sqlCommand.Parameters.Add("@Title", SqlDbType.NVarChar, 255);
                    sqlCommand.Parameters["@Title"].Value = user.Attributes["Name"].Value;
                    sqlCommand.Parameters.Add("@Email", SqlDbType.NVarChar, 255);
                    sqlCommand.Parameters["@Email"].Value = user.Attributes["Email"].Value;
                    sqlCommand.Parameters.Add("@Notes", SqlDbType.NVarChar, 1023);
                    sqlCommand.Parameters["@Notes"].Value = user.Attributes["Notes"].Value;
                    if (base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        sqlCommand.Parameters.Add("@MobilePhone", SqlDbType.NVarChar, 127);
                        if (user.Attributes["MobilePhone"] == null)
                        {
                            sqlCommand.Parameters["@MobilePhone"].Value = "";
                        }
                        else
                        {
                            sqlCommand.Parameters["@MobilePhone"].Value = user.Attributes["MobilePhone"].Value;
                        }

                        sqlCommand.Parameters.Add("@Flags", SqlDbType.Int);
                        sqlCommand.Parameters["@Flags"].Value = 0;
                    }

                    sqlCommand.Parameters.Add("@ExternalToken", SqlDbType.Image);
                    if (bytes == null)
                    {
                        sqlCommand.Parameters["@ExternalToken"].Value = DBNull.Value;
                    }
                    else
                    {
                        sqlCommand.Parameters["@ExternalToken"].Value = bytes;
                    }

                    sqlCommand.Parameters.Add("@ExternalTokenTime", SqlDbType.DateTime);
                    sqlCommand.Parameters["@ExternalTokenTime"].Value = DateTime.Now;
                    sqlCommand.Parameters.Add("@IsActive", SqlDbType.Bit);
                    sqlCommand.Parameters["@IsActive"].Value = true;
                    sqlCommand.Parameters.Add("@ImportDeleted", SqlDbType.Bit);
                    sqlCommand.Parameters["@ImportDeleted"].Value = false;
                    sqlCommand.Parameters.Add("@IncrementUserCount", SqlDbType.Bit);
                    if (!bool.Parse(user.Attributes["IsDomainGroup"].Value))
                    {
                        sqlCommand.Parameters["@IncrementUserCount"].Value = true;
                    }
                    else
                    {
                        sqlCommand.Parameters["@IncrementUserCount"].Value = false;
                    }

                    if (base.SharePointVersion.IsSharePoint2013OrLater)
                    {
                        sqlCommand.Parameters.Add("@AccountType", SqlDbType.Int);
                        sqlCommand.Parameters["@AccountType"].Value = 1;
                    }

                    SqlParameter sqlParameter = new SqlParameter("@AddedToTable", SqlDbType.Bit)
                    {
                        Direction = ParameterDirection.Output
                    };
                    sqlCommand.Parameters.Add(sqlParameter);
                    sqlCommand.Parameters["@AddedToTable"].Value = true;
                    SqlParameter sqlParameter1 = new SqlParameter("@UserIdOut", SqlDbType.Int)
                    {
                        Direction = ParameterDirection.Output
                    };
                    sqlCommand.Parameters.Add(sqlParameter1);
                    sqlCommand.Parameters["@UserIdOut"].Value = 0;
                    sqlCommand.Parameters.Add("@LoginOut", SqlDbType.NVarChar, 255);
                    sqlCommand.Parameters["@LoginOut"].Value = "";
                    sqlCommand.Parameters.Add("@TitleOut", SqlDbType.NVarChar, 255);
                    sqlCommand.Parameters["@TitleOut"].Value = "";
                    sqlCommand.Parameters.Add("@EmailOut", SqlDbType.NVarChar, 255);
                    sqlCommand.Parameters["@EmailOut"].Value = "";
                    sqlCommand.Parameters.Add("@NotesOut", SqlDbType.NVarChar, 1023);
                    sqlCommand.Parameters["@NotesOut"].Value = "";
                    sqlCommand.Parameters.Add("@DeletedOut", SqlDbType.Bit);
                    sqlCommand.Parameters["@DeletedOut"].Value = false;
                    if (base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        sqlCommand.Parameters.Add("@MobilePhoneOut", SqlDbType.NVarChar, 127);
                        sqlCommand.Parameters["@MobilePhoneOut"].Value = "";
                        sqlCommand.Parameters.Add("@NeedtoAddToList", SqlDbType.Bit);
                        sqlCommand.Parameters["@NeedtoAddToList"].Value = 1;
                    }

                    sQLQueryTimeoutTime.Connection = sqlConnection;
                    sQLQueryTimeoutTime.CommandTimeout = AdapterConfigurationVariables.SQLQueryTimeoutTime;
                    sQLQueryTimeoutTime.CommandText = "proc_AddListItem";
                    sQLQueryTimeoutTime.CommandType = CommandType.StoredProcedure;
                    sQLQueryTimeoutTime.Parameters.Add("@SiteId", SqlDbType.UniqueIdentifier);
                    sQLQueryTimeoutTime.Parameters["@SiteId"].Value = sSPSiteID;
                    sQLQueryTimeoutTime.Parameters.Add("@WebId", SqlDbType.UniqueIdentifier);
                    sQLQueryTimeoutTime.Parameters["@WebID"].Value = sCurrentWebID;
                    sQLQueryTimeoutTime.Parameters.Add("@ListID", SqlDbType.UniqueIdentifier);
                    sQLQueryTimeoutTime.Parameters["@ListID"].Value = sUserInfoListID;
                    sQLQueryTimeoutTime.Parameters.Add("@RowOrdinal", SqlDbType.Int);
                    sQLQueryTimeoutTime.Parameters["@RowOrdinal"].Value = 0;
                    sQLQueryTimeoutTime.Parameters.Add("@ItemId", SqlDbType.Int);
                    sQLQueryTimeoutTime.Parameters["@ItemId"].Value = DBNull.Value;
                    sQLQueryTimeoutTime.Parameters.Add("@UserId", SqlDbType.Int);
                    sQLQueryTimeoutTime.Parameters["@UserId"].Value = 1;
                    sQLQueryTimeoutTime.Parameters.Add("@TimeNow", SqlDbType.DateTime);
                    sQLQueryTimeoutTime.Parameters["@TimeNow"].Value = DateTime.Now;
                    sQLQueryTimeoutTime.Parameters.Add("@Size", SqlDbType.Int);
                    sQLQueryTimeoutTime.Parameters["@Size"].Value = 0;
                    if (!base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        sQLQueryTimeoutTime.Parameters.Add("@tp_ContentType", SqlDbType.NVarChar, 255);
                        if (!bool.Parse(user.Attributes["IsDomainGroup"].Value))
                        {
                            sQLQueryTimeoutTime.Parameters["@tp_ContentType"].Value = "Person";
                        }
                        else
                        {
                            sQLQueryTimeoutTime.Parameters["@tp_ContentType"].Value = "DomainGroup";
                        }
                    }

                    if (bool.Parse(user.Attributes["IsDomainGroup"].Value))
                    {
                        sQLQueryTimeoutTime.Parameters.Add("@tp_ContentTypeId", SqlDbType.VarBinary, 512);
                        byte[] userContentTypeID = this.GetUserContentTypeID(sSPSiteID.ToString(), sqlConnection,
                            "DomainGroup", sUserInfoListID.ToString(), currentUserName);
                        if (userContentTypeID == null)
                        {
                            throw new Exception("Failed to add DomainGroup: Cannot find content type ID");
                        }

                        sQLQueryTimeoutTime.Parameters["@tp_ContentTypeId"].Value = userContentTypeID;
                    }
                    else if (base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        sQLQueryTimeoutTime.Parameters.Add("@tp_ContentTypeId", SqlDbType.VarBinary, 512);
                        byte[] numArray = this.GetUserContentTypeID(sSPSiteID.ToString(), sqlConnection, "Person",
                            sUserInfoListID.ToString(), currentUserName);
                        if (numArray == null)
                        {
                            throw new Exception("Failed to add user: Cannot find content type ID");
                        }

                        sQLQueryTimeoutTime.Parameters["@tp_ContentTypeId"].Value = numArray;
                    }

                    if (base.SharePointVersion.IsSharePoint2013OrLater)
                    {
                        StringBuilder stringBuilder = new StringBuilder(1000);
                        stringBuilder.Append("<bit2>0</bit2>");
                        stringBuilder.Append("<bit3>0</bit3>");
                        stringBuilder.Append("<bit4>0</bit4>");
                        stringBuilder.Append("<bit5>1</bit5>");
                        stringBuilder.AppendFormat("<nvarchar1>{0}</nvarchar1>", user.Attributes["Name"].Value);
                        stringBuilder.AppendFormat("<nvarchar3>{0}</nvarchar3>", user.Attributes["LoginName"].Value);
                        stringBuilder.AppendFormat("<nvarchar4>{0}</nvarchar4>", user.Attributes["Email"].Value);
                        sQLQueryTimeoutTime.Parameters.Add("@tp_ColumnSet", SqlDbType.Xml);
                        sQLQueryTimeoutTime.Parameters["@tp_ColumnSet"].Value = stringBuilder.ToString();
                    }
                    else
                    {
                        sQLQueryTimeoutTime.Parameters.Add("@nvarchar1", SqlDbType.NVarChar, 255);
                        sQLQueryTimeoutTime.Parameters["@nvarchar1"].Value = user.Attributes["Name"].Value;
                        sQLQueryTimeoutTime.Parameters.Add("@nvarchar3", SqlDbType.NVarChar, 255);
                        sQLQueryTimeoutTime.Parameters["@nvarchar3"].Value = user.Attributes["LoginName"].Value;
                        if (!bool.Parse(user.Attributes["IsDomainGroup"].Value))
                        {
                            sQLQueryTimeoutTime.Parameters.Add("@nvarchar4", SqlDbType.NVarChar, 255);
                            sQLQueryTimeoutTime.Parameters["@nvarchar4"].Value = user.Attributes["Email"].Value;
                        }

                        sQLQueryTimeoutTime.Parameters.Add("@bit2", SqlDbType.Bit);
                        sQLQueryTimeoutTime.Parameters["@bit2"].Value = bool.FalseString;
                        sQLQueryTimeoutTime.Parameters.Add("@bit3", SqlDbType.Bit);
                        sQLQueryTimeoutTime.Parameters["@bit3"].Value = false;
                        sQLQueryTimeoutTime.Parameters.Add("@bit4", SqlDbType.Bit);
                        sQLQueryTimeoutTime.Parameters["@bit4"].Value = true;
                    }

                    sQLQueryTimeoutTime.Parameters.Add("@AddNamespace", SqlDbType.Bit);
                    sQLQueryTimeoutTime.Parameters["@AddNameSpace"].Value = true;
                    if (base.SharePointVersion.IsSharePoint2013OrLater)
                    {
                        sqlCommand1 = new SqlCommand()
                        {
                            Connection = sqlConnection,
                            CommandTimeout = AdapterConfigurationVariables.SQLQueryTimeoutTime,
                            CommandText = "proc_UpdateListItemCount",
                            CommandType = CommandType.StoredProcedure
                        };
                        sqlCommand1.Parameters.Add("@SiteId", SqlDbType.UniqueIdentifier);
                        sqlCommand1.Parameters["@SiteId"].Value = sSPSiteID;
                        sqlCommand1.Parameters.Add("@ListID", SqlDbType.UniqueIdentifier);
                        sqlCommand1.Parameters["@ListID"].Value = sUserInfoListID;
                    }

                    try
                    {
                        int value = -1;
                        sqlConnection.Open();
                        try
                        {
                            sqlCommand.ExecuteNonQuery();
                            value = (int)sqlParameter1.Value;
                            if (value < 0)
                            {
                                throw new Exception();
                            }
                        }
                        catch (Exception exception)
                        {
                            throw new Exception("Failed to add user to UserInfo table");
                        }

                        sQLQueryTimeoutTime.Parameters.Add("tp_ID", SqlDbType.Int);
                        sQLQueryTimeoutTime.Parameters["tp_ID"].Value = value;
                        try
                        {
                            sQLQueryTimeoutTime.ExecuteNonQuery();
                        }
                        catch
                        {
                            try
                            {
                                sQLQueryTimeoutTime.CommandText = "proc_UpdateListItem";
                                sQLQueryTimeoutTime.Parameters.Remove(sQLQueryTimeoutTime.Parameters["tp_ID"]);
                                sQLQueryTimeoutTime.Parameters.Remove(sQLQueryTimeoutTime.Parameters["@AddNameSpace"]);
                                sQLQueryTimeoutTime.Parameters["@ItemId"].Value = value;
                                sQLQueryTimeoutTime.ExecuteNonQuery();
                            }
                            catch (Exception exception1)
                            {
                                throw new Exception(string.Concat("Failed to add user to the site's UserInfo list: ",
                                    exception1.Message));
                            }
                        }

                        if (base.SharePointVersion.IsSharePoint2013OrLater)
                        {
                            try
                            {
                                sqlCommand1.ExecuteNonQuery();
                            }
                            catch (Exception exception2)
                            {
                            }
                        }

                        flag = true;
                    }
                    finally
                    {
                        sqlConnection.Close();
                    }
                }
                finally
                {
                    if (sqlCommand != null)
                    {
                        sqlCommand.Dispose();
                    }

                    if (sQLQueryTimeoutTime != null)
                    {
                        sQLQueryTimeoutTime.Dispose();
                    }
                }
            }

            return flag;
        }

        public string AddWorkflow(string sListId, string sWorkflowXml)
        {
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(sWorkflowXml);
            XmlNode documentElement = xmlDocument.DocumentElement;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                Guid empty = Guid.Empty;
                bool value = documentElement.Attributes["ItemId"].Value == "-1";
                this.MapWorkflowData(documentElement, value, sqlConnection);
                string str = null;
                using (SqlCommand sqlCommand = new SqlCommand())
                {
                    sqlCommand.CommandTimeout = AdapterConfigurationVariables.SQLQueryTimeoutTime;
                    sqlCommand.Connection = sqlConnection;
                    sqlCommand.CommandText = "proc_AddWorkflow";
                    sqlCommand.CommandType = CommandType.StoredProcedure;
                    sqlCommand.Parameters.Add("@WorkflowTemplateId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@WorkflowTemplateId"].Value =
                        new Guid(documentElement.Attributes["TemplateId"].Value);
                    empty = (value ? Guid.NewGuid() : this.GenerateValidListWorkflowGuid());
                    if (documentElement.Attributes["Id"] != null)
                    {
                        str = documentElement.Attributes["Id"].Value;
                        documentElement.Attributes["Id"].Value = empty.ToString();
                    }

                    sqlCommand.Parameters.Add("@WorkflowInstanceId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@WorkflowInstanceId"].Value = empty;
                    sqlCommand.Parameters.Add("@SiteId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@SiteId"].Value = new Guid(documentElement.Attributes["SiteId"].Value);
                    sqlCommand.Parameters.Add("@WebId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@WebId"].Value = new Guid(documentElement.Attributes["WebId"].Value);
                    sqlCommand.Parameters.Add("@ListId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@ListId"].Value = new Guid(documentElement.Attributes["ListId"].Value);
                    sqlCommand.Parameters.Add("@ItemId", SqlDbType.Int);
                    sqlCommand.Parameters["@ItemId"].Value =
                        Convert.ToInt32(documentElement.Attributes["ItemId"].Value);
                    sqlCommand.Parameters.Add("@Level", SqlDbType.TinyInt);
                    sqlCommand.Parameters["@Level"].Value = Convert.ToByte(documentElement.Attributes["Level"].Value);
                    sqlCommand.Parameters.Add("@Version", SqlDbType.Int);
                    sqlCommand.Parameters["@Version"].Value =
                        Convert.ToInt32(documentElement.Attributes["Version"].Value);
                    sqlCommand.Parameters.Add("@TaskListId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@TaskListId"].Value =
                        new Guid(documentElement.Attributes["TaskListId"].Value);
                    sqlCommand.Parameters.Add("@AdminTaskListId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@AdminTaskListId"].Value = DBNull.Value;
                    sqlCommand.Parameters.Add("@Author", SqlDbType.Int);
                    int num = 0;
                    if (!int.TryParse(documentElement.Attributes["Author"].Value, out num))
                    {
                        sqlCommand.Parameters["@Author"].Value = 1073741823;
                    }
                    else
                    {
                        sqlCommand.Parameters["@Author"].Value = num;
                    }

                    sqlCommand.Parameters.Add("@ProcessingId", SqlDbType.UniqueIdentifier);
                    sqlCommand.Parameters["@ProcessingId"].Value = DBNull.Value;
                    sqlCommand.Parameters.Add("@InstanceData", SqlDbType.Image);
                    sqlCommand.Parameters["@InstanceData"].Value = DBNull.Value;
                    sqlCommand.Parameters.Add("@InstanceDataSize", SqlDbType.Int);
                    sqlCommand.Parameters["@InstanceDataSize"].Value = 0;
                    sqlCommand.Parameters.Add("@Modifications", SqlDbType.NText);
                    sqlCommand.Parameters["@Modifications"].Value = "";
                    sqlCommand.Parameters.Add("@StatusFieldOrdinal", SqlDbType.Int);
                    sqlCommand.Parameters["@StatusFieldOrdinal"].Value =
                        Convert.ToInt32(documentElement.Attributes["RowOrdinal"].Value);
                    sqlCommand.Parameters.Add("@StatusField", SqlDbType.NVarChar, 64);
                    sqlCommand.Parameters["@StatusField"].Value =
                        (documentElement.Attributes["StatusColumnName"] != null
                            ? documentElement.Attributes["StatusColumnName"].Value
                            : DBNull.Value.ToString());
                    if (base.SharePointVersion.IsSharePoint2013OrLater)
                    {
                        sqlCommand.Parameters.Add("@CorrelationId", SqlDbType.UniqueIdentifier);
                        sqlCommand.Parameters["@CorrelationId"].Value = DBNull.Value;
                    }

                    try
                    {
                        sqlCommand.ExecuteNonQuery();
                    }
                    catch (Exception exception1)
                    {
                        Exception exception = exception1;
                        throw new Exception(
                            string.Format(
                                "The proc_AddWorkflow stored procedure failed to add the workflow instance to the database: {0}",
                                exception.Message), exception);
                    }
                }

                string str1 = "";
                try
                {
                    using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                               "Update Workflow\nSet Modified = @Modified, Created = @Created, InternalState = @InternalState, LockMachinePID = @LockMachinePID, InstanceDataVersion = @InstanceDataVersion, InstanceDataSize = @InstanceDataSize, InstanceData = @InstanceData, StatusVersion = @StatusVersion, Status1 = @Status1,Status2 = @Status2,Status3 = @Status3,Status4 = @Status4,Status5 = @Status5,Status6 = @Status6,Status7 = @Status7,Status8 = @Status8,Status9 = @Status9,Status10 = @Status10,TextStatus1 = @TextStatus1,TextStatus2 = @TextStatus2,TextStatus3 = @TextStatus3,TextStatus4 = @TextStatus4,TextStatus5 = @TextStatus5\nWhere Id=@WorkflowInstanceId \n",
                               sqlConnection))
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("Modified",
                            (object)Metalogix.SharePoint.Adapters.Utils.ParseDateAsUtc(documentElement
                                .Attributes["Modified"].Value)));
                        sqlCommand1.Parameters.Add(new SqlParameter("Created",
                            (object)Metalogix.SharePoint.Adapters.Utils.ParseDateAsUtc(documentElement
                                .Attributes["Created"].Value)));
                        sqlCommand1.Parameters.Add(new SqlParameter("InternalState",
                            documentElement.Attributes["InternalState"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("LockMachinePID",
                            documentElement.Attributes["LockMachinePID"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("InstanceDataVersion",
                            documentElement.Attributes["InstanceDataVersion"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("InstanceDataSize",
                            documentElement.Attributes["InstanceDataSize"].Value));
                        byte[] numArray = null;
                        if (documentElement.Attributes["InstanceData"] != null)
                        {
                            numArray = Convert.FromBase64String(documentElement.Attributes["InstanceData"].Value);
                        }

                        sqlCommand1.Parameters.Add(new SqlParameter("InstanceData", numArray));
                        sqlCommand1.Parameters.Add(new SqlParameter("StatusVersion",
                            documentElement.Attributes["StatusVersion"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status1",
                            documentElement.Attributes["Status1"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status2",
                            documentElement.Attributes["Status2"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status3",
                            documentElement.Attributes["Status3"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status4",
                            documentElement.Attributes["Status4"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status5",
                            documentElement.Attributes["Status5"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status6",
                            documentElement.Attributes["Status6"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status7",
                            documentElement.Attributes["Status7"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status8",
                            documentElement.Attributes["Status8"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status9",
                            documentElement.Attributes["Status9"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("Status10",
                            documentElement.Attributes["Status10"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("TextStatus1",
                            documentElement.Attributes["TextStatus1"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("TextStatus2",
                            documentElement.Attributes["TextStatus2"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("TextStatus3",
                            documentElement.Attributes["TextStatus3"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("TextStatus4",
                            documentElement.Attributes["TextStatus4"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("TextStatus5",
                            documentElement.Attributes["TextStatus5"].Value));
                        sqlCommand1.Parameters.Add(new SqlParameter("WorkflowInstanceId", (object)empty));
                        sqlCommand1.ExecuteNonQuery();
                    }
                }
                catch (Exception exception2)
                {
                    str1 = string.Concat(str1, "\nException thrown by workflow instance metadata update: ",
                        exception2.Message);
                }

                try
                {
                    if (documentElement.Attributes["TaskListWorkflowInstanceIDBackupColumn"] != null &&
                        !string.IsNullOrEmpty(
                            documentElement.Attributes["TaskListWorkflowInstanceIDBackupColumn"].Value))
                    {
                        string str2 = null;
                        str2 = (!value
                            ? string.Concat(
                                "Update AllUserData\nSet tp_WorkflowInstanceID = @WorkflowInstanceId, uniqueidentifier1  = @ListId\n Where tp_ListId=@TaskListId AND ",
                                documentElement.Attributes["TaskListWorkflowInstanceIDBackupColumn"].Value,
                                " = @OldWorkflowInstanceId\n")
                            : string.Concat(
                                "Update AllUserData\nSet tp_WorkflowInstanceID = @WorkflowInstanceId Where tp_ListId=@TaskListId AND ",
                                documentElement.Attributes["TaskListWorkflowInstanceIDBackupColumn"].Value,
                                " = @OldWorkflowInstanceId\n"));
                        using (SqlCommand sqlCommand2 = this.GetSqlCommand(str2, sqlConnection))
                        {
                            if (!value)
                            {
                                sqlCommand2.Parameters.Add(new SqlParameter("ListId",
                                    string.Concat("{", documentElement.Attributes["ListId"].Value, "}")));
                            }

                            sqlCommand2.Parameters.Add(new SqlParameter("WorkflowInstanceId",
                                string.Concat("{", empty.ToString(), "}")));
                            sqlCommand2.Parameters.Add(new SqlParameter("TaskListId",
                                string.Concat("{", documentElement.Attributes["TaskListId"].Value, "}")));
                            sqlCommand2.Parameters.Add(new SqlParameter("OldWorkflowInstanceId",
                                string.Concat("{", (str != null ? str : documentElement.Attributes["Id"].Value), "}")));
                            sqlCommand2.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception exception3)
                {
                    str1 = string.Concat(str1, "\nException thrown by task list linking: ", exception3.Message);
                    str1 = string.Concat(str1, "\nEXCEPTION DETAILS: \n");
                    str1 = string.Concat(str1, "\n Task list workflow instance ID backup column name: ",
                        documentElement.Attributes["TaskListWorkflowInstanceIDBackupColumn"].Value);
                    str1 = string.Concat(str1, "\n New WorkflowInstanceId string value: ", empty.ToString());
                    str1 = string.Concat(str1, "\n New ListId string value: ",
                        documentElement.Attributes["ListId"].Value);
                    str1 = string.Concat(str1, "\n New TaskListId string value: ",
                        documentElement.Attributes["TaskListId"].Value);
                    str1 = string.Concat(str1, "\n Old WorkflowInstanceId string value: ",
                        documentElement.Attributes["Id"].Value);
                }

                try
                {
                    using (SqlCommand sqlCommand3 = this.GetSqlCommand(
                               "Update AllUserData\nSet nvarchar3  = @WorkflowInstanceId, nvarchar4  = @WorkflowAssociationId, nvarchar5  = @WorkflowBaseId, nvarchar6  = @ListId\nWhere tp_ListId=@HistoryListId AND nvarchar3=@OldWorkflowInstanceId\n",
                               sqlConnection))
                    {
                        sqlCommand3.Parameters.Add(new SqlParameter("WorkflowInstanceId",
                            string.Concat("{", empty.ToString(), "}")));
                        sqlCommand3.Parameters.Add(new SqlParameter("WorkflowAssociationId",
                            string.Concat("{", documentElement.Attributes["TemplateId"].Value, "}")));
                        sqlCommand3.Parameters.Add(new SqlParameter("WorkflowBaseId",
                            string.Concat("{", documentElement.Attributes["BaseId"].Value, "}")));
                        sqlCommand3.Parameters.Add(new SqlParameter("ListId",
                            string.Concat("{", documentElement.Attributes["ListId"].Value, "}")));
                        sqlCommand3.Parameters.Add(new SqlParameter("HistoryListId",
                            string.Concat("{", documentElement.Attributes["HistoryListId"].Value, "}")));
                        sqlCommand3.Parameters.Add(new SqlParameter("OldWorkflowInstanceId",
                            string.Concat("{", (str != null ? str : documentElement.Attributes["Id"].Value), "}")));
                        sqlCommand3.ExecuteNonQuery();
                    }
                }
                catch (Exception exception4)
                {
                    str1 = string.Concat(str1, "\nException thrown by history list linking: ", exception4.Message);
                    str1 = string.Concat(str1, "\nEXCEPTION DETAILS: \n");
                    str1 = string.Concat(str1, "\n New WorkflowInstanceId string value: ", empty.ToString());
                    str1 = string.Concat(str1, "\n New WorkflowAssociationId string value: ",
                        documentElement.Attributes["TemplateId"].Value);
                    str1 = string.Concat(str1, "\n New WorkflowAssociation base ID string value: ",
                        documentElement.Attributes["BaseId"].Value);
                    str1 = string.Concat(str1, "\n New ListId string value: ",
                        documentElement.Attributes["ListId"].Value);
                    str1 = string.Concat(str1, "\n New HistoryListId string value: ",
                        documentElement.Attributes["HistoryListId"].Value);
                    str1 = string.Concat(str1, "\n Old WorkflowInstanceId string value: ",
                        documentElement.Attributes["Id"].Value);
                }

                if (!string.IsNullOrEmpty(str1))
                {
                    throw new Exception(str1);
                }
            }

            return documentElement.OuterXml;
        }

        public string AnalyzeChurn(DateTime pivotDate, string sListId, int iItemID, bool bRecursive)
        {
            StringBuilder stringBuilder = new StringBuilder();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                string str = null;
                string[] strArrays = new string[1];
                string serverRelativeUrl = this.ServerRelativeUrl;
                char[] chrArray = new char[] { '/' };
                strArrays[0] = serverRelativeUrl.TrimStart(chrArray);
                List<string> strs = new List<string>(strArrays);
                if (!base.SharePointVersion.IsSharePoint2003 || !this.IsPortal || !bRecursive)
                {
                    str = string.Concat("and d.DirName like @DirName0 + '%'\n",
                        (!bRecursive ? "and d.WebId = @WebID\n" : ""));
                }
                else
                {
                    DataTable dataTable = null;
                    SqlCommand sqlCommand = null;
                    SqlDataAdapter sqlDataAdapter = null;
                    try
                    {
                        dataTable = new DataTable("Path");
                        string str1 = string.Concat("Declare @IDPath nvarchar(1254)\n",
                            "Select @IDPath = IDPath from ((Webs w JOIN CatDef cd ON  ('*' + w.FullUrl) = cd.webUrl) JOIN CatPath cp ON (cd.CatID = cp.CatID)) where w.Id=@WebId\n");
                        str1 = string.Concat(str1,
                            "Select cp.IDPath, cp.Path, cd.WebUrl, w.Id, w.FullUrl from  ((Webs w JOIN CatDef cd ON  ('*' + w.FullUrl) = cd.webUrl) JOIN CatPath cp ON (cd.CatID = cp.CatID)) where cp.IDPath Like (@IDPath + '%') order by cp.IDPath");
                        sqlCommand = this.GetSqlCommand(str1, sqlConnection);
                        sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                        sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                        sqlDataAdapter.Fill(dataTable);
                        if (dataTable.Rows.Count <= 0)
                        {
                            str = "and d.DirName LIKE @DirName0\n";
                        }
                        else
                        {
                            StringBuilder stringBuilder1 = new StringBuilder();
                            Hashtable hashtables = new Hashtable();
                            strs = new List<string>();
                            foreach (DataRow row in dataTable.Rows)
                            {
                                if (stringBuilder1.Length > 0)
                                {
                                    stringBuilder1.Append(" OR ");
                                }

                                stringBuilder1.Append(string.Concat("d.DirName LIKE @DirName", strs.Count));
                                strs.Add(string.Concat(row["FullUrl"].ToString(), "/%"));
                            }

                            str = string.Concat(" and (", stringBuilder1.ToString(), ")\n");
                        }
                    }
                    finally
                    {
                        if (sqlCommand != null)
                        {
                            sqlCommand.Dispose();
                            sqlCommand = null;
                        }

                        if (sqlDataAdapter != null)
                        {
                            sqlDataAdapter.Dispose();
                            sqlDataAdapter = null;
                        }
                    }
                }

                string[] strArrays1 = new string[]
                {
                    "Select @DirName0 as ServerRelativeUrl, Count(*) as ItemsChanged, SUM(CAST(d.Size as bigint)) as BytesChanged, min(d.TimeLastModified) As LastModified\nfrom Docs d\nwhere d.SiteId = @SiteID\nand not d.DoclibRowId is null\nand d.TimeLastModified > @pivotDate\n",
                    str, null, null, null
                };
                strArrays1[2] = (!string.IsNullOrEmpty(sListId) ? "and d.ListId = @ListID\n" : "");
                strArrays1[3] = (iItemID > 0 ? " and d.DocLibRowId = @ItemID\n" : "");
                strArrays1[4] = "order by BytesChanged Desc\n";
                string str2 = string.Concat(strArrays1);
                DataTable dataTable1 = new DataTable("ChurnAnalysis");
                using (SqlCommand sqlCommand1 = this.GetSqlCommand(str2, sqlConnection))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("pivotDate", (object)pivotDate));
                    int num = 0;
                    foreach (string str3 in strs)
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter(string.Concat("DirName", num.ToString()), str3));
                        num++;
                    }

                    sqlCommand1.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    if (!bRecursive)
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    }

                    if (!string.IsNullOrEmpty(sListId))
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("ListID", sListId));
                    }

                    if (iItemID > 0)
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("ItemID", (object)iItemID));
                    }

                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable1);
                    }
                }

                if (dataTable1.Rows.Count != 1)
                {
                    throw new Exception("Failed to get churn data. Query failed to produce a single data row");
                }

                xmlTextWriter.WriteStartElement("ChurnAnalysis");
                xmlTextWriter.WriteAttributeString("ItemsChanged", dataTable1.Rows[0]["ItemsChanged"].ToString());
                xmlTextWriter.WriteAttributeString("BytesChanged", dataTable1.Rows[0]["BytesChanged"].ToString());
                xmlTextWriter.WriteEndElement();
            }

            return stringBuilder.ToString();
        }

        public string BuildListItemsQuery(string sListID, string sIDs, string sFields, string sParentFolder,
            ListType listType, bool bRecursive, ListItemQueryType itemTypes,
            out Dictionary<string, string> columnNameMappingDictionary, out List<string> multiValueFields,
            out Dictionary<string, string> taxonomyFields, string filterQuery = null)
        {
            string str;
            string value;
            string value1;
            string str1;
            if (!string.IsNullOrEmpty(sParentFolder))
            {
                str = sParentFolder.Replace("'", "''");
                str = str.Replace("[", "|[");
                str = string.Format("N'{0}'", str);
            }
            else
            {
                str = "NULL";
            }

            if (!string.IsNullOrEmpty(sFields))
            {
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(sFields);
                XmlNodeList xmlNodeLists = xmlDocument.SelectNodes("//Fields/Field");
                if (xmlNodeLists != null)
                {
                    XmlDocument xmlDocument1 = null;
                    foreach (XmlNode xmlNodes in xmlNodeLists)
                    {
                        if (xmlNodes == null)
                        {
                            continue;
                        }

                        if (xmlNodes.Attributes == null || xmlNodes.Attributes["Name"] == null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = xmlNodes.Attributes["Name"].Value;
                        }

                        string str2 = value;
                        if (xmlNodes.Attributes == null || xmlNodes.Attributes["ColName"] == null)
                        {
                            value1 = null;
                        }
                        else
                        {
                            value1 = xmlNodes.Attributes["ColName"].Value;
                        }

                        string str3 = value1;
                        if (xmlNodes.Attributes == null || xmlNodes.Attributes["Type"] == null)
                        {
                            str1 = null;
                        }
                        else
                        {
                            str1 = xmlNodes.Attributes["Type"].Value;
                        }

                        string str4 = str1;
                        if (string.IsNullOrEmpty(str2) || !string.IsNullOrEmpty(str3) && !string.IsNullOrEmpty(str4))
                        {
                            continue;
                        }

                        if (xmlDocument1 == null)
                        {
                            string fields = this.GetFields(sListID, true);
                            xmlDocument1 = new XmlDocument();
                            xmlDocument1.LoadXml(fields);
                        }

                        XmlNode xmlNodes1 =
                            xmlDocument1.SelectSingleNode(string.Format("//Fields/Field[@Name='{0}']", str2));
                        if (xmlNodes1 == null || xmlNodes1.Attributes == null)
                        {
                            continue;
                        }

                        if (xmlNodes1.Attributes["ColName"] != null)
                        {
                            if (xmlNodes.Attributes["ColName"] == null ||
                                !string.IsNullOrEmpty(xmlNodes.Attributes["ColName"].Value))
                            {
                                XmlAttribute xmlAttribute =
                                    (XmlAttribute)xmlDocument.ImportNode(xmlNodes1.Attributes["ColName"], true);
                                xmlNodes.Attributes.Append(xmlAttribute);
                            }
                            else
                            {
                                xmlNodes.Attributes["ColName"].Value = xmlNodes1.Attributes["ColName"].Value;
                            }
                        }

                        if (xmlNodes1.Attributes["Type"] == null)
                        {
                            continue;
                        }

                        if (xmlNodes.Attributes["Type"] == null ||
                            !string.IsNullOrEmpty(xmlNodes.Attributes["Type"].Value))
                        {
                            XmlAttribute xmlAttribute1 =
                                (XmlAttribute)xmlDocument.ImportNode(xmlNodes1.Attributes["Type"], true);
                            xmlNodes.Attributes.Append(xmlAttribute1);
                        }
                        else
                        {
                            xmlNodes.Attributes["Type"].Value = xmlNodes1.Attributes["Type"].Value;
                        }
                    }

                    sFields = xmlDocument.OuterXml;
                }
            }
            else
            {
                sFields = this.GetFields(sListID, false);
            }

            string fieldsListForQuery = DBAdapter.GetFieldsListForQuery(sFields, base.SharePointVersion, listType,
                out columnNameMappingDictionary, out multiValueFields, out taxonomyFields);
            string str5 = "";
            if (itemTypes == ListItemQueryType.ListItem)
            {
                str5 = " And d.Type= (CASE WHEN @BaseTemplate = 108 THEN d.Type ELSE 0 END) ";
            }
            else if (itemTypes == ListItemQueryType.Folder)
            {
                str5 = " And d.Type= 1";
            }

            StringBuilder stringBuilder = new StringBuilder(2048);
            stringBuilder.Append("Declare @SiteID uniqueidentifier\n");
            stringBuilder.Append("Declare @RootDirName nvarchar(257)\n");
            stringBuilder.Append("Declare @DirName nvarchar(257)\n");
            stringBuilder.Append("Declare @BaseType int\n");
            stringBuilder.Append("Declare @BaseTemplate int\n");
            stringBuilder.Append("\n");
            stringBuilder.Append("-- Determine the DirName, BaseType and SiteID from the Lists joined onto Docs\n");
            stringBuilder.Append(
                "Select @RootDirName=DirName + (CASE WHEN DirName = '' THEN '' ELSE '/' END) + LeafName , @BaseType = tp_BaseType, @BaseTemplate = tp_ServerTemplate, @SiteID = SiteID\n");
            stringBuilder.Append("from lists l , docs d\n");
            stringBuilder.Append(string.Concat("where l.tp_id = '", sListID, "'\n"));
            stringBuilder.Append("and l.tp_rootfolder = d.id\n");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("-- Sanitise @RootDirName incase that has any open square bracket");
            stringBuilder.AppendLine("SET @RootDirName = REPLACE (@RootDirName,'[','|[')");
            stringBuilder.AppendLine();
            stringBuilder.Append("-- Get a default value for the DirName\n");
            stringBuilder.Append(string.Concat("Select @DirName=", str, "\n"));
            stringBuilder.Append("-- Get a default value for the DirName\n");
            stringBuilder.Append("if (@DirName is Null)\n");
            stringBuilder.Append("\tSelect @DirName = @RootDirName\n");
            stringBuilder.Append("\n");
            stringBuilder.Append("\tSelect @DirName = @DirName \n");
            stringBuilder.Append("-- If we are SharePoint2007, or based on a DocLib, get data from the Docs table.\n");
            stringBuilder.Append("-- But only if we are SharePoint 2007 can we get the permissions scope info.\n");
            if (!base.SharePointVersion.IsSharePoint2007OrLater)
            {
                stringBuilder.Append("If (@BaseType=1)");
                stringBuilder.Append(string.Concat(
                    "  Select d.Id as UniqueId, d.DirName as FileDirRef, d.LeafName as FileLeafRef, d.Type as FSObjType, d.Size as _FileSize, d.DocFlags as _DocFlags, ",
                    fieldsListForQuery, "\n"));
                stringBuilder.Append("  From Docs d, UserData u \n");
                stringBuilder.Append("  Where d.SiteID = @SiteID \n");
                if (!bRecursive)
                {
                    stringBuilder.Append("  And d.Dirname = @DirName \n");
                }
                else
                {
                    stringBuilder.Append(
                        "  And (d.Dirname=@DirName or d.Dirname like (@DirName + '/%') ESCAPE '|') \n");
                }

                stringBuilder.Append(string.Concat("  And d.ListId='", sListID, "' \n"));
                stringBuilder.Append(str5);
                if (!string.IsNullOrEmpty(filterQuery))
                {
                    stringBuilder.Append(filterQuery);
                }

                stringBuilder.Append((sIDs != null ? string.Concat("  And d.DocLibRowId In (", sIDs, ") \n") : ""));
                stringBuilder.Append((base.SharePointVersion.IsSharePoint2007OrLater
                    ? "  And d.IsCurrentVersion = 1 \n"
                    : ""));
                stringBuilder.Append("  And u.tp_IsCurrent = 1\n");
                stringBuilder.Append(string.Concat("  And u.tp_ListID = '", sListID, "' \n"));
                stringBuilder.Append("  And u.tp_ID = d.DocLibRowID \n");
                stringBuilder.Append("  Order By d.DoclibRowId \n");
                stringBuilder.Append("-- Otherwise, get the items from the userdata table.\n");
                if (base.SharePointVersion.IsSharePoint2007OrLater || listType != ListType.DocumentLibrary ||
                    !AdapterConfigurationVariables.Swap2003DocMetaInfoColumns)
                {
                    stringBuilder.Append("Else\n");
                    stringBuilder.Append("  If @BaseType=5\n");
                    StringBuilder stringBuilder1 = stringBuilder;
                    string[] strArrays = new string[]
                    {
                        "      Select ", fieldsListForQuery, " From UserData u Where u.tp_ListID= '", sListID, "'",
                        null, null
                    };
                    strArrays[5] = (sIDs != null ? string.Concat("  And u.tp_ID in (", sIDs, ")") : "");
                    strArrays[6] = " And tp_IsCurrent=1 \n";
                    stringBuilder1.Append(string.Concat(strArrays));
                    stringBuilder.Append("  Else\n");
                    StringBuilder stringBuilder2 = stringBuilder;
                    string[] strArrays1 = new string[]
                    {
                        "      Select ", fieldsListForQuery, " From UserData u Where u.tp_ListID= '", sListID, "'", null
                    };
                    strArrays1[5] = (sIDs != null ? string.Concat("  And u.tp_ID in (", sIDs, ")") : "");
                    stringBuilder2.Append(string.Concat(strArrays1));
                }
            }
            else
            {
                stringBuilder.Append(
                    "  Select d.Id as UniqueId, d.DirName as FileDirRef, d.LeafName as FileLeafRef, d.Type as FSObjType, d.Size as _FileSize, d.DocFlags as _DocFlags, d.SetupPath as _SetupPath, p.ScopeUrl as ScopeUrl");
                if (!base.SharePointVersion.IsSharePoint2013OrLater && base.SharePointVersion.IsSharePoint2010)
                {
                    stringBuilder.Append(
                        ", (Select RbsId from AllDocStreams s where s.InternalVersion=d.InternalVersion and s.Id=d.Id) as RbsId ");
                }

                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    stringBuilder.Append(string.Concat(", ", fieldsListForQuery, "\n"));
                }

                if (!base.SharePointVersion.IsSharePoint2013OrLater)
                {
                    stringBuilder.Append("  From Docs d join Perms p on d.ScopeId=p.ScopeId, UserData u \n");
                    stringBuilder.Append("  Where d.SiteID = @SiteID \n");
                }
                else
                {
                    stringBuilder.Append("  From Docs d join Perms p on d.ScopeId=p.ScopeId, AllUserData u \n");
                    stringBuilder.Append(
                        "  Where tp_IsCurrentVersion = CONVERT(bit, 1) AND tp_CalculatedVersion = 0 AND tp_DeleteTransactionId = 0x \n");
                    stringBuilder.Append("     AND d.SiteID = @SiteID \n");
                }

                if (!bRecursive)
                {
                    stringBuilder.Append("  And d.Dirname = @DirName \n");
                }
                else
                {
                    stringBuilder.Append(
                        "  And (d.Dirname=@DirName or d.Dirname like (@DirName + '/%') ESCAPE '|') \n");
                }

                stringBuilder.Append(string.Concat("  And d.ListId='", sListID, "' \n"));
                stringBuilder.Append(str5);
                if (!string.IsNullOrEmpty(filterQuery))
                {
                    stringBuilder.Append(filterQuery);
                }

                stringBuilder.Append((sIDs != null ? string.Concat("  And d.DocLibRowId In (", sIDs, ") \n") : ""));
                stringBuilder.Append((base.SharePointVersion.IsSharePoint2007OrLater
                    ? "  And d.IsCurrentVersion = 1 \n"
                    : ""));
                stringBuilder.Append("  And u.tp_IsCurrent = 1\n");
                stringBuilder.Append(string.Concat("  And u.tp_ListID = '", sListID, "' \n"));
                stringBuilder.Append("  And u.tp_ID = d.DocLibRowID \n");
                stringBuilder.Append("  And u.tp_RowOrdinal='0' \n");
                stringBuilder.Append("  Order By d.DoclibRowId \n");
            }

            return stringBuilder.ToString();
        }

        public string CatalogDocumentToStoragePointFileShareEndpoint(string sNetworkPath, string sListID,
            string sFolder, string sListItemXml, AddDocumentOptions options)
        {
            throw new NotSupportedException("This method is not supported on DB connections");
        }

        public override void CheckConnection()
        {
            this.CheckConnection(true);
        }

        public void CheckConnection(bool bCheckForSharePointDatabase)
        {
            if (!base.CredentialsAreDefault && this.Credentials.Password.IsNullOrEmpty())
            {
                throw new UnauthorizedAccessException("A password is required");
            }

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    try
                    {
                        sqlConnection.Open();
                        if (bCheckForSharePointDatabase)
                        {
                            DataTable dataTable = new DataTable("Results");
                            SqlCommand sqlCommand = null;
                            SqlDataAdapter sqlDataAdapter = null;
                            try
                            {
                                try
                                {
                                    sqlCommand = this.GetSqlCommand("Select TOP 1 Id from Docs", sqlConnection);
                                    sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                                    sqlDataAdapter.Fill(dataTable);
                                }
                                catch (SqlException sqlException1)
                                {
                                    SqlException sqlException = sqlException1;
                                    if (sqlException.Number != 208)
                                    {
                                        throw sqlException;
                                    }

                                    throw new NotSharePointDatabaseException();
                                }
                            }
                            finally
                            {
                                if (sqlCommand != null)
                                {
                                    sqlCommand.Dispose();
                                }

                                if (sqlDataAdapter != null)
                                {
                                    sqlDataAdapter.Dispose();
                                }
                            }

                            DataTable dataTable1 = new DataTable("Results");
                            using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                                       "Select col_length('Docs', 'Id') as Docs, col_length('Webs', 'Id') as Webs, col_length('Lists', 'tp_ID') as Lists",
                                       sqlConnection))
                            {
                                using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                                {
                                    sqlDataAdapter1.Fill(dataTable1);
                                }
                            }

                            if (dataTable1.Rows.Count != 1)
                            {
                                throw new Exception("Could not connect to SQL server.");
                            }
                        }

                        this.m_sqlServerVersion = sqlConnection.ServerVersion;
                    }
                    finally
                    {
                        sqlConnection.Close();
                    }
                }

                if ((AdapterConfigurationVariables.Allow2013DB ? false : bCheckForSharePointDatabase))
                {
                    if (base.SharePointVersion.IsSharePoint2016)
                    {
                        throw new Exception("Connections to SharePoint 2016 databases are currently unsupported");
                    }

                    if (base.SharePointVersion.IsSharePoint2013OrLater && !this.IsSP2013DBConnectionAllowed())
                    {
                        throw new Exception(
                            "Connections to SharePoint 2013 databases are not supported from SharePoint 2003, 2007, 2010 and 2016 environments");
                    }
                }
            }
            catch (Exception exception)
            {
                throw;
            }
        }

        public void CheckConnectionSkip2013Check()
        {
            if (!base.CredentialsAreDefault && this.Credentials.Password.IsNullOrEmpty())
            {
                throw new UnauthorizedAccessException("A password is required");
            }

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    try
                    {
                        sqlConnection.Open();
                        DataTable dataTable = new DataTable("Results");
                        SqlCommand sqlCommand = null;
                        SqlDataAdapter sqlDataAdapter = null;
                        try
                        {
                            try
                            {
                                sqlCommand = this.GetSqlCommand("Select TOP 1 Id from Docs", sqlConnection);
                                sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                                sqlDataAdapter.Fill(dataTable);
                            }
                            catch (SqlException sqlException1)
                            {
                                SqlException sqlException = sqlException1;
                                if (sqlException.Number != 208)
                                {
                                    throw sqlException;
                                }

                                throw new NotSharePointDatabaseException();
                            }
                        }
                        finally
                        {
                            if (sqlCommand != null)
                            {
                                sqlCommand.Dispose();
                            }

                            if (sqlDataAdapter != null)
                            {
                                sqlDataAdapter.Dispose();
                            }
                        }

                        DataTable dataTable1 = new DataTable("Results");
                        using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                                   "Select col_length('Docs', 'Id') as Docs, col_length('Webs', 'Id') as Webs, col_length('Lists', 'tp_ID') as Lists",
                                   sqlConnection))
                        {
                            using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                            {
                                sqlDataAdapter1.Fill(dataTable1);
                            }
                        }

                        if (dataTable1.Rows.Count != 1)
                        {
                            throw new Exception("Could not connect to SQL server.");
                        }

                        this.m_sqlServerVersion = sqlConnection.ServerVersion;
                    }
                    finally
                    {
                        sqlConnection.Close();
                    }
                }
            }
            catch (Exception exception)
            {
                throw;
            }
        }

        public byte[] CheckForDeletedItem(string sListGUID, int iItemId)
        {
            byte[] numArray;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                byte[] numArray1 = null;
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "Select DeleteTransactionId from AllDocs with (nolock) where SiteId=@SiteId and WebId=@WebId and ListId=@ListId and DocLibRowId=@RowId",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("RowId", (object)iItemId));
                    sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                    sqlCommand.Parameters.Add(new SqlParameter("ListId", sListGUID));
                    numArray1 = sqlCommand.ExecuteScalar() as byte[];
                }

                numArray = numArray1;
            }

            return numArray;
        }

        public override SharePointAdapter Clone()
        {
            DBAdapter dBAdapter = new DBAdapter();
            dBAdapter.CloneFrom(this, true);
            return dBAdapter;
        }

        public override SharePointAdapter CloneForNewSiteCollection()
        {
            DBAdapter dBAdapter = new DBAdapter();
            dBAdapter.CloneFrom(this, false);
            return dBAdapter;
        }

        private void CloneFrom(DBAdapter adapter, bool bIncludeSiteCollectionSpecificProperties)
        {
            this.m_sServer = adapter.m_sServer;
            this.m_sDatabase = adapter.m_sDatabase;
            this.m_credentials = adapter.m_credentials;
            this.m_sServerRelativeUrl = adapter.m_sServerRelativeUrl;
            this.m_sConnectionString = adapter.m_sConnectionString;
            this.m_utcDateOffset = adapter.m_utcDateOffset;
            this.m_iDatabaseVersion = adapter.m_iDatabaseVersion;
            this.m_sqlServerVersion = adapter.m_sqlServerVersion;
            this.m_bIsPortal = adapter.m_bIsPortal;
            this.m_sLinkName = adapter.m_sLinkName;
            this.m_sHostHeader = adapter.m_sHostHeader;
            this.m_sCustomTemplateLocation = adapter.m_sCustomTemplateLocation;
            this.m_bConnectedToSPS2003DB = adapter.IsPortal2003Connection;
            this.m_bConnectedToSPS2003DBChecked = adapter.m_bConnectedToSPS2003DBChecked;
            this.AdapterProxy = adapter.AdapterProxy;
            this.IncludedCertificates = adapter.IncludedCertificates;
            this.AuthenticationInitializer = adapter.AuthenticationInitializer;
            base.SetSharePointVersion(adapter.SharePointVersion.Clone());
            base.IsDataLimitExceededForContentUnderMgmt = adapter.IsDataLimitExceededForContentUnderMgmt;
            if (bIncludeSiteCollectionSpecificProperties)
            {
                this.m_sAdapterIdentity = adapter.m_sAdapterIdentity;
                this.m_sConnectionString = null;
                this.m_sWebID = adapter.m_sWebID;
                this.m_sSiteID = adapter.m_sSiteID;
                this.m_userMap = adapter.UserMap;
            }
        }

        public string ConfigureStoragePointFileShareEndpointAndProfile(string sNetworkPath, string sSharePointPath)
        {
            throw new NotSupportedException("This method is not supported on DB connections");
        }

        private StringBuilder ConstructCommonSQLHeaderForVersion(string sListID, int iItemID)
        {
            StringBuilder stringBuilder = new StringBuilder(1024);
            stringBuilder.AppendLine("DECLARE @IsSharePoint2007 bit");
            stringBuilder.AppendLine("DECLARE @SiteID uniqueidentifier");
            stringBuilder.AppendLine("DECLARE @RootDirName nvarchar(257)");
            stringBuilder.AppendLine("DECLARE @BaseType int");
            stringBuilder.AppendLine("DECLARE @FileID uniqueidentifier");
            stringBuilder.AppendLine("DECLARE @FileDirRef nvarchar(256)");
            stringBuilder.AppendLine("DECLARE @FileLeafRef nvarchar(128)");
            stringBuilder.AppendLine("DECLARE @FileType int");
            stringBuilder.AppendLine("DECLARE @FileSize int");
            stringBuilder.AppendLine("DECLARE @DocFlags int");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("-- Determine the DirName, BaseType and SiteID from the Lists joined onto Docs");
            stringBuilder.AppendLine(
                "SELECT @RootDirName=DirName + (CASE WHEN DirName = '' THEN '' ELSE '/' END) + LeafName , @BaseType = tp_BaseType, @SiteID = SiteID");
            stringBuilder.AppendLine("FROM Lists l , Docs d");
            stringBuilder.AppendLine(string.Concat("WHERE l.tp_id = '", sListID, "'"));
            stringBuilder.AppendLine("AND l.tp_rootfolder = d.id");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("-- Add a wildcard if we are fetching all items below the given DirName");
            stringBuilder.AppendLine("SELECT @RootDirName = @RootDirName + '%'");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("-- Get the document ID based on the Item ID");
            stringBuilder.AppendLine(
                "SELECT @FileID = Id, @FileDirRef = DirName, @FileLeafRef = LeafName, @FileType = Type, @FileSize = Size, @DocFlags = DocFlags From Docs");
            stringBuilder.AppendLine(string.Concat(
                "WHERE Siteid = @SiteID and DirName Like @Rootdirname And ListId = '", sListID, "' and DocLibRowId = ",
                iItemID.ToString()));
            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2010OrLater
                ? " AND IsCurrentVersion = 1"
                : string.Empty));
            return stringBuilder;
        }

        private StringBuilder ConstructDocumentCurrentVersionSQL(string sListID, int iItemID, string itemFieldList,
            string fileFields, string versionFields)
        {
            StringBuilder stringBuilder = new StringBuilder(2048);
            stringBuilder.AppendLine("-- Get the Document Current Versions");
            stringBuilder.AppendLine("SELECT");
            stringBuilder.AppendLine("  TimeLastModified AS _VersionModified,");
            stringBuilder.AppendLine("  UIVersion AS _VersionNumber,");
            stringBuilder.AppendLine(string.Concat("  ",
                (base.SharePointVersion.IsSharePoint2007OrLater ? "UIVersionString" : "UIVersion"),
                " AS _VersionString,"));
            stringBuilder.AppendLine(string.Concat("  ",
                (base.SharePointVersion.IsSharePoint2010OrLater
                    ? "d.IsCurrentVersion AS _VersionIsCurrent,"
                    : " CONVERT(bit, 1) AS _VersionIsCurrent,")));
            stringBuilder.AppendLine("  d.Size AS _FileSize,");
            stringBuilder.AppendLine(fileFields);
            stringBuilder.AppendLine(versionFields);
            stringBuilder.AppendLine(itemFieldList);
            if (!base.SharePointVersion.IsSharePoint2013OrLater && base.SharePointVersion.IsSharePoint2010)
            {
                stringBuilder.AppendLine(
                    ", (SELECT RbsId FROM AllDocStreams s WHERE s.InternalVersion=d.InternalVersion AND s.Id=d.Id) AS RbsId");
            }

            stringBuilder.AppendLine(string.Concat("FROM Docs d, ",
                (base.SharePointVersion.IsSharePoint2007OrLater ? "AllUserData u" : "Userdata u")));
            stringBuilder.AppendLine("WHERE d.Id = @FileID");
            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2007OrLater
                ? "AND tp_DeleteTransactionId = 0x AND (tp_IsCurrentVersion = CONVERT(bit, 1) OR tp_IsCurrentVersion = CONVERT(bit, 0))"
                : ""));
            stringBuilder.AppendLine(string.Concat("AND u.tp_ListID = '", sListID, "'"));
            stringBuilder.AppendLine(string.Concat("AND u.tp_ID = ", iItemID.ToString()));
            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2007OrLater
                ? "AND u.tp_RowOrdinal = 0"
                : string.Empty));
            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2007OrLater
                ? "AND u.tp_uiversion = d.uiversion"
                : string.Empty));
            return stringBuilder;
        }

        private StringBuilder ConstructDocumentVersionSQL(string sListID, int iItemID, string itemFieldList,
            string fileFields, string versionFields)
        {
            string str;
            StringBuilder stringBuilder = new StringBuilder(2048);
            stringBuilder.AppendLine("-- Get the Document Versions (not include current)");
            stringBuilder.AppendLine("SELECT");
            stringBuilder.AppendLine("  TimeCreated AS _VersionModified,");
            stringBuilder.AppendLine(string.Concat("  ",
                (base.SharePointVersion.IsSharePoint2010OrLater ? "UIVersion" : "Version"), " AS _VersionNumber,"));
            stringBuilder.AppendLine(string.Concat("  ",
                (base.SharePointVersion.IsSharePoint2007OrLater ? "tp_UIVersionString" : "Version"),
                " AS _VersionString,"));
            stringBuilder.AppendLine("  CONVERT(bit, 0) AS _VersionIsCurrent,");
            stringBuilder.AppendLine("[Size] AS _FileSize,");
            stringBuilder.AppendLine(fileFields);
            stringBuilder.AppendLine(versionFields);
            stringBuilder.AppendLine(itemFieldList);
            if (!base.SharePointVersion.IsSharePoint2013OrLater && base.SharePointVersion.IsSharePoint2010)
            {
                stringBuilder.AppendLine(
                    ", (SELECT RbsId FROM AllDocStreams s WHERE s.InternalVersion=v.InternalVersion AND s.Id=v.Id) AS RbsId");
            }

            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2007OrLater
                ? "FROM AllDocVersions v, AllUserData u"
                : "FROM DocVersions v, Userdata u"));
            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2007OrLater
                ? "WHERE DeleteTransactionId = 0x AND tp_DeleteTransactionId = 0x AND (tp_IsCurrentVersion = CONVERT(bit, 1) OR tp_IsCurrentVersion = CONVERT(bit, 0)) AND "
                : "WHERE "));
            stringBuilder.AppendLine("v.Id = @FileID");
            stringBuilder.AppendLine(string.Concat("AND u.tp_ListID = '", sListID, "'"));
            stringBuilder.AppendLine(string.Concat("AND u.tp_ID = ", iItemID.ToString()));
            stringBuilder.AppendLine((base.SharePointVersion.IsSharePoint2007OrLater
                ? "AND u.tp_RowOrdinal = 0"
                : string.Empty));
            StringBuilder stringBuilder1 = stringBuilder;
            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                str = (base.SharePointVersion.IsSharePoint2010OrLater
                    ? "AND u.tp_uiversion = v.UIVersion"
                    : " AND u.tp_uiversion = v.version");
            }
            else
            {
                str = "";
            }

            stringBuilder1.AppendLine(str);
            return stringBuilder;
        }

        private string ConvertDatabaseHexToString(DataRow dr, DataColumn c)
        {
            string str = null;
            if (dr[c] is DBNull)
            {
                return null;
            }

            if (c.DataType == typeof(byte[]))
            {
                object item = dr[c];
                StringBuilder stringBuilder = new StringBuilder(100);
                stringBuilder.Append("0x");
                byte[] numArray = (byte[])item;
                for (int i = 0; i < (int)numArray.Length; i++)
                {
                    byte num = numArray[i];
                    stringBuilder.Append(string.Format("{0:X2}", num));
                }

                str = stringBuilder.ToString();
            }

            return str;
        }

        public static byte[] ConvertStringToDatabaseHex(string hex)
        {
            if (hex.StartsWith("0x"))
            {
                hex = hex.Substring(2, hex.Length - 2);
            }

            int length = hex.Length;
            byte[] num = new byte[length / 2];
            for (int i = 0; i < length; i += 2)
            {
                num[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            }

            return num;
        }

        private string CorrectConnectionNodes(string wppNode)
        {
            wppNode = wppNode.Replace("<ConnectionID>", "<ConnectionID xmlns=\"\">");
            wppNode = wppNode.Replace("<Connections>", "<Connections xmlns=\"\">");
            return wppNode;
        }

        private void DecodeRbsBlobReference(byte[] rbsBlobId, out long blobNumber, out int collectionId)
        {
            blobNumber = (long)0;
            for (int i = 0; i < 8; i++)
            {
                blobNumber += (long)(rbsBlobId[i] << (8 * (7 - i) & 31));
            }

            collectionId = 0;
            for (int j = 0; j < 4; j++)
            {
                collectionId = collectionId + (rbsBlobId[j + 8] << (8 * (7 - j) & 31));
            }
        }

        private static string DecompressInstanceData(byte[] activityBytes)
        {
            if (activityBytes == null)
            {
                return string.Empty;
            }

            return Convert.ToBase64String(activityBytes, Base64FormattingOptions.None);
        }

        private static string DecompressToXmlString(byte[] input)
        {
            byte[] array;
            string str;
            try
            {
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    memoryStream.Position = (long)0;
                    List<byte> nums = new List<byte>();
                    using (MemoryStream memoryStream1 = new MemoryStream(input, 14, (int)input.Length - 14))
                    {
                        memoryStream1.Position = (long)0;
                        using (DeflateStream deflateStream =
                               new DeflateStream(memoryStream1, CompressionMode.Decompress, true))
                        {
                            for (int i = deflateStream.ReadByte(); i != -1; i = deflateStream.ReadByte())
                            {
                                nums.Add((byte)i);
                            }
                        }
                    }

                    nums.TrimExcess();
                    memoryStream.Write(nums.ToArray(), 0, nums.Count);
                    array = memoryStream.ToArray();
                }

                str = Encoding.UTF8.GetString(array);
            }
            catch (InvalidDataException invalidDataException)
            {
                str = Encoding.Unicode.GetString(input);
            }

            return str;
        }

        private void DeserializeWebPartDataRow(DataRow dr, string sWebPartId, XmlTextWriter xmlWriter)
        {
            string str;
            int num;
            byte[] item;
            byte[] numArray;
            string str1;
            string str2;
            string str3;
            string str4;
            string item1;
            string str5;
            if (dr["tp_peruserproperties"] is DBNull)
            {
                item = null;
            }
            else
            {
                item = (byte[])dr["tp_peruserproperties"];
            }

            byte[] numArray1 = item;
            if (dr["tp_allusersproperties"] is DBNull)
            {
                numArray = null;
            }
            else
            {
                numArray = (byte[])dr["tp_allusersproperties"];
            }

            byte[] numArray2 = numArray;
            string str6 = dr["tp_WebPartTypeId"].ToString();
            XmlNode webPartType = this.GetWebPartType(str6);
            if (webPartType == null)
            {
                return;
            }

            bool value = webPartType.Attributes["TypeName"].Value ==
                         "Microsoft.SharePoint.WebPartPages.ListViewWebPart";
            bool flag = webPartType.Attributes["TypeName"].Value ==
                        "Microsoft.SharePoint.WebPartPages.XsltListViewWebPart";
            string value1 = webPartType.Attributes["TypeName"].Value;
            if (dr["ListTitle"] is DBNull)
            {
                str1 = null;
            }
            else
            {
                str1 = dr["ListTitle"].ToString();
            }

            string str7 = str1;
            if (dr["tp_View"] is DBNull)
            {
                str2 = null;
            }
            else
            {
                str2 = (dr["tp_View"] is byte[]
                    ? DBAdapter.DecompressToXmlString((byte[])dr["tp_View"])
                    : dr["tp_View"].ToString());
            }

            string listViewXmlFromListTemplate = str2;
            if (dr["tp_ZoneID"] is DBNull)
            {
                str3 = null;
            }
            else
            {
                str3 = dr["tp_ZoneID"].ToString();
            }

            string str8 = str3;
            int num1 = (dr["tp_PartOrder"] is DBNull ? 0 : Convert.ToInt32(dr["tp_PartOrder"]));
            int num2 = (dr["tp_Flags"] is DBNull ? 0 : Convert.ToInt32(dr["tp_Flags"]));
            int num3 = (dr["tp_BaseViewID"] is DBNull ? 0 : Convert.ToInt32(dr["tp_BaseViewID"]));
            bool flag1 = (dr["tp_IsIncluded"] is DBNull ? true : Convert.ToBoolean(dr["tp_IsIncluded"]));
            if (dr["tp_ListID"] is DBNull)
            {
                str4 = null;
            }
            else
            {
                str4 = dr["tp_ListID"].ToString();
            }

            string str9 = str4;
            if (base.SharePointVersion.IsSharePoint2007OrEarlier || dr.Table.Columns["tp_WebPartIdProperty"] == null ||
                dr["tp_WebPartIdProperty"] is DBNull)
            {
                item1 = null;
            }
            else
            {
                item1 = dr["tp_WebPartIdProperty"] as string;
            }

            string str10 = item1;
            bool flag2 = string.Equals(str8, "wpz", StringComparison.OrdinalIgnoreCase);
            if (dr["tp_DisplayName"] is DBNull)
            {
                str5 = null;
            }
            else
            {
                str5 = dr["tp_DisplayName"].ToString();
            }

            string str11 = str5;
            bool flag3 = ((long)num2 & (long)8) > (long)0;
            int num4 = -1;
            if ((flag || value) && !string.IsNullOrEmpty(str9))
            {
                bool flag4 = true;
                if (this.CurrentWebTemplate.Equals("BLOG", StringComparison.InvariantCultureIgnoreCase))
                {
                    this.GetListBaseTemplateID(str9, out num, out str);
                    if (base.SharePointVersion.IsSharePoint2007)
                    {
                        if (string.IsNullOrEmpty(listViewXmlFromListTemplate) && (num == 103 || num == 303))
                        {
                            num4 = num;
                        }
                    }
                    else if (string.IsNullOrEmpty(listViewXmlFromListTemplate) &&
                             base.SharePointVersion.IsSharePoint2010 && num == 301)
                    {
                        flag4 = false;
                    }
                }

                if (flag4)
                {
                    listViewXmlFromListTemplate =
                        this.GetListViewXmlFromListTemplate(listViewXmlFromListTemplate, str9, num3);
                }
            }

            if (this.IsCompressedXML(numArray1, numArray2) ||
                value1 == "Microsoft.SharePoint.WebPartPages.ListViewWebPart" ||
                value1 == "Microsoft.SharePoint.WebPartPages.ListFormWebPart")
            {
                xmlWriter.WriteStartElement("WebPart");
                xmlWriter.WriteAttributeString("ID", (sWebPartId != null ? sWebPartId : ""));
                xmlWriter.WriteAttributeString("Embedded", flag2.ToString());
                xmlWriter.WriteAttributeString("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                xmlWriter.WriteAttributeString("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
                xmlWriter.WriteAttributeString("xmlns", "http://schemas.microsoft.com/WebPart/v2");
                xmlWriter.WriteElementString("ZoneID", str8);
                xmlWriter.WriteElementString("PartOrder", num1.ToString());
                xmlWriter.WriteElementString("IsIncluded", flag1.ToString().ToLower());
                xmlWriter.WriteElementString("Assembly", webPartType.Attributes["Assembly"].Value);
                xmlWriter.WriteElementString("TypeName", webPartType.Attributes["TypeName"].Value);
                xmlWriter.WriteElementString("SharePointSourceVersion", base.SharePointVersion.VersionNumberString);
                if (num4 != -1)
                {
                    xmlWriter.WriteElementString("BaseTemplateID", num4.ToString());
                }

                xmlWriter.WriteElementString("DisplayName", str11);
                if (value)
                {
                    xmlWriter.WriteStartElement("ListName", "http://schemas.microsoft.com/WebPart/v2/ListView");
                    xmlWriter.WriteValue(str7);
                    xmlWriter.WriteEndElement();
                    xmlWriter.WriteStartElement("ListViewXml", "http://schemas.microsoft.com/WebPart/v2/ListView");
                    XmlTextWriter xmlTextWriter = xmlWriter;
                    object[] viewType = new object[]
                    {
                        "<View Type=\"", this.GetViewType(num2), "\" Hidden=\"TRUE\" BaseViewID=\"", num3, "\" >", null,
                        null
                    };
                    viewType[5] = (listViewXmlFromListTemplate != null ? listViewXmlFromListTemplate : "");
                    viewType[6] = "</View>";
                    xmlTextWriter.WriteValue(string.Concat(viewType));
                    xmlWriter.WriteEndElement();
                    if (num3 < 2)
                    {
                        if (!string.IsNullOrEmpty(str11))
                        {
                            xmlWriter.WriteElementString("IsViewWebPart", (flag3 ? false.ToString() : true.ToString()));
                        }
                        else
                        {
                            xmlWriter.WriteElementString("IsViewWebPart", false.ToString());
                        }
                    }
                }

                if (numArray1 != null || numArray2 != null)
                {
                    string str12 =
                        this.CorrectConnectionNodes(
                            DBAdapter.CompressedXmlReader.ReadCompressedXML(numArray1, numArray2));
                    XmlDocument xmlDocument = new XmlDocument();
                    xmlDocument.LoadXml(str12);
                    if (xmlDocument.FirstChild != null)
                    {
                        xmlWriter.WriteRaw(xmlDocument.FirstChild.InnerXml);
                    }
                }
                else if (value1 == "Microsoft.SharePoint.WebPartPages.ListFormWebPart")
                {
                    xmlWriter.WriteStartElement("ListName", "http://schemas.microsoft.com/WebPart/v2/ListForm");
                    xmlWriter.WriteValue(str7);
                    xmlWriter.WriteEndElement();
                    switch (Convert.ToInt32(dr["tp_Type"]))
                    {
                        case 4:
                        {
                            xmlWriter.WriteStartElement("PageType", "http://schemas.microsoft.com/WebPart/v2/ListForm");
                            xmlWriter.WriteValue("PAGE_DISPLAYFORM");
                            xmlWriter.WriteEndElement();
                            break;
                        }
                        case 6:
                        {
                            xmlWriter.WriteStartElement("PageType", "http://schemas.microsoft.com/WebPart/v2/ListForm");
                            xmlWriter.WriteValue("PAGE_EDITFORM");
                            xmlWriter.WriteEndElement();
                            break;
                        }
                        case 8:
                        {
                            xmlWriter.WriteStartElement("PageType", "http://schemas.microsoft.com/WebPart/v2/ListForm");
                            xmlWriter.WriteValue("PAGE_NEWFORM");
                            xmlWriter.WriteEndElement();
                            break;
                        }
                    }
                }

                if (base.SharePointVersion.IsSharePoint2010OrLater && !string.IsNullOrEmpty(str10))
                {
                    xmlWriter.WriteElementString("ID", str10);
                }

                xmlWriter.WriteEndElement();
                return;
            }

            Dictionary<string, object> strs = DBAdapter.ObjectCollectionDeserializer.DeserializeObjectData(numArray1);
            Dictionary<string, object> innerXml =
                DBAdapter.ObjectCollectionDeserializer.DeserializeObjectData(numArray2);
            if (innerXml != null)
            {
                if (!innerXml.ContainsKey("XmlDefinition"))
                {
                    Dictionary<string, object> strs1 = innerXml;
                    object[] objArray = new object[]
                    {
                        "<View Type=\"", this.GetViewType(num2), "\" Hidden=\"TRUE\" BaseViewID=\"", num3, "\" >", null,
                        null
                    };
                    objArray[5] = (listViewXmlFromListTemplate != null ? listViewXmlFromListTemplate : "");
                    objArray[6] = "</View>";
                    strs1.Add("XmlDefinition", string.Concat(objArray));
                }
                else
                {
                    XmlDocument xmlDocument1 = new XmlDocument();
                    xmlDocument1.LoadXml((string)innerXml["XmlDefinition"]);
                    if (string.IsNullOrEmpty(xmlDocument1.FirstChild.GetAttributeValueAsString("Type")))
                    {
                        XmlAttribute xmlAttribute = xmlDocument1.CreateAttribute("Type");
                        xmlAttribute.Value = "HTML";
                        xmlDocument1.FirstChild.Attributes.Append(xmlAttribute);
                        innerXml["XmlDefinition"] = xmlDocument1.InnerXml;
                    }
                }

                if (value1.Equals("Microsoft.SharePoint.Portal.WebControls.RSSAggregatorWebPart",
                        StringComparison.InvariantCultureIgnoreCase) &&
                    base.SharePointVersion.IsSharePoint2013OrLater && string.IsNullOrEmpty(str9) &&
                    innerXml.ContainsKey("ListName"))
                {
                    innerXml.Remove("ListName");
                }

                if (base.SharePointVersion.IsSharePoint2013OrLater && !string.IsNullOrEmpty(str9))
                {
                    if (!innerXml.ContainsKey("ListId"))
                    {
                        innerXml.Add("ListId", str9);
                    }

                    if (!innerXml.ContainsKey("ListName"))
                    {
                        innerXml.Add("ListName", string.Concat("{", str9, "}"));
                    }
                }
            }

            xmlWriter.WriteStartElement("WebPart");
            xmlWriter.WriteAttributeString("ID", sWebPartId ?? "");
            xmlWriter.WriteAttributeString("Embedded", flag2.ToString());
            xmlWriter.WriteElementString("ZoneID", str8);
            xmlWriter.WriteElementString("PartOrder", num1.ToString());
            xmlWriter.WriteElementString("IsIncluded", flag1.ToString().ToLower());
            if (base.SharePointVersion.IsSharePoint2010OrLater && !string.IsNullOrEmpty(str10))
            {
                xmlWriter.WriteElementString("ID", str10);
            }

            xmlWriter.WriteStartElement("webPart", "http://schemas.microsoft.com/WebPart/v3");
            xmlWriter.WriteStartElement("metaData");
            xmlWriter.WriteStartElement("type");
            xmlWriter.WriteAttributeString("name",
                string.Concat(webPartType.Attributes["TypeName"].Value, ",", webPartType.Attributes["Assembly"].Value));
            xmlWriter.WriteEndElement();
            if (dr.Table.Columns.Contains("tp_SolutionId") && !string.IsNullOrEmpty(dr["tp_SolutionId"].ToString()))
            {
                xmlWriter.WriteStartElement("Solution");
                xmlWriter.WriteAttributeString("SolutionId", dr["tp_SolutionId"].ToString());
                xmlWriter.WriteAttributeString("xmlns", "http://schemas.microsoft.com/sharepoint/");
                xmlWriter.WriteEndElement();
            }

            xmlWriter.WriteElementString("importErrorMessage",
                (innerXml == null || !innerXml.ContainsKey("ImportErrorMessage")
                    ? "Cannot import web part."
                    : innerXml["ImportErrorMessage"].ToString()));
            xmlWriter.WriteEndElement();
            xmlWriter.WriteStartElement("data");
            xmlWriter.WriteStartElement("properties");
            DBAdapter.ObjectCollectionDeserializer.WriteOutProps(strs, xmlWriter);
            DBAdapter.ObjectCollectionDeserializer.WriteOutProps(innerXml, xmlWriter);
            if (flag && dr["tp_DisplayName"] != DBNull.Value && !string.IsNullOrEmpty(dr["tp_DisplayName"] as string))
            {
                xmlWriter.WriteStartElement("property");
                xmlWriter.WriteAttributeString("name", "IsViewWebPart");
                xmlWriter.WriteAttributeString("type", typeof(bool).ToString());
                xmlWriter.WriteValue(true.ToString());
                xmlWriter.WriteEndElement();
            }

            if (flag && numArray1 == null && numArray2 == null)
            {
                xmlWriter.WriteStartElement("property");
                xmlWriter.WriteAttributeString("name", "ListName");
                xmlWriter.WriteAttributeString("type", typeof(string).ToString());
                xmlWriter.WriteValue(string.Concat("{", str9, "}"));
                xmlWriter.WriteEndElement();
                xmlWriter.WriteStartElement("property");
                xmlWriter.WriteAttributeString("name", "ListId");
                xmlWriter.WriteAttributeString("type", typeof(Guid).ToString());
                xmlWriter.WriteValue(str9);
                xmlWriter.WriteEndElement();
                xmlWriter.WriteStartElement("property");
                xmlWriter.WriteAttributeString("name", "XmlDefinition");
                xmlWriter.WriteAttributeString("type", typeof(string).ToString());
                XmlTextWriter xmlTextWriter1 = xmlWriter;
                object[] viewType1 = new object[]
                {
                    "<View Type=\"", this.GetViewType(num2), "\" Hidden=\"TRUE\" BaseViewID=\"", num3, "\" >", null,
                    null
                };
                viewType1[5] = (listViewXmlFromListTemplate != null ? listViewXmlFromListTemplate : "");
                viewType1[6] = "</View>";
                xmlTextWriter1.WriteValue(string.Concat(viewType1));
                xmlWriter.WriteEndElement();
            }

            xmlWriter.WriteEndElement();
            xmlWriter.WriteEndElement();
            xmlWriter.WriteEndElement();
            xmlWriter.WriteEndElement();
        }

        private bool DocumentIsExternalized(string sDocId, int iLevel)
        {
            string str;
            bool flag;
            if (base.SharePointVersion.IsSharePoint2003)
            {
                return false;
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                DataTable dataTable = new DataTable("Externalization");
                if (!base.SharePointVersion.IsSharePoint2013OrLater)
                {
                    str = (!base.SharePointVersion.IsSharePoint2010OrLater
                        ? string.Concat(
                            "Select d.DocFlags as _DocFlags \nFrom AllDocStreams s with (nolock) join AllDocs d with (nolock) on s.Id=d.Id \nWhere d.ID=@DocId and s.Level='",
                            iLevel, "'")
                        : string.Concat(
                            "Select d.DocFlags as _DocFlags, s.RbsId \nFrom AllDocStreams s with (nolock) join AllDocs d with (nolock) on s.InternalVersion=d.InternalVersion and s.Id=d.Id  \nWhere d.ID=@DocId and d.Level='",
                            iLevel, "'"));
                }
                else
                {
                    str = string.Concat(
                        "Select d.DocFlags as _DocFlags, s.RbsId \nFrom DocStreams s with (nolock) join AllDocs d with (nolock) on s.DocId=d.Id   \nWhere d.ID=@DocId and d.Level='",
                        iLevel, "'");
                }

                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("DocId", sDocId));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                flag = (dataTable.Rows.Count != 0 ? ExternalizationUtils.IsExternalized(dataTable.Rows[0]) : false);
            }

            return flag;
        }

        private bool DocumentVersionIsExternalized(string sDocId, int iVersion)
        {
            string str;
            bool flag;
            if (base.SharePointVersion.IsSharePoint2003)
            {
                return false;
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                DataTable dataTable = new DataTable("Externalization");
                if (base.SharePointVersion.IsSharePoint2013OrLater)
                {
                    string[] strArrays = new string[]
                    {
                        "Select DocFlags as _DocFlags \nFrom AllDocVersions v with (nolock) \nWhere v.ID = '", sDocId,
                        "' And v.UIVersion='", iVersion.ToString(), "'"
                    };
                    str = string.Concat(strArrays);
                }
                else if (!base.SharePointVersion.IsSharePoint2010OrLater)
                {
                    string[] strArrays1 = new string[]
                    {
                        "Select DocFlags as _DocFlags \nFrom DocVersions with (nolock) \nWhere ID = '", sDocId,
                        "' And Version='", iVersion.ToString(), "'"
                    };
                    str = string.Concat(strArrays1);
                }
                else
                {
                    string[] strArrays2 = new string[]
                    {
                        "Select DocFlags as _DocFlags, (Select RbsId from AllDocStreams s with (nolock) where s.Id=v.Id and v.InternalVersion=s.InternalVersion) as RbsId \nFrom AllDocVersions v with (nolock) \nWhere v.ID = '",
                        sDocId, "' And v.UIVersion='", iVersion.ToString(), "'"
                    };
                    str = string.Concat(strArrays2);
                }

                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("DocId", sDocId));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                flag = (dataTable.Rows.Count != 0 ? ExternalizationUtils.IsExternalized(dataTable.Rows[0]) : false);
            }

            return flag;
        }

        private byte[] EncodeRbsBlobReference(long blobNumber, int collectionId)
        {
            byte[] numArray = new byte[14];
            numArray[13] = 2;
            for (int i = 0; i < 8; i++)
            {
                numArray[i] = (byte)((double)blobNumber / Math.Pow(256, (double)(7 - i)));
            }

            for (int j = 0; j < 4; j++)
            {
                numArray[j + 8] = (byte)((double)collectionId / Math.Pow(256, (double)(3 - j)));
            }

            return numArray;
        }

        public string ExecuteCommand(string commandName, string commandConfigurationXml)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                try
                {
                    if (!string.IsNullOrEmpty(commandName))
                    {
                        switch (commandName.GetValueAsEnumValue<SharePointAdapterCommands>())
                        {
                            case SharePointAdapterCommands.Unknown:
                            {
                                operationReporting.LogError(string.Format(Resources.InvalidCommandName, commandName),
                                    string.Empty, string.Empty, 0, 0);
                                break;
                            }
                            case SharePointAdapterCommands.GetListByName:
                            {
                                this.GetListByTitle(commandConfigurationXml, operationReporting);
                                break;
                            }
                            default:
                            {
                                operationReporting.LogError(null,
                                    string.Format(Resources.CommandNotImplemented, commandName, this.AdapterShortName));
                                break;
                            }
                        }
                    }
                    else
                    {
                        operationReporting.LogError(Resources.CommandNameIsNull, string.Empty, string.Empty, 0, 0);
                    }
                }
                catch (Exception exception1)
                {
                    Exception exception = exception1;
                    operationReporting.LogError(exception,
                        string.Format(Resources.ErrorInCommandExecution, commandName, this.AdapterShortName));
                }
            }
            finally
            {
                operationReporting.End();
            }

            return operationReporting.ResultXml;
        }

        public void FillContentTypeXML(DataRow drCT, XmlTextWriter xmlWriter)
        {
            try
            {
                try
                {
                    xmlWriter.WriteStartElement("ContentType");
                    string value = "";
                    object item = drCT["ContentTypeId"];
                    StringBuilder stringBuilder = new StringBuilder(100);
                    stringBuilder.Append("0x");
                    byte[] numArray = (byte[])item;
                    for (int i = 0; i < (int)numArray.Length; i++)
                    {
                        byte num = numArray[i];
                        stringBuilder.Append(string.Format("{0:X2}", num));
                    }

                    xmlWriter.WriteAttributeString("ID", stringBuilder.ToString());
                    xmlWriter.WriteAttributeString("IsFromFeature", drCT["IsFromFeature"].ToString());
                    XmlNode contentType = null;
                    XmlDocument xmlDocument = new XmlDocument();
                    if (drCT["Definition"] is DBNull)
                    {
                        contentType = this.ContentTypeManager.GetContentType(stringBuilder.ToString());
                    }
                    else
                    {
                        xmlDocument.LoadXml(drCT["Definition"].ToString());
                        contentType = xmlDocument.DocumentElement;
                        if (contentType != null && contentType.Attributes["Name"] != null)
                        {
                            value = contentType.Attributes["Name"].Value;
                        }
                    }

                    xmlWriter.WriteAttributeString("Name",
                        (!string.IsNullOrEmpty(value) ? value : drCT["Name"].ToString()));
                    if (contentType != null)
                    {
                        xmlWriter.WriteAttributeString("Description",
                            (contentType.Attributes["Description"] != null
                                ? contentType.Attributes["Description"].Value
                                : ""));
                        xmlWriter.WriteAttributeString("Group", contentType.Attributes["Group"].Value);
                        if (contentType.SelectSingleNode(".//FieldRefs") == null)
                        {
                            xmlWriter.WriteElementString("FieldRefs", "");
                        }
                        else
                        {
                            xmlWriter.WriteRaw(contentType.SelectSingleNode(".//FieldRefs").OuterXml);
                        }

                        XmlAttribute xmlAttribute =
                            (XmlAttribute)contentType.SelectSingleNode(".//DocumentTemplate/@TargetName");
                        if (xmlAttribute != null && !string.IsNullOrEmpty(xmlAttribute.Value))
                        {
                            xmlWriter.WriteStartElement("DocumentTemplate");
                            xmlWriter.WriteAttributeString("TargetName", xmlAttribute.Value);
                            xmlWriter.WriteEndElement();
                        }

                        XmlAttribute xmlAttribute1 =
                            (XmlAttribute)contentType.SelectSingleNode(".//Folder/@TargetName");
                        if (xmlAttribute1 != null && !string.IsNullOrEmpty(xmlAttribute1.Value))
                        {
                            xmlWriter.WriteStartElement("Folder");
                            xmlWriter.WriteAttributeString("TargetName", xmlAttribute1.Value);
                            xmlWriter.WriteEndElement();
                        }
                    }
                }
                catch (Exception exception)
                {
                    string message = exception.Message;
                }
            }
            finally
            {
                xmlWriter.WriteEndElement();
            }
        }

        public string FindAlerts()
        {
            StringBuilder stringBuilder = new StringBuilder();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                xmlTextWriter.WriteStartElement("UniqueValueLocations");
                xmlTextWriter.WriteAttributeString("LastChange",
                    Metalogix.SharePoint.Adapters.Utils.FormatDate(DateTime.Now));
                string str =
                    "Select (case when A.ItemId is null\n        then (Select (d.DirName + '/' + d.LeafName) from Docs d join Lists l on (d.WebId = l.tp_WebId and d.ListId = l.tp_Id and d.Id=l.tp_RootFolder) where (d.SiteId = A.SiteId and d.WebId=A.WebId and d.ListId=A.ListID and d.DocLibRowId is null))\n        else (Select (d.DirName + '/' + d.LeafName) from Docs d where (d.SiteId = A.SiteId and d.WebId=A.WebId and d.ListId=a.ListID and d.DoclibRowId=A.ItemId and d.IsCurrentVersion=1)) end)         as [ScopeUrl] from {0} A where A.SiteId=@SiteId and A.UserId <> 0 and A.WebId in (select Id from Webs where FullUrl like ((Select FullUrl from Webs where Id=@WebId and SiteId=@SiteId) + '%'))";
                DataTable dataTable = new DataTable();
                using (SqlCommand sqlCommand =
                       this.GetSqlCommand(string.Format(str, "ImmedSubscriptions"), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                using (SqlCommand sqlCommand1 =
                       this.GetSqlCommand(string.Format(str, "SchedSubscriptions"), sqlConnection))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    sqlCommand1.Parameters.Add(new SqlParameter("WebId", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable);
                    }
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    xmlTextWriter.WriteStartElement("UniqueValueLocation");
                    xmlTextWriter.WriteAttributeString("Url", row["ScopeUrl"].ToString());
                    xmlTextWriter.WriteEndElement();
                }

                xmlTextWriter.WriteEndElement();
                sqlConnection.Close();
            }

            return stringBuilder.ToString();
        }

        public string FindBestContentTypeIdMatch(string sContentTypeId, XmlNodeList ndParentContentTypes)
        {
            int length = 0;
            string str = null;
            foreach (XmlNode ndParentContentType in ndParentContentTypes)
            {
                string value = ndParentContentType.Attributes["ID"].Value;
                if (!sContentTypeId.Contains(value) || value.Length <= length)
                {
                    continue;
                }

                str = value;
                length = str.Length;
            }

            return str;
        }

        protected SPListTemplate FindTemplateByID(int iListTemplateID, string featureId)
        {
            if (string.IsNullOrEmpty(featureId))
            {
                featureId = this.CurrentWebTemplate;
            }

            return this.ListTemplates.FindByTemplateID(iListTemplateID, featureId);
        }

        public string FindUniquePermissions()
        {
            StringBuilder stringBuilder = new StringBuilder();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
            if (base.SharePointVersion.IsSharePoint2003)
            {
                return "";
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                xmlTextWriter.WriteStartElement("UniqueValueLocations");
                using (SqlCommand sqlCommand =
                       this.GetSqlCommand("Select LastSecurityChange from Sites where Id=@SiteId", sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    object obj = sqlCommand.ExecuteScalar();
                    xmlTextWriter.WriteAttributeString("LastChange",
                        Metalogix.SharePoint.Adapters.Utils.FormatDate(
                            Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)obj)));
                }

                string str = "Select ScopeUrl from Perms where SiteId=@SiteId and ScopeUrl LIKE @DirName";
                DataTable dataTable = new DataTable();
                using (SqlCommand sqlCommand1 = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    SqlParameterCollection parameters = sqlCommand1.Parameters;
                    string serverRelativeUrl = this.ServerRelativeUrl;
                    char[] chrArray = new char[] { '/' };
                    parameters.Add(new SqlParameter("DirName",
                        string.Concat(serverRelativeUrl.TrimStart(chrArray), "%")));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    xmlTextWriter.WriteStartElement("UniqueValueLocation");
                    xmlTextWriter.WriteAttributeString("Url", row["ScopeUrl"].ToString());
                    xmlTextWriter.WriteEndElement();
                }

                xmlTextWriter.WriteEndElement();
                sqlConnection.Close();
            }

            return stringBuilder.ToString();
        }

        public override void FromXML(XmlNode xmlNode)
        {
            if (xmlNode.Attributes["Server"] == null)
            {
                throw new Exception("The 'Server' attribute was missing");
            }

            this.m_sServer = xmlNode.Attributes["Server"].Value;
            if (xmlNode.Attributes["Database"] == null)
            {
                throw new Exception("The 'Database' attribute was missing");
            }

            this.m_sDatabase = xmlNode.Attributes["Database"].Value;
            if (xmlNode.Attributes["Url"] == null)
            {
                throw new Exception("The 'Url' attribute was missing");
            }

            this.m_sServerRelativeUrl = xmlNode.Attributes["Url"].Value;
            if (xmlNode.Attributes["LinkName"] != null)
            {
                this.SetLinkName(xmlNode.Attributes["LinkName"].Value);
            }

            if (xmlNode.Attributes["HostHeader"] != null)
            {
                this.m_sHostHeader = xmlNode.Attributes["HostHeader"].Value;
            }

            if (xmlNode.Attributes["TemplateLocation"] != null)
            {
                this.m_sCustomTemplateLocation = xmlNode.Attributes["TemplateLocation"].Value;
            }

            this.m_credentials = new Metalogix.Permissions.Credentials(xmlNode);
        }

        private Guid GenerateValidListWorkflowGuid()
        {
            Guid empty = Guid.Empty;
            Guid guid = Guid.Empty;
            string str = null;
            do
            {
                try
                {
                    empty = Guid.NewGuid();
                    byte[] byteArray = empty.ToByteArray();
                    str = (new UnicodeEncoding()).GetString(byteArray);
                    guid = new Guid((new UnicodeEncoding()).GetBytes(str));
                }
                catch
                {
                }
            } while (guid != empty);

            return guid;
        }

        public string GetAddIns(string options)
        {
            throw new NotImplementedException();
        }

        public string GetAdImportDcMappings(string profileDbConnectionString, string connName, string connType,
            string options)
        {
            throw new NotImplementedException();
        }

        public string GetAlerts(string sListID, int iItemID)
        {
            bool flag = !string.IsNullOrEmpty(sListID);
            bool flag1 = (!flag ? false : iItemID >= 0);
            DataTable dataTable = new DataTable("Alerts");
            DataTable dataTable1 = new DataTable("Users");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string str = string.Concat(" (WebId = @WebId)",
                    (flag ? string.Concat(" and (ListId = @ListId)", (flag1 ? " and (ItemId = @ItemId)" : "")) : ""));
                using (SqlCommand sqlCommand =
                       this.GetSqlCommand(string.Concat("SELECT * FROM immedsubscriptions Where ", str), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                    if (flag)
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("ListId", sListID));
                        if (flag1)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ItemId", iItemID.ToString()));
                        }
                    }

                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                using (SqlCommand sqlCommand1 =
                       this.GetSqlCommand(string.Concat("SELECT * from SchedSubscriptions Where ", str), sqlConnection))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("WebId", this.WebID));
                    if (flag)
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("ListId", sListID));
                        if (flag1)
                        {
                            sqlCommand1.Parameters.Add(new SqlParameter("ItemId", iItemID.ToString()));
                        }
                    }

                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable);
                    }
                }

                using (SqlCommand sqlCommand2 = this.GetSqlCommand(
                           string.Concat("SELECT * from UserInfo Where tp_SiteID = '", this.SiteID, "'"),
                           sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter2 = new SqlDataAdapter(sqlCommand2))
                    {
                        sqlDataAdapter2.Fill(dataTable1);
                    }
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("AlertCollection");
            foreach (DataRow row in dataTable.Rows)
            {
                this.GetAlertXML(row, dataTable1, xmlTextWriter);
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private void GetAlertXML(DataRow drAlert, DataTable dtUsers, XmlTextWriter xmlWriter)
        {
            string str;
            string str1;
            string str2 = drAlert["UserId"].ToString();
            if (str2 == "0")
            {
                return;
            }

            string str3 = "";
            string siteUsers = "";
            foreach (DataRow row in dtUsers.Rows)
            {
                if (row["tp_ID"].ToString() != str2)
                {
                    continue;
                }

                str3 = row["tp_Login"].ToString();
                break;
            }

            xmlWriter.WriteStartElement("Alert");
            xmlWriter.WriteAttributeString("ID", drAlert["Id"].ToString());
            xmlWriter.WriteAttributeString("ListID", drAlert["ListId"].ToString());
            xmlWriter.WriteAttributeString("ListUrl", drAlert["ListUrl"].ToString());
            if (drAlert["WebUrl"] != null)
            {
                xmlWriter.WriteAttributeString("WebUrl", drAlert["WebUrl"].ToString());
            }

            xmlWriter.WriteAttributeString("User", str3);
            if (!base.SharePointVersion.IsSharePoint2003)
            {
                if (drAlert["AlertType"].ToString() != "0")
                {
                    str = (drAlert["AlertType"].ToString() != "1" ? drAlert["AlertType"].ToString() : "Item");
                }
                else
                {
                    str = "List";
                }

                xmlWriter.WriteAttributeString("Title", drAlert["AlertTitle"].ToString());
                xmlWriter.WriteAttributeString("AlertTemplate", drAlert["AlertTemplateName"].ToString());
                xmlWriter.WriteAttributeString("Filter", drAlert["Filter"].ToString());
                xmlWriter.WriteAttributeString("SiteUrl", drAlert["SiteUrl"].ToString());
                xmlWriter.WriteAttributeString("Status", (drAlert["Status"].ToString() == "0" ? "On" : "Off"));
                if (!drAlert.Table.Columns.Contains("DynamicRecipient") || drAlert["DynamicRecipient"] == DBNull.Value)
                {
                    xmlWriter.WriteAttributeString("DynamicRecipient", "");
                }
                else
                {
                    xmlWriter.WriteAttributeString("DynamicRecipient", drAlert["DynamicRecipient"].ToString());
                }
            }
            else
            {
                str = (drAlert["ItemId"] == DBNull.Value ? "List" : "Item");
                str1 = (str != "List"
                    ? string.Concat(drAlert["ListTitle"].ToString(), ": Item ", drAlert["ItemId"].ToString())
                    : string.Concat(drAlert["ListTitle"].ToString(), ": All items"));
                xmlWriter.WriteAttributeString("Title", str1);
                xmlWriter.WriteAttributeString("Filter", "");
                xmlWriter.WriteAttributeString("Status", "On");
                xmlWriter.WriteAttributeString("DynamicRecipient", "");
            }

            xmlWriter.WriteAttributeString("AlertType", str);
            if (str == "Item")
            {
                xmlWriter.WriteAttributeString("ItemID",
                    (drAlert["ItemId"] != null ? drAlert["ItemId"].ToString() : ""));
                xmlWriter.WriteAttributeString("ItemGUID", "");
            }

            if (drAlert["EventType"] != null)
            {
                xmlWriter.WriteAttributeString("EventType", drAlert["EventType"].ToString());
            }

            if (!drAlert.Table.Columns.Contains("NotifyFreq") || drAlert["NotifyFreq"] == DBNull.Value)
            {
                xmlWriter.WriteAttributeString("AlertFrequency", "Immediate");
                xmlWriter.WriteAttributeString("AlwaysNotify", "true");
            }
            else
            {
                xmlWriter.WriteAttributeString("AlwaysNotify", "false");
                if (drAlert["NotifyFreq"].ToString() == "1")
                {
                    xmlWriter.WriteAttributeString("AlertFrequency", "Daily");
                }
                else if (drAlert["NotifyFreq"].ToString() != "2")
                {
                    xmlWriter.WriteAttributeString("AlertFrequency", "Immediate");
                }
                else
                {
                    xmlWriter.WriteAttributeString("AlertFrequency", "Weekly");
                }

                DateTime utcNow = DateTime.UtcNow;
                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    utcNow = (DateTime)drAlert["NotifyTime"];
                }

                xmlWriter.WriteAttributeString("AlertTime",
                    Metalogix.SharePoint.Adapters.Utils.FormatDateToUTC(utcNow));
            }

            xmlWriter.WriteStartElement("PropertyBag");
            if (!base.SharePointVersion.IsSharePoint2003)
            {
                foreach (XmlNode xmlNode in XmlUtility.StringToXmlNode(drAlert["Properties"].ToString()))
                {
                    xmlWriter.WriteAttributeString(xmlNode.Attributes["name"].Value, xmlNode.Attributes["value"].Value);
                }
            }
            else
            {
                string str4 = drAlert["EventType"].ToString();
                if (str4 == "-1")
                {
                    str4 = "0";
                }
                else if (str4 == "4")
                {
                    str4 = "3";
                }
                else if (str4 == "4080")
                {
                    str4 = "4";
                }

                xmlWriter.WriteAttributeString("eventtypeindex", str4);
                xmlWriter.WriteAttributeString("filterindex", "0");
            }

            xmlWriter.WriteEndElement();
            siteUsers = this.GetSiteUsers();
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(siteUsers);
            foreach (XmlNode xmlNodes in xmlDocument.SelectNodes("//User"))
            {
                if (str3 != xmlNodes.Attributes["LoginName"].Value)
                {
                    continue;
                }

                xmlWriter.WriteStartElement("UserDetails");
                foreach (XmlAttribute attribute in xmlNodes.Attributes)
                {
                    xmlWriter.WriteAttributeString(attribute.Name, attribute.Value);
                }

                xmlWriter.WriteEndElement();
                break;
            }

            xmlWriter.WriteEndElement();
        }

        public string GetAttachments(string sListID, int iItemID)
        {
            DataTable dataTable = new DataTable("Attachments");
            Hashtable externalizationMetadata = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand = this.GetSqlCommand("proc_GetAllAttachmentsInfo", sqlConnection);
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                sqlCommand.Parameters.Add(new SqlParameter("ListID", sListID));
                sqlCommand.Parameters.Add(new SqlParameter("ItemID", (object)iItemID));
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
                if (base.SharePointVersion.IsSharePoint2007OrLater && dataTable.Rows.Count > 0)
                {
                    string[] str = new string[dataTable.Rows.Count];
                    int num = 0;
                    foreach (DataRow row in dataTable.Rows)
                    {
                        str[num] = row["Id"].ToString();
                        num++;
                    }

                    externalizationMetadata = this.GetExternalizationMetadata(str, null, false, sqlConnection);
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("Attachments");
            foreach (DataRow dataRow in dataTable.Rows)
            {
                xmlTextWriter.WriteStartElement("Attachment");
                xmlTextWriter.WriteAttributeString("DocID", dataRow["Id"].ToString());
                xmlTextWriter.WriteAttributeString("LeafName", dataRow["LeafName"].ToString());
                if (externalizationMetadata != null)
                {
                    DataRow dataRow1 = null;
                    foreach (DataRow value in externalizationMetadata.Values)
                    {
                        if (value["Id"].ToString() != dataRow["Id"].ToString())
                        {
                            continue;
                        }

                        dataRow1 = value;
                        break;
                    }

                    if (dataRow1 != null)
                    {
                        ExternalizationUtils.WriteExternalizationData(dataRow1, xmlTextWriter);
                        xmlTextWriter.WriteAttributeString("_DocFlags", dataRow1["_DocFlags"].ToString());
                        xmlTextWriter.WriteAttributeString("_FileSize", dataRow1["_FileSize"].ToString());
                    }
                }
                else
                {
                    xmlTextWriter.WriteAttributeString("IsExternalized", false.ToString());
                }

                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetAudiences()
        {
            return null;
        }

        public string GetBcsApplications(string options)
        {
            throw new NotImplementedException();
        }

        public string GetBrowserFileHandling(string options)
        {
            throw new NotImplementedException();
        }

        public string GetContentType(string sContentTypeId)
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    DataTable dataTable = new DataTable("ContentTypes");
                    using (SqlCommand sqlCommand = this.GetSqlCommand(
                               string.Concat(
                                   "Select CT.Scope, CT.ContentTypeId, CT.ResourceDir as Name, CT.Definition, CT.IsFromFeature from contenttypes CT where CT.SiteId=@SiteId and CT.ContentTypeID=",
                                   sContentTypeId, " and CT.class=1"), sqlConnection))
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(dataTable);
                        }
                    }

                    if (dataTable.Rows.Count == 0)
                    {
                        throw new Exception(string.Concat("No content type with an ID of ", sContentTypeId,
                            " could be found"));
                    }

                    this.FillContentTypeXML(dataTable.Rows[0], xmlTextWriter);
                }
            }

            return stringWriter.ToString();
        }

        private string GetContentTypeNameByBestMatchID(string sListId, XmlNodeList ndParentContentTypes,
            SqlConnection conn, XmlNode ndContentType)
        {
            string str;
            XmlAttribute itemOf = ndContentType.Attributes["ID"];
            if (itemOf == null)
            {
                return null;
            }

            string value = itemOf.Value;
            List<string> contentTypeIDAndParentIDs =
                Metalogix.SharePoint.Adapters.Utils.GetContentTypeIDAndParentIDs(value);
            string str1 = this.FindBestContentTypeIdMatch(value, ndParentContentTypes);
            if (!string.IsNullOrEmpty(str1) && !contentTypeIDAndParentIDs.Contains(str1))
            {
                contentTypeIDAndParentIDs.Add(str1);
            }

            if (contentTypeIDAndParentIDs.Count == 0)
            {
                return null;
            }

            StringBuilder stringBuilder = new StringBuilder(1000);
            stringBuilder.Append(
                "select top 1 ResourceDir from ContentTypes where SiteId = (select SiteId from Webs where Id = (select tp_WebId from AllLists where tp_Id = @ListId)) and (");
            for (int i = 0; i < contentTypeIDAndParentIDs.Count; i++)
            {
                if (i > 0)
                {
                    stringBuilder.Append(" or ");
                }

                stringBuilder.AppendFormat("ContentTypeId = convert(varbinary(512), @ctid{0}, 1)", i);
            }

            stringBuilder.Append(") order by len(convert(varchar(max), ContentTypeId, 1)) Desc");
            using (SqlCommand sqlCommand = this.GetSqlCommand(stringBuilder.ToString(), conn))
            {
                sqlCommand.Parameters.Add(new SqlParameter("ListId", (object)(new Guid(sListId))));
                for (int j = 0; j < contentTypeIDAndParentIDs.Count; j++)
                {
                    sqlCommand.Parameters.Add(new SqlParameter(string.Format("ctid{0}", j),
                        contentTypeIDAndParentIDs[j]));
                }

                str = (string)sqlCommand.ExecuteScalar();
            }

            return str;
        }

        public string GetContentTypes(string sListId)
        {
            return this.GetContentTypes(sListId, true);
        }

        private string GetContentTypes(string sListId, bool bResolveReferencedContentTypes)
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("ContentTypes");
            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    DataTable dataTable = new DataTable("ContentTypes");
                    if (sListId != null)
                    {
                        using (SqlCommand sqlCommand = this.GetSqlCommand(
                                   "Select tp_contenttypes from AllLists where tp_WebId=@WebId and tp_Id=@ListId",
                                   sqlConnection))
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                            sqlCommand.Parameters.Add(new SqlParameter("ListId", sListId));
                            using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                            {
                                sqlDataAdapter.Fill(dataTable);
                            }
                        }

                        foreach (DataRow row in dataTable.Rows)
                        {
                            xmlTextWriter.WriteRaw((row["tp_contenttypes"] is byte[]
                                ? DBAdapter.DecompressToXmlString((byte[])row["tp_contenttypes"])
                                : row["tp_contenttypes"].ToString()));
                        }
                    }
                    else
                    {
                        using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                                   "Select CT.Scope, CT.ContentTypeId, CT.ResourceDir as Name, CT.Definition, CT.IsFromFeature from (contenttypes CT join Webs W on W.FullUrl like CT.Scope+'%') where W.Id=@WebId and W.SiteId=@SiteId and CT.SiteId=@SiteId and CT.class=1",
                                   sqlConnection))
                        {
                            sqlCommand1.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                            sqlCommand1.Parameters.Add(new SqlParameter("WebId", this.WebID));
                            using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                            {
                                sqlDataAdapter1.Fill(dataTable);
                            }
                        }

                        foreach (DataRow dataRow in dataTable.Rows)
                        {
                            this.FillContentTypeXML(dataRow, xmlTextWriter);
                        }
                    }
                }
            }

            xmlTextWriter.WriteEndElement();
            string str = this.MapAndDecodeContentTypeData(sListId, stringWriter.ToString());
            if (bResolveReferencedContentTypes)
            {
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(str);
                str = this.ReplaceReferencedContentTypes(xmlDocument);
            }

            return str;
        }

        public string GetCustomProfilePropertyMapping(string options)
        {
            throw new NotImplementedException();
        }

        public byte[] GetDashboardPageTemplate(int iTemplateId)
        {
            return this.WebPartPageTemplateManager.GetDashboardTemplate(iTemplateId);
        }

        public virtual int GetDatabaseVersion()
        {
            DataTable dataTable = new DataTable("DateTime");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "Select col_length('Docs', 'ID') as V2, col_length('AllLists', 'tp_ID') as V3, col_length('AllListsAux', 'ListID') as V4",
                           sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }

                    if (dataTable.Rows.Count != 1)
                    {
                        throw new Exception("Could not connect to SQL server");
                    }
                }
            }

            if (!(dataTable.Rows[0]["V4"] is DBNull))
            {
                return 4;
            }

            if (!(dataTable.Rows[0]["V3"] is DBNull))
            {
                return 3;
            }

            return 2;
        }

        private static string GetDefaultWebTemplateXML(string sWebTemplate, string sConfig)
        {
            if (!DBAdapter.WebTemplateCodeDictionary.ContainsKey(sWebTemplate))
            {
                return null;
            }

            string item = DBAdapter.WebTemplateCodeDictionary[sWebTemplate];
            string str = string.Concat(item, "#", sConfig);
            string item1 = str;
            if (DBAdapter.WebTemplateTitleDictionary.ContainsKey(str))
            {
                item1 = DBAdapter.WebTemplateTitleDictionary[str];
            }

            object[] objArray = new object[] { str, item1, sWebTemplate, sConfig, false.ToString() };
            return string.Format(
                "<WebTemplate Name=\"{0}\" Title=\"{1}\" ID=\"{2}\" Config=\"{3}\" ImageUrl=\"\" Description=\"\" IsHidden=\"{4}\" IsRootWebOnly=\"{4}\" IsSubWebOnly=\"{4}\" />",
                objArray);
        }

        public byte[] GetDocument(string sDocID, string sFileDirRef, string sFileLeafRef, int iLevel)
        {
            if (this.DocumentIsExternalized(sDocID, iLevel))
            {
                return null;
            }

            string str = null;
            if (base.SharePointVersion.IsSharePoint2013OrLater)
            {
                return this.UnshredDocuments(sDocID, iLevel, 0);
            }

            if (!base.SharePointVersion.IsSharePoint2010OrLater)
            {
                str = (!base.SharePointVersion.IsSharePoint2007
                    ? string.Concat("Select Content From Docs where ID = '", sDocID, "'")
                    : string.Concat("Select Content From DocStreams where ID = '", sDocID, "' and Level = ",
                        iLevel.ToString()));
            }
            else
            {
                str = string.Concat(
                    "Select Content, RbsId From AllDocStreams s join AllDocs d on s.InternalVersion=d.InternalVersion and s.Id=d.Id where d.ID = '",
                    sDocID, "' and d.Level=", iLevel.ToString());
            }

            return this.GetDocumentBinary(str);
        }

        private byte[] GetDocumentBinary(string sSQL)
        {
            DataTable dataTable = new DataTable("Document");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand = this.GetSqlCommand(sSQL, sqlConnection);
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
            }

            if (dataTable.Rows.Count == 0)
            {
                return new byte[0];
            }

            if (!(dataTable.Rows[0]["Content"] is DBNull))
            {
                return (byte[])dataTable.Rows[0]["Content"];
            }

            if (!dataTable.Columns.Contains("RbsId") || dataTable.Rows[0]["RbsId"] is DBNull)
            {
                return new byte[0];
            }

            return this.GetRbsBlobReference(dataTable.Rows[0]["RbsId"] as byte[]);
        }

        public byte[] GetDocumentBlobRef(string sDocID, string sFileDirRef, string sFileLeafRef, int iLevel)
        {
            if (!this.DocumentIsExternalized(sDocID, iLevel))
            {
                return null;
            }

            string str = null;
            if (base.SharePointVersion.IsSharePoint2013OrLater)
            {
                throw new NotSupportedException("Cannot retrieve binary of externalized dcocuments.");
            }

            if (!base.SharePointVersion.IsSharePoint2010OrLater)
            {
                str = (!base.SharePointVersion.IsSharePoint2007
                    ? string.Concat("Select Content From Docs where ID = '", sDocID, "'")
                    : string.Concat("Select Content From DocStreams where ID = '", sDocID, "' and Level = ",
                        iLevel.ToString()));
            }
            else
            {
                str = string.Concat(
                    "Select Content, RbsId From AllDocStreams s join AllDocs d on s.InternalVersion=d.InternalVersion and s.Id=d.Id where d.ID = '",
                    sDocID, "' and d.Level=", iLevel.ToString());
            }

            return this.GetDocumentBinary(str);
        }

        public string GetDocumentId(string sDocUrl)
        {
            string str;
            string str1 = (sDocUrl.StartsWith("/") || sDocUrl.StartsWith("\\") ? sDocUrl.Substring(1) : sDocUrl);
            char[] chrArray = new char[] { '\\', '/' };
            int num = str1.LastIndexOfAny(chrArray);
            string str2 = str1.Substring(0, num);
            string str3 = str1.Substring(num + 1);
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                DataTable dataTable = new DataTable("Doc ID");
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "SELECT Id AS DocID FROM docs WHERE DirName = @DIRNAME AND LeafName = @FILENAME",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("DIRNAME", str2));
                    sqlCommand.Parameters.Add(new SqlParameter("FILENAME", str3));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count != 0)
                {
                    str = dataTable.Rows[0]["DocID"].ToString();
                }
                else
                {
                    str = null;
                }
            }

            return str;
        }

        public byte[] GetDocumentVersion(string sDocID, string sFileDirRef, string sFileLeafRef, int iVersion)
        {
            string str;
            if (this.DocumentVersionIsExternalized(sDocID, iVersion))
            {
                return null;
            }

            if (base.SharePointVersion.IsSharePoint2013OrLater)
            {
                return this.UnshredDocuments(sDocID, Convert.ToInt16(FileLevel.Published), iVersion);
            }

            if (!base.SharePointVersion.IsSharePoint2010OrLater)
            {
                object[] objArray = new object[]
                    { "Select Content From DocVersions where ID = '", sDocID, "' And Version='", iVersion, "'" };
                str = string.Concat(objArray);
            }
            else
            {
                object[] objArray1 = new object[]
                {
                    "Select Content, RbsId \nFrom AllDocStreams s join AllDocVersions v on s.Id=v.Id and s.InternalVersion = v.InternalVersion \nWhere s.ID = '",
                    sDocID, "' And v.UIVersion='", iVersion, "'"
                };
                str = string.Concat(objArray1);
            }

            return this.GetDocumentBinary(str);
        }

        public byte[] GetDocumentVersionBlobRef(string sDocID, string sFileDirRef, string sFileLeafRef, int iVersion)
        {
            string str;
            if (!this.DocumentVersionIsExternalized(sDocID, iVersion))
            {
                return null;
            }

            if (base.SharePointVersion.IsSharePoint2013OrLater)
            {
                throw new NotSupportedException("Cannot retrieve binary of externalized dcocuments.");
            }

            if (!base.SharePointVersion.IsSharePoint2010OrLater)
            {
                object[] objArray = new object[]
                    { "Select Content From DocVersions where ID = '", sDocID, "' And Version='", iVersion, "'" };
                str = string.Concat(objArray);
            }
            else
            {
                object[] objArray1 = new object[]
                {
                    "Select Content, RbsId From AllDocStreams s join AllDocVersions v on s.Id=v.Id and s.InternalVersion = v.InternalVersion where s.ID = '",
                    sDocID, "' And v.UIVersion='", iVersion, "'"
                };
                str = string.Concat(objArray1);
            }

            return this.GetDocumentBinary(str);
        }

        public string GetExternalContentTypeOperations(string sExternalContentTypeNamespace,
            string sExternalContentTypeName)
        {
            StringWriter stringWriter = new StringWriter();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("SPExternalContentTypeOperationCollection");
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetExternalContentTypes()
        {
            StringWriter stringWriter = new StringWriter();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("SPExternalContentTypeCollection");
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetExternalItems(string sExtContentTypeNamespace, string sExtContentTypeName,
            string sExternalContentTypeOperationName, string listID)
        {
            StringWriter stringWriter = new StringWriter();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("SPExternalItemCollection");
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public Hashtable GetExternalizationMetadata(string[] docIds, string sParentFolder, bool bRecursive)
        {
            Hashtable externalizationMetadata;
            if (base.SharePointVersion.IsSharePoint2003)
            {
                return null;
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                externalizationMetadata =
                    this.GetExternalizationMetadata(docIds, sParentFolder, bRecursive, sqlConnection);
            }

            return externalizationMetadata;
        }

        private Hashtable GetExternalizationMetadata(string[] docIds, string sParentFolder, bool bRecursive,
            SqlConnection conn)
        {
            string str;
            DataTable dataTable = new DataTable("Externalization");
            StringBuilder stringBuilder = new StringBuilder();
            int num = 1;
            List<SqlParameter> sqlParameters = new List<SqlParameter>();
            if (docIds != null && (int)docIds.Length > 0)
            {
                string[] strArrays = docIds;
                for (int i = 0; i < (int)strArrays.Length; i++)
                {
                    string str1 = strArrays[i];
                    if (stringBuilder.Length > 0)
                    {
                        stringBuilder.Append(",");
                    }

                    string str2 = string.Concat("@DocId", num.ToString());
                    stringBuilder.Append(str2);
                    sqlParameters.Add(new SqlParameter(str2, str1));
                    num++;
                }
            }

            string str3 = (stringBuilder.Length > 0
                ? string.Concat("d.ID in (", stringBuilder.ToString(), ") and ")
                : "");
            string str4 = "";
            if (!string.IsNullOrEmpty(sParentFolder))
            {
                str4 = (bRecursive ? "d.DirName like @ParentFolder + '%' and " : "d.DirName = @ParentFolder and ");
                sqlParameters.Add(new SqlParameter("@ParentFolder", sParentFolder));
            }

            if (!base.SharePointVersion.IsSharePoint2013OrLater)
            {
                str = (!base.SharePointVersion.IsSharePoint2010OrLater
                    ? string.Concat(
                        "Select d.Id, d.UIVersion, d.DocFlags as _DocFlags, d.Size as _FileSize\n  From AllDocStreams s with (nolock) join AllDocs d with (nolock) on s.Id=d.Id\n  where ",
                        str3, str4, "s.Level='1'")
                    : string.Concat(
                        "Select d.Id, d.UIVersion, d.DocFlags as _DocFlags, d.Size as _FileSize, s.RbsId\n From AllDocStreams s with (nolock) join AllDocs d with (nolock) on s.InternalVersion=d.InternalVersion and s.Id=d.Id\n  where ",
                        str3, str4, "d.IsCurrentVersion='1'"));
            }
            else
            {
                str = string.Concat(
                    "Select d.Id, d.UIVersion, d.DocFlags as _DocFlags, d.Size as _FileSize \n From AllDocs d with (nolock)\n  where ",
                    str3, str4, "d.IsCurrentVersion='1'");
            }

            using (SqlCommand sqlCommand = this.GetSqlCommand(str, conn))
            {
                sqlCommand.Parameters.AddRange(sqlParameters.ToArray());
                using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                {
                    sqlDataAdapter.Fill(dataTable);
                }
            }

            Hashtable hashtables = new Hashtable(dataTable.Rows.Count);
            foreach (DataRow row in dataTable.Rows)
            {
                hashtables.Add(string.Concat(row["Id"].ToString(), row["UIVersion"].ToString()), row);
            }

            return hashtables;
        }

        public Hashtable GetExternalizationMetadata(string sDocId, bool bIncludeVersions)
        {
            string str;
            string str1;
            Hashtable hashtables;
            if (base.SharePointVersion.IsSharePoint2003)
            {
                return null;
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                DataTable dataTable = new DataTable("Externalization");
                if (!base.SharePointVersion.IsSharePoint2013OrLater)
                {
                    str = (!base.SharePointVersion.IsSharePoint2010OrLater
                        ? string.Concat(
                            "Select d.Id, d.UIVersion, d.DocFlags as _DocFlags, d.Size as _FileSize\nFrom AllDocStreams s with (nolock) join AllDocs d with (nolock) on s.Level=d.Level and s.Id=d.Id \nWhere d.ID=@DocId",
                            (!bIncludeVersions ? " and s.Level='1'" : ""))
                        : string.Concat(
                            "Select d.Id, d.UIVersion, d.DocFlags as _DocFlags, d.Size as _FileSize, s.RbsId \nFrom AllDocStreams s with (nolock) join AllDocs d with (nolock) on s.InternalVersion=d.InternalVersion and s.Id=d.Id \nWhere d.ID=@DocId",
                            (!bIncludeVersions ? " and d.IsCurrentVersion='1'" : "")));
                }
                else
                {
                    str = string.Concat(
                        "Select d.Id, d.UIVersion, d.DocFlags as _DocFlags, d.Size as _FileSize \nFrom AllDocs d with (nolock) \nWhere d.ID=@DocId",
                        (!bIncludeVersions ? " and d.IsCurrentVersion='1'" : ""));
                }

                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("DocId", sDocId));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                DataTable dataTable1 = new DataTable("VersionExternalization");
                if (bIncludeVersions)
                {
                    if (!base.SharePointVersion.IsSharePoint2013OrLater)
                    {
                        str1 = (!base.SharePointVersion.IsSharePoint2010OrLater
                            ? "Select v.Id, v.Version as UIVersion, v.DocFlags as _DocFlags, v.Size as _FileSize \nFrom DocVersions v with (nolock) where v.ID=@DocId"
                            : "Select v.Id, v.UIVersion, v.DocFlags as _DocFlags, v.Size as _FileSize, s.RbsId \nFrom AllDocStreams s with (nolock) join DocVersions v with (nolock) on s.InternalVersion=v.InternalVersion and s.Id=v.Id \bWhere v.ID=@DocId");
                    }
                    else
                    {
                        str1 =
                            "Select v.Id, v.UIVersion, v.DocFlags as _DocFlags, v.Size as _FileSize \nFrom DocVersions v with (nolock) \nWhere v.ID=@DocId";
                    }

                    using (SqlCommand sqlCommand1 = this.GetSqlCommand(str1, sqlConnection))
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("DocId", sDocId));
                        using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                        {
                            sqlDataAdapter1.Fill(dataTable1);
                        }
                    }
                }

                Hashtable hashtables1 =
                    new Hashtable(dataTable.Rows.Count + (dataTable1 != null ? dataTable1.Rows.Count : 0));
                foreach (DataRow row in dataTable.Rows)
                {
                    hashtables1.Add(string.Concat(row["Id"].ToString(), row["UIVersion"].ToString()), row);
                }

                foreach (DataRow dataRow in dataTable1.Rows)
                {
                    hashtables1.Add(string.Concat(dataRow["Id"].ToString(), dataRow["UIVersion"].ToString()), dataRow);
                }

                hashtables = hashtables1;
            }

            return hashtables;
        }

        public string GetFarmSandboxSolutions(string options)
        {
            throw new NotImplementedException();
        }

        public string GetFarmServerDetails(string options)
        {
            throw new NotImplementedException();
        }

        public byte[] GetFarmSolutionBinary(string solutionName)
        {
            throw new NotImplementedException();
        }

        public string GetFarmSolutions(string options)
        {
            throw new NotImplementedException();
        }

        private static string GetFieldQueryForMultiValueLookupField(string sFieldID, XmlNode xmlFieldNode,
            Metalogix.SharePoint.Adapters.SharePointVersion spVersion)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append("(SELECT CAST(tp_Id as varchar(max)) + ';#' ");
            stringBuilder.Append("FROM AllUserDataJunctions j ");
            if (!spVersion.IsSharePoint2010OrLater)
            {
                stringBuilder.Append("WHERE u.tp_DirName = j.tp_DirName ");
                stringBuilder.Append("and u.tp_LeafName = j.tp_LeafName ");
            }
            else
            {
                stringBuilder.Append("WHERE u.tp_DocId = j.tp_DocId ");
                stringBuilder.Append("and u.tp_ListId = j.tp_SourceListId ");
            }

            stringBuilder.Append("and j.tp_DeleteTransactionId = 0 ");
            stringBuilder.Append("and j.tp_UIVersion = u.tp_UIVersion ");
            stringBuilder.Append("and j.tp_Level = u.tp_Level ");
            stringBuilder.Append("and j.tp_SiteId = @SiteID ");
            stringBuilder.Append(string.Concat("and j.tp_FieldId = '", sFieldID, "' "));
            stringBuilder.Append("ORDER BY j.tp_Id ");
            stringBuilder.Append("FOR XML PATH(''))");
            return stringBuilder.ToString();
        }

        private static string GetFieldQueryForMultiValueUserField(string sFieldID, XmlNode xmlFieldNode,
            Metalogix.SharePoint.Adapters.SharePointVersion spVersion)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(string.Concat("(SELECT ",
                string.Format(
                    "COALESCE((Select tp_Login from UserInfo Where tp_SiteID=@SiteID And tp_ID = j.tp_Id), (Select Title from {0} Where SiteID=@SiteID and ID = j.tp_Id)) ",
                    (spVersion.IsSharePoint2007OrLater ? "Groups" : "SiteGroups")), " + ',' "));
            stringBuilder.Append("FROM AllUserDataJunctions j ");
            if (!spVersion.IsSharePoint2010OrLater)
            {
                stringBuilder.Append("WHERE u.tp_DirName = j.tp_DirName ");
                stringBuilder.Append("and u.tp_LeafName = j.tp_LeafName ");
            }
            else
            {
                stringBuilder.Append("WHERE u.tp_DocId = j.tp_DocId ");
                stringBuilder.Append("and u.tp_ListId = j.tp_SourceListId ");
            }

            stringBuilder.Append("and j.tp_DeleteTransactionId = 0 ");
            stringBuilder.Append("and j.tp_UIVersion = u.tp_UIVersion ");
            stringBuilder.Append("and j.tp_Level = u.tp_Level ");
            stringBuilder.Append("and j.tp_SiteId = @SiteID ");
            stringBuilder.Append(string.Concat("and j.tp_FieldId = '", sFieldID, "' "));
            stringBuilder.Append("ORDER BY j.tp_Id ");
            stringBuilder.Append("FOR XML PATH(''))");
            return stringBuilder.ToString();
        }

        public string GetFields(string sListID, bool bGetAllAvailableFields)
        {
            if (!string.IsNullOrEmpty(sListID))
            {
                XmlNode xmlNode = XmlUtility.StringToXmlNode(this.GetList(sListID));
                return xmlNode.SelectSingleNode(".//Fields").OuterXml;
            }

            StringBuilder stringBuilder = new StringBuilder();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
            this.GetSiteColumnXML(this.SiteID, this.ServerRelativeUrl, bGetAllAvailableFields, xmlTextWriter);
            return stringBuilder.ToString();
        }

        private string GetFieldSelectForWebLastItemModifiedDate(string webTableName)
        {
            if (base.SharePointVersion.IsSharePoint2007OrEarlier)
            {
                return string.Format(
                    "(SELECT MAX(l.tp_Modified) FROM Lists l WHERE l.tp_WebId = {0}.Id) as LastItemModifiedDate",
                    webTableName);
            }

            return string.Format(
                "(select MAX(lx.Modified) from AllLists l cross apply AllListsAux lx where l.tp_WebId = {0}.Id) as LastItemModifiedDate",
                webTableName);
        }

        internal static string GetFieldsListForQuery(string sFields,
            Metalogix.SharePoint.Adapters.SharePointVersion spVersion, ListType listType,
            out Dictionary<string, string> columnNameMappingDictionary, out List<string> multiValueFields,
            out Dictionary<string, string> taxonomyFields)
        {
            columnNameMappingDictionary = new Dictionary<string, string>();
            multiValueFields = new List<string>();
            taxonomyFields = new Dictionary<string, string>();
            StringBuilder stringBuilder = new StringBuilder(2048);
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml((sFields == null ? "<Fields/>" : sFields));
            if (xmlDocument.SelectSingleNode("//Fields/Field[@Name='ID']") == null)
            {
                XmlNode xmlNodes = xmlDocument.SelectSingleNode("//Fields");
                XmlNode xmlNodes1 = xmlDocument.CreateElement("Field");
                XmlAttribute xmlAttribute = xmlDocument.CreateAttribute("Name");
                XmlAttribute xmlAttribute1 = xmlDocument.CreateAttribute("Type");
                XmlAttribute xmlAttribute2 = xmlDocument.CreateAttribute("ReadOnly");
                XmlAttribute xmlAttribute3 = xmlDocument.CreateAttribute("ColName");
                xmlAttribute.Value = "ID";
                xmlAttribute1.Value = "Counter";
                xmlAttribute2.Value = "TRUE";
                xmlAttribute3.Value = "tp_ID";
                xmlNodes1.Attributes.Append(xmlAttribute);
                xmlNodes1.Attributes.Append(xmlAttribute3);
                xmlNodes1.Attributes.Append(xmlAttribute1);
                xmlNodes1.Attributes.Append(xmlAttribute2);
                xmlNodes.AppendChild(xmlNodes1);
            }

            XmlNodeList xmlNodeLists = xmlDocument.SelectNodes("//Fields/Field[@ColName]");
            int num = 0;
            foreach (XmlNode xmlNodes2 in xmlNodeLists)
            {
                if (xmlNodes2.Attributes["ColName"] != null && xmlNodes2.Attributes["ColName"].Value == "Type")
                {
                    continue;
                }

                string attributeValueAsString = xmlNodes2.GetAttributeValueAsString("Type");
                string[] strArrays = new string[] { "TaxonomyFieldType", "TaxonomyFieldTypeMulti" };
                if (attributeValueAsString.In<string>(strArrays))
                {
                    XmlNode xmlNodes3 = xmlNodes2.SelectSingleNode(".//Property[Name='TextField']");
                    if (xmlNodes3 != null)
                    {
                        string str = xmlNodes2.GetAttributeValueAsString("Name");
                        XmlNode xmlNodes4 = xmlNodes3.SelectSingleNode("Value");
                        if (xmlNodes4 != null)
                        {
                            XmlNode xmlNodes5 =
                                xmlDocument.SelectSingleNode(string.Format("//Field[@ID='{0}']", xmlNodes4.InnerText));
                            if (xmlNodes5 != null)
                            {
                                taxonomyFields.Add(str, xmlNodes5.GetAttributeValueAsString("Name"));
                            }
                        }
                    }
                }

                if (xmlNodes2.Attributes["MLSystem"] != null &&
                    xmlNodes2.Attributes["MLSystem"].Value.ToLower() == "true")
                {
                    continue;
                }

                bool flag = (xmlNodes2.Attributes["RowOrdinal"] == null
                    ? false
                    : xmlNodes2.Attributes["RowOrdinal"].Value != "0");
                string value = xmlNodes2.Attributes["Name"].Value;
                stringBuilder.Append((stringBuilder.Length > 0 ? ", " : ""));
                bool flag1 = false;
                if (xmlNodes2.Attributes["Type"].Value == "User")
                {
                    string str1 = (!flag
                        ? xmlNodes2.Attributes["ColName"].Value
                        : string.Format(
                            "(SELECT {0} FROM AllUserData u2 WHERE u2.tp_RowOrdinal='{1}' AND u.tp_Version = u2.tp_Version AND u.tp_ListID=u2.tp_ListId AND u.tp_ID=u2.tp_ID AND u.tp_IsCurrent = u2.tp_IsCurrent)",
                            xmlNodes2.Attributes["ColName"].Value, xmlNodes2.Attributes["RowOrdinal"].Value));
                    stringBuilder.Append(string.Format(
                        "COALESCE((SELECT tp_Login FROM UserInfo WHERE tp_SiteID=@SiteID AND tp_ID = {0}), (SELECT Title FROM {1} WHERE SiteID=@SiteID AND ID = {0}))",
                        str1, (spVersion.IsSharePoint2007OrLater ? "Groups" : "SiteGroups")));
                }
                else if (xmlNodes2.Attributes["Type"].Value == "UserMulti" && xmlNodes2.Attributes["ID"] != null)
                {
                    stringBuilder.Append(DBAdapter.GetFieldQueryForMultiValueUserField(xmlNodes2.Attributes["ID"].Value,
                        xmlNodes2, spVersion));
                    flag1 = true;
                }
                else if (xmlNodes2.Attributes["Mult"] != null && xmlNodes2.Attributes["Mult"].Value == "TRUE" &&
                         xmlNodes2.Attributes["ID"] != null)
                {
                    stringBuilder.Append(
                        DBAdapter.GetFieldQueryForMultiValueLookupField(xmlNodes2.Attributes["ID"].Value, xmlNodes2,
                            spVersion));
                    flag1 = true;
                }
                else if (xmlNodes2.Attributes["Type"].Value == "URL")
                {
                    stringBuilder.Append(string.Format("REPLACE({0}, ', ', ',, ')",
                        (!flag
                            ? xmlNodes2.Attributes["ColName"].Value
                            : string.Format(
                                "(SELECT {0} FROM AllUserData u2 WHERE u2.tp_RowOrdinal='{1}' AND u.tp_Version = u2.tp_Version AND u.tp_ListID=u2.tp_ListId AND u.tp_ID=u2.tp_ID AND u.tp_IsCurrent = u2.tp_IsCurrent)",
                                xmlNodes2.Attributes["ColName"].Value, xmlNodes2.Attributes["RowOrdinal"].Value))));
                    if (xmlNodes2.Attributes["ColName2"] != null)
                    {
                        string str2 =
                            ((xmlNodes2.Attributes["RowOrdinal2"] == null
                                ? true
                                : xmlNodes2.Attributes["RowOrdinal2"].Value == "0")
                                ? xmlNodes2.Attributes["ColName2"].Value
                                : string.Format(
                                    "(SELECT {0} FROM AllUserData u2 WHERE u2.tp_RowOrdinal='{1}' AND u.tp_Version = u2.tp_Version AND u.tp_ListID=u2.tp_ListId AND u.tp_ID=u2.tp_ID AND u.tp_IsCurrent = u2.tp_IsCurrent)",
                                    xmlNodes2.Attributes["ColName2"].Value, xmlNodes2.Attributes["RowOrdinal2"].Value));
                        stringBuilder.Append(" + ', ' + ");
                        stringBuilder.Append(str2);
                    }
                }
                else if (spVersion.IsSharePoint2010OrLater && xmlNodes2.Attributes["ColName"].Value == "tp_ContentType")
                {
                    stringBuilder.Append(
                        "(SELECT ResourceDir FROM contenttypes WHERE SiteId=@SiteId AND Class='1' AND ContentTypeId = (SELECT MAX(ContentTypeId) FROM ContentTypes WHERE SiteId=@SiteId AND Class=1 AND tp_ContentTypeId LIKE ContentTypeId + CAST('%' AS binary)))");
                }
                else if (!spVersion.IsSharePoint2003 || listType != ListType.DocumentLibrary ||
                         !AdapterConfigurationVariables.Swap2003DocMetaInfoColumns ||
                         !(value == "Created") && !(value == "Modified"))
                {
                    string str3 = (!flag
                        ? xmlNodes2.Attributes["ColName"].Value
                        : string.Format(
                            "(SELECT {0} FROM AllUserData u2 WHERE u2.tp_RowOrdinal='{1}' AND u.tp_Version = u2.tp_Version AND u.tp_ListID=u2.tp_ListId AND u.tp_ID=u2.tp_ID AND u.tp_IsCurrent = u2.tp_IsCurrent)",
                            xmlNodes2.Attributes["ColName"].Value, xmlNodes2.Attributes["RowOrdinal"].Value));
                    stringBuilder.Append((value.StartsWith("_File") ? "d." : ""));
                    stringBuilder.Append(str3);
                }
                else if (value != "Created")
                {
                    stringBuilder.Append("d.TimeLastModified");
                }
                else
                {
                    stringBuilder.Append("d.TimeCreated");
                }

                string value1 = xmlNodes2.Attributes["Name"].Value;
                string str4 = value1;
                if (value1.Length >= 128)
                {
                    num++;
                    str4 = value1.Substring(0, 128 - num.ToString().Length);
                    if (columnNameMappingDictionary.ContainsKey(str4))
                    {
                        str4 = string.Concat(str4, num.ToString());
                    }

                    columnNameMappingDictionary.Add(str4, value1);
                }

                stringBuilder.Append(" as [");
                stringBuilder.Append(str4);
                stringBuilder.Append("]");
                if (!flag1)
                {
                    continue;
                }

                multiValueFields.Add(str4);
            }

            return stringBuilder.ToString();
        }

        private string GetFieldValue(DataRow dataRow, DataColumn dataColumn, Dictionary<string, string> taxonomyFields)
        {
            string str = null;
            if (taxonomyFields != null && taxonomyFields.ContainsKey(dataColumn.ColumnName))
            {
                string item = taxonomyFields[dataColumn.ColumnName];
                if (dataRow.Table.Columns.Contains(item))
                {
                    str = dataRow[item].ToString();
                }
            }

            if (str == null)
            {
                str = dataRow[dataColumn].ToString();
            }

            return str;
        }

        public string GetFiles(string sFolderPath, ListItemQueryType itemTypes)
        {
            string str;
            string str1;
            str = (!this.Url.StartsWith("/") ? this.Url : this.Url.Substring(1));
            str1 = (!string.IsNullOrEmpty(sFolderPath) ? string.Concat(str, "/", sFolderPath) : str);
            string str2 = string.Concat("select d.Type, d.MetaInfo, d.SetupPath,",
                (base.SharePointVersion.IsSharePoint2003 ? " d.Content," : " d.HasStream,"),
                " d.LeafName, d.TimeCreated, d.TimeLastModified, d.Id, d.ListId from Docs d where d.WebId=@WebID and d.DirName=@DirName");
            DataTable dataTable = new DataTable();
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str2, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    sqlCommand.Parameters.Add(new SqlParameter("DirName", str1));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("FolderContent");
            if ((itemTypes & ListItemQueryType.ListItem) == ListItemQueryType.ListItem)
            {
                xmlTextWriter.WriteStartElement("Files");
                dataTable.DefaultView.RowFilter = "Type = 0";
                foreach (DataRowView defaultView in dataTable.DefaultView)
                {
                    xmlTextWriter.WriteStartElement("File");
                    string str3 = "";
                    if (defaultView["MetaInfo"] != DBNull.Value)
                    {
                        str3 = (!base.SharePointVersion.IsSharePoint2007OrEarlier
                            ? DBAdapter.DecompressToXmlString((byte[])defaultView["MetaInfo"])
                            : Encoding.UTF8.GetString((byte[])defaultView["MetaInfo"]));
                    }

                    xmlTextWriter.WriteAttributeString("Author",
                        (new Regex("vti_author:SR\\|(?<match1>.*)\\r")).Match(str3).Groups["match1"].Value
                        .Replace("\\\\", "\\"));
                    xmlTextWriter.WriteAttributeString("ModifiedBy",
                        (new Regex("vti_modifiedby:SR\\|(?<match1>.*)\\r")).Match(str3).Groups["match1"].Value
                        .Replace("\\\\", "\\"));
                    if (string.IsNullOrEmpty(defaultView["SetupPath"].ToString()))
                    {
                        xmlTextWriter.WriteAttributeString("CustomizedPageStatus", "None");
                    }
                    else if ((!base.SharePointVersion.IsSharePoint2003 || defaultView["Content"] != DBNull.Value) &&
                             (base.SharePointVersion.IsSharePoint2003 || !(defaultView["HasStream"].ToString() == "0")))
                    {
                        xmlTextWriter.WriteAttributeString("CustomizedPageStatus", "Customized");
                    }
                    else
                    {
                        xmlTextWriter.WriteAttributeString("CustomizedPageStatus", "Uncustomized");
                    }

                    xmlTextWriter.WriteAttributeString("Name", defaultView["LeafName"].ToString());
                    xmlTextWriter.WriteAttributeString("TimeCreated",
                        Metalogix.SharePoint.Adapters.Utils.FormatDate(
                            DateTime.Parse(defaultView["TimeCreated"].ToString(), null,
                                DateTimeStyles.AssumeUniversal)));
                    xmlTextWriter.WriteAttributeString("TimeLastModified",
                        Metalogix.SharePoint.Adapters.Utils.FormatDate(DateTime.Parse(
                            defaultView["TimeLastModified"].ToString(), null, DateTimeStyles.AssumeUniversal)));
                    xmlTextWriter.WriteAttributeString("UniqueId", defaultView["Id"].ToString());
                    if (!string.IsNullOrEmpty(sFolderPath))
                    {
                        xmlTextWriter.WriteAttributeString("Url",
                            string.Concat(sFolderPath, "/", defaultView["LeafName"].ToString()));
                    }
                    else
                    {
                        xmlTextWriter.WriteAttributeString("Url", defaultView["LeafName"].ToString());
                    }

                    xmlTextWriter.WriteEndElement();
                }

                xmlTextWriter.WriteEndElement();
            }

            if ((itemTypes & ListItemQueryType.Folder) == ListItemQueryType.Folder)
            {
                xmlTextWriter.WriteStartElement("Folders");
                dataTable.DefaultView.RowFilter = "Type = 1";
                foreach (DataRowView dataRowView in dataTable.DefaultView)
                {
                    xmlTextWriter.WriteStartElement("Folder");
                    xmlTextWriter.WriteAttributeString("Name", dataRowView["LeafName"].ToString());
                    if (!string.IsNullOrEmpty(sFolderPath))
                    {
                        xmlTextWriter.WriteAttributeString("Url",
                            string.Concat(sFolderPath, "/", dataRowView["LeafName"].ToString()));
                    }
                    else
                    {
                        xmlTextWriter.WriteAttributeString("Url", dataRowView["LeafName"].ToString());
                    }

                    xmlTextWriter.WriteAttributeString("ParentListId",
                        (string.IsNullOrEmpty(dataRowView["ListId"].ToString())
                            ? Guid.Empty.ToString()
                            : dataRowView["ListId"].ToString()));
                    xmlTextWriter.WriteEndElement();
                }

                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetFileVersions(string options)
        {
            throw new NotImplementedException();
        }

        public string GetFolders(string sListID, string sIDs, string sParentFolder)
        {
            string str;
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            DataTable dataTable = new DataTable("Folders");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string str1 = "";
                str1 = string.Concat(str1,
                    "select d.DocLibRowID, d.DirName, d.LeafName, u.tp_Author, ui1.tp_Login as ModifiedBy, u.tp_Editor, ui2.tp_Login as CreatedBy, u.tp_Modified, u.tp_Created",
                    (base.SharePointVersion.IsSharePoint2007OrLater
                        ? ", p.ScopeUrl, u.tp_ContentTypeId as ContentTypeId "
                        : " "));
                str1 = string.Concat(str1, "from Docs d",
                    (base.SharePointVersion.IsSharePoint2007OrLater ? " join Perms p on d.ScopeId=p.ScopeId," : ","),
                    " Webs w, UserData u ");
                str1 = string.Concat(str1,
                    "left join UserInfo ui1 on (u.tp_Author = ui1.tp_ID and u.tp_SiteID = ui1.tp_SiteID ) ");
                str1 = string.Concat(str1,
                    "left join UserInfo ui2 on (u.tp_Editor = ui2.tp_ID and u.tp_SiteID = ui2.tp_SiteID) ");
                str1 = string.Concat(str1, "where w.ID = @WebID ");
                str1 = string.Concat(str1, "and w.SiteID = d.SiteID ");
                if (sIDs == null || !(sIDs != ""))
                {
                    str1 = string.Concat(str1,
                        "and d.DirName = @DirName and d.Type = 1 and NOT d.DocLibRowID is NULL ");
                    str1 = string.Concat(str1, "and d.ListId = u.tp_ListId ");
                }
                else
                {
                    str1 = string.Concat(str1, "and d.Type = 1 and d.DocLibRowID = @ItemID ");
                    str1 = string.Concat(str1, "and d.ListId = u.tp_ListId and d.ListId = @ListID ");
                }

                str1 = string.Concat(str1, "and d.DoclibRowID = u.tp_ID ");
                str1 = string.Concat(str1, "order by d.DirName, d.LeafName ");
                using (SqlCommand sqlCommand = this.GetSqlCommand(str1, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    if (sIDs == null || !(sIDs != ""))
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("DirName", sParentFolder));
                    }
                    else
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("ItemID", sIDs));
                        sqlCommand.Parameters.Add(new SqlParameter("ListID", sListID));
                    }

                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            xmlTextWriter.WriteStartElement("Folders");
            foreach (DataRow row in dataTable.Rows)
            {
                xmlTextWriter.WriteStartElement("Folder");
                xmlTextWriter.WriteAttributeString("ID", row["DocLibRowID"].ToString());
                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    object item = row["ContentTypeId"];
                    if (item != null && item is byte[])
                    {
                        StringBuilder stringBuilder = new StringBuilder(100);
                        stringBuilder.Append("0x");
                        byte[] numArray = (byte[])item;
                        for (int i = 0; i < (int)numArray.Length; i++)
                        {
                            byte num = numArray[i];
                            stringBuilder.Append(string.Format("{0:X2}", num));
                        }

                        xmlTextWriter.WriteAttributeString("ContentTypeId", stringBuilder.ToString());
                    }
                }

                xmlTextWriter.WriteAttributeString("FileLeafRef", row["LeafName"].ToString());
                xmlTextWriter.WriteAttributeString("FileDirRef", row["DirName"].ToString());
                if (row["ModifiedBy"].ToString() != "")
                {
                    xmlTextWriter.WriteAttributeString("Editor", row["ModifiedBy"].ToString());
                }

                if (row["CreatedBy"].ToString() != null)
                {
                    xmlTextWriter.WriteAttributeString("Author", row["CreatedBy"].ToString());
                }

                DateTime dateTime = (DateTime)row["tp_Created"];
                xmlTextWriter.WriteAttributeString("Created",
                    Metalogix.SharePoint.Adapters.Utils.FormatDate(
                        Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime(dateTime)));
                DateTime item1 = (DateTime)row["tp_Modified"];
                xmlTextWriter.WriteAttributeString("Modified",
                    Metalogix.SharePoint.Adapters.Utils.FormatDate(
                        Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime(item1)));
                XmlTextWriter xmlTextWriter1 = xmlTextWriter;
                if (dataTable.Columns.Contains("ScopeUrl"))
                {
                    bool flag = row["ScopeUrl"].ToString().EndsWith(row["LeafName"].ToString());
                    str = flag.ToString();
                }
                else
                {
                    str = "False";
                }

                xmlTextWriter1.WriteAttributeString("HasUniquePermissions", str);
                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private string GetGroupDescFromDataTable(DataTable dtGroupDescription, DataRow dr)
        {
            if (dtGroupDescription == null || dtGroupDescription.Rows.Count <= 0)
            {
                return this.GetResourceName(Convert.ToString(dr["Description"]));
            }

            DataRow[] dataRowArray = dtGroupDescription.Select(string.Format("ID={0}", dr["ID"]));
            return this.GetResourceName(Convert.ToString(dataRowArray[0][1]));
        }

        private string GetGroupDescriptionDBColumnName()
        {
            object obj;
            string str;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           (base.SharePointVersion.IsSharePoint2013OrLater
                               ? "SELECT tp_Fields FROM AllLists WHERE tp_SiteId = @SiteId AND tp_ServerTemplate = @ServerTemplate"
                               : "SELECT tp_Fields FROM AllLists AL JOIN Webs W ON AL.tp_WebId = W.Id WHERE W.SiteId = @SiteId AND AL.tp_ServerTemplate = @ServerTemplate"),
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    sqlCommand.Parameters.Add(new SqlParameter("ServerTemplate", (object)112));
                    obj = sqlCommand.ExecuteScalar();
                }

                if (obj == null)
                {
                    return null;
                }
                else
                {
                    string str1 = (obj is byte[] ? DBAdapter.DecompressToXmlString((byte[])obj) : (string)obj);
                    XmlDocument xmlDocument = new XmlDocument();
                    xmlDocument.LoadXml(string.Concat("<Fields>", str1, "</Fields>"));
                    string notesFieldDBColumnName = this.GetNotesFieldDBColumnName(xmlDocument.SelectNodes(".//Field"));
                    str = (string.IsNullOrEmpty(notesFieldDBColumnName)
                        ? this.GetNotesFieldDBColumnName(xmlDocument.SelectNodes(".//FieldRef"))
                        : notesFieldDBColumnName);
                }
            }

            return str;
        }

        public string GetGroups()
        {
            string str;
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                DataTable dataTable = new DataTable("Groups");
                DataTable dataTable1 = new DataTable("Members");
                string str1 = (base.SharePointVersion.IsSharePoint2007OrLater ? "Group" : "SiteGroup");
                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    string[] strArrays = new string[]
                    {
                        "Select G.ID, G.Title, G.Description, G.Owner, G.OwnerIsUser, G2.Title as GroupOwnerName, U.tp_Login as UserOwnerLogin from (",
                        str1,
                        "s G join UserInfo U on (((G.OwnerIsUser=1 and G.Owner=U.tp_ID) or (G.OwnerIsUser=0 and G.OwnerIsUser+1=U.tp_ID)) and G.SiteId=U.tp_SiteId) join ",
                        str1,
                        "s G2 on (((G.OwnerIsUser=0 and G.Owner=G2.ID)or (G.OwnerIsUser=1 and G.ID=G2.ID)) and G.SiteId = G2.SiteId)) Where G.SiteId=@SiteID Order By G.ID"
                    };
                    str = string.Concat(strArrays);
                }
                else
                {
                    string[] strArrays1 = new string[]
                    {
                        "Select G.ID, G.Title, G.Description, G.Owner, G.OwnerIsUser, G2.Title as GroupOwnerName, U.tp_Login as UserOwnerLogin, G.Flags, G.RequestEmail from (",
                        str1,
                        "s G join UserInfo U on (((G.OwnerIsUser=1 and G.Owner=U.tp_ID) or (G.OwnerIsUser=0 and G.OwnerIsUser+1=U.tp_ID)) and G.SiteId=U.tp_SiteId) join ",
                        str1,
                        "s G2 on (((G.OwnerIsUser=0 and G.Owner=G2.ID)or (G.OwnerIsUser=1 and G.ID=G2.ID)) and G.SiteId = G2.SiteId)) Where G.SiteId=@SiteID Order By G.ID"
                    };
                    str = string.Concat(strArrays1);
                }

                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                string[] strArrays2 = new string[]
                {
                    "Select G.ID as GroupID, U.tp_Login as Login from (", str1, "s G join (", str1,
                    "Membership M join UserInfo U on M.MemberId=U.tp_ID and M.SiteId=U.tp_SiteID) on G.ID=M.GroupId and G.SiteId=M.SiteId) Where G.SiteId=@SiteID Order By G.ID"
                };
                using (SqlCommand sqlCommand1 = this.GetSqlCommand(string.Concat(strArrays2), sqlConnection))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable1);
                    }
                }

                int num = 0;
                xmlTextWriter.WriteStartElement("Groups");
                DataTable groupsDescription = null;
                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    groupsDescription = this.GetGroupsDescription();
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    xmlTextWriter.WriteStartElement("Group");
                    xmlTextWriter.WriteAttributeString("Name", this.GetResourceName(row["Title"].ToString()));
                    xmlTextWriter.WriteAttributeString("Description",
                        this.GetGroupDescFromDataTable(groupsDescription, row));
                    xmlTextWriter.WriteAttributeString("OwnerIsUser", row["OwnerIsUser"].ToString());
                    xmlTextWriter.WriteAttributeString("ID", row["ID"].ToString());
                    int num1 = 0;
                    string str2 = "";
                    bool flag = true;
                    bool flag1 = false;
                    bool flag2 = false;
                    bool flag3 = false;
                    if (base.SharePointVersion.IsSharePoint2007OrLater)
                    {
                        num1 = (row["Flags"] is DBNull ? 0 : Convert.ToInt32(row["Flags"]));
                        str2 = row["RequestEmail"].ToString();
                        flag = ((long)num1 & (long)1) > (long)0;
                        flag1 = ((long)num1 & (long)2) > (long)0;
                        flag2 = ((long)num1 & (long)4) > (long)0;
                        flag3 = ((long)num1 & (long)8) > (long)0;
                    }

                    xmlTextWriter.WriteAttributeString("OnlyAllowMembersViewMembership", flag.ToString());
                    xmlTextWriter.WriteAttributeString("AllowMembersEditMembership", flag1.ToString());
                    xmlTextWriter.WriteAttributeString("AllowRequestToJoinLeave", flag2.ToString());
                    xmlTextWriter.WriteAttributeString("AutoAcceptRequestToJoinLeave", flag3.ToString());
                    xmlTextWriter.WriteAttributeString("RequestToJoinLeaveEmailSetting", str2);
                    if (!(bool)row["OwnerIsUser"])
                    {
                        xmlTextWriter.WriteAttributeString("Owner", row["GroupOwnerName"].ToString());
                    }
                    else
                    {
                        xmlTextWriter.WriteAttributeString("Owner", row["UserOwnerLogin"].ToString());
                    }

                    while (dataTable1.Rows.Count > num &&
                           dataTable1.Rows[num]["GroupID"].ToString() == row["ID"].ToString())
                    {
                        xmlTextWriter.WriteStartElement("Member");
                        xmlTextWriter.WriteAttributeString("Login", dataTable1.Rows[num]["Login"].ToString());
                        xmlTextWriter.WriteEndElement();
                        num++;
                    }

                    xmlTextWriter.WriteEndElement();
                }

                if (groupsDescription != null)
                {
                    groupsDescription.Dispose();
                }

                xmlTextWriter.WriteEndElement();
            }

            return stringWriter.ToString();
        }

        private DataTable GetGroupsDescription()
        {
            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    string groupDescriptionDBColumnName = this.GetGroupDescriptionDBColumnName();
                    if (!string.IsNullOrEmpty(groupDescriptionDBColumnName))
                    {
                        string str = string.Format(
                            "SELECT G.ID, AUD.{0} FROM AllUserData AUD JOIN GROUPS G ON G.ID = AUD.tp_ID AND G.SiteId = AUD.tp_SiteId WHERE AUD.tp_SiteId = @SiteID AND AUD.tp_ListId = {1} ORDER BY AUD.tp_ID",
                            groupDescriptionDBColumnName,
                            (base.SharePointVersion.IsSharePoint2013OrLater
                                ? "(SELECT tp_ID FROM AllLists WHERE tp_SiteId = @SiteId AND tp_ServerTemplate = @ServerTemplate)"
                                : "(SELECT tp_ID FROM AllLists AL JOIN Webs W ON AL.tp_WebId = W.Id WHERE W.SiteId = @SiteId AND AL.tp_ServerTemplate = @ServerTemplate)"));
                        using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                            sqlCommand.Parameters.Add(new SqlParameter("ServerTemplate", (object)112));
                            using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                            {
                                DataTable dataTable = new DataTable("GroupsDescription");
                                sqlDataAdapter.Fill(dataTable);
                                return dataTable;
                            }
                        }
                    }
                }
            }
            catch (Exception exception1)
            {
                Exception exception = exception1;
                Metalogix.SharePoint.Adapters.Utils.LogExceptionDetails(exception, MethodBase.GetCurrentMethod().Name,
                    "Metalogix.SharePoint.Adapters.DB.DBAdapter", null);
            }

            return null;
        }

        public string GetInfopaths(string options)
        {
            throw new NotImplementedException();
        }

        public bool GetIsPortal()
        {
            DataTable dataTable = new DataTable("DateTime");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand =
                       this.GetSqlCommand("Select col_length('CatDef', 'CatID') as IsPortal", sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }

                    if (dataTable.Rows.Count != 1)
                    {
                        throw new Exception("Could not connect to SQL server");
                    }
                }
            }

            if (dataTable.Rows[0]["IsPortal"] is DBNull)
            {
                return false;
            }

            return true;
        }

        public string GetLanguagesAndWebTemplates()
        {
            return "<LanguageCollection />";
        }

        public string GetList(string sListID)
        {
            DataTable dataTable = new DataTable("List");
            DataRow item = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string[] strArrays = new string[]
                    { "Select d.LeafName, d.DirName, d.MetaInfo,", null, null, null, null, null, null, null };
                strArrays[1] = (base.SharePointVersion.IsSharePoint2003 ? "" : "d.WelcomePageUrl,");
                strArrays[2] = " l.* ";
                strArrays[3] = (base.SharePointVersion.IsSharePoint2010OrLater
                    ? ", a.ItemCount as tp_ItemCount, a.Modified as tp_Modified, a.NextAvailableId as tp_NextAvailableId, lp.DataSource as tp_DataSource"
                    : "");
                strArrays[4] = " From Lists l, Docs d ";
                strArrays[5] = (base.SharePointVersion.IsSharePoint2010OrLater
                    ? ", alllistsaux a, AllListsPlus lp "
                    : "");
                strArrays[6] = "Where l.tp_WebID = @WebID and l.tp_ID = @ListID and l.tp_RootFolder = d.Id";
                strArrays[7] = (base.SharePointVersion.IsSharePoint2010OrLater
                    ? " and l.tp_id = a.listid and l.tp_id = lp.ListId"
                    : "");
                using (SqlCommand sqlCommand = this.GetSqlCommand(string.Concat(strArrays), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    sqlCommand.Parameters.Add(new SqlParameter("ListID", sListID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count != 1)
                {
                    throw new Exception("Could not locate the list");
                }

                item = dataTable.Rows[0];
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            this.GetListXML(item, new XmlTextWriter(stringWriter), true);
            string str = stringWriter.ToString();
            if (str.Contains("$Resources:"))
            {
                str = SPListTemplateCollection.ResolveViewLocalizationReferences(str);
            }

            return str;
        }

        private void GetListBaseTemplateID(string sListID, out int baseTemplate, out string featureId)
        {
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                if (!base.SharePointVersion.IsSharePoint2003)
                {
                    DataTable dataTable = new DataTable("ListTemplate");
                    using (SqlCommand sqlCommand = this.GetSqlCommand(
                               "select tp_ServerTemplate, tp_FeatureId from Lists where tp_WebId = @WebID and tp_ID = @ListID",
                               sqlConnection))
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                        sqlCommand.Parameters.Add(new SqlParameter("ListID", sListID));
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(dataTable);
                        }
                    }

                    if (dataTable.Rows.Count == 0)
                    {
                        throw new ArgumentOutOfRangeException("No list with the specified ID exists");
                    }

                    DataRow item = dataTable.Rows[0];
                    baseTemplate = (int)item["tp_ServerTemplate"];
                    featureId = item["tp_FeatureId"].ToString();
                }
                else
                {
                    using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                               "select tp_ServerTemplate from Lists where tp_WebId = @WebID and tp_ID = @ListID",
                               sqlConnection))
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("WebID", this.WebID));
                        sqlCommand1.Parameters.Add(new SqlParameter("ListID", sListID));
                        baseTemplate = (int)sqlCommand1.ExecuteScalar();
                    }

                    featureId = null;
                }
            }
        }

        public ListType GetListBaseType(string listID)
        {
            ListType listType = ListType.Unknown;
            DataTable dataTable = new DataTable("List");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           string.Concat("Select tp_BaseType From Lists Where tp_ID = '", listID, "'"), sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count > 0)
                {
                    object item = dataTable.Rows[0]["tp_BaseType"];
                    if (Enum.IsDefined(typeof(ListType), item))
                    {
                        listType = (ListType)item;
                    }
                }
            }

            return listType;
        }

        private ListType GetListBaseType(string listID, XmlNode listSettingsNode, bool skipFetchIfNot2003)
        {
            ListType attributeValueAsEnumValue = ListType.Unknown;
            if (listSettingsNode != null)
            {
                attributeValueAsEnumValue =
                    listSettingsNode.GetAttributeValueAsEnumValue<ListType>("BaseType", ListType.Unknown);
            }

            if (!skipFetchIfNot2003 || base.SharePointVersion.IsSharePoint2003)
            {
                attributeValueAsEnumValue = this.GetListBaseType(listID);
            }

            return attributeValueAsEnumValue;
        }

        private void GetListByTitle(string commandConfigurationXml, OperationReporting opResult)
        {
            commandConfigurationXml.Deserialize<GetListByNameConfiguration>();
            opResult.LogObjectXml(string.Empty);
        }

        public string GetListItemIDs(string sListID, string sParentFolder, bool bRecursive, ListItemQueryType itemTypes)
        {
            Dictionary<string, string> strs;
            List<string> strs1;
            Dictionary<string, string> strs2;
            string str = this.BuildListItemsQuery(sListID, null, null, sParentFolder, ListType.Unknown, bRecursive,
                itemTypes, out strs, out strs1, out strs2, null);
            DataTable dataTable = new DataTable("ListItemIDs");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlConnection.Open();
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count == 0)
            {
                return null;
            }

            StringBuilder stringBuilder = new StringBuilder(1024);
            foreach (DataRow row in dataTable.Rows)
            {
                if (stringBuilder.Length > 0)
                {
                    stringBuilder.Append(",");
                }

                stringBuilder.Append(row["ID"]);
            }

            return stringBuilder.ToString();
        }

        public string GetListItems(string sListID, string sIDs, string sFields, string sParentFolder, bool bRecursive,
            ListItemQueryType itemTypes, string sListSettings, GetListItemOptions getOptions)
        {
            return this.GetListItems(sListID, sIDs, sFields, sParentFolder, bRecursive, itemTypes, sListSettings,
                getOptions, null);
        }

        private string GetListItems(string sListID, string sIDs, string sFields, string sParentFolder, bool bRecursive,
            ListItemQueryType itemTypes, string sListSettings, GetListItemOptions getOptions, string filterQuery)
        {
            Dictionary<string, string> strs;
            List<string> strs1;
            Dictionary<string, string> strs2;
            ListType listBaseType = ListType.Unknown;
            if (!string.IsNullOrEmpty(sListSettings))
            {
                XmlNode xmlNode = XmlUtility.StringToXmlNode(sListSettings);
                XmlNode xmlNodes = xmlNode.SelectSingleNode(string.Format("//{0}", XmlElementNames.List.ToString()));
                listBaseType = this.GetListBaseType(sListID, xmlNodes, true);
            }

            string str = this.BuildListItemsQuery(sListID, sIDs, sFields, sParentFolder, listBaseType, bRecursive,
                itemTypes, out strs, out strs1, out strs2, filterQuery);
            DataTable dataTable = new DataTable("ListItems");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count == 0)
            {
                return "<ListItems/>";
            }

            StringBuilder stringBuilder = new StringBuilder(2048);
            using (XmlWriter xmlWriter = XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement("ListItems");
                this.GetListItemXML(dataTable.Rows, xmlWriter, strs, strs1, getOptions, strs2);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
            }

            return stringBuilder.ToString();
        }

        public string GetListItemsByQuery(string listID, string fields, string query, string listSettings,
            GetListItemOptions getOptions)
        {
            return this.GetListItems(listID, null, fields, null, true, ListItemQueryType.ListItem, listSettings,
                getOptions, query);
        }

        public string GetListItemVersions(string listID, int itemID, string fieldsXml, string configurationXml)
        {
            Dictionary<string, string> strs;
            List<string> strs1;
            Dictionary<string, string> strs2;
            IEnumerable enumerable;
            int attributeValueAsInt = 0;
            ListType listBaseType = ListType.Unknown;
            if (!string.IsNullOrEmpty(configurationXml))
            {
                XmlNode xmlNode = XmlUtility.StringToXmlNode(configurationXml);
                attributeValueAsInt =
                    xmlNode.GetAttributeValueAsInt(XmlAttributeNames.NoOfLatestVersionsToGet.ToString());
                XmlNode xmlNodes = xmlNode.SelectSingleNode(string.Format("//{0}", XmlElementNames.List.ToString()));
                listBaseType = this.GetListBaseType(listID, xmlNodes, true);
            }

            if (attributeValueAsInt < 0)
            {
                throw new ArgumentOutOfRangeException("noOfLatestVersionsToGet", "value is less than zero");
            }

            if (base.SharePointVersion.IsSharePoint2003 && listBaseType == ListType.IssuesList)
            {
                return this.GetListV2IssueVersions(listID, itemID, fieldsXml);
            }

            bool flag = (!base.SharePointVersion.IsSharePoint2003 || listBaseType != ListType.DocumentLibrary
                ? false
                : AdapterConfigurationVariables.Swap2003DocMetaInfoColumns);
            string fieldsListForQuery = DBAdapter.GetFieldsListForQuery(fieldsXml, base.SharePointVersion, listBaseType,
                out strs, out strs1, out strs2);
            string str =
                "@FileID AS UniqueId, @FileDirRef AS FileDirRef, @FileLeafRef AS FileLeafRef, @FileType AS FSObjType, @DocFlags AS _DocFlags, ";
            string str1 = "MetaInfo AS _VersionMetaInfo, '' AS _VersionModifiedBy, ";
            str1 = (!base.SharePointVersion.IsSharePoint2007OrLater
                ? string.Concat(str1, "1 AS _VersionLevel, '' AS _CheckinComment, ")
                : string.Concat(str1, "[Level] AS _VersionLevel, CheckinComment AS _CheckinComment, "));
            StringBuilder stringBuilder = this.ConstructCommonSQLHeaderForVersion(listID, itemID);
            StringBuilder stringBuilder1 =
                this.ConstructDocumentCurrentVersionSQL(listID, itemID, fieldsListForQuery, str, str1);
            if (flag)
            {
                fieldsListForQuery = DBAdapter.GetFieldsListForQuery(fieldsXml, base.SharePointVersion,
                    ListType.Unknown, out strs, out strs1, out strs2);
            }

            StringBuilder stringBuilder2 =
                this.ConstructDocumentVersionSQL(listID, itemID, fieldsListForQuery, str, str1);
            DataTable dataTable = new DataTable("Versions");
            DataTable dataTable1 = new DataTable("Versions");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    this.PopulateVersionResultsTwoQuery(stringBuilder, stringBuilder1, stringBuilder2, dataTable,
                        dataTable1, sqlConnection);
                }
                else
                {
                    this.PopulateVersionResultsUsingUnion(attributeValueAsInt, stringBuilder, stringBuilder1,
                        stringBuilder2, dataTable, dataTable1, sqlConnection);
                }
            }

            if (dataTable1.Rows.Count + dataTable.Rows.Count == 0)
            {
                return null;
            }

            if (!base.SharePointVersion.IsSharePoint2003)
            {
                enumerable = dataTable.Select(string.Empty, "_VersionNumber ASC");
                int count = dataTable.Rows.Count;
            }
            else
            {
                ArrayList arrayLists = new ArrayList();
                arrayLists.AddRange(dataTable.Rows);
                arrayLists.AddRange(dataTable1.Rows);
                SortedRowCollection sortedRowCollections = new SortedRowCollection(arrayLists, "_VersionNumber");
                this.Process2003VersionMetaInfo(fieldsXml, strs, sortedRowCollections);
                enumerable = sortedRowCollections;
                int num = sortedRowCollections.Count;
            }

            StringBuilder stringBuilder3 = new StringBuilder(2048);
            using (XmlWriter xmlWriter = XmlWriter.Create(stringBuilder3, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement(XmlElementNames.ListItems.ToString());
                GetListItemOptions getListItemOption = new GetListItemOptions()
                {
                    IncludeExternalizationData = true
                };
                this.GetListItemXML(enumerable, xmlWriter, strs, strs1, getListItemOption, strs2);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
            }

            return stringBuilder3.ToString();
        }

        private void GetListItemXML(IEnumerable rows, XmlWriter xmlWriter,
            Dictionary<string, string> columnNameMappingDictionary, List<string> multiValueFields,
            GetListItemOptions getOptions, Dictionary<string, string> taxonomyFields)
        {
            string str;
            foreach (DataRow row in rows)
            {
                xmlWriter.WriteStartElement("ListItem");
                if (getOptions != null && getOptions.IncludePermissionsInheritance)
                {
                    if (!row.Table.Columns.Contains("ScopeUrl"))
                    {
                        xmlWriter.WriteAttributeString("HasUniquePermissions", false.ToString());
                    }
                    else
                    {
                        XmlWriter xmlWriter1 = xmlWriter;
                        if (base.SharePointVersion.IsSharePoint2007OrLater)
                        {
                            bool flag = row["ScopeUrl"].ToString().EndsWith(row["FileLeafRef"].ToString());
                            str = flag.ToString();
                        }
                        else
                        {
                            str = "false";
                        }

                        xmlWriter1.WriteAttributeString("HasUniquePermissions", str);
                    }
                }

                if (getOptions != null && getOptions.IncludeExternalizationData)
                {
                    bool flag1 = ExternalizationUtils.IsExternalized(row);
                    xmlWriter.WriteAttributeString("IsExternalized", flag1.ToString());
                    xmlWriter.WriteAttributeString("BinaryAvailable", (!flag1).ToString());
                }

                if (row.Table.Columns.Contains("_VersionIsCurrent") && base.SharePointVersion.IsSharePoint2003)
                {
                    xmlWriter.WriteAttributeString("_IsCurrentVersion", row["_VersionIsCurrent"].ToString());
                }

                if (row.Table.Columns.Contains("_VersionNumber") && base.SharePointVersion.IsSharePoint2003)
                {
                    int num = Convert.ToInt32(row["_VersionNumber"]) * 512;
                    xmlWriter.WriteAttributeString("_UIVersion", num.ToString());
                }

                if (row.Table.Columns.Contains("_VersionString") && base.SharePointVersion.IsSharePoint2003)
                {
                    double num1 = 0;
                    if (double.TryParse(row["_VersionString"].ToString(), out num1))
                    {
                        xmlWriter.WriteAttributeString("_UIVersionString", num1.ToString("0.0"));
                    }
                }

                this.WriteDataRowValues(row, xmlWriter, columnNameMappingDictionary, multiValueFields, null,
                    taxonomyFields);
                xmlWriter.WriteEndElement();
            }
        }

        public string GetListNameByID(string sListID)
        {
            return this.GetListNameByID(sListID, this.WebID);
        }

        public string GetListNameByID(string sListID, string sWebID)
        {
            string str;
            if (sWebID == null)
            {
                sWebID = this.WebID;
            }

            if (!Metalogix.SharePoint.Adapters.Utils.IsGuid(sListID))
            {
                throw new Exception("Invalid GUID supplied to GetListTitleByByID()");
            }

            DataTable dataTable = new DataTable("List");
            DataRow item = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "select d.LeafName from Lists l, Docs d where l.tp_RootFolder = d.Id and l.tp_WebId=@WebID and tp_ID = @ListID",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", sWebID));
                    sqlCommand.Parameters.Add(new SqlParameter("ListID", (object)(new Guid(sListID))));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count == 1)
                {
                    item = dataTable.Rows[0];
                    return item["LeafName"].ToString();
                }
                else
                {
                    str = null;
                }
            }

            return str;
        }

        public string GetLists()
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            DataTable dataTable = new DataTable("Lists");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                string[] webID = new string[]
                {
                    "Select d.LeafName, d.DirName, d.MetaInfo, l.tp_ID, l.tp_Created, l.tp_Flags, ", null, null, null,
                    null, null, null, null, null
                };
                webID[1] = (base.SharePointVersion.IsSharePoint2007OrLater ? "l.tp_EmailAlias, l.tp_FeatureId, " : "");
                webID[2] = (base.SharePointVersion.IsSharePoint2010OrLater
                    ? "a.ItemCount as tp_ItemCount, a.Modified as tp_Modified"
                    : "l.tp_ItemCount, l.tp_Modified");
                webID[3] = ", l.tp_Title, l.tp_Template, l.tp_ServerTemplate, l.tp_BaseType From Lists l, Docs d";
                webID[4] = (base.SharePointVersion.IsSharePoint2010OrLater ? ", alllistsaux a" : "");
                webID[5] = " Where l.tp_WebID = '";
                webID[6] = this.WebID;
                webID[7] = "' and l.tp_RootFolder = d.Id";
                webID[8] = (base.SharePointVersion.IsSharePoint2010OrLater ? " and l.tp_ID = a.listid" : "");
                using (SqlCommand sqlCommand = this.GetSqlCommand(string.Concat(webID), sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            SortedRowCollection sortedRowCollections = new SortedRowCollection(dataTable.Rows, "tp_Title");
            xmlTextWriter.WriteStartElement("Lists");
            foreach (DataRow sortedRowCollection in sortedRowCollections)
            {
                this.GetListXML(sortedRowCollection, xmlTextWriter, false);
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetListTemplates()
        {
            return "<ListTemplates />";
        }

        public string GetListV2IssueVersions(string sListID, int iItemID, string sFields)
        {
            Dictionary<string, string> strs;
            List<string> strs1;
            Dictionary<string, string> strs2;
            string fieldsListForQuery = DBAdapter.GetFieldsListForQuery(sFields, base.SharePointVersion,
                ListType.IssuesList, out strs, out strs1, out strs2);
            string str =
                "tp_Modified as _VersionModified, convert(varchar,tp_Version) + '.0' as _VersionString, tp_Version as _VersionNumber, tp_IsCurrent As _VersionIsCurrent";
            StringBuilder stringBuilder = new StringBuilder(2048);
            stringBuilder.Append("Declare @SiteID uniqueidentifier\n");
            stringBuilder.Append("Select @SiteID='");
            stringBuilder.Append(this.SiteID);
            stringBuilder.Append("'\n");
            stringBuilder.Append("Select ");
            stringBuilder.Append(str);
            stringBuilder.Append(", ");
            stringBuilder.Append(fieldsListForQuery);
            stringBuilder.Append("\nFrom Userdata u Where u.tp_ListID = '");
            stringBuilder.Append(sListID);
            stringBuilder.Append("' And int1 = ");
            stringBuilder.Append(iItemID);
            stringBuilder.Append("\nOrder by tp_Version");
            DataTable dataTable = new DataTable("Versions");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = this.GetSqlCommand(stringBuilder.ToString(), sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count == 0)
            {
                return null;
            }

            StringBuilder stringBuilder1 = new StringBuilder(2048);
            using (XmlWriter xmlWriter = XmlWriter.Create(stringBuilder1, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement("ListItems");
                this.GetListItemXML(dataTable.Rows, xmlWriter, strs, strs1, new GetListItemOptions(), strs2);
                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
            }

            return stringBuilder1.ToString();
        }

        private string GetListViewXmlFromListTemplate(string sViewXml, string sListID, int iDesiredBaseViewID)
        {
            int num;
            string str;
            string str1;
            if (string.IsNullOrEmpty(sListID))
            {
                return sViewXml;
            }

            try
            {
                this.GetListBaseTemplateID(sListID, out num, out str);
                sViewXml = this.GetListViewXmlFromListTemplate(sViewXml, num, str, iDesiredBaseViewID);
                return sViewXml;
            }
            catch
            {
                str1 = sViewXml;
            }

            return str1;
        }

        private string GetListViewXmlFromListTemplate(string sViewXml, int iListTemplateID, string featureId,
            int iDesiredBaseViewID)
        {
            string innerXml;
            if (iListTemplateID < 0)
            {
                return sViewXml;
            }

            try
            {
                foreach (XmlNode xmlNodes in this.FindTemplateByID(iListTemplateID, featureId).ViewXML
                             .SelectNodes("//Views/View"))
                {
                    int num = 0;
                    if (xmlNodes.Attributes["BaseViewID"] == null ||
                        !int.TryParse(xmlNodes.Attributes["BaseViewID"].Value, out num) || num != iDesiredBaseViewID)
                    {
                        continue;
                    }

                    if (!string.IsNullOrEmpty(sViewXml))
                    {
                        XmlNode xmlNodes1 = null;
                        xmlNodes1 = (sViewXml.StartsWith("<View ", StringComparison.OrdinalIgnoreCase)
                            ? XmlUtility.StringToXmlNode(sViewXml)
                            : XmlUtility.StringToXmlNode(string.Concat("<View>", sViewXml, "</View>")));
                        foreach (XmlNode xmlNodes2 in xmlNodes)
                        {
                            if (xmlNodes1.SelectSingleNode(string.Concat("./", xmlNodes2.Name)) != null)
                            {
                                continue;
                            }

                            XmlUtility.CloneXMLNodeInto(xmlNodes2, xmlNodes1, false);
                        }

                        innerXml = xmlNodes1.InnerXml;
                        return innerXml;
                    }
                    else
                    {
                        innerXml = xmlNodes.InnerXml;
                        return innerXml;
                    }
                }

                return sViewXml;
            }
            catch
            {
                innerXml = sViewXml;
            }

            return innerXml;
        }

        public string GetListWorkflowRunning2010(string listName)
        {
            throw new NotImplementedException();
        }

        private void GetListXML(DataRow dr, XmlWriter xmlWriter, bool bGetFullXML)
        {
            bool flag;
            bool flag1;
            string str;
            string str1;
            int item = (int)dr["tp_ServerTemplate"];
            int num = (int)dr["tp_BaseType"];
            string str2 = dr["DirName"].ToString();
            xmlWriter.WriteStartElement("List");
            xmlWriter.WriteAttributeString("ID", dr["tp_ID"].ToString());
            xmlWriter.WriteAttributeString("Name", dr["LeafName"].ToString());
            xmlWriter.WriteAttributeString("Title", dr["tp_Title"].ToString());
            xmlWriter.WriteAttributeString("BaseTemplate", item.ToString());
            xmlWriter.WriteAttributeString("BaseType", num.ToString());
            xmlWriter.WriteAttributeString("DirName", str2);
            xmlWriter.WriteAttributeString("ItemCount", dr["tp_ItemCount"].ToString());
            DateTime dateTime = (DateTime)dr["tp_Created"];
            xmlWriter.WriteAttributeString("Created",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime(dateTime)));
            DateTime item1 = (DateTime)dr["tp_Modified"];
            xmlWriter.WriteAttributeString("Modified",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime(item1)));
            string str3 = null;
            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                str3 = dr["tp_FeatureId"].ToString();
                xmlWriter.WriteAttributeString("FeatureId",
                    (string.IsNullOrEmpty(str3) ? Guid.Empty.ToString() : str3));
            }

            object obj = dr["tp_Flags"];
            long num1 = (obj == null || obj == DBNull.Value ? (long)-1 : Convert.ToInt64(obj));
            xmlWriter.WriteAttributeString("Hidden", ((num1 & (long)256) > (long)0 ? "True" : "False"));
            if (bGetFullXML)
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    bool type = false;
                    if (!base.SharePointVersion.IsSharePoint2007OrLater)
                    {
                        type = dr["tp_Acl"].GetType() != typeof(DBNull);
                    }
                    else
                    {
                        using (SqlCommand sqlCommand = this.GetSqlCommand(
                                   "select p.ScopeId From Lists l, Docs d, Perms p Where l.tp_WebID = @WebID and l.tp_ID = @ListID and l.tp_RootFolder = d.Id and d.DirName + '/' +d.LeafName = p.ScopeUrl",
                                   sqlConnection))
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                            sqlCommand.Parameters.Add(new SqlParameter("ListID", dr["tp_ID"].ToString()));
                            using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                            {
                                DataTable dataTable = new DataTable("Perms");
                                sqlDataAdapter.Fill(dataTable);
                                type = dataTable.Rows.Count == 1;
                            }
                        }
                    }

                    xmlWriter.WriteAttributeString("HasUniquePermissions", type.ToString());
                }

                if (dr.Table.Columns.Contains("tp_EmailAlias") && dr["tp_EmailAlias"] != DBNull.Value &&
                    dr["tp_EmailAlias"].ToString().Length > 0)
                {
                    xmlWriter.WriteAttributeString("EmailAlias", dr["tp_EmailAlias"].ToString());
                }

                long num2 = Convert.ToInt64(dr["tp_Flags"]);
                bool flag2 = false;
                if (dr["tp_BaseType"].ToString() == "1")
                {
                    ListFlags listFlag = (ListFlags)Enum.Parse(typeof(ListFlags), Convert.ToString(num2));
                    if (!base.SharePointVersion.IsSharePoint2010OrLater || (num2 & 2251799813685248L) > (long)0)
                    {
                        string str4 = ((num2 & (long)268435456) <= (long)0 ? "PreferClient" : "Browser");
                        if (str4.Equals("Browser"))
                        {
                            flag2 = true;
                        }

                        xmlWriter.WriteAttributeString("BrowserEnabledDocuments", str4);
                    }
                    else
                    {
                        xmlWriter.WriteAttributeString("BrowserEnabledDocuments", "Browser");
                        flag2 = true;
                    }

                    if (base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        flag = (num2 & 2251799813685248L) > (long)0;
                        xmlWriter.WriteAttributeString("DefaultItemOpenUseListSetting", flag.ToString());
                    }

                    if (dr.Table.Columns.Contains("tp_SendToLocation"))
                    {
                        string str5 = dr["tp_SendToLocation"].ToString();
                        if (str5.IndexOf("|") <= 0)
                        {
                            xmlWriter.WriteAttributeString("SendToLocationName", "");
                            xmlWriter.WriteAttributeString("SendToLocationUrl", "");
                        }
                        else
                        {
                            xmlWriter.WriteAttributeString("SendToLocationName", str5.Substring(0, str5.IndexOf("|")));
                            if (str5.IndexOf("|") + 1 <= str5.Length - 1)
                            {
                                xmlWriter.WriteAttributeString("SendToLocationUrl",
                                    str5.Substring(str5.IndexOf("|") + 1));
                            }
                        }
                    }

                    bool flag3 = (num2 & (long)262144) > (long)0;
                    xmlWriter.WriteAttributeString("ForceCheckout", flag3.ToString());
                    bool flag4 = (num2 & (long)16) > (long)0;
                    xmlWriter.WriteAttributeString("IsCatalog", flag4.ToString());
                    if ((item == 101 ? true : item == 115) && dr.Table.Columns.Contains("tp_Template"))
                    {
                        if (dr["tp_Template"] != DBNull.Value)
                        {
                            string str6 = dr["tp_Template"].ToString();
                            DataTable dataTable1 = new DataTable();
                            using (SqlConnection sqlConnection1 = new SqlConnection(this.ConnectionString))
                            {
                                using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                                           "SELECT DirName, LeafName FROM Docs where Id = @Template", sqlConnection1))
                                {
                                    sqlCommand1.Parameters.Add(new SqlParameter("Template", str6));
                                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                                    {
                                        sqlDataAdapter1.Fill(dataTable1);
                                    }
                                }
                            }

                            if (dataTable1.Rows.Count > 0 && dataTable1.Columns.Contains("DirName") &&
                                dataTable1.Columns.Contains("LeafName"))
                            {
                                string str7 = string.Concat(dataTable1.Rows[0]["DirName"].ToString(), '/',
                                    dataTable1.Rows[0]["LeafName"].ToString());
                                object obj1 = '/';
                                char[] chrArray = new char[] { '/' };
                                str7 = string.Concat(obj1, str7.TrimStart(chrArray));
                                xmlWriter.WriteAttributeString("DocTemplateUrl", str7);
                                xmlWriter.WriteAttributeString("DocTemplateId", str6);
                            }
                        }
                        else
                        {
                            xmlWriter.WriteAttributeString("DocTemplateUrl", "");
                        }

                        if (flag2)
                        {
                            xmlWriter.WriteAttributeString("BrowserActivatedTemplate", "true");
                        }
                    }
                }

                bool flag5 = (num2 & 34359738368L) > (long)0;
                xmlWriter.WriteAttributeString("NoCrawl", flag5.ToString());
                if (!base.SharePointVersion.IsSharePoint2003 || !(dr["tp_BaseType"].ToString() != 1.ToString()))
                {
                    bool flag6 = (num2 & (long)536870912) <= (long)0;
                    xmlWriter.WriteAttributeString("Folders", flag6.ToString());
                }
                else
                {
                    xmlWriter.WriteAttributeString("Folders", false.ToString());
                }

                if (!base.SharePointVersion.IsSharePoint2003)
                {
                    XmlWriter xmlWriter1 = xmlWriter;
                    if ((num2 & (long)1048576) != (long)0 || (num2 & (long)2097152) != (long)0)
                    {
                        str1 = ((num2 & (long)1048576) == (long)0 ? "2" : "1");
                    }
                    else
                    {
                        str1 = "0";
                    }

                    xmlWriter1.WriteAttributeString("DraftVersionVisibility", str1);
                }

                xmlWriter.WriteAttributeString("Description", dr["tp_Description"].ToString());
                bool flag7 = this.IsOnQuickLaunch(dr["tp_ID"].ToString());
                xmlWriter.WriteAttributeString("OnQuickLaunch", flag7.ToString());
                int num3 = Convert.ToInt32(dr["tp_NextAvailableID"]);
                xmlWriter.WriteAttributeString("NextAvailableID", num3.ToString());
                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    bool flag8 = (num2 & (long)4194304) > (long)0;
                    xmlWriter.WriteAttributeString("ContentTypesEnabled", flag8.ToString());
                }

                bool flag9 = (num2 & (long)1024) > (long)0;
                string str8 = flag9.ToString();
                xmlWriter.WriteAttributeString("EnableModeration", str8);
                bool flag10 = (num2 & 274877906944L) <= (long)0;
                xmlWriter.WriteAttributeString("EnableSyndication", flag10.ToString());
                flag = (num2 & (long)64) > (long)0;
                xmlWriter.WriteAttributeString("EnableAssignToEmail", flag.ToString());
                if (dr["MetaInfo"] != DBNull.Value)
                {
                    string end = Encoding.UTF8.GetString((byte[])dr["MetaInfo"]);
                    if (base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        byte[] numArray = (byte[])dr["MetaInfo"];
                        try
                        {
                            using (MemoryStream memoryStream =
                                   new MemoryStream(numArray, 14, (int)numArray.Length - 14))
                            {
                                using (DeflateStream deflateStream =
                                       new DeflateStream(memoryStream, CompressionMode.Decompress))
                                {
                                    using (StreamReader streamReader = new StreamReader(deflateStream))
                                    {
                                        end = streamReader.ReadToEnd();
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }
                    }

                    XmlWriter xmlWriter2 = xmlWriter;
                    if (end.IndexOf("vti_emailattachmentfolders:SW|root") != -1)
                    {
                        str = "root";
                    }
                    else
                    {
                        str = (end.IndexOf("vti_emailattachmentfolders:SW|sender") != -1 ? "sender" : "subject");
                    }

                    xmlWriter2.WriteAttributeString("EmailAttachmentFolder", str);
                    xmlWriter.WriteAttributeString("EmailOverWrite",
                        (end.IndexOf("vti_emailoverwrite:IW|1") != -1 ? "1" : "0"));
                    xmlWriter.WriteAttributeString("EmailSaveOriginal",
                        (end.IndexOf("vti_emailsaveoriginal:IW|1") != -1 ? "1" : "0"));
                    xmlWriter.WriteAttributeString("EmailSaveMeetings",
                        (end.IndexOf("vti_emailsavemeetings:IW|1") != -1 ? "1" : "0"));
                    xmlWriter.WriteAttributeString("EmailUseSecurity",
                        (end.IndexOf("vti_emailusesecurity:IW|1") != -1 ? "1" : "0"));
                    xmlWriter.WriteAttributeString("RssLimitDescriptionLength",
                        (end.IndexOf("vti_rss_LimitDescriptionLength:IW|1") > 0 ? "1" : "0"));
                    if (end.IndexOf("vti_rss_ChannelTitle:SW|") > 0)
                    {
                        string str9 = end.Substring(end.IndexOf("vti_rss_ChannelTitle:SW|") +
                                                    "vti_rss_ChannelTitle:SW|".Length);
                        xmlWriter.WriteAttributeString("RssChannelTitle", str9.Substring(0, str9.IndexOf("\r\n")));
                    }

                    if (end.IndexOf("vti_rss_ChannelDescription:SW|") > 0)
                    {
                        string str10 = end.Substring(end.IndexOf("vti_rss_ChannelDescription:SW|") +
                                                     "vti_rss_ChannelDescription:SW|".Length);
                        xmlWriter.WriteAttributeString("RssChannelDescription",
                            str10.Substring(0, str10.IndexOf("\r\n")));
                    }

                    if (end.IndexOf("vti_rss_ChannelImageUrl:SW|") > 0)
                    {
                        string str11 = end.Substring(end.IndexOf("vti_rss_ChannelImageUrl:SW|") +
                                                     "vti_rss_ChannelImageUrl:SW|".Length);
                        xmlWriter.WriteAttributeString("RssChannelImageUrl", str11.Substring(0, str11.IndexOf("\r\n")));
                    }

                    if (end.IndexOf("vti_rss_ItemLimit:IW|") > 0)
                    {
                        string str12 =
                            end.Substring(end.IndexOf("vti_rss_ItemLimit:IW|") + "vti_rss_ItemLimit:IW|".Length);
                        xmlWriter.WriteAttributeString("RssItemLimit", str12.Substring(0, str12.IndexOf("\r\n")));
                    }

                    if (end.IndexOf("vti_rss_DayLimit:IW|") > 0)
                    {
                        string str13 =
                            end.Substring(end.IndexOf("vti_rss_DayLimit:IW|") + "vti_rss_DayLimit:IW|".Length);
                        xmlWriter.WriteAttributeString("RssDayLimit", str13.Substring(0, str13.IndexOf("\r\n")));
                    }

                    if (dr["tp_BaseType"].ToString() == "1")
                    {
                        xmlWriter.WriteAttributeString("RssDocumentAsEnclosure",
                            (end.IndexOf("vti_rss_DocumentAsEnclosure:IW|1") > 0 ? "1" : "0"));
                        xmlWriter.WriteAttributeString("RssDocumentAsLink",
                            (end.IndexOf("vti_rss_DocumentAsLink:IW|1") > 0 ? "1" : "0"));
                    }

                    this.AddListRecordDeclarationSettings(xmlWriter, end);
                }

                if (!base.SharePointVersion.IsSharePoint2003 && dr["WelcomePageUrl"] != null)
                {
                    xmlWriter.WriteAttributeString("WelcomePage", dr["WelcomePageUrl"].ToString());
                }

                if (!(dr["tp_BaseType"].ToString() == "1") && !(dr["tp_BaseType"].ToString() == "4"))
                {
                    flag = (num2 & (long)8) == (long)0;
                    xmlWriter.WriteAttributeString("EnableAttachments", flag.ToString());
                }

                if ((num2 & (long)128) > (long)0)
                {
                    flag1 = true;
                }
                else
                {
                    flag1 = (!base.SharePointVersion.IsSharePoint2003 ? false : num == 5);
                }

                bool flag11 = flag1;
                bool flag12 = (num2 & (long)524288) > (long)0;
                xmlWriter.WriteAttributeString("EnableVersioning", flag11.ToString());
                if (flag11)
                {
                    xmlWriter.WriteAttributeString("EnableMinorVersions",
                        (flag11 ? flag12.ToString() : false.ToString()));
                    if (!dr.Table.Columns.Contains("tp_MaxMajorVersionCount"))
                    {
                        xmlWriter.WriteAttributeString("MajorVersionLimit", "0");
                    }
                    else
                    {
                        xmlWriter.WriteAttributeString("MajorVersionLimit",
                            (dr["tp_MaxMajorVersionCount"].ToString().Equals(string.Empty)
                                ? "0"
                                : dr["tp_MaxMajorVersionCount"].ToString()));
                    }

                    if (dr.Table.Columns.Contains("tp_MaxMajorwithMinorVersionCount") && bool.Parse(str8))
                    {
                        xmlWriter.WriteAttributeString("MajorWithMinorVersionsLimit",
                            (dr["tp_MaxMajorwithMinorVersionCount"].ToString().Equals(string.Empty)
                                ? "0"
                                : dr["tp_MaxMajorwithMinorVersionCount"].ToString()));
                    }
                    else if (dr.Table.Columns.Contains("tp_MaxMajorwithMinorVersionCount") && flag12)
                    {
                        xmlWriter.WriteAttributeString("MajorWithMinorVersionsLimit",
                            (dr["tp_MaxMajorwithMinorVersionCount"].ToString().Equals(string.Empty)
                                ? "0"
                                : dr["tp_MaxMajorwithMinorVersionCount"].ToString()));
                    }
                }

                if (dr.Table.Columns.Contains("tp_ReadSecurity") && dr["tp_ReadSecurity"] != DBNull.Value)
                {
                    xmlWriter.WriteAttributeString("ReadSecurity", dr["tp_ReadSecurity"].ToString());
                }

                if (dr.Table.Columns.Contains("tp_WriteSecurity") && dr["tp_WriteSecurity"] != DBNull.Value)
                {
                    xmlWriter.WriteAttributeString("WriteSecurity", dr["tp_WriteSecurity"].ToString());
                }

                flag = (num2 & (long)2048) > (long)0;
                xmlWriter.WriteAttributeString("AllowMultiResponses", flag.ToString());
                flag = (num2 & (long)4096) > (long)0;
                xmlWriter.WriteAttributeString("ShowUser", flag.ToString());
                bool flag13 = false;
                if ((num2 & (long)32) > (long)0)
                {
                    flag13 = true;
                }

                xmlWriter.WriteAttributeString("MultipleDataList", flag13.ToString());
                if (base.SharePointVersion.IsSharePoint2010OrLater && item == 600 &&
                    dr["tp_DataSource"] != DBNull.Value && dr["tp_DataSource"].ToString().Length > 0)
                {
                    string str14 = dr["tp_DataSource"].ToString();
                    XmlDocument xmlDocument = new XmlDocument();
                    xmlDocument.LoadXml(str14);
                    XmlNode documentElement = xmlDocument.DocumentElement;
                    XmlNode xmlNodes = documentElement.SelectSingleNode("./Property[@Name='LobSystemInstance']");
                    if (xmlNodes != null && xmlNodes.Attributes["Value"] != null)
                    {
                        xmlWriter.WriteAttributeString("LobSystemInstance", xmlNodes.Attributes["Value"].Value);
                    }

                    xmlNodes = documentElement.SelectSingleNode("./Property[@Name='EntityNamespace']");
                    if (xmlNodes != null && xmlNodes.Attributes["Value"] != null)
                    {
                        xmlWriter.WriteAttributeString("EntityNamespace", xmlNodes.Attributes["Value"].Value);
                    }

                    xmlNodes = documentElement.SelectSingleNode("./Property[@Name='Entity']");
                    if (xmlNodes != null && xmlNodes.Attributes["Value"] != null)
                    {
                        xmlWriter.WriteAttributeString("Entity", xmlNodes.Attributes["Value"].Value);
                    }

                    xmlNodes = documentElement.SelectSingleNode("./Property[@Name='SpecificFinder']");
                    if (xmlNodes != null && xmlNodes.Attributes["Value"] != null)
                    {
                        xmlWriter.WriteAttributeString("SpecificFinder", xmlNodes.Attributes["Value"].Value);
                    }
                }

                if (base.SharePointVersion.IsSharePoint2010OrLater)
                {
                    flag = (num2 & 9007199254740992L) > (long)0;
                    xmlWriter.WriteAttributeString("DisableGridEditing", flag.ToString());
                    flag = (num2 & 36028797018963968L) > (long)0;
                    xmlWriter.WriteAttributeString("NavigateForFormsPages", flag.ToString());
                    flag = (num2 & 562949953421312L) > (long)0;
                    xmlWriter.WriteAttributeString("ExcludeFromOfflineClient", flag.ToString());
                }

                string str15 = (dr["tp_Fields"] is byte[]
                    ? DBAdapter.DecompressToXmlString((byte[])dr["tp_Fields"])
                    : dr["tp_Fields"].ToString());
                XmlDocument xmlDocument1 = new XmlDocument();
                xmlDocument1.LoadXml(string.Concat("<Fields>", str15, "</Fields>"));
                this.AddBaseFields(xmlDocument1.FirstChild, item, num, str3);
                if (item == 851)
                {
                    this.AddAssetLibraryOOBColumns(xmlDocument1.FirstChild);
                }

                this.AddDisplayNamesToFieldRefs(xmlDocument1.FirstChild);
                this.AddListNamesToLookups(xmlDocument1.FirstChild);
                this.RemoveRootFieldRefs(xmlDocument1.FirstChild);
                this.RemoveDeletedFieldRefs(xmlDocument1.FirstChild);
                xmlWriter.WriteRaw(
                    xmlDocument1.OuterXml.Replace(" xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\"", ""));
                string views = this.GetViews(dr["tp_ID"].ToString());
                XmlNode firstChild = xmlDocument1.FirstChild;
                xmlDocument1.LoadXml(views);
                this.AddInternalNamesToFieldRefs(xmlDocument1.FirstChild, firstChild);
                string str16 = string.Concat((str2.StartsWith("/") ? "" : "/"), str2);
                str16 = string.Concat(str16, (str16.EndsWith("/") ? "" : "/"), dr["LeafName"].ToString(), "/");
                this.AddBaseViews(xmlDocument1.FirstChild, item, str16, str3);
                xmlWriter.WriteRaw(xmlDocument1.OuterXml);
            }

            xmlWriter.WriteEndElement();
        }

        public string GetLockedSites(string options)
        {
            throw new NotImplementedException();
        }

        public string GetMySiteData(string sSiteURL)
        {
            return null;
        }

        private bool GetNavNodeIsVisible(DataRow nodeRow, Guid[] hiddenGuids)
        {
            if (hiddenGuids == null || (int)hiddenGuids.Length == 0)
            {
                return true;
            }

            object item = nodeRow["DocId"];
            object obj = nodeRow["WebId"];
            object item1 = nodeRow["DocType"];
            Guid guid = (item is Guid ? (Guid)item : Guid.Empty);
            Guid guid1 = (obj is Guid ? (Guid)obj : Guid.Empty);
            int num = (item1 != DBNull.Value ? int.Parse(item1.ToString()) : -1);
            if (guid == Guid.Empty && guid1 == Guid.Empty)
            {
                return true;
            }

            Guid[] guidArray = hiddenGuids;
            for (int i = 0; i < (int)guidArray.Length; i++)
            {
                Guid guid2 = guidArray[i];
                if (guid != Guid.Empty && guid == guid2 || num == 2 && guid1 != Guid.Empty && guid1 == guid2)
                {
                    return false;
                }
            }

            return true;
        }

        public int GetNextAvailableID(string sListID)
        {
            DataTable dataTable = new DataTable("List");
            DataRow item = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           (base.SharePointVersion.IsSharePoint2007OrEarlier
                               ? string.Concat("select tp_NextAvailableID from Lists where tp_Id = '", sListID, "'")
                               : string.Concat(
                                   "select NextAvailableId as tp_NextAvailableID from AllListsAux where ListId = '",
                                   sListID, "'")), sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count != 1)
                {
                    throw new Exception("List does not exist");
                }

                item = dataTable.Rows[0];
            }

            return (int)item["tp_NextAvailableID"];
        }

        private string GetNotesFieldDBColumnName(XmlNodeList nodeList)
        {
            string str;
            IEnumerator enumerator = nodeList.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    XmlNode current = (XmlNode)enumerator.Current;
                    if (current.Attributes == null || current.Attributes["Name"] == null || !current
                            .GetAttributeValueAsString("Name").Equals("Notes", StringComparison.Ordinal))
                    {
                        continue;
                    }

                    str = (current.Attributes["ColName"] != null
                        ? current.GetAttributeValueAsString("ColName")
                        : string.Empty);
                    return str;
                }

                return null;
            }
            finally
            {
                IDisposable disposable = enumerator as IDisposable;
                if (disposable != null)
                {
                    disposable.Dispose();
                }
            }

            return str;
        }

        public string GetPortalListingGroups()
        {
            string str;
            string str1;
            string str2;
            if (!this.IsPortal2003Connection)
            {
                return null;
            }

            DataTable dataTable = new DataTable();
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "select GroupTitle, GroupOrder, GroupID from CatGroup where CatID = @WebID order by GroupOrder asc",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringBuilder stringBuilder = new StringBuilder(1000);
            XmlWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
            xmlTextWriter.WriteStartElement("ListingGroups");
            foreach (DataRow row in dataTable.Rows)
            {
                object item = row["GroupTitle"];
                if (item == null || item == DBNull.Value)
                {
                    str = null;
                }
                else
                {
                    str = item.ToString();
                }

                string str3 = str;
                object obj = row["GroupOrder"];
                if (obj == null || obj == DBNull.Value)
                {
                    str1 = null;
                }
                else
                {
                    str1 = obj.ToString();
                }

                string str4 = str1;
                object item1 = row["GroupID"];
                if (item1 == null || item1 == DBNull.Value)
                {
                    str2 = null;
                }
                else
                {
                    str2 = item1.ToString();
                }

                string str5 = str2;
                if (string.IsNullOrEmpty(str3))
                {
                    continue;
                }

                xmlTextWriter.WriteStartElement("Group");
                xmlTextWriter.WriteAttributeString("Name", str3);
                xmlTextWriter.WriteAttributeString("Order", str4);
                xmlTextWriter.WriteAttributeString("ID", str5);
                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Flush();
            return stringBuilder.ToString();
        }

        public string GetPortalListingIDs()
        {
            if (!this.IsPortal2003Connection)
            {
                return null;
            }

            DataTable dataTable = new DataTable();
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "select c.ListingID, g.GroupTitle as [Group], c.[Order], c.LastModified as Modified from CatJoint c left join CatGroup g on c.CatID = g.CatID and c.GroupID = g.GroupID where c.CatID = @WebID order by g.GroupOrder, c.[Order]",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringBuilder stringBuilder = new StringBuilder(1000);
            this.WritePortalListingData(dataTable, new XmlTextWriter(new StringWriter(stringBuilder)));
            return stringBuilder.ToString();
        }

        public string GetPortalListings(string sIDList)
        {
            if (!this.IsPortal2003Connection || string.IsNullOrEmpty(sIDList))
            {
                return null;
            }

            DataTable dataTable = new DataTable();
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                StringBuilder stringBuilder = new StringBuilder(1000);
                stringBuilder.Append("select c.ListingID");
                stringBuilder.Append(", c.AppearanceDate as PublishingStartDate");
                stringBuilder.Append(", c.CreationDate as Created");
                stringBuilder.Append(", c.Description as Comments");
                stringBuilder.Append(", c.ExpirationDate as PublishingExpirationDate");
                stringBuilder.Append(", g.GroupTitle as [Group]");
                stringBuilder.Append(", c.LargeIconUrl as Image");
                stringBuilder.Append(", c.SmallIconUrl as Icon");
                stringBuilder.Append(", c.LastModified as Modified");
                stringBuilder.Append(", c.LastModifiedBy as Editor");
                stringBuilder.Append(", c.[Order]");
                stringBuilder.Append(", c.PersonSID");
                stringBuilder.Append(", c.Status as ApprovalStatus");
                stringBuilder.Append(", c.Title");
                stringBuilder.Append(", c.Url");
                stringBuilder.Append(", c.HtmlBlob");
                stringBuilder.Append(", c.CreatedBy as Author");
                stringBuilder.Append(
                    " from CatJoint c left join CatGroup g on c.CatID = g.CatID and c.GroupId = g.GroupID");
                stringBuilder.Append(" where c.CatID = @WebID");
                stringBuilder.Append(" and (");
                char[] chrArray = new char[] { ',' };
                string[] strArrays = sIDList.Split(chrArray, StringSplitOptions.RemoveEmptyEntries);
                bool flag = true;
                for (int i = 0; i < (int)strArrays.Length; i++)
                {
                    if (!flag)
                    {
                        stringBuilder.Append(" or ");
                    }

                    stringBuilder.Append("c.ListingID = @ListingID");
                    stringBuilder.Append(i);
                    flag = false;
                }

                stringBuilder.Append(")");
                using (SqlCommand sqlCommand = this.GetSqlCommand(stringBuilder.ToString(), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    for (int j = 0; j < (int)strArrays.Length; j++)
                    {
                        sqlCommand.Parameters.Add(new SqlParameter(string.Concat("ListingID", j), strArrays[j]));
                    }

                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringBuilder stringBuilder1 = new StringBuilder(1000);
            this.WritePortalListingData(dataTable, new XmlTextWriter(new StringWriter(stringBuilder1)));
            return stringBuilder1.ToString();
        }

        private byte[] GetRbsBlobReference(byte[] rbsBlobId)
        {
            long num;
            int num1;
            byte[] buffer = null;
            if (rbsBlobId != null && (int)rbsBlobId.Length == 14)
            {
                this.DecodeRbsBlobReference(rbsBlobId, out num, out num1);
                this.EncodeRbsBlobReference(num, num1);
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    using (SqlCommand sqlCommand = this.GetSqlCommand(
                               "SELECT store_blob_id FROM mssqlrbs_resources.rbs_internal_blobs WHERE blob_number = @blob_number AND collection_id = @collection_id",
                               sqlConnection))
                    {
                        SqlParameter sqlParameter = sqlCommand.Parameters.Add("@blob_number", SqlDbType.BigInt);
                        sqlParameter.Value = num;
                        sqlParameter = sqlCommand.Parameters.Add("@collection_id", SqlDbType.Int);
                        sqlParameter.Value = num1;
                        using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                        {
                            if (sqlDataReader.Read())
                            {
                                buffer = sqlDataReader.GetSqlBytes(0).Buffer;
                            }
                        }
                    }
                }
            }

            if (buffer != null)
            {
                return buffer;
            }

            return new byte[0];
        }

        public string GetReferencedTaxonomyFullXml(string sReferencedTaxonomyXml)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        private string GetResourceName(string name)
        {
            if (!base.SharePointVersion.IsSharePoint2013OrLater ||
                !name.StartsWith("$Resources", StringComparison.OrdinalIgnoreCase))
            {
                return name;
            }

            ResourceLocalizerArgsBuilder resourceLocalizerArgsBuilder = new ResourceLocalizerArgsBuilder()
            {
                LCID = (uint)this.Locale,
                Resource = name
            };
            return UtilityLauncher.LaunchResourceLocalizer(resourceLocalizerArgsBuilder);
        }

        public string GetRoleAssignments(string sListId, int iItemId)
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("RoleAssignments");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    this.GetRoleAssignmentsForSharePoint2(sListId, iItemId, sqlConnection, xmlTextWriter);
                }
                else
                {
                    this.GetRoleAssignmentsForSharePoint3(sListId, iItemId, sqlConnection, xmlTextWriter);
                }
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private void GetRoleAssignmentsForSharePoint2(string sListId, int iItemId, SqlConnection conn,
            XmlTextWriter xmlWriter)
        {
            Dictionary<int, int> nums;
            bool roleDictionary = this.GetRoleDictionary(sListId, conn, out nums);
            if (nums.Keys.Count > 0)
            {
                string str = "(";
                foreach (int key in nums.Keys)
                {
                    if (str.Length > 1)
                    {
                        str = string.Concat(str, ",");
                    }

                    str = string.Concat(str, key.ToString());
                }

                str = string.Concat(str, ")");
                string.Concat("Select Id, Title from WebGroups where Id in ", str);
                string str1 = string.Concat(
                    "Declare @MemberTable Table(RoleName nvarchar(256), PrincipalName nvarchar(256))\nInsert Into @MemberTable Select tp_Login as PrincipalName, tp_login as RoleName from UserInfo where tp_SiteId=@SiteID and tp_Id in ",
                    str, "\n");
                if (!this.IsPortal || roleDictionary)
                {
                    str1 = string.Concat(str1,
                        "Insert Into @MemberTable Select Title as PrincipalName, Title as RoleName from SiteGroups where SiteId=@SiteID and Id in ",
                        str, "\n");
                    str1 = string.Concat(str1,
                        "Insert Into @MemberTable Select G.Title as RoleName, U.tp_Login as PrincipalName from UserInfo U join (WebGroupMembership M join WebGroups G on M.GroupId=G.ID and M.WebId=G.WebId join (Webs w join Webs w2 on w.FirstUniqueAncestorWebId=w2.Id) on w2.Id=G.WebId) on M.MemberId=U.tp_Id and U.tp_SiteId=w2.SiteId where W.Id=@WebId and w.SiteId=@SiteID and G.ID in ",
                        str, "\n");
                    string str2 = str1;
                    string[] strArrays = new string[]
                    {
                        str2,
                        "Insert Into @MemberTable Select G.Title as RoleName, SG.Title as PrincipalName from SiteGroups SG join (WebGroupMembership M join WebGroups G on M.GroupId=G.ID and M.WebId=G.WebId join (Webs w join Webs w2 on w.FirstUniqueAncestorWebId=w2.Id) on w2.Id=G.WebId) on M.MemberId=SG.ID and SG.SiteId=w2.SiteId where w.SiteId=@SiteID and w.Id=@WebId and G.ID in ",
                        str, " and SG.ID not in ", str, "\n"
                    };
                    str1 = string.Concat(strArrays);
                }
                else
                {
                    string str3 = str1;
                    string[] strArrays1 = new string[]
                    {
                        str3,
                        "Declare @RoleWebId uniqueidentifier\nDeclare @SecurityProviderIsRoot bit\nDeclare @SecurityProvider uniqueidentifier\nSelect @SecurityProvider=SecurityProvider from Webs where Id=@WebId\nif @SecurityProvider is not null\n    Set @SecurityProviderIsRoot = '1'\nelse\n    Set @SecurityProviderIsRoot = '0'\nif @SecurityProviderIsRoot='1'\n    Select @RoleWebId=Id from Webs where SiteId=@SiteId and ParentWebId is null\nelse\n    Select @RoleWebId=FirstUniqueAncestorWebId from Webs where SiteId=@SiteId and Id=@WebId\nInsert Into @MemberTable Select G.Title as RoleName, U.tp_Login as PrincipalName from UserInfo U join (WebGroupMembership M join WebGroups G on M.GroupId=G.ID and M.WebId=G.WebId join Webs w on w.Id=G.WebId) on M.MemberId=U.tp_Id and U.tp_SiteId=w.SiteId where w.SiteId=@SiteID and w.Id=@RoleWebId and G.ID in ",
                        str,
                        "\nInsert Into @MemberTable Select G.Title as RoleName, SG.Title as PrincipalName from SiteGroups SG join (WebGroupMembership M join WebGroups G on M.GroupId=G.ID and M.WebId=G.WebId join Webs w on w.Id=G.WebId) on M.MemberId=SG.ID and SG.SiteId=w.SiteId where w.SiteId=@SiteID and w.Id=@RoleWebId and G.ID in ",
                        str, "\n"
                    };
                    str1 = string.Concat(strArrays1);
                }

                str1 = string.Concat(str1, "Select * from @MemberTable");
                DataTable dataTable = new DataTable("Members");
                using (SqlCommand sqlCommand = this.GetSqlCommand(str1, conn))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    xmlWriter.WriteStartElement("RoleAssignment");
                    xmlWriter.WriteAttributeString("RoleName", this.GetResourceName(row["RoleName"].ToString()));
                    xmlWriter.WriteAttributeString("PrincipalName", row["PrincipalName"].ToString());
                    xmlWriter.WriteEndElement();
                }
            }
        }

        private void GetRoleAssignmentsForSharePoint3(string sListId, int iItemId, SqlConnection conn,
            XmlTextWriter xmlWriter)
        {
            string str;
            DataTable dataTable = new DataTable("RoleAssignments");
            Dictionary<int, string> nums = new Dictionary<int, string>();
            if (sListId == null)
            {
                str =
                    "Select RA.*, R.Title from  ((RoleAssignment RA join Webs W on RA.ScopeId=W.ScopeId) join Perms P on W.ScopeId=P.ScopeId) join Roles R on R.RoleId=RA.RoleId and R.WebId=P.RoleDefWebId where W.SiteId=@SiteId and W.Id=@WebId";
            }
            else
            {
                str = (iItemId < 0
                    ? "Select RA.*, R.Title from  ((RoleAssignment RA join Lists L on RA.ScopeId=L.tp_ScopeId ) join Perms P on L.tp_ScopeId=P.ScopeId) join Roles R on R.RoleId=RA.RoleId and R.WebId=P.RoleDefWebId where L.tp_WebId=@WebId and L.tp_ID=@ListId"
                    : "Select RA.*, R.Title from  ((RoleAssignment RA join Docs D on RA.ScopeId=D.ScopeId) join Perms P on D.ScopeId=P.ScopeId) join Roles R on R.RoleId=RA.RoleId and R.WebId=P.RoleDefWebId where D.SiteId=@SiteId and D.WebId=@WebId and D.ListId=@ListId and D.DoclibRowId=@ItemId");
            }

            using (SqlCommand sqlCommand = this.GetSqlCommand(str, conn))
            {
                sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                if (sListId != null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("ListId", sListId));
                }

                if (iItemId >= 0)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("ItemId", (object)iItemId));
                }

                using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                {
                    sqlDataAdapter.Fill(dataTable);
                }
            }

            foreach (DataRow row in dataTable.Rows)
            {
                int item = (int)row["PrincipalId"];
                if (nums.ContainsKey(item))
                {
                    continue;
                }

                nums.Add(item, "");
            }

            if (nums.Keys.Count > 0)
            {
                string str1 = "(";
                foreach (int key in nums.Keys)
                {
                    if (str1.Length > 1)
                    {
                        str1 = string.Concat(str1, ",");
                    }

                    str1 = string.Concat(str1, key.ToString());
                }

                str1 = string.Concat(str1, ")");
                string[] strArrays = new string[]
                {
                    "Declare @MemberTable Table(MemberName nvarchar(256), ID int)\nInsert Into @MemberTable Select tp_Login as MemberName, tp_Id as ID from UserInfo where tp_SiteId=@SiteID and tp_Id in ",
                    str1,
                    "\nInsert Into @MemberTable Select G.Title as MemberName, G.ID as ID from Groups G where G.SiteId=@SiteID and G.ID in ",
                    str1, "\nSelect * from @MemberTable"
                };
                string str2 = string.Concat(strArrays);
                DataTable dataTable1 = new DataTable("RoleNames");
                using (SqlCommand sqlCommand1 = this.GetSqlCommand(str2, conn))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    sqlCommand1.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable1);
                    }
                }

                foreach (DataRow dataRow in dataTable1.Rows)
                {
                    nums[(int)dataRow["ID"]] = dataRow["MemberName"].ToString();
                }
            }

            foreach (DataRow row1 in dataTable.Rows)
            {
                xmlWriter.WriteStartElement("RoleAssignment");
                xmlWriter.WriteAttributeString("RoleName", this.GetResourceName(row1["Title"].ToString()));
                xmlWriter.WriteAttributeString("PrincipalName", nums[(int)row1["PrincipalId"]]);
                xmlWriter.WriteEndElement();
            }
        }

        private bool GetRoleDictionary(string sListId, SqlConnection conn, out Dictionary<int, int> dictionary)
        {
            string str;
            bool item = false;
            DataTable dataTable = new DataTable("Roles");
            if (string.IsNullOrEmpty(sListId))
            {
                str = (!this.IsPortal
                    ? "Select FullUrl, ACL from webs where SiteId=@SiteID and Id=@WebID"
                    : "Declare @RoleWebId uniqueidentifier\n    Select @RoleWebId=FirstUniqueAncestorWebId from Webs where SiteId=@SiteId and Id=@WebId\nDeclare @IsPortalPerms bit\nDeclare @PermCount int\nDeclare @PermId int\nDeclare @PermIDTable Table(CatId uniqueidentifier, PermId int)\nInsert into @PermIDTable\nSelect CatId, PermId from CatPath where CatId=@RoleWebId\nSelect @PermCount= count(*) from @PermIDTable\nif(@PermCount='1') Set @IsPortalPerms='1'\nelse Set @IsPortalPerms = '0'\nif(@IsPortalPerms='1')\nBegin\n\tSelect @PermId=PermID from @PermIDTable\n\tSelect UserGroupId, PortalMask from PortalPerm where PermId=@PermId\nEnd\nelse\n\tSelect FullUrl, ACL from webs where SiteId=@SiteID and Id=@WebID");
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, conn))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                        item = dataTable.Columns["ACL"] != null;
                    }
                }
            }
            else
            {
                using (SqlCommand sqlCommand1 =
                       this.GetSqlCommand("Select tp_Acl as ACL from lists where tp_WebId=@WebID and tp_ID=@ListID",
                           conn))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    sqlCommand1.Parameters.Add(new SqlParameter("ListID", sListId));
                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable);
                        item = true;
                    }
                }
            }

            if (!item)
            {
                dictionary = new Dictionary<int, int>();
                foreach (DataRow row in dataTable.Rows)
                {
                    dictionary.Add((int)row["UserGroupId"], (int)row["PortalMask"]);
                }
            }
            else if (dataTable.Rows.Count != 1 || dataTable.Rows[0]["ACL"] is DBNull)
            {
                dictionary = new Dictionary<int, int>();
            }
            else
            {
                byte[] numArray = (byte[])dataTable.Rows[0]["ACL"];
                dictionary = this.ParseACLBytes(numArray);
            }

            return item;
        }

        public string GetRoles(string sListId)
        {
            Dictionary<int, int> nums;
            string str;
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                xmlTextWriter.WriteStartElement("Roles");
                xmlTextWriter.WriteAttributeString("SharePointVersion", base.SharePointVersion.ToString());
                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    bool roleDictionary = this.GetRoleDictionary(sListId, sqlConnection, out nums);
                    xmlTextWriter.WriteAttributeString("IsPortal", (!roleDictionary).ToString());
                    if (nums.Keys.Count > 0)
                    {
                        string str1 = "(";
                        foreach (int key in nums.Keys)
                        {
                            if (str1.Length > 1)
                            {
                                str1 = string.Concat(str1, ",");
                            }

                            str1 = string.Concat(str1, key.ToString());
                        }

                        str1 = string.Concat(str1, ")");
                        DataTable dataTable = new DataTable("Users");
                        DataTable dataTable1 = new DataTable("CrossSiteGroups");
                        DataTable dataTable2 = new DataTable("Groups");
                        using (SqlCommand sqlCommand = this.GetSqlCommand(
                                   string.Concat(
                                       "Select tp_Login as Login, tp_Title as Name, tp_Id as ID from UserInfo where tp_SiteId=@SiteID and tp_Id in ",
                                       str1), sqlConnection))
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                            using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                            {
                                sqlDataAdapter.Fill(dataTable);
                            }
                        }

                        using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                                   string.Concat(
                                       "Select Title as Name, ID, Description from SiteGroups where SiteId=@SiteID and Id in ",
                                       str1), sqlConnection))
                        {
                            sqlCommand1.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                            using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                            {
                                sqlDataAdapter1.Fill(dataTable1);
                            }
                        }

                        str = (!this.IsPortal || roleDictionary
                            ? string.Concat(
                                "Select G.Title as Name, G.ID as ID, G.Description as Description, G.Type as Type from WebGroups G join (Webs w join Webs w2 on w.FirstUniqueAncestorWebId=w2.Id) on w2.Id=G.WebId where W.Id=@WebID and G.ID in ",
                                str1)
                            : string.Concat(
                                "Declare @RoleWebId uniqueidentifier\nDeclare @SecurityProviderIsRoot bit\nDeclare @SecurityProvider uniqueidentifier\nSelect @SecurityProvider=SecurityProvider from Webs where Id=@WebId\nif @SecurityProvider is not null\n    Set @SecurityProviderIsRoot = '1'\nelse\n    Set @SecurityProviderIsRoot = '0'\nif @SecurityProviderIsRoot='1'\n    Select @RoleWebId=Id from Webs where SiteId=@SiteId and ParentWebId is null\nelse\n    Select @RoleWebId=FirstUniqueAncestorWebId from Webs where SiteId=@SiteId and Id=@WebId\nSelect G.Title as Name, G.ID as ID, G.Description as Description, G.Type as Type from WebGroups G join Webs w on w.Id=G.WebId where w.SiteId=@SiteId and w.Id=@RoleWebId and G.ID in ",
                                str1));
                        using (SqlCommand sqlCommand2 = this.GetSqlCommand(str, sqlConnection))
                        {
                            sqlCommand2.Parameters.Add(new SqlParameter("WebID", this.WebID));
                            sqlCommand2.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                            using (SqlDataAdapter sqlDataAdapter2 = new SqlDataAdapter(sqlCommand2))
                            {
                                sqlDataAdapter2.Fill(dataTable2);
                            }
                        }

                        foreach (DataRow row in dataTable.Rows)
                        {
                            xmlTextWriter.WriteStartElement("Role");
                            xmlTextWriter.WriteAttributeString("Name", row["Login"].ToString());
                            xmlTextWriter.WriteAttributeString("Description",
                                this.GetResourceName(row["Name"].ToString()));
                            int item = nums[(int)row["ID"]];
                            xmlTextWriter.WriteAttributeString("PermMask", item.ToString());
                            xmlTextWriter.WriteAttributeString("IsUserRole", "True");
                            xmlTextWriter.WriteAttributeString("Hidden", "false");
                            xmlTextWriter.WriteEndElement();
                        }

                        foreach (DataRow dataRow in dataTable1.Rows)
                        {
                            xmlTextWriter.WriteStartElement("Role");
                            xmlTextWriter.WriteAttributeString("Name",
                                this.GetResourceName(dataRow["Name"].ToString()));
                            xmlTextWriter.WriteAttributeString("Description",
                                this.GetResourceName(dataRow["Description"].ToString()));
                            int num = nums[(int)dataRow["ID"]];
                            xmlTextWriter.WriteAttributeString("PermMask", num.ToString());
                            xmlTextWriter.WriteAttributeString("IsUserRole", "False");
                            xmlTextWriter.WriteAttributeString("Hidden", "false");
                            xmlTextWriter.WriteEndElement();
                        }

                        foreach (DataRow row1 in dataTable2.Rows)
                        {
                            xmlTextWriter.WriteStartElement("Role");
                            xmlTextWriter.WriteAttributeString("Name", this.GetResourceName(row1["Name"].ToString()));
                            xmlTextWriter.WriteAttributeString("Description",
                                this.GetResourceName(row1["Description"].ToString()));
                            int item1 = nums[(int)row1["ID"]];
                            xmlTextWriter.WriteAttributeString("PermMask", item1.ToString());
                            xmlTextWriter.WriteAttributeString("IsUserRole", "False");
                            xmlTextWriter.WriteAttributeString("GroupId", row1["ID"].ToString());
                            bool flag = (byte)row1["Type"] == 1;
                            xmlTextWriter.WriteAttributeString("Hidden", flag.ToString());
                            xmlTextWriter.WriteEndElement();
                        }
                    }
                }
                else
                {
                    DataTable dataTable3 = new DataTable("Roles");
                    using (SqlCommand sqlCommand3 = this.GetSqlCommand(
                               "Select * from Roles where WebId=(Select RoleDefWebId from Perms where ScopeId=(Select ScopeId from Webs where Id=@WebId))",
                               sqlConnection))
                    {
                        sqlCommand3.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                        sqlCommand3.Parameters.Add(new SqlParameter("WebID", this.WebID));
                        using (SqlDataAdapter sqlDataAdapter3 = new SqlDataAdapter(sqlCommand3))
                        {
                            sqlDataAdapter3.Fill(dataTable3);
                        }
                    }

                    foreach (DataRow dataRow1 in dataTable3.Rows)
                    {
                        xmlTextWriter.WriteStartElement("Role");
                        xmlTextWriter.WriteAttributeString("RoleId", dataRow1["RoleId"].ToString());
                        xmlTextWriter.WriteAttributeString("Name", this.GetResourceName(dataRow1["Title"].ToString()));
                        xmlTextWriter.WriteAttributeString("Description",
                            this.GetResourceName(dataRow1["Description"].ToString()));
                        xmlTextWriter.WriteAttributeString("PermMask", dataRow1["PermMask"].ToString());
                        xmlTextWriter.WriteAttributeString("Hidden", dataRow1["Hidden"].ToString());
                        xmlTextWriter.WriteAttributeString("RoleOrder", dataRow1["RoleOrder"].ToString());
                        xmlTextWriter.WriteAttributeString("Type", dataRow1["Type"].ToString());
                        xmlTextWriter.WriteEndElement();
                    }
                }

                xmlTextWriter.WriteEndElement();
            }

            return stringWriter.ToString();
        }

        public string GetSecureStorageApplications(string options)
        {
            throw new NotImplementedException();
        }

        public override string GetServerVersion()
        {
            if (this.m_sqlServerVersion == null)
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    this.m_sqlServerVersion = sqlConnection.ServerVersion;
                }
            }

            return this.m_sqlServerVersion;
        }

        public string GetSharePointVersion()
        {
            string str = null;
            DataTable dataTable = new DataTable("Version");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                try
                {
                    sqlConnection.Open();
                    SqlCommand sqlCommand = this.GetSqlCommand(
                        "DECLARE @VersionsTable AS INTEGER SELECT @VersionsTable = col_length('Versions', 'Version') IF (@VersionsTable > 0) SELECT Version FROM Versions WHERE VersionId = '00000000-0000-0000-0000-000000000000' ORDER BY Id DESC ELSE SELECT Version FROM SystemVersion",
                        sqlConnection);
                    (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
                    if (dataTable.Rows.Count < 0 || dataTable.Rows[0]["Version"] is DBNull)
                    {
                        throw new Exception(
                            "SharePoint version does not exist in database, this may indicate database corruption.");
                    }

                    str = dataTable.Rows[0]["Version"].ToString();
                }
                catch (Exception exception1)
                {
                    Exception exception = exception1;
                    throw new Exception(
                        string.Concat("Error trying to retrieve the SharePoint version from the database. Message: ",
                            exception.Message), exception);
                }
            }

            return str;
        }

        public string GetSite(bool bFetchFullXml)
        {
            return this.GetSite(null, bFetchFullXml);
        }

        private string GetSite(string sUrl, bool bFetchFullXml)
        {
            DataTable dataTable = new DataTable("SiteCollections");
            string[] strArrays = new string[]
            {
                "Id", "SiteId", "FullUrl", "FirstUniqueAncestorWebId", "Title", "Description", "MetaInfo", "DefTheme",
                "WebTemplate", "Language", "Locale", "TimeZone", "Time24", "CalendarType", "AdjustHijriDays",
                "ProvisionConfig", "Flags", "Collation", "SecurityProvider", "TimeCreated"
            };
            string[] strArrays1 = strArrays;
            string[] strArrays2 = new string[]
            {
                "Id", "SiteId", "FullUrl", "FirstUniqueAncestorWebId", "Title", "Description", "MetaInfo", "DefTheme",
                "WebTemplate", "Language", "Locale", "TimeZone", "Time24", "CalendarType", "AdjustHijriDays",
                "ProvisionConfig", "Flags", "Collation", "NavParentWebId", "MasterUrl", "CustomMasterUrl",
                "AltCalendarType", "CalendarViewOptions", "WorkDays", "WorkDayStartHour", "WorkDayEndHour",
                "TimeCreated", "SiteLogoUrl", "SiteLogoDescription"
            };
            string[] strArrays3 = strArrays2;
            StringBuilder stringBuilder = new StringBuilder(1000);
            stringBuilder.Append("select sites.id as SiteID, sites.diskused");
            if (bFetchFullXml)
            {
                stringBuilder.Append(string.Concat(", ", this.GetFieldSelectForWebLastItemModifiedDate("webs")));
                stringBuilder.AppendLine(
                    ", (select COUNT(*) from Webs w2 where w2.SiteId = sites.Id) as TotalWebsInSiteCollection");
                stringBuilder.AppendLine(
                    ", (select u.tp_Login from UserInfo u where u.tp_SiteID = sites.Id and u.tp_ID = webs.Author) as CreatedBy");
            }

            if (!base.SharePointVersion.IsSharePoint2003)
            {
                string[] strArrays4 = strArrays3;
                for (int i = 0; i < (int)strArrays4.Length; i++)
                {
                    string str = strArrays4[i];
                    stringBuilder.Append(string.Concat(", webs.", str));
                }

                stringBuilder.Append(string.Concat(
                    ", (Select RoleDefWebId from Perms p where webs.ScopeId=p.ScopeId) as RoleDefWebId, (Select RequestAccessEmail from Webs w2 where webs.FirstUniqueAncestorWebId=w2.Id) as UniqueRequestAccessEmail, ",
                    (base.SharePointVersion.IsSharePoint2007OrLater ? "sites.HostHeader, " : ""),
                    "(Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.OwnerId) as Owner, (Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.SecondaryContactId) as SecondaryOwner from webs, sites where webs.parentwebid is null and webs.siteid = @SiteID and webs.siteid = sites.id order by webs.FullUrl"));
            }
            else
            {
                string[] strArrays5 = strArrays1;
                for (int j = 0; j < (int)strArrays5.Length; j++)
                {
                    string str1 = strArrays5[j];
                    stringBuilder.Append(string.Concat(", webs.", str1));
                }

                if (this.IsPortal)
                {
                    stringBuilder.Append(
                        ", (Select InheritSecurity from CatDef where CatId=webs.Id) as InheritSecurity");
                }

                stringBuilder.Append(string.Concat(
                    ", webs.FirstUniqueAncestorWebId as RoleDefWebId, (Select RequestAccessEmail from Webs w2 where webs.FirstUniqueAncestorWebId=w2.Id) as UniqueRequestAccessEmail, ",
                    (base.SharePointVersion.IsSharePoint2007OrLater ? "sites.HostHeader, " : ""),
                    "(Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.OwnerId) as Owner, (Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.SecondaryContactId) as SecondaryOwner from webs, sites where webs.parentwebid is null and webs.siteid = @SiteID and webs.siteid = sites.id order by webs.FullUrl"));
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(stringBuilder.ToString(), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count < 1)
                {
                    throw new Exception(string.Concat("The site with ID '", this.SiteID, "' does not exist."));
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            DataRow item = dataTable.Rows[0];
            xmlTextWriter.WriteStartElement("Site");
            xmlTextWriter.WriteAttributeString("SiteID", item["SiteID"].ToString());
            xmlTextWriter.WriteAttributeString("DiskUsed", item["DiskUsed"].ToString());
            xmlTextWriter.WriteAttributeString("Url",
                (sUrl != null ? sUrl : string.Concat("/", item["FullUrl"].ToString())));
            if (!base.SharePointVersion.IsSharePoint2007OrLater)
            {
                xmlTextWriter.WriteAttributeString("HostHeader", "");
            }
            else
            {
                xmlTextWriter.WriteAttributeString("HostHeader",
                    (item["HostHeader"] is DBNull ? "" : item["HostHeader"].ToString()));
            }

            xmlTextWriter.WriteAttributeString("Owner", item["Owner"].ToString());
            xmlTextWriter.WriteAttributeString("SecondaryOwner", item["SecondaryOwner"].ToString());
            if (bFetchFullXml)
            {
                xmlTextWriter.WriteAttributeString("TotalWebsInSiteCollection",
                    item["TotalWebsInSiteCollection"].ToString());
                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    xmlTextWriter.WriteAttributeString("SiteLogoUrl",
                        (string.IsNullOrEmpty(item["SiteLogoUrl"].ToString())
                            ? string.Empty
                            : item["SiteLogoUrl"].ToString()));
                    xmlTextWriter.WriteAttributeString("SiteLogoDescription",
                        (string.IsNullOrEmpty(item["SiteLogoDescription"].ToString())
                            ? string.Empty
                            : item["SiteLogoDescription"].ToString()));
                }
            }

            this.GetWebXML(item, xmlTextWriter, bFetchFullXml, item["SiteID"].ToString());
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public void GetSiteAndWebIDsByUrl(string sUrl)
        {
            string webByUrl = this.GetWebByUrl(sUrl);
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(webByUrl);
            this.m_sSiteID = xmlDocument.FirstChild.Attributes["SiteID"].Value;
            this.m_sWebID = xmlDocument.FirstChild.Attributes["WebID"].Value;
            XmlAttribute itemOf = xmlDocument.FirstChild.Attributes["Locale"];
            if (itemOf == null || string.IsNullOrEmpty(itemOf.Value))
            {
                this._locale = new int?(CultureInfo.CurrentUICulture.LCID);
                return;
            }

            this._locale = new int?(int.Parse(itemOf.Value));
        }

        public string GetSiteCollections()
        {
            DataTable dataTable = new DataTable("SiteCollections");
            string[] strArrays = new string[]
            {
                "Id", "SiteId", "FullUrl", "FirstUniqueAncestorWebId", "Title", "Description", "MetaInfo", "DefTheme",
                "WebTemplate", "Language", "Locale", "TimeZone", "Time24", "CalendarType", "AdjustHijriDays",
                "ProvisionConfig", "Flags", "Collation"
            };
            string[] strArrays1 = strArrays;
            string[] strArrays2 = new string[]
            {
                "Id", "SiteId", "FullUrl", "FirstUniqueAncestorWebId", "Title", "Description", "MetaInfo", "DefTheme",
                "WebTemplate", "Language", "Locale", "TimeZone", "Time24", "CalendarType", "AdjustHijriDays",
                "ProvisionConfig", "Flags", "Collation", "NavParentWebId", "MasterUrl", "CustomMasterUrl",
                "AltCalendarType", "CalendarViewOptions", "WorkDays", "WorkDayStartHour", "WorkDayEndHour"
            };
            string[] strArrays3 = strArrays2;
            string str = "select sites.id as SiteID, sites.diskused";
            if (!base.SharePointVersion.IsSharePoint2003)
            {
                string[] strArrays4 = strArrays3;
                for (int i = 0; i < (int)strArrays4.Length; i++)
                {
                    str = string.Concat(str, ", webs.", strArrays4[i]);
                }

                str = string.Concat(str, ", ",
                    (base.SharePointVersion.IsSharePoint2007OrLater ? "sites.HostHeader, " : ""),
                    "(Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.OwnerId) as Owner, (Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.SecondaryContactId) as SecondaryOwner from webs, sites where webs.parentwebid is null and webs.siteid = sites.id order by webs.FullUrl");
            }
            else
            {
                string[] strArrays5 = strArrays1;
                for (int j = 0; j < (int)strArrays5.Length; j++)
                {
                    str = string.Concat(str, ", webs.", strArrays5[j]);
                }

                str = string.Concat(str, ", ",
                    (base.SharePointVersion.IsSharePoint2007OrLater ? "sites.HostHeader, " : ""),
                    "(Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.OwnerId) as Owner, (Select tp_Login from UserInfo where tp_SiteId=sites.id and tp_id=sites.SecondaryContactId) as SecondaryOwner from webs, sites where webs.parentwebid is null and webs.siteid = sites.id order by webs.FullUrl");
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("SiteCollections");
            foreach (DataRow row in dataTable.Rows)
            {
                xmlTextWriter.WriteStartElement("Site");
                xmlTextWriter.WriteAttributeString("SiteID", row["SiteID"].ToString());
                xmlTextWriter.WriteAttributeString("DiskUsed", row["DiskUsed"].ToString());
                xmlTextWriter.WriteAttributeString("Url", string.Concat("/", row["FullUrl"].ToString()));
                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    xmlTextWriter.WriteAttributeString("HostHeader", "");
                }
                else
                {
                    xmlTextWriter.WriteAttributeString("HostHeader",
                        (row["HostHeader"] is DBNull ? "" : row["HostHeader"].ToString()));
                }

                xmlTextWriter.WriteAttributeString("Owner", row["Owner"].ToString());
                xmlTextWriter.WriteAttributeString("SecondaryOwner", row["SecondaryOwner"].ToString());
                this.GetWebXML(row, xmlTextWriter, false, row["SiteID"].ToString());
                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetSiteCollectionsOnWebApp(string sWebAppName)
        {
            throw new NotImplementedException();
        }

        internal void GetSiteColumnXML(string sSiteId, string sFullUrl, bool bGetAllAvailableFields,
            XmlWriter xmlWriter)
        {
            xmlWriter.WriteStartElement("Fields");
            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    string str =
                        "Select Scope, ContentTypeId, Definition, IsFromFeature from contenttypes ct where ct.SiteId=@SiteId and ct.class=0 and ";
                    string str1 = null;
                    List<string> strs = new List<string>();
                    if (!bGetAllAvailableFields)
                    {
                        str1 = "ct.Scope=@FullUrl";
                    }
                    else
                    {
                        str1 = "ct.Scope in (";
                        string str2 = "";
                        string[] strArrays = sFullUrl.Split(new char[] { '/' });
                        string str3 = "";
                        string[] strArrays1 = strArrays;
                        for (int i = 0; i < (int)strArrays1.Length; i++)
                        {
                            string str4 = strArrays1[i];
                            if (str3.Length > 0)
                            {
                                str3 = string.Concat(str3, "/");
                            }

                            str3 = string.Concat(str3, str4);
                            if (str2.Length > 0)
                            {
                                str2 = string.Concat(str2, ",");
                            }

                            str2 = string.Concat(str2, "@ParentPath", strs.Count);
                            strs.Add(str3);
                        }

                        str1 = string.Concat(str1, str2, ")");
                    }

                    SqlCommand sqlCommand = this.GetSqlCommand(string.Concat(str, str1), sqlConnection);
                    sqlCommand.Parameters.Add(new SqlParameter("SiteId", sSiteId));
                    if (!bGetAllAvailableFields)
                    {
                        SqlParameterCollection parameters = sqlCommand.Parameters;
                        char[] chrArray = new char[] { '/' };
                        parameters.Add(new SqlParameter("FullUrl", sFullUrl.Trim(chrArray)));
                    }
                    else
                    {
                        int num = 0;
                        foreach (string str5 in strs)
                        {
                            sqlCommand.Parameters.AddWithValue(string.Concat("@ParentPath", num.ToString()), str5);
                            num++;
                        }
                    }

                    DataTable dataTable = new DataTable("SiteColumns");
                    (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
                    foreach (DataRow row in dataTable.Rows)
                    {
                        if (!(bool)row["IsFromFeature"])
                        {
                            XmlNode xmlNode = XmlUtility.StringToXmlNode(row["Definition"].ToString());
                            this.AddListNamesToLookups(xmlNode);
                            xmlWriter.WriteRaw(xmlNode.OuterXml);
                        }
                        else
                        {
                            Guid guid = new Guid((byte[])row["ContentTypeId"]);
                            XmlNode siteColumnNode = this.ContentTypeManager.GetSiteColumnNode(guid);
                            if (siteColumnNode == null)
                            {
                                continue;
                            }

                            xmlWriter.WriteRaw(siteColumnNode.OuterXml);
                        }
                    }
                }
            }

            xmlWriter.WriteEndElement();
        }

        private void GetSiteData(string sSiteId, out string sSiteUrl, out string sQuotaID,
            out string sQuotaStorageLimit, out string sQuotaStorageWarning, out string sRootWebGUID,
            out string sRootSiteGUID, out string sTaxonomyListGUID, out string sAuditFlags, out string sTrimAuditLog,
            out string sAuditLogTrimmingCallout, out string sAuditLogTrimmingRetention,
            out string sAuditLogReportStorageLocation, out string platformVersionString, out string allowRssFeeds)
        {
            int num;
            DataTable dataTable = new DataTable("SiteCollectionUrl");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                string[] strArrays = new string[]
                {
                    "SELECT Webs.FullUrl, Webs.Id, Webs.SiteId, Sites.QuotaTemplateId, Sites.DiskQuota, Sites.DiskWarning",
                    null, null, null, null
                };
                strArrays[1] = (base.SharePointVersion.IsSharePoint2007OrLater ? ", Sites.AuditFlags" : "");
                strArrays[2] = (base.SharePointVersion.IsSharePoint2010OrLater
                    ? ", Sites.BitFlags, Webs.MetaInfo, (Select tp_Id from Lists where Lists.tp_WebId=Webs.Id and Lists.tp_Title='TaxonomyHiddenList') as TaxonomyListGUID"
                    : "");
                strArrays[3] = (base.SharePointVersion.IsSharePoint2013OrLater ? ", Sites.PlatformVersion" : "");
                strArrays[4] =
                    " FROM Webs, Sites WHERE Webs.ParentWebId IS NULL AND Webs.SiteId = @SiteID AND Webs.SiteId = Sites.Id";
                using (SqlCommand sqlCommand = this.GetSqlCommand(string.Concat(strArrays), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count < 1)
                {
                    throw new Exception(string.Concat("The site with ID '", this.SiteID, "' does not exist."));
                }
            }

            sSiteUrl = string.Concat("/", dataTable.Rows[0]["FullUrl"].ToString());
            sQuotaID = dataTable.Rows[0]["QuotaTemplateId"].ToString();
            sQuotaStorageLimit = dataTable.Rows[0]["DiskQuota"].ToString();
            sQuotaStorageWarning = dataTable.Rows[0]["DiskWarning"].ToString();
            sRootWebGUID = dataTable.Rows[0]["Id"].ToString();
            sRootSiteGUID = dataTable.Rows[0]["SiteId"].ToString();
            sTaxonomyListGUID = (base.SharePointVersion.IsSharePoint2010OrLater
                ? dataTable.Rows[0]["TaxonomyListGUID"].ToString()
                : "");
            if (!base.SharePointVersion.IsSharePoint2007OrLater)
            {
                sAuditFlags = null;
            }
            else
            {
                object item = dataTable.Rows[0]["AuditFlags"];
                sAuditFlags = (item == null || DBNull.Value.Equals(item) ? "0" : item.ToString());
            }

            sTrimAuditLog = null;
            allowRssFeeds = null;
            sAuditLogReportStorageLocation = null;
            sAuditLogTrimmingCallout = null;
            sAuditLogTrimmingRetention = null;
            if (base.SharePointVersion.IsSharePoint2010OrLater)
            {
                sTrimAuditLog = "False";
                allowRssFeeds = "False";
                object obj = dataTable.Rows[0]["BitFlags"];
                if (obj != null && !DBNull.Value.Equals(obj) && int.TryParse(obj.ToString(), out num))
                {
                    bool flag = ((long)num & (long)65536) != (long)0;
                    sTrimAuditLog = flag.ToString();
                    bool flag1 = ((long)num & (long)8192) <= (long)0;
                    allowRssFeeds = flag1.ToString();
                }

                if (!DBNull.Value.Equals(dataTable.Rows[0]["MetaInfo"]))
                {
                    string str = Encoding.UTF8.GetString((byte[])dataTable.Rows[0]["MetaInfo"]);
                    sAuditLogReportStorageLocation = "";
                    int length = str.IndexOf("_auditlogreportstoragelocation:SW|");
                    if (length >= 0)
                    {
                        length += "_auditlogreportstoragelocation:SW|".Length;
                        int num1 = str.IndexOf('\n', length);
                        sAuditLogReportStorageLocation = str.Substring(length, num1 - length).Trim();
                    }

                    sAuditLogTrimmingRetention = "0";
                    length = str.IndexOf("_auditlogtrimmingretention:SW|");
                    if (length >= 0)
                    {
                        length += "_auditlogtrimmingretention:SW|".Length;
                        int num2 = str.IndexOf('\n', length);
                        sAuditLogTrimmingRetention = str.Substring(length, num2 - length).Trim();
                    }

                    sAuditLogTrimmingCallout = "";
                    length = str.IndexOf("_auditlogtrimmingcallout:SW|");
                    if (length >= 0)
                    {
                        length += "_auditlogtrimmingcallout:SW|".Length;
                        int num3 = str.IndexOf('\n', length);
                        sAuditLogTrimmingCallout = str.Substring(length, num3 - length).Trim();
                    }
                }
            }

            if (!base.SharePointVersion.IsSharePoint2013OrLater)
            {
                platformVersionString = null;
                return;
            }

            platformVersionString = dataTable.Rows[0]["PlatformVersion"].ToString();
        }

        public string GetSiteQuotaTemplates()
        {
            return "<SiteQuotaTemplates />";
        }

        public byte[] GetSiteSolutionsBinary(string itemId)
        {
            throw new NotImplementedException();
        }

        public string GetSiteUsers()
        {
            DataTable dataTable = new DataTable("Users");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "Select tp_ID as ID, tp_SystemID as SID, tp_SiteAdmin as IsSiteAdmin, tp_DomainGroup as IsDomainGroup, tp_Login as LoginName, tp_Title as Name, tp_Email as Email, tp_Notes as Notes from userinfo where  tp_SiteID = @SiteID and tp_Deleted = 0",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            List<string> strs = new List<string>(new string[] { "SID" });
            xmlTextWriter.WriteStartElement("Users");
            foreach (DataRow row in dataTable.Rows)
            {
                xmlTextWriter.WriteStartElement("User");
                this.WriteDataRowValues(row, xmlTextWriter, null, null, strs, null);
                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private SqlCommand GetSqlCommand(string sCommandString, SqlConnection connection)
        {
            return new SqlCommand(sCommandString, connection)
            {
                CommandTimeout = AdapterConfigurationVariables.SQLQueryTimeoutTime
            };
        }

        public string GetSQLDatabaseList()
        {
            string str;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                DataTable dataTable = new DataTable("Results");
                using (SqlCommand sqlCommand = this.GetSqlCommand("Select Name from SysDatabases", sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
                XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
                xmlTextWriter.WriteStartElement("DatabaseCollection");
                foreach (DataRow row in dataTable.Rows)
                {
                    using (DBAdapter dBAdapter = new DBAdapter(this.Server, row["Name"].ToString(), this.Credentials))
                    {
                        xmlTextWriter.WriteStartElement("Database");
                        dBAdapter.ToXML(xmlTextWriter);
                        xmlTextWriter.WriteEndElement();
                    }
                }

                xmlTextWriter.WriteEndElement();
                str = stringWriter.ToString();
            }

            return str;
        }

        public string GetStoragePointProfileConfiguration(string sSharePointPath)
        {
            throw new NotSupportedException("This method is not supported on DB connections");
        }

        public string GetSubWebs()
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            this.GetSubWebsXML(new XmlTextWriter(stringWriter));
            return stringWriter.ToString();
        }

        private void GetSubWebsXML(XmlWriter xmlWriter)
        {
            DataTable dataTable = new DataTable("Webs");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string str = "select * from webs where ParentWebID = @WebID";
                if (this.IsPortal)
                {
                    str = "Declare @Cnt as Int\n";
                    str = string.Concat(str,
                        "select @Cnt = count(*) from catdef where webUrl = (select '*' + FullUrl from webs where ID = @WebID)\n");
                    str = string.Concat(str, "if (@Cnt = 1)\n");
                    str = string.Concat(str,
                        "  select w.* from webs w, catdef c where c.ParentID = (select c.CatID from webs w, catdef c where w.id = @WebID and c.weburl = '*' + w.fullurl) and c.weburl = '*' + w.fullurl order by w.title\n");
                    str = string.Concat(str, "else\n");
                    str = string.Concat(str, "  select * from webs where ParentWebID = @WebID");
                }

                SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
            }

            SortedRowCollection sortedRowCollections = new SortedRowCollection(dataTable.Rows, "Title");
            xmlWriter.WriteStartElement("Webs");
            foreach (DataRow sortedRowCollection in sortedRowCollections)
            {
                xmlWriter.WriteStartElement("Web");
                this.GetWebXML(sortedRowCollection, xmlWriter, false, this.SiteID);
                xmlWriter.WriteEndElement();
            }

            xmlWriter.WriteEndElement();
        }

        public string GetSystemInfo()
        {
            return (new Metalogix.SharePoint.Adapters.SystemInfo()).ToXmlString();
        }

        public string GetTermCollectionFromTerm(string sTermStoreId, string sTermGroupId, string sTermSetId,
            string sTermId)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermCollectionFromTermSet(string sTermStoreId, string sTermGroupId, string sTermSetId)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermGroups(string sTermStoreId)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermSetCollection(string sTermStoreId, string sTermGroupId)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermSets(string sTermGroupId)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermsFromTermSet(string sTermSetId, bool bRecursive)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermsFromTermSetItem(string sTermSetItemId)
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        public string GetTermStores()
        {
            throw new NotImplementedException("This method has not been implemented on this adapter type.");
        }

        private static string GetThemeUniqueNameFromFileName(string sFileName)
        {
            string str = string.Concat("_catalogs/theme/", sFileName);
            uint hashCode = (uint)str.ToUpperInvariant().Replace("THEMABLE/", string.Empty).GetHashCode();
            return hashCode.ToString("X", CultureInfo.InvariantCulture);
        }

        private Dictionary<string, string> GetThemeUniqueToRealNameMap()
        {
            if (base.SharePointVersion.IsSharePoint2007OrEarlier)
            {
                return new Dictionary<string, string>(0);
            }

            DataTable dataTable = new DataTable("Themes");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand =
                    this.GetSqlCommand(
                        "select d.LeafName from Webs w, AllDocs d where w.Id = @WebID and d.SiteId = w.SiteId and d.DirName = '_catalogs/theme' and d.Type = 0",
                        sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
            }

            Dictionary<string, string> strs = new Dictionary<string, string>(dataTable.Rows.Count);
            foreach (DataRow row in dataTable.Rows)
            {
                object item = row["LeafName"];
                if (item is DBNull)
                {
                    continue;
                }

                string str = item.ToString();
                string themeUniqueNameFromFileName = DBAdapter.GetThemeUniqueNameFromFileName(str);
                string fileNameFromPath = Metalogix.SharePoint.Adapters.Utils.GetFileNameFromPath(str, false);
                if (strs.ContainsKey(themeUniqueNameFromFileName))
                {
                    continue;
                }

                strs.Add(themeUniqueNameFromFileName, fileNameFromPath);
            }

            return strs;
        }

        public int GetTimeZoneID()
        {
            DataTable dataTable = new DataTable("DateTime");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand =
                       this.GetSqlCommand("select TimeZone from webs where ID = @WebID", sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }

                    if (dataTable.Rows.Count != 1)
                    {
                        throw new Exception("Could not connect to SQL server");
                    }
                }
            }

            return Convert.ToInt32(dataTable.Rows[0]["TimeZone"]);
        }

        private string GetUpdatedOperationReportingResultObject(string objectXml, OperationReportingResult opResult)
        {
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            operationReporting.LogObjectXml(objectXml);
            if (opResult.ErrorOccured)
            {
                operationReporting.LogWarning("Error:", opResult.GetAllErrorsAsString);
            }

            operationReporting.End();
            return operationReporting.ResultXml;
        }

        // Metalogix.SharePoint.Adapters.DB.DBAdapter
        private byte[] GetUserContentTypeID(string sSiteID, SqlConnection connection, string ContentTypeName,
            string sUserInfoListID, string sCurrentUserName)
        {
            byte[] result;
            try
            {
                SqlCommand sqlCommand = null;
                try
                {
                    sqlCommand = new SqlCommand();
                    sqlCommand.Connection = connection;
                    sqlCommand.CommandTimeout = AdapterConfigurationVariables.SQLQueryTimeoutTime;
                    if (ContentTypeName == "DomainGroup")
                    {
                        sqlCommand.CommandText = string.Concat(new string[]
                        {
                            "select ContentTypeID from ContentTypes where SiteId = '",
                            sSiteID,
                            "' and ResourceDir = '",
                            ContentTypeName,
                            "'"
                        });
                    }
                    else if (base.SharePointVersion.IsSharePoint2010OrLater)
                    {
                        sqlCommand.CommandText = string.Concat(new string[]
                        {
                            "select tp_ContentTypeId from AllUserData where nvarchar3 = '",
                            sCurrentUserName,
                            "' and tp_ListID = '",
                            sUserInfoListID,
                            "'"
                        });
                    }

                    if (!string.IsNullOrEmpty(sqlCommand.CommandText))
                    {
                        bool flag = false;
                        if (connection.State != ConnectionState.Open)
                        {
                            connection.Open();
                            flag = true;
                        }

                        object obj = sqlCommand.ExecuteScalar();
                        if (flag)
                        {
                            connection.Close();
                        }

                        try
                        {
                            byte[] array = (byte[])obj;
                            result = array;
                            return result;
                        }
                        catch
                        {
                            result = null;
                            return result;
                        }
                    }

                    result = null;
                }
                finally
                {
                    if (sqlCommand != null)
                    {
                        sqlCommand.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Failed to fetch ContentType ID: " + ex.Message);
            }

            return result;
        }

        public string GetUserFromProfile()
        {
            return null;
        }

        public string GetUserProfilePropertiesUsage(string profileDbConnectionString, string options)
        {
            throw new NotImplementedException();
        }

        public string GetUserProfiles(string sSiteURL, string sLoginName, out string sErrors)
        {
            sErrors = "";
            return null;
        }

        public decimal GetUTCOffset()
        {
            DataTable dataTable = new DataTable("DateTime");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "Select DATEDIFF(hh, GetUTCDate(), GetDate() ) + (DATEDIFF(mm, GetUTCDate(), GetDate()) / 60.0) as UtcOffset",
                           sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count != 1)
                {
                    throw new Exception("Could not connect to SQL server");
                }
            }

            return (decimal)dataTable.Rows[0]["UtcOffset"];
        }

        private string GetValueFromWebMetaInfoString(string sValuePrefix, string sWebMetaInfoString)
        {
            int num = sWebMetaInfoString.IndexOf(sValuePrefix);
            if (num >= 0)
            {
                int length = num + sValuePrefix.Length;
                int num1 = sWebMetaInfoString.IndexOf('\n', num);
                if (num1 >= 0 && length < num1)
                {
                    return sWebMetaInfoString.Substring(length, num1 - length);
                }
            }

            return null;
        }

        public string GetViews(string sListID)
        {
            string str;
            int num;
            DataTable dataTable = new DataTable("Views");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                string str1 = null;
                if (!base.SharePointVersion.IsSharePoint2013OrLater)
                {
                    string[] strArrays = new string[]
                    {
                        "select w.tp_ID, w.tp_Type, w.tp_Flags, w.tp_BaseViewID, w.tp_DisplayName, w.tp_View, '/' + d.DirName + '/' + d.LeafName as ViewUrl ",
                        null, null, null, null, null, null, null, null
                    };
                    strArrays[1] =
                        (base.SharePointVersion.IsSharePoint2007OrLater ? ", tp_ContentTypeId" : string.Empty);
                    strArrays[2] = (base.SharePointVersion.IsSharePoint2003 ? ", L.tp_ServerTemplate" : string.Empty);
                    strArrays[3] = " from webparts w, ";
                    strArrays[4] = (base.SharePointVersion.IsSharePoint2007OrLater ? "AllDocs" : "Docs");
                    strArrays[5] = " d ";
                    strArrays[6] = (base.SharePointVersion.IsSharePoint2003 ? ", Lists L " : string.Empty);
                    strArrays[7] =
                        "where w.tp_ListId = @ListID and w.tp_UserID is null and w.tp_Type < 2 and w.tp_PageUrlID = d.Id";
                    strArrays[8] = (base.SharePointVersion.IsSharePoint2003 ? " and L.tp_ID = @ListID" : string.Empty);
                    str1 = string.Concat(strArrays);
                }
                else
                {
                    str1 =
                        "select w.tp_ID, w.tp_Type, w.tp_Flags, w.tp_BaseViewID, w.tp_DisplayName, w.tp_View, '/' + d.DirName + '/' + d.LeafName as ViewUrl, tp_ContentTypeId from AllWebParts w, AllDocs d where w.tp_PageVersion = 0 AND w.tp_IsCurrentVersion = 1 and w.tp_ListId = @ListID and w.tp_UserID is null and w.tp_Type < 2 and w.tp_PageUrlID = d.Id";
                }

                using (SqlCommand sqlCommand = this.GetSqlCommand(str1, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("ListID", sListID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("Views");
            int? nullable = null;
            string str2 = null;
            foreach (DataRow row in dataTable.Rows)
            {
                xmlTextWriter.WriteStartElement("View");
                xmlTextWriter.WriteAttributeString("DisplayName", row["tp_DisplayName"].ToString());
                if (!(row["tp_Type"] is DBNull) && row["tp_Type"].ToString() == "0")
                {
                    xmlTextWriter.WriteAttributeString("DefaultView", "True");
                }

                if (!(row["tp_ID"] is DBNull))
                {
                    xmlTextWriter.WriteAttributeString("Name", row["tp_ID"].ToString());
                }

                int item = (int)row["tp_Flags"];
                string str3 = "Html";
                if ((item & 524288) > 0)
                {
                    str3 = "Calendar";
                }
                else if ((item & 131072) > 0)
                {
                    str3 = "Chart";
                }
                else if ((item & 67108864) > 0)
                {
                    str3 = "Gantt";
                }
                else if ((item & 2048) > 0)
                {
                    str3 = "Grid";
                }
                else if (base.SharePointVersion.IsSharePoint2003 && row["tp_ServerTemplate"] != DBNull.Value &&
                         (int)row["tp_ServerTemplate"] == 106 && row["tp_BaseViewID"] != DBNull.Value &&
                         Convert.ToInt32(row["tp_BaseViewID"]) == 2)
                {
                    str3 = "CALENDAR";
                }

                xmlTextWriter.WriteAttributeString("Type", str3);
                if ((item & 8) > 0)
                {
                    xmlTextWriter.WriteAttributeString("Hidden", "TRUE");
                }

                if ((item & 32) > 0)
                {
                    xmlTextWriter.WriteAttributeString("ReadOnly", "TRUE");
                }

                if ((item & 8192) > 0)
                {
                    xmlTextWriter.WriteAttributeString("RecurrenceRowset", "TRUE");
                }

                int num1 = item & 2101248;
                if (num1 <= 4096)
                {
                    if (num1 != 0)
                    {
                        if (num1 != 4096)
                        {
                            goto Label3;
                        }

                        str = "RecursiveAll";
                        goto Label0;
                    }
                }
                else if (num1 == 2097152)
                {
                    str = "FilesOnly";
                    goto Label0;
                }
                else
                {
                    if (num1 != 2101248)
                    {
                        goto Label3;
                    }

                    str = "Recursive";
                    goto Label0;
                }

                Label3:
                str = "";
                Label0:
                xmlTextWriter.WriteAttributeString("Scope", str);
                if ((item & 8388608) > 0)
                {
                    xmlTextWriter.WriteAttributeString(XmlAttributeNames.MobileView.ToString(), "TRUE");
                }

                if ((item & 16777216) > 0)
                {
                    xmlTextWriter.WriteAttributeString(XmlAttributeNames.MobileDefaultView.ToString(), "TRUE");
                }

                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    this.WriteDataRowColumn(row, dataTable.Columns["tp_ContentTypeId"], "ContentTypeID", xmlTextWriter);
                }

                object obj = row["ViewUrl"];
                if (!(obj is DBNull))
                {
                    xmlTextWriter.WriteAttributeString("Url", obj.ToString());
                }

                string listViewXmlFromListTemplate = null;
                if (row["tp_View"] is DBNull)
                {
                    xmlTextWriter.WriteAttributeString("IsFromTemplate", true.ToString());
                }
                else
                {
                    listViewXmlFromListTemplate = (row["tp_View"] is byte[]
                        ? DBAdapter.DecompressToXmlString((byte[])row["tp_View"])
                        : row["tp_View"].ToString());
                }

                if (!nullable.HasValue)
                {
                    try
                    {
                        this.GetListBaseTemplateID(sListID, out num, out str2);
                        nullable = new int?(num);
                    }
                    catch
                    {
                        nullable = new int?(-1);
                    }
                }

                if (row["tp_BaseViewID"] != null && row["tp_BaseViewID"] != DBNull.Value)
                {
                    int num2 = Convert.ToInt32(row["tp_BaseViewID"]);
                    xmlTextWriter.WriteAttributeString("BaseViewID", num2.ToString(CultureInfo.InvariantCulture));
                    listViewXmlFromListTemplate =
                        this.GetListViewXmlFromListTemplate(listViewXmlFromListTemplate, nullable.Value, str2, num2);
                    if (!string.IsNullOrEmpty(listViewXmlFromListTemplate))
                    {
                        xmlTextWriter.WriteRaw(listViewXmlFromListTemplate);
                    }
                }

                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetViewType(int iType)
        {
            if ((iType & 524288) > 0)
            {
                return "Calendar";
            }

            if ((iType & 131072) > 0)
            {
                return "Chart";
            }

            if ((iType & 67108864) > 0)
            {
                return "Gantt";
            }

            if ((iType & 8193) >= 8193)
            {
                return "Recurrence";
            }

            if ((iType & 2048) > 0)
            {
                return "Grid";
            }

            return "Html";
        }

        public string GetWeb(bool bFetchFullXml)
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            DataTable dataTable = new DataTable("Webs");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                StringBuilder stringBuilder = new StringBuilder(1000);
                stringBuilder.Append("Select *, ");
                if (bFetchFullXml)
                {
                    stringBuilder.Append(
                        "(select tp_Login from UserInfo u where u.tp_SiteID = w.SiteId and u.tp_ID = w.Author) as CreatedBy, ");
                    stringBuilder.Append(string.Concat(this.GetFieldSelectForWebLastItemModifiedDate("w"), ", "));
                }

                if (base.SharePointVersion.IsSharePoint2003 && this.IsPortal)
                {
                    stringBuilder.Append(
                        "(Select InheritSecurity from CatDef where CatId=@WebID) as InheritSecurity, ");
                }

                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    stringBuilder.Append("FirstUniqueAncestorWebId");
                }
                else
                {
                    stringBuilder.Append("(Select RoleDefWebId from Perms p where w.ScopeId=p.ScopeId)");
                }

                stringBuilder.Append(
                    " as RoleDefWebId, (Select RequestAccessEmail from Webs w2 where w.FirstUniqueAncestorWebId=w2.Id) as UniqueRequestAccessEmail from Webs w where ID = @WebID");
                using (SqlCommand sqlCommand = this.GetSqlCommand(stringBuilder.ToString(), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count != 1)
            {
                throw new Exception("Could not find the given web");
            }

            xmlTextWriter.WriteStartElement("Web");
            this.GetWebXML(dataTable.Rows[0], xmlTextWriter, bFetchFullXml, this.SiteID);
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public string GetWebApplicationPolicies(string options)
        {
            throw new NotImplementedException();
        }

        public string GetWebApplications()
        {
            return "<WebApplicationCollection />";
        }

        public string GetWebByUrl(string sURL)
        {
            string str;
            string str1 = sURL.Trim(new char[] { '/' });
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                SqlCommand sqlCommand = null;
                SqlDataAdapter sqlDataAdapter = null;
                DataTable dataTable = new DataTable("Count of sites");
                try
                {
                    if (!base.SharePointVersion.IsSharePoint2007OrLater)
                    {
                        sqlCommand =
                            this.GetSqlCommand("Select Id as WebID, SiteID, Locale from webs where webs.FullUrl = @Url",
                                sqlConnection);
                        sqlCommand.Parameters.Add(new SqlParameter("Url", str1));
                    }
                    else
                    {
                        string str2 = string.Concat(
                            "Select webs.Id as WebID, webs.SiteID, webs.Locale from webs join sites on webs.SiteId=sites.Id where webs.FullUrl = @Url and sites.HostHeader",
                            (this.m_sHostHeader != null ? " = @HostHeader" : " is null"));
                        sqlCommand = this.GetSqlCommand(str2, sqlConnection);
                        sqlCommand.Parameters.Add(new SqlParameter("Url", str1));
                        if (this.m_sHostHeader != null)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("HostHeader", this.m_sHostHeader));
                        }
                    }

                    sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                    sqlDataAdapter.Fill(dataTable);
                    if (dataTable.Rows.Count == 0)
                    {
                        throw new Exception(string.Concat("The web: '", sURL, "' does not exist."));
                    }
                }
                finally
                {
                    if (sqlCommand != null)
                    {
                        sqlCommand.Dispose();
                    }

                    if (sqlDataAdapter != null)
                    {
                        sqlDataAdapter.Dispose();
                    }
                }

                str = string.Format("<Web SiteID=\"{0}\" WebID=\"{1}\" Locale=\"{2}\"/>",
                    dataTable.Rows[0]["SiteId"].ToString(), dataTable.Rows[0]["WebID"].ToString(),
                    dataTable.Rows[0]["Locale"].ToString());
            }

            return str;
        }

        private string GetWebFeatures(string sWebID)
        {
            DataTable dataTable = new DataTable("WebFeatures");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand =
                    this.GetSqlCommand("select FeatureId from Features where SiteID = @SiteID and WebID = @WebID",
                        sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                sqlCommand.Parameters.Add(new SqlParameter("WebID", sWebID));
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
            }

            if (dataTable.Rows.Count == 0)
            {
                return null;
            }

            string str = null;
            foreach (DataRow row in dataTable.Rows)
            {
                if (row["FeatureId"] == null || row["FeatureId"] is DBNull)
                {
                    continue;
                }

                str = string.Concat(str, row["FeatureId"].ToString(), ",");
            }

            if (str == null)
            {
                return null;
            }

            str = str.Substring(0, str.Length - 1);
            return str;
        }

        private void GetWebMeetingInstanceXML(XmlWriter xmlWriter)
        {
            try
            {
                DataTable dataTable = new DataTable("MeetingInstanceListTable");
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    SqlCommand sqlCommand =
                        this.GetSqlCommand("select * from Lists where tp_ServerTemplate='200' and tp_webId=@WebID",
                            sqlConnection);
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
                }

                if (dataTable.Rows.Count == 1)
                {
                    DataRow item = dataTable.Rows[0];
                    string outerXml = null;
                    if (!base.SharePointVersion.IsSharePoint2003)
                    {
                        outerXml = (!base.SharePointVersion.IsSharePoint2007
                            ? DBAdapter.s2010MeetingInstancesFields
                            : DBAdapter.s2007MeetingInstancesFields);
                    }
                    else
                    {
                        string str = (item["tp_Fields"] is byte[]
                            ? DBAdapter.DecompressToXmlString((byte[])item["tp_Fields"])
                            : item["tp_Fields"].ToString());
                        int num = str.IndexOf('<');
                        if (num >= 0)
                        {
                            str = str.Substring(num);
                        }

                        XmlDocument xmlDocument = new XmlDocument();
                        xmlDocument.LoadXml(string.Concat("<Fields>", str, "</Fields>"));
                        int item1 = (int)item["tp_BaseType"];
                        this.AddBaseFields(xmlDocument.FirstChild, 200, item1, null);
                        this.AddDisplayNamesToFieldRefs(xmlDocument.FirstChild);
                        this.AddListNamesToLookups(xmlDocument.FirstChild);
                        this.RemoveRootFieldRefs(xmlDocument.FirstChild);
                        outerXml = xmlDocument.OuterXml;
                    }

                    string listItems = this.GetListItems(item["tp_ID"].ToString(), null, outerXml, null, true,
                        ListItemQueryType.ListItem, null, new GetListItemOptions());
                    XmlDocument xmlDocument1 = new XmlDocument();
                    xmlDocument1.LoadXml(listItems);
                    XmlNodeList xmlNodeLists = xmlDocument1.DocumentElement.SelectNodes("./ListItem");
                    List<XmlAttribute> xmlAttributes = new List<XmlAttribute>();
                    List<string> strs = new List<string>();
                    foreach (XmlNode xmlNodes in xmlNodeLists)
                    {
                        XmlAttribute itemOf = xmlNodes.Attributes["EventUID"];
                        if (itemOf == null)
                        {
                            continue;
                        }

                        string value = itemOf.Value;
                        string[] strArrays = value.Split(new char[] { ':' });
                        if ((int)strArrays.Length < 4)
                        {
                            continue;
                        }

                        string str1 = strArrays[(int)strArrays.Length - 1];
                        string str2 = strArrays[(int)strArrays.Length - 3];
                        int num1 = -1;
                        Guid empty = Guid.Empty;
                        try
                        {
                            empty = new Guid(str2);
                        }
                        catch
                        {
                        }

                        if (!int.TryParse(str1, out num1) || empty == Guid.Empty)
                        {
                            continue;
                        }

                        string str3 = "";
                        for (int i = 0; i < (int)strArrays.Length - 4; i++)
                        {
                            if (!string.IsNullOrEmpty(str3))
                            {
                                str3 = string.Concat(str3, ":");
                            }

                            str3 = string.Concat(str3, strArrays[i]);
                        }

                        XmlAttribute xmlAttribute = xmlNodes.OwnerDocument.CreateAttribute("EventUIDPrefix");
                        XmlAttribute xmlAttribute1 = xmlNodes.OwnerDocument.CreateAttribute("EventUIDItemID");
                        XmlAttribute xmlAttribute2 = xmlNodes.OwnerDocument.CreateAttribute("EventUIDListName");
                        xmlAttribute.Value = str3;
                        xmlAttribute1.Value = num1.ToString();
                        xmlAttribute2.Value = empty.ToString();
                        xmlNodes.Attributes.Remove(itemOf);
                        xmlNodes.Attributes.Append(xmlAttribute);
                        xmlNodes.Attributes.Append(xmlAttribute2);
                        xmlNodes.Attributes.Append(xmlAttribute1);
                        xmlAttributes.Add(xmlAttribute2);
                        if (strs.Contains(empty.ToString()))
                        {
                            continue;
                        }

                        strs.Add(empty.ToString());
                    }

                    if (xmlAttributes.Count > 0)
                    {
                        string str4 = "select tp_Title, tp_Id from Lists where tp_Id in (@ListID)";
                        string str5 = "";
                        foreach (string str6 in strs)
                        {
                            if (!string.IsNullOrEmpty(str5))
                            {
                                str5 = string.Concat(str5, ",");
                            }

                            str5 = string.Concat(str5, str6);
                        }

                        DataTable dataTable1 = new DataTable();
                        using (SqlConnection sqlConnection1 = new SqlConnection(this.ConnectionString))
                        {
                            sqlConnection1.Open();
                            SqlCommand sqlCommand1 = this.GetSqlCommand(str4, sqlConnection1);
                            sqlCommand1.Parameters.Add(new SqlParameter("ListID", str5));
                            (new SqlDataAdapter(sqlCommand1)).Fill(dataTable1);
                        }

                        foreach (XmlAttribute item2 in xmlAttributes)
                        {
                            string lower = item2.Value.ToLower();
                            foreach (DataRow row in dataTable1.Rows)
                            {
                                if (lower != row[row.Table.Columns["tp_Id"]].ToString().ToLower())
                                {
                                    continue;
                                }

                                item2.Value = (string)row[row.Table.Columns["tp_Title"]];
                            }
                        }
                    }

                    xmlWriter.WriteStartElement("MeetingInstances");
                    foreach (XmlNode xmlNodes1 in xmlNodeLists)
                    {
                        xmlWriter.WriteRaw(xmlNodes1.OuterXml.Replace("<ListItem ", "<MeetingInstance "));
                    }

                    xmlWriter.WriteEndElement();
                }
            }
            catch (Exception exception)
            {
            }
        }

        private void GetWebNameAndUrl(string sWebID, out string sWebName, out string sWebServerRelativeUrl,
            bool bThrowException)
        {
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(new StringBuilder(1024)));
            DataTable dataTable = new DataTable("Webs");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand = this.GetSqlCommand("select FullUrl from webs where ID = @WebID", sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("WebID", sWebID));
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
            }

            if (dataTable.Rows.Count != 1)
            {
                if (bThrowException)
                {
                    throw new Exception("Could not find the given web");
                }

                sWebName = null;
                sWebServerRelativeUrl = null;
                return;
            }

            sWebName = Metalogix.SharePoint.Adapters.Utils.GetNameFromURL(dataTable.Rows[0]["FullUrl"].ToString());
            sWebServerRelativeUrl = string.Concat("/", dataTable.Rows[0]["FullUrl"].ToString());
        }

        public string GetWebNavigationSettings()
        {
            DataTable dataTable = new DataTable("WebNavigation");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand =
                    this.GetSqlCommand("select FullUrl, MetaInfo, Flags from webs where ID = @WebID", sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                (new SqlDataAdapter(sqlCommand)).Fill(dataTable);
            }

            StringBuilder stringBuilder = new StringBuilder();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
            xmlTextWriter.WriteStartElement("Web");
            if (dataTable.Rows.Count > 0)
            {
                DataRow item = dataTable.Rows[0];
                xmlTextWriter.WriteAttributeString("Name",
                    (DBNull.Value.Equals(item["FullUrl"])
                        ? ""
                        : Metalogix.SharePoint.Adapters.Utils.GetNameFromURL(item["FullUrl"].ToString())));
                string str = (DBNull.Value.Equals(item["MetaInfo"])
                    ? string.Empty
                    : Encoding.UTF8.GetString((byte[])item["MetaInfo"]));
                this.GetWebNavigationXML(xmlTextWriter, str,
                    (DBNull.Value.Equals(item["Flags"]) ? 0 : Convert.ToInt32(item["Flags"])));
            }

            xmlTextWriter.WriteEndElement();
            return stringBuilder.ToString();
        }

        public string GetWebNavigationStructure()
        {
            string str;
            Guid[] guidArray = null;
            Guid[] guidArray1 = null;
            string str1 = null;
            if (!base.SharePointVersion.IsSharePoint2007OrLater)
            {
                string str2 =
                    "select '/' + d.DirName + '/' + d.LeafName as WebUrl from Docs d where d.WebId = @WebID and d.Type = 2";
                using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection.Open();
                    SqlCommand sqlCommand = this.GetSqlCommand(str2, sqlConnection);
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    object obj = sqlCommand.ExecuteScalar();
                    if (obj != null && obj != DBNull.Value)
                    {
                        str1 = obj.ToString();
                    }
                }
            }
            else
            {
                string str3 =
                    "select w.MetaInfo, '/' + d.DirName + '/' + d.LeafName as WebUrl from Webs w, AllDocs d where d.WebId = w.Id and d.Type = 2 and  w.Id = @WebID";
                object item = null;
                using (SqlConnection sqlConnection1 = new SqlConnection(this.ConnectionString))
                {
                    sqlConnection1.Open();
                    SqlCommand sqlCommand1 = this.GetSqlCommand(str3, sqlConnection1);
                    sqlCommand1.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand1);
                    DataTable dataTable = new DataTable("Web Data Table");
                    sqlDataAdapter.Fill(dataTable);
                    if (dataTable.Rows.Count > 0)
                    {
                        item = dataTable.Rows[0]["MetaInfo"];
                        object item1 = dataTable.Rows[0]["WebUrl"];
                        if (item1 != DBNull.Value)
                        {
                            str = item1.ToString();
                        }
                        else
                        {
                            str = null;
                        }

                        str1 = str;
                    }
                }

                if (item != null && item is byte[])
                {
                    string str4 = Encoding.UTF8.GetString((byte[])item);
                    string valueFromWebMetaInfoString =
                        this.GetValueFromWebMetaInfoString("__GlobalNavigationExcludes:SW|", str4);
                    if (!string.IsNullOrEmpty(valueFromWebMetaInfoString))
                    {
                        guidArray =
                            Metalogix.SharePoint.Adapters.Utils.SplitWebMetaInfoGuidList(valueFromWebMetaInfoString);
                    }

                    string valueFromWebMetaInfoString1 =
                        this.GetValueFromWebMetaInfoString("__CurrentNavigationExcludes:SW|", str4);
                    if (!string.IsNullOrEmpty(valueFromWebMetaInfoString1))
                    {
                        guidArray1 =
                            Metalogix.SharePoint.Adapters.Utils.SplitWebMetaInfoGuidList(valueFromWebMetaInfoString1);
                    }
                }
            }

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(
                "select n.Eid, n.EidParent, n.Url, n.Name, n.DateLastModified, n.NodeMetainfo, n.DocId, '/' + (d.DirName + '/' + d.LeafName) as DocUrl, d.WebId, d.Type as DocType  ");
            StringBuilder stringBuilder1 = stringBuilder;
            string[] strArrays = new string[] { "from NavNodes n left join ", null, null, null, null };
            strArrays[1] = (base.SharePointVersion.IsSharePoint2003 ? "Docs" : "AllDocs");
            strArrays[2] = " d on (n.DocId = d.Id";
            strArrays[3] = (base.SharePointVersion.IsSharePoint2003 ? "" : " and d.IsCurrentVersion = 1");
            strArrays[4] = ") ";
            stringBuilder1.Append(string.Concat(strArrays));
            stringBuilder.Append("where n.WebId = @WebID ");
            stringBuilder.Append("order by n.RankChild");
            DataTable dataTable1 = new DataTable("WebNavigation");
            using (SqlConnection sqlConnection2 = new SqlConnection(this.ConnectionString))
            {
                sqlConnection2.Open();
                SqlCommand sqlCommand2 = this.GetSqlCommand(stringBuilder.ToString(), sqlConnection2);
                sqlCommand2.Parameters.Add(new SqlParameter("WebID", this.WebID));
                (new SqlDataAdapter(sqlCommand2)).Fill(dataTable1);
            }

            DataRow dataRow = null;
            List<DataRow> dataRows = new List<DataRow>(dataTable1.Rows.Count);
            foreach (DataRow row in dataTable1.Rows)
            {
                if (dataRow != null || (int)row["Eid"] != 0)
                {
                    dataRows.Add(row);
                }
                else
                {
                    dataRow = row;
                }
            }

            if (dataRow == null)
            {
                throw new Exception("Could not locate root data row.");
            }

            StringBuilder stringBuilder2 = new StringBuilder();
            XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder2));
            this.WriteNavNodeXml(dataRow, ref dataRows, false, false, guidArray, guidArray1, str1, xmlTextWriter);
            return stringBuilder2.ToString();
        }

        private void GetWebNavigationXML(XmlWriter xmlWriter, string sMetaInfo, int webFlags)
        {
            string str;
            bool flag;
            bool flag1;
            string str1 = "True";
            string str2 = "False";
            if (!base.SharePointVersion.IsSharePoint2003)
            {
                xmlWriter.WriteAttributeString("QuickLaunchEnabled", ((webFlags & 32) > 0 ? str1 : str2));
            }
            else
            {
                xmlWriter.WriteAttributeString("QuickLaunchEnabled", str1);
            }

            xmlWriter.WriteAttributeString("TreeViewEnabled", ((webFlags & 64) > 0 ? str1 : str2));
            if (!string.IsNullOrEmpty(sMetaInfo))
            {
                Dictionary<string, string> dictionary = this.ParseMetaInfoStringToDictionary(sMetaInfo);
                if (dictionary.TryGetValue("navigationorderingmethod", out str))
                {
                    xmlWriter.WriteAttributeString("NavigationOrderingMethod", str);
                }

                if (dictionary.TryGetValue("navigationsortascending", out str))
                {
                    xmlWriter.WriteAttributeString("NavigationSortAscending", str);
                }

                if (dictionary.TryGetValue("navigationautomaticsortingmethod", out str))
                {
                    xmlWriter.WriteAttributeString("NavigationAutomaticSortingMethod", str);
                }

                if (dictionary.TryGetValue("inheritcurrentnavigation", out str))
                {
                    xmlWriter.WriteAttributeString("InheritCurrentNavigation", str);
                }

                if (dictionary.TryGetValue("navigationshowsiblings", out str))
                {
                    xmlWriter.WriteAttributeString("NavigationShowSiblings", str);
                }

                if (dictionary.TryGetValue("displayshowhideribbonactionid", out str))
                {
                    xmlWriter.WriteAttributeString("DisplayShowHideRibbonActionId", str);
                }

                bool? nullable = null;
                bool? nullable1 = null;
                bool? nullable2 = null;
                bool? nullable3 = null;
                if (dictionary.ContainsKey("includepagesinnavigation") &&
                    bool.TryParse(dictionary["includepagesinnavigation"].ToString(), out flag))
                {
                    nullable = new bool?(flag);
                    nullable2 = new bool?(flag);
                }

                if (dictionary.ContainsKey("includesubsitesinnavigation") &&
                    bool.TryParse(dictionary["includesubsitesinnavigation"].ToString(), out flag1))
                {
                    nullable1 = new bool?(flag1);
                    nullable3 = new bool?(flag1);
                }

                int num = 0;
                int num1 = 0;
                if (base.SharePointVersion.IsSharePoint2010OrLater)
                {
                    if (dictionary.ContainsKey("currentnavigationincludetypes") &&
                        !int.TryParse(dictionary["currentnavigationincludetypes"].ToString(), out num1))
                    {
                        num1 = 0;
                    }

                    if (dictionary.ContainsKey("globalnavigationincludetypes") &&
                        !int.TryParse(dictionary["globalnavigationincludetypes"].ToString(), out num))
                    {
                        num = 0;
                    }

                    if (!nullable.HasValue)
                    {
                        nullable = new bool?((num1 & 2) > 0);
                    }

                    if (!nullable2.HasValue)
                    {
                        nullable2 = new bool?((num & 2) > 0);
                    }

                    if (!nullable1.HasValue)
                    {
                        nullable1 = new bool?((num1 & 1) > 0);
                    }

                    if (!nullable3.HasValue)
                    {
                        nullable3 = new bool?((num & 1) > 0);
                    }
                }

                nullable = (!nullable.HasValue ? new bool?(false) : nullable);
                nullable2 = (!nullable2.HasValue ? new bool?(false) : nullable2);
                nullable1 = (!nullable1.HasValue ? new bool?(false) : nullable1);
                nullable3 = (!nullable3.HasValue ? new bool?(false) : nullable3);
                xmlWriter.WriteAttributeString("IncludePagesInCurrentNavigation", nullable.Value.ToString());
                xmlWriter.WriteAttributeString("IncludePagesInGlobalNavigation", nullable2.Value.ToString());
                xmlWriter.WriteAttributeString("IncludeSubSitesInCurrentNavigation", nullable1.Value.ToString());
                xmlWriter.WriteAttributeString("IncludeSubSitesInGlobalNavigation", nullable3.Value.ToString());
                if (dictionary.TryGetValue("currentdynamicchildlimit", out str))
                {
                    xmlWriter.WriteAttributeString("CurrentDynamicChildLimit", str);
                }
                else if (base.SharePointVersion.IsSharePoint2007)
                {
                    xmlWriter.WriteAttributeString("CurrentDynamicChildLimit", "50");
                }

                if (dictionary.TryGetValue("globaldynamicchildlimit", out str))
                {
                    xmlWriter.WriteAttributeString("GlobalDynamicChildLimit", str);
                    return;
                }

                if (base.SharePointVersion.IsSharePoint2007)
                {
                    xmlWriter.WriteAttributeString("GlobalDynamicChildLimit", "50");
                }
            }
        }

        public string GetWebPartPage(string sWebPartPageServerRelativeUrl)
        {
            string str;
            string str1 = "";
            string str2 = "";
            Metalogix.SharePoint.Adapters.Utils.ParseUrlForLeafName(sWebPartPageServerRelativeUrl, out str1, out str2);
            if (base.SharePointVersion.IsSharePoint2013OrLater)
            {
                str =
                    "SELECT D.Id AS UniqueId, D.DirName AS FileDirRef, D.LeafName AS FileLeafRef, D.MetaInfo AS MetaInfo, D.SetupPath AS TemplateFile, D.DocFlags AS DocFlags, S.Content AS Content FROM Docs D LEFT JOIN DocStreams S ON (D.Id = S.DocId) WHERE (D.SiteID = @SITE_ID) AND (D.DirName = @DIR_NAME) AND (D.LeafName = @LEAF_NAME)";
            }
            else if (!base.SharePointVersion.IsSharePoint2010OrLater)
            {
                str = (!base.SharePointVersion.IsSharePoint2007OrLater
                    ? "SELECT D.Id AS UniqueId, D.DirName AS FileDirRef, D.LeafName AS FileLeafRef, D.MetaInfo AS MetaInfo, D.SetupPath AS TemplateFile, D.DocFlags AS DocFlags, D.Content AS Content FROM Docs D WHERE (D.SiteID = @SITE_ID) AND (D.DirName = @DIR_NAME) AND (D.LeafName = @LEAF_NAME)"
                    : "SELECT D.Id AS UniqueId, D.DirName AS FileDirRef, D.LeafName AS FileLeafRef, D.MetaInfo AS MetaInfo, D.SetupPath AS TemplateFile, D.DocFlags AS DocFlags, S.Content AS Content FROM Docs D LEFT JOIN DocStreams S ON (D.Id = S.Id) AND (D.Level = S.Level) WHERE (D.SiteID = @SITE_ID) AND (D.DirName = @DIR_NAME) AND (D.LeafName = @LEAF_NAME)");
            }
            else
            {
                str =
                    "SELECT D.Id AS UniqueId, D.DirName AS FileDirRef, D.LeafName AS FileLeafRef, D.MetaInfo AS MetaInfo, D.SetupPath AS TemplateFile, D.DocFlags AS DocFlags, S.Content AS Content FROM Docs D LEFT JOIN AllDocStreams S ON (D.Id = S.Id) WHERE (D.SiteID = @SITE_ID) AND (D.DirName = @DIR_NAME) AND (D.LeafName = @LEAF_NAME)";
            }

            DataTable dataTable = new DataTable("Web part page");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SITE_ID", this.SiteID));
                    sqlCommand.Parameters.Add(new SqlParameter("DIR_NAME", str1));
                    sqlCommand.Parameters.Add(new SqlParameter("LEAF_NAME", str2));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count <= 0)
            {
                return null;
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder());
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("WebPartPage");
            this.WriteDataRowColumn(dataTable.Rows[0], dataTable.Columns["UniqueId"], xmlTextWriter);
            this.WriteDataRowColumn(dataTable.Rows[0], dataTable.Columns["FileDirRef"], xmlTextWriter);
            this.WriteDataRowColumn(dataTable.Rows[0], dataTable.Columns["FileLeafRef"], xmlTextWriter);
            string empty = dataTable.Rows[0]["TemplateFile"].ToString();
            if (base.SharePointVersion.IsSharePoint2003 && empty.Contains("|"))
            {
                empty = empty.Substring(0, empty.IndexOf('|'));
            }

            if (this.CurrentWebTemplate.Equals("MPS", StringComparison.InvariantCultureIgnoreCase))
            {
                empty = string.Empty;
            }

            xmlTextWriter.WriteAttributeString("TemplateFile", empty);
            int num = int.Parse(dataTable.Rows[0]["DocFlags"].ToString());
            if ((num & 64) <= 0)
            {
                xmlTextWriter.WriteAttributeString("Unghosted", "false");
            }
            else
            {
                xmlTextWriter.WriteAttributeString("Unghosted", "true");
            }

            if ((num & 128) <= 0)
            {
                xmlTextWriter.WriteAttributeString("HasPersonalizedView", "false");
            }
            else
            {
                xmlTextWriter.WriteAttributeString("HasPersonalizedView", "true");
            }

            string text = this.ConvertDatabaseHexToString(dataTable.Rows[0], dataTable.Columns["Content"]);
            text = Metalogix.SharePoint.Adapters.Utils.HexToText(text);
            if (!string.IsNullOrEmpty(text))
            {
                WebPartUtils.ParseWebPartPageToXml(xmlTextWriter, text);
            }

            OperationReportingResult operationReportingResult =
                new OperationReportingResult(this.GetWebPartsOnPage(sWebPartPageServerRelativeUrl));
            xmlTextWriter.WriteRaw(operationReportingResult.ObjectXml);
            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Flush();
            xmlTextWriter.Close();
            return this.GetUpdatedOperationReportingResultObject(stringWriter.ToString(), operationReportingResult);
        }

        public byte[] GetWebPartPageTemplate(int iTemplateId)
        {
            return this.WebPartPageTemplateManager.GetTemplate(iTemplateId);
        }

        private string GetWebPartPersonalizations(string sWebPartPageDocumentId, string sWebPartId)
        {
            string str =
                "tp_UserID as UserID, tp_PartOrder as PartOrder, tp_ZoneID as ZoneID, tp_IsIncluded as IsIncluded, tp_FrameState as FrameState, tp_PerUserProperties as UserProperties FROM Personalization WHERE (tp_PageUrlID = @PageId) and (tp_WebPartID = @WebPartId)";
            string str1 = (base.SharePointVersion.IsSharePoint2003 ? "SELECT" : "SELECT tp_Deleted AS Deleted, ");
            str1 = string.Concat(str1, str);
            DataTable dataTable = new DataTable("Personalized web parts");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str1, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("PageId", sWebPartPageDocumentId));
                    sqlCommand.Parameters.Add(new SqlParameter("WebPartId", sWebPartId));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count <= 0)
            {
                return "";
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder());
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("Personalizations");
            foreach (DataRow row in dataTable.Rows)
            {
                xmlTextWriter.WriteStartElement("PersonalizedWebPart");
                this.WriteDataRowValues(row, xmlTextWriter);
                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private string GetWebPartsInGallery()
        {
            string str =
                "SELECT L.tp_ID AS GalleryListId FROM Lists L JOIN Webs W ON L.tp_WebId = W.Id WHERE W.SiteId = @SiteID AND L.tp_Title = 'Web Part Gallery'";
            DataTable dataTable = new DataTable("Web part gallery list");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count <= 0)
            {
                return null;
            }

            string str1 = dataTable.Rows[0]["GalleryListId"].ToString();
            DataTable dataTable1 = new DataTable("Web part types");
            using (SqlConnection sqlConnection1 = new SqlConnection(this.ConnectionString))
            {
                string empty = string.Empty;
                empty = (!base.SharePointVersion.IsSharePoint2013OrLater
                    ? string.Concat(
                        "SELECT nvarchar9 as WebPartName, nvarchar8 as Assembly, nvarchar7 as Title, nvarchar10 as Image, ntext2 as Description ",
                        (base.SharePointVersion.IsSharePoint2007OrLater
                            ? ", nvarchar3 as FileType, nvarchar11 as Category "
                            : ""), " FROM userData WHERE tp_ListId = @ListID")
                    : "SELECT nvarchar9 as WebPartName, nvarchar8 as Assembly, nvarchar7 as Title, nvarchar10 as Image, ntext2 as Description, nvarchar3 as FileType, nvarchar11 as Category FROM AllUserData WHERE tp_ListId = @ListID");
                using (SqlCommand sqlCommand1 = this.GetSqlCommand(empty, sqlConnection1))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("ListID", str1));
                    using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                    {
                        sqlDataAdapter1.Fill(dataTable1);
                    }
                }
            }

            if (dataTable1.Rows.Count <= 0)
            {
                return null;
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder());
            XmlWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            MD5 mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
            xmlTextWriter.WriteStartElement("WebPartGallery");
            foreach (DataRow row in dataTable1.Rows)
            {
                xmlTextWriter.WriteStartElement("WebPart");
                xmlTextWriter.WriteAttributeString("TypeName", row["WebPartName"].ToString());
                xmlTextWriter.WriteAttributeString("Assembly", row["Assembly"].ToString());
                xmlTextWriter.WriteAttributeString("Title", row["Title"].ToString());
                xmlTextWriter.WriteAttributeString("Description", row["Description"].ToString());
                xmlTextWriter.WriteAttributeString("Image", row["Image"].ToString());
                Guid guid = new Guid(mD5CryptoServiceProvider.ComputeHash(
                    Encoding.Unicode.GetBytes(string.Concat(row["Assembly"], "|", row["WebPartName"]))));
                xmlTextWriter.WriteAttributeString("TypeId", guid.ToString());
                if (!base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    xmlTextWriter.WriteAttributeString("FileType", "DWP");
                }
                else
                {
                    xmlTextWriter.WriteAttributeString("FileType", row["FileType"].ToString());
                    xmlTextWriter.WriteAttributeString("Category", row["Category"].ToString());
                }

                xmlTextWriter.WriteEndElement();
            }

            xmlTextWriter.WriteEndElement();
            xmlTextWriter.Flush();
            return stringWriter.ToString();
        }

        public string GetWebPartsOnPage(string sWebPartPageServerRelativeUrl)
        {
            string str;
            string str1;
            string str2 = "";
            string str3 = "";
            Metalogix.SharePoint.Adapters.Utils.ParseUrlForLeafName(sWebPartPageServerRelativeUrl, out str2, out str3);
            if (!base.SharePointVersion.IsSharePoint2013OrLater)
            {
                string[] strArrays = new string[]
                {
                    "Select *, (select tp_Title from Lists where tp_ID = webparts.tp_ListId) as ListTitle From WebParts Where tp_PageUrlId = (select Id from docs where SiteID = @SiteID And DirName = @DirName And LeafName = @LeafName ",
                    null, null, null, null
                };
                strArrays[1] = (base.SharePointVersion.IsSharePoint2007OrLater ? " And Level=1" : "");
                strArrays[2] = ")";
                strArrays[3] = (base.SharePointVersion.IsSharePoint2007OrLater ? " And tp_Level=1" : "");
                strArrays[4] = " order by tp_PartOrder desc";
                str = string.Concat(strArrays);
            }
            else
            {
                str =
                    "Select *, (select tp_Title from Lists where tp_ID = w.tp_ListId) as ListTitle From AllWebParts as w Where (tp_PageVersion = 0) AND (tp_IsCurrentVersion = 1) And tp_PageUrlId = (select Id from docs where SiteID = @SiteID And DirName = @DirName And LeafName = @LeafName And Level=1) And tp_Level=1 Order by tp_PartOrder desc";
            }

            DataTable dataTable = new DataTable();
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                        sqlCommand.Parameters.Add(new SqlParameter("DirName", str2));
                        sqlCommand.Parameters.Add(new SqlParameter("LeafName", str3));
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("WebParts");
            OperationReporting operationReporting = new OperationReporting();
            operationReporting.Start();
            try
            {
                foreach (DataRow row in dataTable.Rows)
                {
                    StringWriter stringWriter1 = new StringWriter(new StringBuilder(1024));
                    XmlTextWriter xmlTextWriter1 = new XmlTextWriter(stringWriter1);
                    try
                    {
                        if (row["tp_ID"] is DBNull)
                        {
                            str1 = null;
                        }
                        else
                        {
                            str1 = row["tp_ID"].ToString();
                        }

                        this.DeserializeWebPartDataRow(row, str1, xmlTextWriter);
                        xmlTextWriter1.Flush();
                        xmlTextWriter1.Close();
                    }
                    catch (Exception exception)
                    {
                        operationReporting.LogError(exception,
                            string.Format("Error occurred while retrieving web parts from page '{0}'",
                                sWebPartPageServerRelativeUrl));
                    }

                    xmlTextWriter.WriteRaw(stringWriter1.ToString());
                }

                xmlTextWriter.WriteEndElement();
                xmlTextWriter.Flush();
                xmlTextWriter.Close();
                operationReporting.LogObjectXml(stringWriter.ToString());
            }
            finally
            {
                operationReporting.End();
            }

            return operationReporting.ResultXml;
        }

        private XmlNode GetWebPartType(string sTypeId)
        {
            XmlNode xmlNodes = null;
            try
            {
                if (this.StandardWebPartTypes != null)
                {
                    xmlNodes = this.StandardWebPartTypes.SelectSingleNode(string.Concat("//WebPart[@TypeId='",
                        sTypeId.ToLower(), "']"));
                }

                if (xmlNodes == null)
                {
                    xmlNodes = this.WebPartTypesInGallery.SelectSingleNode(string.Concat("//WebPart[@TypeId='",
                        sTypeId.ToLower(), "']"));
                }
            }
            catch
            {
                xmlNodes = null;
            }

            return xmlNodes;
        }

        public string GetWebTemplates()
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                DataTable dataTable = new DataTable("WebTemplates");
                if (!this.IsPortal || base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    using (SqlCommand sqlCommand = this.GetSqlCommand(
                               "Select WebTemplate, ProvisionConfig as WebConfig from webs where SiteId=@SiteId and FullUrl LIKE (Select FullUrl from Webs where Id=@WebId) + '%'",
                               sqlConnection))
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                        sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                        using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                        {
                            sqlDataAdapter.Fill(dataTable);
                        }
                    }
                }
                else
                {
                    string str = string.Concat("Declare @Cnt as Int\n",
                        "select @Cnt = count(*) from catdef where webUrl = (select '*' + FullUrl from webs where ID = @WebID)\n");
                    str = string.Concat(str, "if (@Cnt = 1)\n");
                    str = string.Concat(str,
                        "  select WebTemplate, ProvisionConfig as WebConfig from webs w join catdef c on c.WebUrl='*' + w.fullurl join catpath p on p.CatID=c.CatID where p.IDPath LIKE (Select IDPath from webs w join catdef c on c.WebUrl='*' + w.fullurl join catpath p on p.CatID=c.CatID where w.SiteId=@SiteId and w.ID=@WebId) + '%'\n");
                    str = string.Concat(str, "else\n");
                    str = string.Concat(str,
                        "  Select WebTemplate, ProvisionConfig as WebConfig from webs where SiteId=@SiteId and FullUrl LIKE (Select FullUrl from Webs where Id=@WebId) + '%'");
                    using (SqlCommand sqlCommand1 = this.GetSqlCommand(str, sqlConnection))
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                        sqlCommand1.Parameters.Add(new SqlParameter("WebID", this.WebID));
                        using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                        {
                            sqlDataAdapter1.Fill(dataTable);
                        }
                    }
                }

                List<string> strs = new List<string>();
                xmlTextWriter.WriteStartElement("WebTemplates");
                foreach (DataRow row in dataTable.Rows)
                {
                    string str1 = row["WebTemplate"].ToString();
                    string str2 = row["WebConfig"].ToString();
                    string str3 = string.Concat(str1, "#", str2);
                    if (strs.Contains(str3))
                    {
                        continue;
                    }

                    strs.Add(str3);
                    string defaultWebTemplateXML = DBAdapter.GetDefaultWebTemplateXML(str1, str2);
                    if (defaultWebTemplateXML == null)
                    {
                        xmlTextWriter.WriteStartElement("WebTemplate");
                        xmlTextWriter.WriteAttributeString("Name", str3);
                        xmlTextWriter.WriteAttributeString("ID", str1);
                        xmlTextWriter.WriteAttributeString("Config", str2);
                        xmlTextWriter.WriteAttributeString("Title", str3);
                        xmlTextWriter.WriteAttributeString("ImageUrl", "");
                        xmlTextWriter.WriteAttributeString("Description", "");
                        xmlTextWriter.WriteAttributeString("IsHidden", false.ToString());
                        xmlTextWriter.WriteAttributeString("IsRootWebOnly", false.ToString());
                        xmlTextWriter.WriteAttributeString("IsSubWebOnly", false.ToString());
                        xmlTextWriter.WriteEndElement();
                    }
                    else
                    {
                        xmlTextWriter.WriteRaw(defaultWebTemplateXML);
                    }
                }

                xmlTextWriter.WriteEndElement();
            }

            return stringWriter.ToString();
        }

        private string GetWebWelcomePage(string sWebId)
        {
            object obj;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                SqlCommand sqlCommand =
                    this.GetSqlCommand("select WelcomePageUrl from Docs where WebId = @WebID and Type = 2",
                        sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("WebID", sWebId));
                obj = sqlCommand.ExecuteScalar();
            }

            if (obj == null || obj is DBNull)
            {
                return null;
            }

            return obj as string;
        }

        private void GetWebXML(DataRow dr, XmlWriter xmlWriter, bool bGetFullXML, string sSiteId)
        {
            string str;
            string str1;
            string str2;
            string str3;
            string str4;
            string str5;
            string str6;
            string str7;
            string str8;
            string str9;
            string str10;
            string str11;
            string str12;
            string str13;
            string str14;
            string str15;
            string str16;
            string str17 = dr["WebTemplate"].ToString();
            xmlWriter.WriteAttributeString("ID", dr["Id"].ToString());
            xmlWriter.WriteAttributeString("ServerRelativeUrl", string.Concat("/", dr["FullUrl"].ToString()));
            xmlWriter.WriteAttributeString("Name",
                Metalogix.SharePoint.Adapters.Utils.GetNameFromURL(dr["FullUrl"].ToString()));
            xmlWriter.WriteAttributeString("Title", dr["Title"].ToString());
            xmlWriter.WriteAttributeString("Locale", dr["Locale"].ToString());
            xmlWriter.WriteAttributeString("Language", dr["Language"].ToString());
            xmlWriter.WriteAttributeString("WebTemplateID", str17);
            xmlWriter.WriteAttributeString("WebTemplateConfig", dr["ProvisionConfig"].ToString());
            xmlWriter.WriteAttributeString("WebTemplateName", "");
            xmlWriter.WriteAttributeString("IsSearchable", "True");
            xmlWriter.WriteAttributeString("TimeZone", dr["TimeZone"].ToString());
            if (this.m_sCurrentWebTemplate == null)
            {
                if (!DBAdapter.WebTemplateCodeDictionary.ContainsKey(str17))
                {
                    this.m_sCurrentWebTemplate = str17;
                }
                else
                {
                    this.m_sCurrentWebTemplate = DBAdapter.WebTemplateCodeDictionary[str17];
                }
            }

            if (!bGetFullXML)
            {
                return;
            }

            xmlWriter.WriteAttributeString("DatabaseServerName", this.m_sServer);
            xmlWriter.WriteAttributeString("DatabaseName", this.Database);
            xmlWriter.WriteAttributeString("CreatedDate",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)dr["TimeCreated"])));
            xmlWriter.WriteAttributeString("Author",
                (dr["CreatedBy"] == DBNull.Value ? "" : dr["CreatedBy"].ToString()));
            object obj = (dr["LastItemModifiedDate"] == DBNull.Value ? dr["TimeCreated"] : dr["LastItemModifiedDate"]);
            xmlWriter.WriteAttributeString("LastItemModifiedDate",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)obj)));
            this.GetSiteData(this.SiteID, out str, out str1, out str2, out str3, out str4, out str5, out str6, out str7,
                out str8, out str9, out str10, out str11, out str12, out str13);
            xmlWriter.WriteAttributeString("SiteCollectionServerRelativeUrl", str);
            xmlWriter.WriteAttributeString("RootWebGUID", str4);
            xmlWriter.WriteAttributeString("RootSiteGUID", str5);
            xmlWriter.WriteAttributeString("TaxonomyListGUID", str6);
            xmlWriter.WriteAttributeString("QuotaID", str1);
            xmlWriter.WriteAttributeString("QuotaStorageLimit", str2);
            xmlWriter.WriteAttributeString("QuotaStorageWarning", str3);
            if (!string.IsNullOrEmpty(str12) && base.SharePointVersion.IsSharePoint2013OrLater)
            {
                str14 = (!str12.StartsWith("4.") ? "15" : "14");
                xmlWriter.WriteAttributeString("ExperienceVersion", str14);
            }

            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                xmlWriter.WriteAttributeString("AuditFlags", str7);
            }

            if (base.SharePointVersion.IsSharePoint2010OrLater)
            {
                xmlWriter.WriteAttributeString("TrimAuditLog", str8);
                xmlWriter.WriteAttributeString("AuditLogTrimmingCallout", str9);
                xmlWriter.WriteAttributeString("AuditLogTrimmingRetention", str10);
                xmlWriter.WriteAttributeString("AuditLogReportStorageLocation", str11);
            }

            xmlWriter.WriteAttributeString("Description", dr["Description"].ToString());
            xmlWriter.WriteAttributeString("IsSiteAdmin", "True");
            bool flag = false;
            bool flag1 = false;
            if (!base.SharePointVersion.IsSharePoint2003 || !this.IsPortal ||
                !dr.Table.Columns.Contains("SecurityProvider") || dr["SecurityProvider"] is DBNull)
            {
                flag = dr["FirstUniqueAncestorWebId"].ToString() == dr["Id"].ToString();
                flag1 = dr["RoleDefWebId"].ToString() == dr["Id"].ToString();
            }
            else
            {
                object item = dr["InheritSecurity"];
                if (item != null && !(item is DBNull) && !(bool)item)
                {
                    flag = true;
                }

                flag1 = flag;
            }

            xmlWriter.WriteAttributeString("HasUniquePermissions", flag.ToString());
            xmlWriter.WriteAttributeString("HasUniqueRoles", flag1.ToString());
            object item1 = dr["UniqueRequestAccessEmail"];
            xmlWriter.WriteAttributeString("RequestAccessEnabled",
                ((item1 == null || item1 is DBNull ? false : !string.IsNullOrEmpty(item1.ToString()))).ToString());
            xmlWriter.WriteAttributeString("RequestAccessEmail", item1.ToString());
            long num = (DBNull.Value.Equals(dr["metainfo"]) ? (long)0 : Convert.ToInt64(dr["Flags"]));
            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                xmlWriter.WriteAttributeString("InheritGlobalNavigation",
                    (dr["NavParentWebId"].ToString() == "" ? false.ToString() : true.ToString()));
            }

            if (!DBNull.Value.Equals(dr["metainfo"]))
            {
                string str18 = Encoding.UTF8.GetString((byte[])dr["metainfo"]);
                this.GetWebNavigationXML(xmlWriter, str18, Convert.ToInt32(num));
                if (base.SharePointVersion.IsSharePoint2007OrLater)
                {
                    xmlWriter.WriteAttributeString("InheritsMasterPage",
                        (str18.IndexOf("InheritsMasterUrl:SW|True") != -1 ||
                         str18.IndexOf("InheritsMasterUrl:BW|True") != -1
                            ? "True"
                            : "False"));
                    xmlWriter.WriteAttributeString("InheritsCustomMasterPage",
                        (str18.IndexOf("InheritsCustomMasterUrl:SW|True") != -1 ||
                         str18.IndexOf("InheritsCustomMasterUrl:BW|True") != -1
                            ? "True"
                            : "False"));
                    xmlWriter.WriteAttributeString("InheritsAlternateCssUrl",
                        (str18.IndexOf("InheritsAlternateCssUrl:SW|True") != -1 ||
                         str18.IndexOf("InheritsAlternateCssUrl:BW|True") != -1
                            ? "True"
                            : "False"));
                    xmlWriter.WriteAttributeString("NoCrawl",
                        (str18.IndexOf("NoCrawl:SW|true") != -1 || str18.IndexOf("NoCrawl:BW|true") != -1
                            ? "True"
                            : "False"));
                }

                this.AddRecordDecalarationSettings(xmlWriter, str18);
                if (str18.IndexOf("__WebTemplates:SW|") > 0)
                {
                    string str19 = str18.Substring(str18.IndexOf("__WebTemplates:SW|") + "__WebTemplates:SW|".Length);
                    int num1 = str19.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("AllowedWebTemplates",
                        (num1 >= 0 ? str19.Substring(0, num1) : str19));
                }

                if (str18.IndexOf("__InheritWebTemplates:SW|") > 0)
                {
                    string str20 = str18.Substring(str18.IndexOf("__InheritWebTemplates:SW|") +
                                                   "__InheritWebTemplates:SW|".Length);
                    int num2 = str20.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("InheritWebTemplates",
                        (num2 >= 0 ? str20.Substring(0, num2) : str20));
                }

                if (str18.IndexOf("__PageLayouts:SW|") > 0)
                {
                    string str21 = str18.Substring(str18.IndexOf("__PageLayouts:SW|") + "__PageLayouts:SW|".Length);
                    int num3 = str21.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("AllowedPageLayouts",
                        (num3 >= 0 ? str21.Substring(0, num3) : str21));
                }

                if (str18.IndexOf("__DefaultPageLayout:SW|") > 0)
                {
                    string str22 =
                        str18.Substring(str18.IndexOf("__DefaultPageLayout:SW|") + "__DefaultPageLayout:SW|".Length);
                    int num4 = str22.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("DefaultPageLayout", (num4 >= 0 ? str22.Substring(0, num4) : str22));
                }

                if (str18.IndexOf("__AllowSpacesInNewPageName:SW|") > 0)
                {
                    string str23 = str18.Substring(str18.IndexOf("__AllowSpacesInNewPageName:SW|") +
                                                   "__AllowSpacesInNewPageName:SW|".Length);
                    int num5 = str23.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("AllowSpacesInNewPageName",
                        (num5 >= 0 ? str23.Substring(0, num5) : str23));
                }

                if (str18.IndexOf("vti_rss_ManagingEditor:SW|") > 0)
                {
                    string str24 = str18.Substring(str18.IndexOf("vti_rss_ManagingEditor:SW|") +
                                                   "vti_rss_ManagingEditor:SW|".Length);
                    int num6 = str24.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("RssManagingEditor", (num6 >= 0 ? str24.Substring(0, num6) : str24));
                }

                if (str18.IndexOf("vti_rss_Copyright:SW|") > 0)
                {
                    string str25 =
                        str18.Substring(str18.IndexOf("vti_rss_Copyright:SW|") + "vti_rss_Copyright:SW|".Length);
                    int num7 = str25.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("RssCopyright", (num7 >= 0 ? str25.Substring(0, num7) : str25));
                }

                if (str18.IndexOf("vti_rss_WebMaster:SW|") > 0)
                {
                    string str26 =
                        str18.Substring(str18.IndexOf("vti_rss_WebMaster:SW|") + "vti_rss_WebMaster:SW|".Length);
                    int num8 = str26.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("RssWebMaster", (num8 >= 0 ? str26.Substring(0, num8) : str26));
                }

                if (str18.IndexOf("vti_rss_TimeToLive:IW|") > 0)
                {
                    string str27 =
                        str18.Substring(str18.IndexOf("vti_rss_TimeToLive:IW|") + "vti_rss_TimeToLive:IW|".Length);
                    int num9 = str27.IndexOf("\r\n");
                    xmlWriter.WriteAttributeString("RssTimeToLive", (num9 >= 0 ? str27.Substring(0, num9) : str27));
                }

                this.WriteAssociatedGroupData(str18, xmlWriter);
            }

            bool flag2 = (num & (long)128) <= (long)0;
            xmlWriter.WriteAttributeString("ParserEnabled", flag2.ToString());
            xmlWriter.WriteAttributeString("AllowRSSSiteFeeds", str13);
            xmlWriter.WriteAttributeString("AllowRSSFeeds", ((num & (long)8) > (long)0 ? "False" : "True"));
            string str28 = (dr["DefTheme"].ToString() == "" ? "none" : dr["DefTheme"].ToString());
            char[] chrArray = new char[] { ' ' };
            string[] strArrays = str28.Split(chrArray);
            if (base.SharePointVersion.IsSharePoint2007OrEarlier || str28 == "none")
            {
                xmlWriter.WriteAttributeString("SiteTheme", strArrays[0]);
            }
            else
            {
                int num10 = str28.LastIndexOf('/');
                if (num10 >= 0)
                {
                    str28 = (num10 == str28.Length - 1 ? "" : str28.Substring(num10 + 1));
                }

                int num11 = str28.LastIndexOf('#');
                if (num11 >= 0)
                {
                    str28 = (num11 == str28.Length - 1 ? "" : str28.Substring(num11 + 1));
                }

                if (!string.IsNullOrEmpty(str28))
                {
                    Dictionary<string, string> themeUniqueToRealNameMap = this.GetThemeUniqueToRealNameMap();
                    if (themeUniqueToRealNameMap.ContainsKey(str28))
                    {
                        xmlWriter.WriteAttributeString("SiteTheme", themeUniqueToRealNameMap[str28]);
                    }
                }
            }

            dr["Locale"].ToString();
            xmlWriter.WriteAttributeString("RegionalSortOrder", dr["Collation"].ToString());
            xmlWriter.WriteAttributeString("Calendar", dr["CalendarType"].ToString());
            if (dr.Table.Columns.Contains("CalendarViewOptions"))
            {
                xmlWriter.WriteAttributeString("AlternateCalendar", dr["AltCalendarType"].ToString());
                long num12 = Convert.ToInt64(dr["CalendarViewOptions"].ToString()) & (long)7;
                xmlWriter.WriteAttributeString("FirstDayOfWeek", num12.ToString());
                xmlWriter.WriteAttributeString("ShowWeeks",
                    ((Convert.ToInt64(dr["CalendarViewOptions"].ToString()) & (long)32) > (long)0 ? "True" : "False"));
                int num13 = Convert.ToInt32(dr["CalendarViewOptions"].ToString());
                XmlWriter xmlWriter1 = xmlWriter;
                if ((num13 & 16) > 0)
                {
                    str16 = "2";
                }
                else
                {
                    str16 = ((num13 & 8) > 0 ? "1" : "0");
                }

                xmlWriter1.WriteAttributeString("FirstWeekOfYear", str16);
                xmlWriter.WriteAttributeString("WorkDays", dr["Workdays"].ToString());
                xmlWriter.WriteAttributeString("WorkDayStartHour", dr["WorkDayStartHour"].ToString());
                xmlWriter.WriteAttributeString("WorkDayEndHour", dr["WorkDayEndHour"].ToString());
            }

            xmlWriter.WriteAttributeString("TimeFormat", dr["Time24"].ToString());
            if (dr.Table.Columns.Contains("AdjustHijriDays"))
            {
                xmlWriter.WriteAttributeString("AdjustHijriDays",
                    (dr["AdjustHijriDays"].ToString() == "" ? "0" : dr["AdjustHijriDays"].ToString()));
            }

            if ((Convert.ToInt64(dr["Flags"]) & (long)4096) > (long)0)
            {
                str15 = "Never";
            }
            else
            {
                str15 = ((Convert.ToInt64(dr["Flags"]) & (long)2048) > (long)0 ? "Always" : "Automatic");
            }

            xmlWriter.WriteAttributeString("ASPXPageIndexMode", str15);
            if (dr.Table.Columns.Contains("MasterUrl"))
            {
                string str29 = dr["MasterUrl"].ToString();
                chrArray = new char[] { '/' };
                xmlWriter.WriteAttributeString("MasterPage", string.Concat("/", str29.TrimStart(chrArray)));
            }

            if (dr.Table.Columns.Contains("CustomMasterUrl"))
            {
                string str30 = dr["CustomMasterUrl"].ToString();
                chrArray = new char[] { '/' };
                xmlWriter.WriteAttributeString("CustomMasterPage", string.Concat("/", str30.TrimStart(chrArray)));
            }

            if (dr.Table.Columns.Contains("AlternateCSSUrl"))
            {
                string str31 = dr["AlternateCSSUrl"].ToString();
                if (!string.IsNullOrEmpty(str31) && !str31.Contains("://") && !str31.StartsWith("/"))
                {
                    str31 = string.Concat("/", str31);
                }

                xmlWriter.WriteAttributeString("AlternateCssUrl", str31);
            }

            string empty = string.Empty;
            if (base.SharePointVersion.IsSharePoint2007)
            {
                empty = "3";
            }
            else if (base.SharePointVersion.IsSharePoint2010OrLater && dr.Table.Columns.Contains("UIVersion"))
            {
                empty = dr["UIVersion"].ToString();
            }

            xmlWriter.WriteAttributeString("UIVersion", empty);
            if (!base.SharePointVersion.IsSharePoint2007OrLater)
            {
                xmlWriter.WriteAttributeString("PublishingFeatureActivated", "False");
            }
            else
            {
                bool flag3 = this.HasPublishingFeatureActivated(dr["Id"].ToString());
                xmlWriter.WriteAttributeString("PublishingFeatureActivated", flag3.ToString());
                string webWelcomePage = this.GetWebWelcomePage(dr["Id"].ToString());
                if (webWelcomePage != null)
                {
                    xmlWriter.WriteAttributeString("WelcomePage", webWelcomePage);
                }
            }

            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                string webFeatures = this.GetWebFeatures(this.WebID);
                if (webFeatures != null)
                {
                    xmlWriter.WriteAttributeString("SiteFeatures", webFeatures);
                }
            }

            if (base.SharePointVersion.IsSharePoint2007OrLater)
            {
                string webFeatures1 = this.GetWebFeatures("00000000-0000-0000-0000-000000000000");
                if (webFeatures1 != null)
                {
                    xmlWriter.WriteAttributeString("SiteCollFeatures", webFeatures1);
                }
            }

            if (dr["WebTemplate"].ToString() == "2")
            {
                this.GetWebMeetingInstanceXML(xmlWriter);
            }
        }

        public string GetWorkflowAssociation2010(string options)
        {
            throw new NotImplementedException();
        }

        public string GetWorkflowAssociation2013(string options)
        {
            throw new NotImplementedException();
        }

        public string GetWorkflowAssociations(string sObjectId, string workflowConfigurationXml)
        {
            object byteArray;
            string str = null;
            bool flag = false;
            object obj = null;
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(workflowConfigurationXml);
            XmlNode documentElement = xmlDocument.DocumentElement;
            bool attributeValueAsBoolean = documentElement.GetAttributeValueAsBoolean("IncludePreviousVersions");
            string attributeValueAsString = documentElement.GetAttributeValueAsString("Scope");
            if (attributeValueAsString.Equals("web", StringComparison.InvariantCultureIgnoreCase))
            {
                str = "select * from WorkflowAssociation where WebId = @ObjectID and ListId = @ObjectID";
                byteArray = (new Guid(sObjectId)).ToByteArray();
            }
            else if (!attributeValueAsString.Equals("list", StringComparison.InvariantCultureIgnoreCase))
            {
                str = "select * from WorkflowAssociation where ContentTypeId = @ObjectID and WebId= @WebId";
                obj = (new Guid(this.m_sWebID)).ToByteArray();
                if (sObjectId.StartsWith("0x"))
                {
                    sObjectId = sObjectId.Substring(2, sObjectId.Length - 2);
                }

                byteArray = DBAdapter.ConvertStringToDatabaseHex(sObjectId);
                if (!attributeValueAsString.Equals("contenttype", StringComparison.InvariantCultureIgnoreCase))
                {
                    flag = true;
                    attributeValueAsString = documentElement.GetAttributeValueAsString("ListID");
                }
            }
            else
            {
                str = string.Format(
                    "SELECT wfa.*, l.tp_DefaultWorkflowId FROM WorkflowAssociation wfa LEFT OUTER JOIN Lists l ON l.tp_ID = '{0}' WHERE ListId = @ObjectID",
                    sObjectId);
                byteArray = (new Guid(sObjectId)).ToByteArray();
            }

            DataTable dataTable = new DataTable("WorkflowAssociations");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("ObjectID", byteArray));
                    if (obj != null)
                    {
                        sqlCommand.Parameters.Add(new SqlParameter("WebId", obj));
                    }

                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count == 0)
            {
                return "<WorkflowAssociations></WorkflowAssociations>";
            }

            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("WorkflowAssociations");
            foreach (DataRow row in dataTable.Rows)
            {
                this.GetWorkflowAssociationXml(row, xmlTextWriter, flag, attributeValueAsString,
                    attributeValueAsBoolean);
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private string GetWorkflowAssociationUIVersion(DataRow dr)
        {
            string empty = string.Empty;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string str = string.Empty;
                string empty1 = string.Empty;
                string str1 = string.Empty;
                this.GetWorkflowVersionInfo(Convert.ToString(dr["Name"]), out str, out empty1, out str1);
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "select tp_UIVersionString from AllUserData where tp_ListId=@tp_ListId and tp_DeleteTransactionId = 0x and tp_Id=@tp_Id and tp_SiteId= @tp_SiteId and tp_UIVersion=@tp_UIVersion",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("tp_ListId", str));
                    sqlCommand.Parameters.Add(new SqlParameter("tp_Id", (object)Convert.ToInt32(empty1)));
                    sqlCommand.Parameters.Add(new SqlParameter("tp_SiteId", dr["SiteId"]));
                    sqlCommand.Parameters.Add(new SqlParameter("tp_UIVersion", (object)Convert.ToInt32(str1)));
                    empty = Convert.ToString(sqlCommand.ExecuteScalar());
                }

                sqlConnection.Close();
            }

            return empty;
        }

        public void GetWorkflowAssociationXml(DataRow dr, XmlWriter xmlWriter, bool bCreateContentTypeListAttribute,
            string sParentId, bool includePreviousWorkflowVersions)
        {
            if (!includePreviousWorkflowVersions && !this.WorkflowIsEnabled(dr))
            {
                return;
            }

            xmlWriter.WriteStartElement("WorkflowAssociation");
            xmlWriter.WriteAttributeString("Configuration", dr["Configuration"].ToString());
            xmlWriter.WriteAttributeString("Modified",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)dr["Modified"])));
            xmlWriter.WriteAttributeString("Created",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)dr["Created"])));
            xmlWriter.WriteAttributeString("ParentID", dr["ParentId"].ToString());
            xmlWriter.WriteAttributeString("AssociationData", dr["InstantiationParams"].ToString());
            xmlWriter.WriteAttributeString("Id", dr["Id"].ToString());
            xmlWriter.WriteAttributeString("Name",
                (bCreateContentTypeListAttribute
                    ? Metalogix.SharePoint.Adapters.Utils.RemoveAssociationInformationFromWorkflowName(
                        Convert.ToString(dr["Name"]))
                    : Metalogix.SharePoint.Adapters.Utils.GetWorkflowName(Convert.ToString(dr["Name"]))));
            xmlWriter.WriteAttributeString("BaseId", dr["BaseId"].ToString());
            xmlWriter.WriteAttributeString("PermissionsManual", dr["PermissionsManual"].ToString());
            xmlWriter.WriteAttributeString("StatusColumn", "true");
            xmlWriter.WriteAttributeString("AutoCleanupDays", dr["AutoCleanupDays"].ToString());
            xmlWriter.WriteAttributeString("Description", dr["Description"].ToString());
            xmlWriter.WriteAttributeString("ParentContentType", dr["ContentTypeId"].ToString());
            xmlWriter.WriteAttributeString("ParentListID", dr["ListId"].ToString());
            if (dr["Name"].ToString().Contains("<Cfg."))
            {
                xmlWriter.WriteAttributeString("UIVersion", this.GetWorkflowAssociationUIVersion(dr));
            }

            if (dr.Table.Columns["tp_DefaultWorkflowId"] != null && !(dr["tp_DefaultWorkflowId"] is DBNull))
            {
                Guid guid = new Guid(dr["tp_DefaultWorkflowId"].ToString());
                if (guid != Guid.Empty && guid.Equals(new Guid(dr["Id"].ToString())))
                {
                    xmlWriter.WriteAttributeString("DefaultContentApprovalWorkflowId", guid.ToString());
                }
            }

            if (!(dr["HistoryListId"] is DBNull))
            {
                Guid guid1 = new Guid((byte[])dr["HistoryListId"]);
                xmlWriter.WriteAttributeString("HistoryListId", guid1.ToString());
            }
            else
            {
                xmlWriter.WriteAttributeString("HistoryListId", "");
            }

            if (!(dr["HistoryListTitle"] is DBNull))
            {
                xmlWriter.WriteAttributeString("HistoryListTitle", dr["HistoryListTitle"].ToString());
            }
            else
            {
                xmlWriter.WriteAttributeString("HistoryListTitle", "");
            }

            if (!(dr["TaskListId"] is DBNull))
            {
                Guid guid2 = new Guid((byte[])dr["TaskListId"]);
                xmlWriter.WriteAttributeString("TaskListId", guid2.ToString());
            }
            else
            {
                xmlWriter.WriteAttributeString("TaskListId", "");
            }

            if (!(dr["TaskListTitle"] is DBNull))
            {
                xmlWriter.WriteAttributeString("TaskListTitle", dr["TaskListTitle"].ToString());
            }
            else
            {
                xmlWriter.WriteAttributeString("TaskListTitle", "");
            }

            if (!(dr["StatusFieldName"] is DBNull))
            {
                xmlWriter.WriteAttributeString("StatusColumnName", dr["StatusFieldName"].ToString());
            }
            else
            {
                xmlWriter.WriteAttributeString("StatusFieldName", "");
            }

            if (bCreateContentTypeListAttribute)
            {
                xmlWriter.WriteAttributeString("ContentTypeParentListId", sParentId);
            }

            if (base.SharePointVersion.IsSharePoint2007 &&
                (!dr["Name"].ToString().Contains("<Xoml.") || !dr["Name"].ToString().Contains("<Cfg.")) ||
                base.SharePointVersion.IsSharePoint2010OrLater)
            {
                xmlWriter.WriteAttributeString("BaseTemplate", dr["BaseId"].ToString());
            }

            if (base.SharePointVersion.IsSharePoint2010OrLater && dr["Name"].ToString().Contains("<Cfg."))
            {
                xmlWriter.WriteAttributeString("Is2010SharePointDesignerWorkflow", dr["BaseId"].ToString());
            }

            xmlWriter.WriteEndElement();
        }

        public string GetWorkflowRunning2010(string options)
        {
            throw new NotImplementedException();
        }

        public string GetWorkflowRunning2013(string options)
        {
            throw new NotImplementedException();
        }

        public string GetWorkflows(string sWorkflowAssociationID, int iItemID)
        {
            string str =
                "select *, (Select tp_Login from UserInfo u where u.tp_ID = w.Author AND u.tp_SiteId = w.SiteId) as UserName from workflow w where TemplateId = @WorkflowAssociationID order by Created";
            DataTable dataTable = new DataTable("Workflows");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WorkflowAssociationID", sWorkflowAssociationID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }
            }

            if (dataTable.Rows.Count == 0)
            {
                return "<Workflows></Workflows>";
            }

            StringBuilder stringBuilder = new StringBuilder(1024);
            using (XmlWriter xmlWriter = XmlWriter.Create(stringBuilder, XmlUtility.WriterSettings))
            {
                xmlWriter.WriteStartElement("Workflows");
                foreach (DataRow row in dataTable.Rows)
                {
                    this.GetWorkflowXml(row, xmlWriter);
                }

                xmlWriter.WriteEndElement();
                xmlWriter.Flush();
                xmlWriter.Close();
            }

            return stringBuilder.ToString();
        }

        private void GetWorkflowVersionInfo(string internalName, out string listId, out string tpId,
            out string workflowUIVersion)
        {
            string[] strArrays = null;
            listId = string.Empty;
            tpId = string.Empty;
            workflowUIVersion = string.Empty;
            if (!string.IsNullOrEmpty(internalName))
            {
                string[] strArrays1 = new string[] { "<Cfg." };
                string str = internalName.Split(strArrays1, StringSplitOptions.None)[1];
                str = str.Substring(0, str.Length - 2);
                strArrays = str.Split(new char[] { '.' });
                listId = strArrays[0].Replace('\u005F', '-');
                tpId = strArrays[1];
                workflowUIVersion = strArrays[2];
            }
        }

        public void GetWorkflowXml(DataRow dr, XmlWriter xmlWriter)
        {
            xmlWriter.WriteStartElement("Workflow");
            xmlWriter.WriteAttributeString("Id", dr["Id"].ToString());
            xmlWriter.WriteAttributeString("TemplateId", dr["TemplateId"].ToString());
            xmlWriter.WriteAttributeString("ListId", dr["ListId"].ToString());
            xmlWriter.WriteAttributeString("SiteId", dr["SiteId"].ToString());
            xmlWriter.WriteAttributeString("WebId", dr["WebId"].ToString());
            xmlWriter.WriteAttributeString("TaskListId", dr["TaskListId"].ToString());
            xmlWriter.WriteAttributeString("ItemId", dr["ItemId"].ToString());
            xmlWriter.WriteAttributeString("ItemGUID", dr["ItemGUID"].ToString());
            xmlWriter.WriteAttributeString("Author", dr["UserName"].ToString());
            xmlWriter.WriteAttributeString("Modified",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)dr["Modified"])));
            xmlWriter.WriteAttributeString("Created",
                Metalogix.SharePoint.Adapters.Utils.FormatDate(
                    Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)dr["Created"])));
            xmlWriter.WriteAttributeString("InternalState", dr["InternalState"].ToString());
            xmlWriter.WriteAttributeString("LockMachineId", dr["LockMachineId"].ToString());
            xmlWriter.WriteAttributeString("LockMachinePID", dr["LockMachinePID"].ToString());
            xmlWriter.WriteAttributeString("InstanceDataVersion", dr["InstanceDataVersion"].ToString());
            xmlWriter.WriteAttributeString("InstanceDataSize", dr["InstanceDataSize"].ToString());
            xmlWriter.WriteAttributeString("Modifications", dr["Modifications"].ToString());
            xmlWriter.WriteAttributeString("HistorySize", dr["HistorySize"].ToString());
            xmlWriter.WriteAttributeString("History", dr["History"].ToString());
            xmlWriter.WriteAttributeString("StatusVersion", dr["StatusVersion"].ToString());
            xmlWriter.WriteAttributeString("Status1", dr["Status1"].ToString());
            xmlWriter.WriteAttributeString("Status2", dr["Status2"].ToString());
            xmlWriter.WriteAttributeString("Status3", dr["Status3"].ToString());
            xmlWriter.WriteAttributeString("Status4", dr["Status4"].ToString());
            xmlWriter.WriteAttributeString("Status5", dr["Status5"].ToString());
            xmlWriter.WriteAttributeString("Status6", dr["Status6"].ToString());
            xmlWriter.WriteAttributeString("Status7", dr["Status7"].ToString());
            xmlWriter.WriteAttributeString("Status8", dr["Status8"].ToString());
            xmlWriter.WriteAttributeString("Status9", dr["Status9"].ToString());
            xmlWriter.WriteAttributeString("Status10", dr["Status10"].ToString());
            xmlWriter.WriteAttributeString("TextStatus1", dr["TextStatus1"].ToString());
            xmlWriter.WriteAttributeString("TextStatus2", dr["TextStatus2"].ToString());
            xmlWriter.WriteAttributeString("TextStatus3", dr["TextStatus3"].ToString());
            xmlWriter.WriteAttributeString("TextStatus4", dr["TextStatus4"].ToString());
            xmlWriter.WriteAttributeString("TextStatus5", dr["TextStatus5"].ToString());
            string empty = string.Empty;
            if (!(dr["InstanceData"] is DBNull))
            {
                empty = DBAdapter.DecompressInstanceData((byte[])dr["InstanceData"]);
            }

            xmlWriter.WriteAttributeString("InstanceData", empty);
            xmlWriter.WriteEndElement();
        }

        public string HasDocument(string sDocumentServerRelativeUrl)
        {
            string trueString;
            string str = "";
            string str1 = "";
            Metalogix.SharePoint.Adapters.Utils.ParseUrlForLeafName(sDocumentServerRelativeUrl, out str, out str1);
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                SqlCommand sqlCommand =
                    this.GetSqlCommand("SELECT * FROM docs WHERE DirName = @DIRNAME AND LeafName = @FILENAME",
                        sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("DIRNAME", str));
                sqlCommand.Parameters.Add(new SqlParameter("FILENAME", str1));
                SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                DataTable dataTable = new DataTable();
                sqlDataAdapter.Fill(dataTable);
                if (dataTable.Rows.Count == 0)
                {
                    return bool.FalseString;
                }
                else
                {
                    trueString = bool.TrueString;
                }
            }

            return trueString;
        }

        private bool HasPublishingFeatureActivated(string sWebId)
        {
            int num = 0;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string str = "22A9EF51-737B-4FF2-9346-694633FE4416";
                SqlCommand sqlCommand =
                    this.GetSqlCommand(
                        "SELECT COUNT(*) FROM Features WHERE SiteId=@SiteID AND WebId = @WebId AND FeatureId = @PubFeatureId",
                        sqlConnection);
                sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                sqlCommand.Parameters.Add(new SqlParameter("WebID", sWebId));
                sqlCommand.Parameters.Add(new SqlParameter("PubFeatureId", str));
                num = (int)sqlCommand.ExecuteScalar();
            }

            return num > 0;
        }

        public string HasUniquePermissions(string listID, int listItemID)
        {
            throw new NotSupportedException(Resources.HasUniquePermissionsNotNecessary);
        }

        public string HasWebParts(string sWebPartPageServerRelativeUrl)
        {
            bool flag = false;
            OperationReportingResult operationReportingResult =
                new OperationReportingResult(this.GetWebPartsOnPage(sWebPartPageServerRelativeUrl));
            if (operationReportingResult.ErrorOccured)
            {
                return Convert.ToString(true);
            }

            string objectXml = operationReportingResult.ObjectXml;
            if (!string.IsNullOrEmpty(objectXml) &&
                XmlUtility.StringToXmlNode(objectXml).SelectNodes(".//WebPart").Count > 0)
            {
                flag = true;
            }

            return Convert.ToString(flag);
        }

        public string HasWorkflows(string sListID, string sItemID)
        {
            string trueString;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                SqlCommand sqlCommand =
                    this.GetSqlCommand("SELECT * FROM Workflow WHERE ItemGUID = @ITEMID", sqlConnection);
                sqlCommand.Parameters.Add("ITEMID", SqlDbType.UniqueIdentifier);
                sqlCommand.Parameters["ITEMID"].Value = new Guid(sItemID);
                SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                DataTable dataTable = new DataTable();
                sqlDataAdapter.Fill(dataTable);
                if (dataTable.Rows.Count == 0)
                {
                    return bool.FalseString;
                }
                else
                {
                    trueString = bool.TrueString;
                }
            }

            return trueString;
        }

        public string IsAppWebPartOnPage(Guid appProductId, string itemUrl)
        {
            throw new NotImplementedException();
        }

        private bool IsCompressedXML(byte[] perUserProperties, byte[] allUserProperties)
        {
            if (perUserProperties != null && (int)perUserProperties.Length >= 2 && perUserProperties[0] == 1 &&
                perUserProperties[1] == 5 || allUserProperties != null && (int)allUserProperties.Length >= 2 &&
                allUserProperties[0] == 1 && allUserProperties[1] == 5)
            {
                return true;
            }

            return false;
        }

        public string IsListContainsInfoPathOrAspxItem(string listId)
        {
            throw new NotImplementedException();
        }

        private bool IsOnQuickLaunch(string sListID)
        {
            DataTable dataTable = new DataTable("List");
            DataRow item = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "select n.EidParent from NavNodes n, Docs d where n.webid = @WebID and n.DocId = d.Id and d.listid = @ListID",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WebID", this.WebID));
                    sqlCommand.Parameters.Add(new SqlParameter("ListID", sListID));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count > 0)
                {
                    item = dataTable.Rows[0];
                }
            }

            if (item == null)
            {
                return false;
            }

            if (base.SharePointVersion.IsSharePoint2013OrLater && Convert.ToString(item["EidParent"]) == "1033")
            {
                return false;
            }

            return true;
        }

        public bool IsSP2013DBConnectionAllowed()
        {
            if (SharePointUtils.IsRegistryKeyExists("SOFTWARE\\Microsoft\\Shared Tools\\Web Server Extensions\\16.0"))
            {
                return false;
            }

            if (SharePointUtils.IsRegistryKeyExists("SOFTWARE\\Microsoft\\Shared Tools\\Web Server Extensions\\15.0"))
            {
                return true;
            }

            if (SharePointUtils.IsRegistryKeyExists("SOFTWARE\\Microsoft\\Shared Tools\\Web Server Extensions\\14.0"))
            {
                return false;
            }

            if (SharePointUtils.IsRegistryKeyExists("SOFTWARE\\Microsoft\\Shared Tools\\Web Server Extensions\\12.0"))
            {
                return false;
            }

            if (SharePointUtils.IsRegistryKeyExists("SOFTWARE\\Microsoft\\Shared Tools\\Web Server Extensions\\6.0"))
            {
                return false;
            }

            return true;
        }

        // Metalogix.SharePoint.Adapters.DB.DBAdapter
        private string MapAndDecodeContentTypeData(string sListId, string sContentTypeXml)
        {
            XmlDocument xmlDocument = new XmlDocument();
            try
            {
                xmlDocument.LoadXml(sContentTypeXml);
            }
            catch
            {
                return sContentTypeXml;
            }

            foreach (XmlNode xmlNode in xmlDocument.DocumentElement.SelectNodes(".//XmlDocument"))
            {
                try
                {
                    xmlNode.InnerXml = Encoding.UTF8.GetString(Convert.FromBase64String(xmlNode.InnerXml));
                }
                catch
                {
                }
            }

            if (sListId != null)
            {
                XmlNodeList xmlNodeList = xmlDocument.DocumentElement.SelectNodes(".//ContentType[not(@Name)]");
                if (xmlNodeList.Count != 0)
                {
                    using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                    {
                        sqlConnection.Open();
                        foreach (XmlNode xmlNode2 in xmlDocument.DocumentElement.SelectNodes(".//ContentType"))
                        {
                            if (xmlNode2.Attributes["Name"] != null &&
                                xmlNode2.Attributes["Name"].Value.Contains("$Resource"))
                            {
                                try
                                {
                                    string contentTypeNameByBestMatchID =
                                        this.GetContentTypeNameByBestMatchID(sListId, xmlNodeList, sqlConnection,
                                            xmlNode2);
                                    if (contentTypeNameByBestMatchID != null)
                                    {
                                        xmlNode2.Attributes["Name"].Value = contentTypeNameByBestMatchID;
                                    }
                                }
                                catch
                                {
                                }
                            }

                            XmlNode xmlNode3 = xmlNode2.SelectSingleNode(".//DocumentTemplate");
                            string text = (xmlNode3 != null && xmlNode3.Attributes["TargetName"] != null)
                                ? xmlNode3.Attributes["TargetName"].Value
                                : null;
                            if (!string.IsNullOrEmpty(text) && !text.StartsWith("/") && !text.Contains("://"))
                            {
                                XmlNode xmlNode4 = XmlUtility.StringToXmlNode(this.GetList(sListId));
                                xmlNode3.Attributes["TargetName"].Value = string.Concat(new object[]
                                {
                                    '/',
                                    xmlNode4.Attributes["DirName"].Value,
                                    '/',
                                    xmlNode4.Attributes["Name"].Value,
                                    '/',
                                    text
                                });
                            }
                        }
                    }

                    foreach (XmlNode xmlNode5 in xmlNodeList)
                    {
                        xmlNode5.ParentNode.RemoveChild(xmlNode5);
                    }
                }
            }

            return xmlDocument.DocumentElement.OuterXml;
        }

        private void MapWorkflowData(XmlNode ndWorkflow, bool bIsWebWorkflow, SqlConnection conn)
        {
            DataTable dataTable = new DataTable("WorkflowData");
            string str = null;
            if (!bIsWebWorkflow)
            {
                string[] value = new string[]
                {
                    "select tp_ID, tp_ListId, tp_SiteId,(Select tp_WebId from AllLists l where l.tp_ID = u.tp_ListId) as tp_WebId, tp_Level, tp_Version, tp_RowOrdinal, (select tp_ID from UserInfo i where i.tp_Login = '",
                    ndWorkflow.Attributes["Author"].Value,
                    "' AND i.tp_SiteId = u.tp_SiteId) as UserId from AllUserData u where tp_GUID = '",
                    ndWorkflow.Attributes["ItemGUID"].Value, "' order by tp_Version desc"
                };
                str = string.Concat(value);
            }
            else
            {
                string[] strArrays = new string[]
                {
                    "select Id as tp_WebId, SiteId as tp_SiteId, (select tp_ID from UserInfo u where u.tp_Login = '",
                    ndWorkflow.Attributes["Author"].Value,
                    "' AND u.tp_SiteId = w.SiteId) as UserId from Webs w where Id = '",
                    ndWorkflow.Attributes["WebId"].Value, "'"
                };
                str = string.Concat(strArrays);
            }

            using (SqlCommand sqlCommand = this.GetSqlCommand(str, conn))
            {
                using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                {
                    sqlDataAdapter.Fill(dataTable);
                }
            }

            if (dataTable.Rows.Count != 0)
            {
                foreach (XmlNode xmlNodes in ndWorkflow.SelectNodes(".//Event"))
                {
                    if ((xmlNodes.Attributes["ContextObjectId"] == null ||
                         !(xmlNodes.Attributes["ContextObjectId"].Value == ndWorkflow.Attributes["ItemGUID"].Value)) &&
                        (xmlNodes.Attributes["ContextObjectId"] != null ||
                         xmlNodes.Attributes["ContextCollectionId"] == null ||
                         !(xmlNodes.Attributes["ContextCollectionId"].Value ==
                           ndWorkflow.Attributes["ItemGUID"].Value)))
                    {
                        DataTable dataTable1 = new DataTable("ItemID");
                        string str1 = "select tp_ID from alluserdata where tp_GUID = @ItemGUID";
                        using (SqlCommand guid = this.GetSqlCommand(str1, conn))
                        {
                            if (xmlNodes.Attributes["ContextObjectId"] == null)
                            {
                                guid.Parameters.Add("@ItemGUID", SqlDbType.UniqueIdentifier);
                                guid.Parameters["@ItemGUID"].Value =
                                    new Guid(xmlNodes.Attributes["ContextCollectionId"].Value);
                            }
                            else
                            {
                                guid.Parameters.Add("@ItemGUID", SqlDbType.UniqueIdentifier);
                                guid.Parameters["@ItemGUID"].Value =
                                    new Guid(xmlNodes.Attributes["ContextObjectId"].Value);
                            }

                            using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(guid))
                            {
                                sqlDataAdapter1.Fill(dataTable1);
                            }
                        }

                        if (dataTable1.Rows.Count > 0)
                        {
                            xmlNodes.Attributes["ItemId"].Value = dataTable1.Rows[0]["tp_ID"].ToString();
                        }
                    }
                    else
                    {
                        xmlNodes.Attributes["ItemId"].Value = dataTable.Rows[0]["tp_ID"].ToString();
                    }

                    if (xmlNodes.Attributes["HostId"].Value == ndWorkflow.Attributes["ListId"].Value)
                    {
                        xmlNodes.Attributes["HostId"].Value = dataTable.Rows[0]["tp_ListId"].ToString();
                    }

                    xmlNodes.Attributes["SiteId"].Value = dataTable.Rows[0]["tp_SiteId"].ToString();
                    xmlNodes.Attributes["WebId"].Value = dataTable.Rows[0]["tp_WebId"].ToString();
                }

                if (!bIsWebWorkflow)
                {
                    ndWorkflow.Attributes["ItemId"].Value = dataTable.Rows[0]["tp_ID"].ToString();
                    ndWorkflow.Attributes["ListId"].Value = dataTable.Rows[0]["tp_ListId"].ToString();
                    XmlAttribute xmlAttribute = ndWorkflow.OwnerDocument.CreateAttribute("Level");
                    xmlAttribute.Value = dataTable.Rows[0]["tp_Level"].ToString();
                    XmlAttribute xmlAttribute1 = ndWorkflow.OwnerDocument.CreateAttribute("Version");
                    xmlAttribute1.Value = dataTable.Rows[0]["tp_Version"].ToString();
                    XmlAttribute str2 = ndWorkflow.OwnerDocument.CreateAttribute("RowOrdinal");
                    str2.Value = dataTable.Rows[0]["tp_RowOrdinal"].ToString();
                    ndWorkflow.Attributes.Append(xmlAttribute);
                    ndWorkflow.Attributes.Append(xmlAttribute1);
                    ndWorkflow.Attributes.Append(str2);
                }
                else
                {
                    ndWorkflow.Attributes["ItemId"].Value = "-1";
                    ndWorkflow.Attributes["ListId"].Value = dataTable.Rows[0]["tp_WebId"].ToString();
                    XmlAttribute xmlAttribute2 = ndWorkflow.OwnerDocument.CreateAttribute("Level");
                    xmlAttribute2.Value = "0";
                    XmlAttribute xmlAttribute3 = ndWorkflow.OwnerDocument.CreateAttribute("Version");
                    xmlAttribute3.Value = "0";
                    XmlAttribute xmlAttribute4 = ndWorkflow.OwnerDocument.CreateAttribute("RowOrdinal");
                    xmlAttribute4.Value = "0";
                    ndWorkflow.Attributes.Append(xmlAttribute2);
                    ndWorkflow.Attributes.Append(xmlAttribute3);
                    ndWorkflow.Attributes.Append(xmlAttribute4);
                }

                ndWorkflow.Attributes["SiteId"].Value = dataTable.Rows[0]["tp_SiteId"].ToString();
                ndWorkflow.Attributes["WebId"].Value = dataTable.Rows[0]["tp_WebId"].ToString();
                ndWorkflow.Attributes["Author"].Value = dataTable.Rows[0]["UserId"].ToString();
            }

            DataTable dataTable2 = new DataTable("WorkflowData");
            str = string.Concat("select HistoryListId, BaseId from WorkflowAssociation where Id ='",
                ndWorkflow.Attributes["TemplateId"].Value, "'");
            using (SqlCommand sqlCommand1 = this.GetSqlCommand(str, conn))
            {
                using (SqlDataAdapter sqlDataAdapter2 = new SqlDataAdapter(sqlCommand1))
                {
                    sqlDataAdapter2.Fill(dataTable2);
                }
            }

            if (dataTable2.Rows.Count > 0)
            {
                XmlAttribute str3 = ndWorkflow.OwnerDocument.CreateAttribute("HistoryListId");
                XmlAttribute str4 = ndWorkflow.OwnerDocument.CreateAttribute("BaseId");
                Guid guid1 = new Guid((byte[])dataTable2.Rows[0]["HistoryListId"]);
                str3.Value = guid1.ToString();
                str4.Value = dataTable2.Rows[0]["BaseId"].ToString();
                ndWorkflow.Attributes.Append(str3);
                ndWorkflow.Attributes.Append(str4);
            }
        }

        private Dictionary<int, int> ParseACLBytes(byte[] aclBytes)
        {
            int num = 12;
            Dictionary<int, int> nums = new Dictionary<int, int>();
            byte[] numArray = new byte[4];
            byte[] numArray1 = new byte[4];
            byte[] numArray2 = new byte[] { aclBytes[11], aclBytes[10], aclBytes[9], aclBytes[8] };
            byte[] numArray3 = numArray2;
            if (BitConverter.IsLittleEndian)
            {
                Array.Reverse(numArray3);
            }

            int num1 = BitConverter.ToInt32(numArray3, 0);
            while (num + 8 < (int)aclBytes.Length && num1 > nums.Count)
            {
                for (int i = 3; i >= 0; i--)
                {
                    numArray[i] = aclBytes[num];
                    num++;
                }

                for (int j = 3; j >= 0; j--)
                {
                    numArray1[j] = aclBytes[num];
                    num++;
                }

                if (BitConverter.IsLittleEndian)
                {
                    Array.Reverse(numArray);
                    Array.Reverse(numArray1);
                }

                int num2 = BitConverter.ToInt32(numArray, 0);
                int num3 = BitConverter.ToInt32(numArray1, 0);
                if (num2 == 0)
                {
                    continue;
                }

                nums.Add(num2, num3);
            }

            return nums;
        }

        private Dictionary<string, string> ParseMetaInfoStringToDictionary(byte[] metaInfo)
        {
            return this.ParseMetaInfoStringToDictionary(Encoding.ASCII.GetString(metaInfo));
        }

        private Dictionary<string, string> ParseMetaInfoStringToDictionary(string sMetaInfo)
        {
            if (string.IsNullOrEmpty(sMetaInfo))
            {
                return new Dictionary<string, string>(0);
            }

            char[] chrArray = new char[] { '\r', '\n' };
            string[] strArrays = sMetaInfo.Split(chrArray, StringSplitOptions.RemoveEmptyEntries);
            Dictionary<string, string> strs = new Dictionary<string, string>((int)strArrays.Length);
            string[] strArrays1 = strArrays;
            for (int i = 0; i < (int)strArrays1.Length; i++)
            {
                string str = strArrays1[i];
                int num = str.IndexOf(':');
                if (num >= 0)
                {
                    string lower = str.Substring(0, num);
                    string str1 = str.Substring(num + 1);
                    if (lower.StartsWith("vti_"))
                    {
                        lower = lower.Substring(4);
                    }
                    else if (lower.StartsWith("__"))
                    {
                        lower = lower.Substring(2);
                    }

                    int num1 = str1.IndexOf("|");
                    if (num1 >= 0)
                    {
                        num1++;
                        str1 = (str1.Length <= num1 ? "" : str1.Substring(num1));
                    }

                    lower = lower.ToLower();
                    if (!strs.ContainsKey(lower))
                    {
                        strs.Add(lower, str1);
                    }
                }
            }

            return strs;
        }

        private void PopulateVersionResultsTwoQuery(StringBuilder commonSQLHeader,
            StringBuilder documentCurrentVersionSQL, StringBuilder documentVersionSQL, DataTable dtVersions,
            DataTable dtVersionsCurrent, SqlConnection conn)
        {
            string str = string.Concat(commonSQLHeader.ToString(), documentVersionSQL.ToString());
            using (SqlCommand sqlCommand = this.GetSqlCommand(str, conn))
            {
                using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                {
                    sqlDataAdapter.Fill(dtVersions);
                }
            }

            string str1 = string.Concat(commonSQLHeader.ToString(), documentCurrentVersionSQL.ToString());
            using (SqlCommand sqlCommand1 = this.GetSqlCommand(str1, conn))
            {
                using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                {
                    sqlDataAdapter1.Fill(dtVersionsCurrent);
                }
            }
        }

        private void PopulateVersionResultsUsingUnion(int noOfLatestVersionsToGet, StringBuilder commonSQLHeader,
            StringBuilder documentCurrentVersionSQL, StringBuilder documentVersionSQL, DataTable dtVersions,
            DataTable dtVersionsCurrent, SqlConnection conn)
        {
            StringBuilder stringBuilder = new StringBuilder(2048);
            stringBuilder.AppendLine(commonSQLHeader.ToString());
            stringBuilder.AppendLine((noOfLatestVersionsToGet > 0
                ? string.Format("SELECT TOP {0} * FROM (", noOfLatestVersionsToGet)
                : "SELECT * FROM ("));
            stringBuilder.AppendLine(documentVersionSQL.ToString());
            stringBuilder.AppendLine("UNION ALL");
            stringBuilder.AppendLine(documentCurrentVersionSQL.ToString());
            stringBuilder.AppendLine(") AS UnionResult");
            int length = stringBuilder.Length;
            stringBuilder.AppendLine("ORDER BY UnionResult._VersionNumber DESC");
            using (SqlCommand sqlCommand = this.GetSqlCommand(stringBuilder.ToString(), conn))
            {
                using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                {
                    sqlDataAdapter.Fill(dtVersions);
                }
            }

            if (noOfLatestVersionsToGet > 0 && dtVersions.Rows.Count > 0)
            {
                string str = dtVersions.Rows[dtVersions.Rows.Count - 1]["_VersionString"].ToString();
                if (!string.IsNullOrEmpty(str) && !str.EndsWith(".0"))
                {
                    int num = str.IndexOf(".");
                    string str1 = string.Format("{0}.{1}", str.Substring(0, num), 0);
                    stringBuilder.Length = length;
                    stringBuilder.AppendLine(string.Format("WHERE UnionResult._VersionString = '{0}'", str1));
                    using (SqlCommand sqlCommand1 = this.GetSqlCommand(stringBuilder.ToString(), conn))
                    {
                        using (SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1))
                        {
                            sqlDataAdapter1.Fill(dtVersionsCurrent);
                        }
                    }

                    if (dtVersionsCurrent.Rows.Count > 0)
                    {
                        dtVersions.ImportRow(dtVersionsCurrent.Rows[0]);
                    }
                }
            }
        }

        private void Process2003VersionMetaInfo(string sFields, Dictionary<string, string> columnNameMappingDictionary,
            SortedRowCollection sortedResults)
        {
            DateTime utc;
            bool flag;
            bool flag1;
            if (!base.SharePointVersion.IsSharePoint2003)
            {
                return;
            }

            XmlNode xmlNode = XmlUtility.StringToXmlNode(sFields);
            for (int i = 0; i < sortedResults.Count; i++)
            {
                DataRow item = (DataRow)sortedResults[i];
                if (!(item["_VersionMetaInfo"] is DBNull))
                {
                    Dictionary<string, string> dictionary =
                        this.ParseMetaInfoStringToDictionary((byte[])item["_VersionMetaInfo"]);
                    string str = null;
                    if (dictionary.TryGetValue("sourcecontrolcheckincomment", out str))
                    {
                        item["_CheckinComment"] = str;
                    }

                    string str1 = null;
                    if (dictionary.TryGetValue("modifiedby", out str1))
                    {
                        str1 = str1.Replace("\\\\", "\\");
                        int num = str1.IndexOf("#");
                        if (num >= 0)
                        {
                            str1 = str1.Substring(num + 1);
                        }

                        item["_VersionModifiedBy"] = str1;
                    }

                    if (i < sortedResults.Count - 1)
                    {
                        foreach (DataColumn column in item.Table.Columns)
                        {
                            string lower = column.ColumnName.ToLower();
                            if (lower == "modifiedby")
                            {
                                continue;
                            }

                            string str2 = (columnNameMappingDictionary.ContainsKey(column.ColumnName)
                                ? columnNameMappingDictionary[column.ColumnName]
                                : column.ColumnName);
                            XmlNode xmlNodes =
                                xmlNode.SelectSingleNode(string.Concat("//Fields/Field[@Name='", str2, "']"));
                            if (xmlNodes == null)
                            {
                                continue;
                            }

                            if ((xmlNodes.Attributes["FromTemplate"] == null
                                    ? false
                                    : !xmlNodes.Attributes["FromTemplate"].Value.ToLower().Equals("false")) &&
                                !DBAdapter.SharePoint2003VersionedTemplateFields.Contains(lower))
                            {
                                continue;
                            }

                            string str3 = null;
                            if (dictionary.TryGetValue(XmlConvert.DecodeName(str2).ToLower(), out str3))
                            {
                                flag = true;
                            }
                            else
                            {
                                flag = (!str2.Equals("ImageCreateDate")
                                    ? false
                                    : dictionary.TryGetValue("imgdate", out str3));
                            }

                            if (!flag || string.IsNullOrEmpty(str3))
                            {
                                item[column.ColumnName] = DBNull.Value;
                            }
                            else if (xmlNodes.Attributes["Type"].Value == "User")
                            {
                                string str4 = null;
                                if (!this.UserMap.TryGetValue(str3, out str4))
                                {
                                    continue;
                                }

                                item[column.ColumnName] = str4;
                            }
                            else if (xmlNodes.Attributes["Type"].Value == "Boolean")
                            {
                                flag1 = (str3 == "1" ? true : str3.Equals("true", StringComparison.OrdinalIgnoreCase));
                                item[column.ColumnName] = flag1;
                            }
                            else if (xmlNodes.Attributes["Type"].Value == "DateTime")
                            {
                                if (!DateTime.TryParse(str3, out utc))
                                {
                                    item[column.ColumnName] = DBNull.Value;
                                }
                                else
                                {
                                    if (this.TimeZone != null)
                                    {
                                        utc = this.TimeZone.LocalTimeToUtc(utc);
                                        utc = this.TimeZone.LocalTimeToUtc(utc);
                                    }

                                    item[column.ColumnName] = utc;
                                }
                            }
                            else if (xmlNodes.Attributes["Type"].Value == "Number")
                            {
                                double num1 = 0;
                                if (!double.TryParse(str3, out num1))
                                {
                                    item[column.ColumnName] = DBNull.Value;
                                }
                                else
                                {
                                    item[column.ColumnName] = num1;
                                }
                            }
                            else if (xmlNodes.Attributes["Type"].Value != "Note")
                            {
                                item[column.ColumnName] = str3;
                            }
                            else
                            {
                                item[column.ColumnName] = str3.Replace("\\r\\n", "\r\n");
                            }
                        }
                    }
                }

                if (i < sortedResults.Count - 1)
                {
                    item["Modified"] = item["_VersionModified"];
                    item["Created"] = item["_VersionModified"];
                    item["Modified_x0020_By"] = item["_VersionModifiedBy"];
                    item["Editor"] = item["_VersionModifiedBy"];
                }
            }
        }

        private void RemoveDeletedFieldRefs(XmlNode xmlFieldNode)
        {
            XmlNode[] itemOf = new XmlNode[xmlFieldNode.ChildNodes.Count];
            for (int i = 0; i < xmlFieldNode.ChildNodes.Count; i++)
            {
                itemOf[i] = xmlFieldNode.ChildNodes[i];
            }

            XmlNode[] xmlNodeArrays = itemOf;
            for (int j = 0; j < (int)xmlNodeArrays.Length; j++)
            {
                XmlNode xmlNodes = xmlNodeArrays[j];
                if (xmlNodes.NodeType.ToString() != "Text" && xmlNodes.Attributes["Type"] == null)
                {
                    xmlFieldNode.RemoveChild(xmlNodes);
                }
            }
        }

        private void RemoveRootFieldRefs(XmlNode xmlFieldNode)
        {
            XmlNode[] itemOf = new XmlNode[xmlFieldNode.ChildNodes.Count];
            for (int i = 0; i < xmlFieldNode.ChildNodes.Count; i++)
            {
                itemOf[i] = xmlFieldNode.ChildNodes[i];
            }

            XmlNode[] xmlNodeArrays = itemOf;
            for (int j = 0; j < (int)xmlNodeArrays.Length; j++)
            {
                XmlNode xmlNodes = xmlNodeArrays[j];
                if (xmlNodes.Name == "FieldRef")
                {
                    xmlFieldNode.RemoveChild(xmlNodes);
                }
            }
        }

        private string ReplaceReferencedContentTypes(XmlDocument contentTypesXmlDoc)
        {
            string value;
            XmlNodeList xmlNodeLists = contentTypesXmlDoc.DocumentElement.SelectNodes("./ContentTypeRef");
            if (xmlNodeLists == null || xmlNodeLists.Count <= 0)
            {
                return contentTypesXmlDoc.OuterXml;
            }

            XmlNode xmlNode = XmlUtility.StringToXmlNode(this.GetContentTypes(null, false));
            foreach (XmlNode xmlNodes in xmlNodeLists)
            {
                XmlNode xmlNodes1 = xmlNodes.SelectSingleNode("./Folder");
                if (xmlNodes1 == null || xmlNodes1.Attributes["TargetName"] == null)
                {
                    value = null;
                }
                else
                {
                    value = xmlNodes1.Attributes["TargetName"].Value;
                }

                string str = value;
                if (str == null)
                {
                    continue;
                }

                XmlNode value1 = xmlNode.SelectSingleNode(string.Concat("./ContentType[@Name='", str, "']"));
                if (value1 == null)
                {
                    continue;
                }

                if (value1.Attributes["ID"] != null && xmlNodes.Attributes["ID"] != null)
                {
                    value1.Attributes["ID"].Value = xmlNodes.Attributes["ID"].Value;
                }

                contentTypesXmlDoc.DocumentElement.RemoveChild(xmlNodes);
                XmlNode xmlNodes2 = contentTypesXmlDoc.ImportNode(value1, true);
                contentTypesXmlDoc.DocumentElement.AppendChild(xmlNodes2);
            }

            return contentTypesXmlDoc.OuterXml;
        }

        private void Search07(string sSearchTerm, SPSearchParameters parameters, XmlTextWriter xmlWriter)
        {
            string str;
            string str1;
            string str2;
            string str3;
            string str4;
            string str5;
            DataTable dataTable = new DataTable("Results");
            SqlCommand sqlCommand = null;
            SqlDataAdapter sqlDataAdapter = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                try
                {
                    string str6 = (base.SharePointVersion.IsSharePoint2007
                        ? "U.tp_ContentType"
                        : "(Select ResourceDir from contenttypes where SiteId=@SiteId and Class='1' and ContentTypeId = (Select Max(ContentTypeId) from ContentTypes where SiteId=@SiteId and Class=1 and U.tp_ContentTypeId like ContentTypeId + Cast('%' as binary)))");
                    StringBuilder stringBuilder = new StringBuilder();
                    str = (parameters.CreatedBy != null
                        ? string.Format(" and (I.tp_Title LIKE '{0}' ESCAPE '\\' or I.tp_Login LIKE '{0}' ESCAPE '\\')",
                            parameters.CreatedBy)
                        : "");
                    str1 = (parameters.ModifiedBy != null
                        ? string.Format(
                            " and (I2.tp_Title LIKE '{0}' ESCAPE '\\' or I2.tp_Login LIKE '{0}' ESCAPE '\\')",
                            parameters.ModifiedBy)
                        : "");
                    if (parameters.ContentType != null)
                    {
                        string[] contentType = new string[]
                            { " and ", str6, " LIKE '", parameters.ContentType, "' ESCAPE '\\'" };
                        str2 = string.Concat(contentType);
                    }
                    else
                    {
                        str2 = "";
                    }

                    string str7 = string.Concat(str, str1, str2);
                    str3 = (parameters.CreatedBy == null
                        ? string.Format(" or (I.tp_Title LIKE '{0}' ESCAPE '\\' or I.tp_Login='{0}')", sSearchTerm)
                        : "");
                    str4 = (parameters.ModifiedBy == null
                        ? string.Format(" or (I2.tp_Title LIKE '{0}' ESCAPE '\\' or I2.tp_Login='{0}')", sSearchTerm)
                        : "");
                    if (parameters.ContentType == null)
                    {
                        string[] strArrays = new string[] { " or ", str6, " LIKE '", sSearchTerm, "' ESCAPE '\\'" };
                        str5 = string.Concat(strArrays);
                    }
                    else
                    {
                        str5 = "";
                    }

                    string str8 = string.Concat(str3, str4, str5);
                    string str9 = (parameters.CreatedBy != null
                        ? string.Format(
                            " and (I3.tp_Title LIKE '{0}' ESCAPE '\\' or I3.tp_Login LIKE '{0}' ESCAPE '\\')",
                            parameters.CreatedBy)
                        : "");
                    string str10 = (parameters.CreatedBy == null
                        ? string.Format(" or (I3.tp_Title LIKE '{0}' ESCAPE '\\' or I3.tp_Login='{0}')", sSearchTerm)
                        : "");
                    if (parameters.IncludeDocuments)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays1 = new string[]
                        {
                            "(d.DocLibRowId is not null and d.HasStream='1' and d.IsCurrentVersion='1' and U.tp_IsCurrent='1' and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or U.nvarchar7 LIKE @SearchTerm ESCAPE '\\'",
                            str8, ")", str7, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays1));
                    }

                    if (parameters.IncludeItems)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays2 = new string[]
                        {
                            "(d.DocLibRowId is not null and d.HasStream='0' and d.Type='0' and d.IsCurrentVersion='1' and U.tp_IsCurrent='1' and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or U.nvarchar1 LIKE @SearchTerm ESCAPE '\\'",
                            str8, ")", str7, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays2));
                    }

                    if (parameters.IncludeFolders)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays3 = new string[]
                        {
                            "(d.DocLibRowId is not null and d.Type='1' and (d.LeafName LIKE @SearchTerm or U.nvarchar7 LIKE @SearchTerm ESCAPE '\\'",
                            str8, ")", str7, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays3));
                    }

                    if (parameters.IncludeLists)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays4 = new string[]
                        {
                            "(d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or L.tp_Title LIKE @SearchTerm ESCAPE '\\'",
                            str10, ")", str9, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays4));
                    }

                    if (parameters.IncludeSites)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        stringBuilder.Append(
                            "(d.DocLibRowId is null and d.ListID is null and d.Type='2' and d.LeafName LIKE @SearchTerm ESCAPE '\\')");
                    }

                    if (stringBuilder.Length > 0)
                    {
                        stringBuilder.Append(")");
                        string str11 = stringBuilder.ToString();
                        StringBuilder stringBuilder1 = new StringBuilder();
                        if (parameters.CreatedBefore != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeCreated<=@CreatedBefore");
                        }

                        if (parameters.CreatedAfter != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeCreated>=@CreatedAfter");
                        }

                        if (parameters.ModifiedBefore != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeLastModified<=@ModifiedBefore");
                        }

                        if (parameters.ModifiedAfter != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeLastModified>=@ModifiedAfter");
                        }

                        string str12 =
                            "(AllDocs d JOIN Webs w ON d.WebId=w.Id) left join ((AllUserData U join UserInfo I on U.tp_SiteId=I.tp_SiteId and U.tp_Author=I.tp_Id) join UserInfo I2 on U.tp_SiteId=I2.tp_SiteId and U.tp_Editor=I2.tp_Id) on d.SiteId=U.tp_SiteId and d.ListId=U.tp_ListId and d.DocLibRowId=U.tp_Id ";
                        if (parameters.IncludeLists)
                        {
                            str12 = string.Concat(str12,
                                "left join AllLists L on D.Id=L.tp_RootFolder left join UserInfo I3 on D.SiteId=I3.tp_SiteId and L.tp_Author=I3.tp_ID");
                        }

                        string str13 =
                            "CASE WHEN d.DocLibRowId is not null and d.HasStream='0' and d.Type='0' and d.IsCurrentVersion='1' THEN ('ItemID=''' + CAST(U.tp_Id as nvarchar(10)) + '''') ELSE d.LeafName END as FileName, ";
                        string str14 = string.Concat(
                            "CASE WHEN d.DocLibRowId is null and d.ListID is null and d.Type='2' THEN w.Title WHEN d.DocLibRowId is not null and d.HasStream='1' THEN U.nvarchar7",
                            (parameters.IncludeLists
                                ? " WHEN d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder THEN L.tp_Title"
                                : ""), " ELSE U.nvarchar1 END as Title");
                        string str15 =
                            string.Concat(
                                (parameters.IncludeLists
                                    ? "CASE WHEN d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder THEN I3.tp_Title ELSE I.tp_Title END"
                                    : "I.tp_Title"), " as Author, ");
                        string[] strArrays5 = new string[]
                        {
                            "d.DirName as Path, ", str13, str14, ", d.DocLibRowId as Id, ", str15,
                            "I2.tp_Title as Editor, ", str6,
                            " as ContentType,d.TimeCreated as Created, d.TimeLastModified as Modified, d.Id as GUID, d.Type as Type, (Select tp_Title from AllLists where d.ListId=tp_Id) as ListTitle, (Select tp_ServerTemplate from AllLists  where d.ListId=tp_ID) as ListTemplate, w.Title as WebTitle,  w.FullUrl as WebPath, d.ListId, d.WebId, d.SiteId"
                        };
                        string str16 = string.Concat(strArrays5);
                        string str17 = "Declare @DirName as nvarchar(255)\n";
                        str17 = string.Concat(str17, "Select @DirName = (FullUrl+'%') from Webs w where Id=@WebId\n");
                        string str18 = str17;
                        string[] strArrays6 = new string[]
                        {
                            str18, "Select ", str16, " from ", str12,
                            " where d.DirName LIKE @DirName and d.SiteId=@SiteId and d.DeleteTransactionId=0x", str11,
                            stringBuilder1.ToString(), null
                        };
                        strArrays6[8] = (parameters.Recursive ? "" : " and d.WebId=@WebId");
                        str17 = string.Concat(strArrays6);
                        if (parameters.ListID != null)
                        {
                            str17 = string.Concat(str17, " and ListId=@ListId");
                        }

                        sqlCommand = this.GetSqlCommand(str17, sqlConnection);
                        sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                        sqlCommand.Parameters.Add(new SqlParameter("SearchTerm", sSearchTerm));
                        sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                        if (parameters.ListID != null)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ListId", parameters.ListID));
                        }

                        if (parameters.CreatedBefore != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("CreatedBefore",
                                (object)parameters.CreatedBefore));
                        }

                        if (parameters.CreatedAfter != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("CreatedAfter",
                                (object)parameters.CreatedAfter));
                        }

                        if (parameters.ModifiedBefore != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ModifiedBefore",
                                (object)parameters.ModifiedBefore));
                        }

                        if (parameters.ModifiedAfter != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ModifiedAfter",
                                (object)parameters.ModifiedAfter));
                        }

                        sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                        sqlDataAdapter.Fill(dataTable);
                        foreach (DataRow row in dataTable.Rows)
                        {
                            xmlWriter.WriteStartElement("Result");
                            foreach (DataColumn column in dataTable.Columns)
                            {
                                this.WriteDataRowColumn(row, column, column.ColumnName, xmlWriter);
                            }

                            xmlWriter.WriteEndElement();
                        }
                    }
                }
                finally
                {
                    if (dataTable != null)
                    {
                        dataTable.Dispose();
                    }

                    if (sqlDataAdapter != null)
                    {
                        sqlDataAdapter.Dispose();
                    }

                    if (sqlCommand != null)
                    {
                        sqlCommand.Dispose();
                    }

                    sqlConnection.Close();
                }
            }
        }

        public string SearchForDocument(string sSearchTerm, string sXmlOptions)
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("ResultsCollection");
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(sXmlOptions);
            SPSearchParameters sPSearchParameter = new SPSearchParameters(xmlDocument);
            sSearchTerm = sSearchTerm.Replace("\\", "\\\\");
            sSearchTerm = sSearchTerm.Replace("%", "\\%");
            sSearchTerm = sSearchTerm.Replace("_", "\\_");
            sSearchTerm = (sPSearchParameter.MatchExactly ? sSearchTerm : string.Concat("%", sSearchTerm, "%"));
            if (base.SharePointVersion.IsSharePoint2003 && this.IsPortal)
            {
                this.SearchPortalV2(sSearchTerm, sPSearchParameter, xmlTextWriter);
            }
            else if (!base.SharePointVersion.IsSharePoint2003)
            {
                this.Search07(sSearchTerm, sPSearchParameter, xmlTextWriter);
            }
            else
            {
                this.SearchWSS2(sSearchTerm, sPSearchParameter, xmlTextWriter);
            }

            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        private void SearchPortalV2(string sSearchTerm, SPSearchParameters parameters, XmlTextWriter xmlWriter)
        {
            string str;
            string[] strArrays;
            char[] chrArray;
            string[] strArrays1;
            int i;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                DataTable dataTable = new DataTable("Results");
                SqlCommand sqlCommand = null;
                SqlDataAdapter sqlDataAdapter = null;
                DataTable dataTable1 = null;
                SqlCommand sqlCommand1 = null;
                SqlDataAdapter sqlDataAdapter1 = null;
                DataTable dataTable2 = null;
                SqlCommand sqlCommand2 = null;
                SqlDataAdapter sqlDataAdapter2 = null;
                DataTable dataTable3 = null;
                SqlCommand sqlCommand3 = null;
                SqlDataAdapter sqlDataAdapter3 = null;
                try
                {
                    try
                    {
                        StringBuilder stringBuilder = new StringBuilder();
                        string str1 = "";
                        string str2 = string.Concat(
                            (parameters.CreatedBy != null
                                ? string.Format(
                                    " and (I.tp_Title LIKE '{0}' ESCAPE '\\' or I.tp_Login LIKE '{0}' ESCAPE '\\')",
                                    parameters.CreatedBy)
                                : ""),
                            (parameters.ModifiedBy != null
                                ? string.Format(
                                    " and (I2.tp_Title LIKE '{0}' ESCAPE '\\' or I2.tp_Login LIKE '{0}' ESCAPE '\\')",
                                    parameters.ModifiedBy)
                                : ""));
                        string str3 = string.Concat(
                            (parameters.CreatedBy == null
                                ? string.Format(" or (I.tp_Title LIKE '{0}' ESCAPE '\\' or I.tp_Login='{0}')",
                                    sSearchTerm)
                                : ""),
                            (parameters.ModifiedBy == null
                                ? string.Format(" or (I2.tp_Title LIKE '{0}' ESCAPE '\\' or I2.tp_Login='{0}')",
                                    sSearchTerm)
                                : ""));
                        string str4 = (parameters.CreatedBy != null
                            ? string.Format(
                                " and (I3.tp_Title LIKE '{0}' ESCAPE '\\' or I3.tp_Login LIKE '{0}' ESCAPE '\\')",
                                parameters.CreatedBy)
                            : "");
                        string str5 = (parameters.CreatedBy == null
                            ? string.Format(" or (I3.tp_Title LIKE '{0}' ESCAPE '\\' or I3.tp_Login='{0}')",
                                sSearchTerm)
                            : "");
                        if (parameters.IncludeDocuments)
                        {
                            stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                            strArrays = new string[]
                            {
                                "(d.DocLibRowId is not null and d.Type='0' and d.Size is not null and U.tp_IsCurrent='1' and (D.LeafName LIKE @SearchTerm ESCAPE '\\' or U.nvarchar7 LIKE @SearchTerm ESCAPE '\\'",
                                str3, ")", str2, ")"
                            };
                            stringBuilder.Append(string.Concat(strArrays));
                        }

                        if (parameters.IncludeItems)
                        {
                            stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                            stringBuilder.Append("(d.SiteId is null)");
                            string str6 =
                                "Userdata U Join Lists L on L.tp_ID=U.tp_ListId join Docs D on L.tp_RootFolder=D.Id and L.tp_Id=D.ListId join UserInfo I on U.tp_Author=I.tp_Id and U.tp_SiteId=I.tp_SiteId join UserInfo I2 on U.tp_Author=I2.tp_Id and U.tp_SiteId=I2.tp_SiteId left join Docs D2 on d2.SiteId=U.tp_SiteId and d2.ListId=U.tp_ListId and d2.DocLibRowId=U.tp_Id";
                            string str7 =
                                "(D.DirName + '/' + D.LeafName )as Path, ('ItemID=''' + CAST(U.tp_Id as nvarchar(8)) + '''') as FileName, U.nvarchar1 as Title, U.tp_Id as Id, U.tp_GUID as GUID, I.tp_Title as Author, I2.tp_Title as Editor, U.tp_Created as Created, U.tp_Modified as Modified,  L.tp_Title as ListTitle, L.tp_ServerTemplate as ListTemplate, (Select Title from Webs where Id=D.WebId) as WebTitle, (Select FullUrl from Webs where Id=D.WebId) as WebPath, '0' as Type, U.tp_ListId as ListId, d.WebId as WebId, U.tp_SiteId as SiteId";
                            strArrays = new string[]
                            {
                                "(d2.SiteId is null and (U.tp_Id LIKE @SearchTerm ESCAPE '\\' or U.nvarchar1 LIKE @SearchTerm ESCAPE '\\'",
                                str3, ")", str2, ") "
                            };
                            string str8 = string.Concat(strArrays);
                            strArrays = new string[]
                                { "Select ", str7, " from ", str6, " where d.SiteId=@SiteId and ", str8 };
                            str1 = string.Concat(strArrays);
                        }

                        if (parameters.IncludeFolders)
                        {
                            stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                            strArrays = new string[]
                            {
                                "(d.DocLibRowId is not null and d.Type='1' and (D.LeafName LIKE @SearchTerm ESCAPE '\\' or U.nvarchar7 LIKE @SearchTerm ESCAPE '\\'",
                                str3, ")", str2, ")"
                            };
                            stringBuilder.Append(string.Concat(strArrays));
                        }

                        if (parameters.IncludeLists)
                        {
                            stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                            strArrays = new string[]
                            {
                                "(d.DocLibRowId is null and d.ListID is not null and D.Id=L.tp_RootFolder and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or L.tp_Title LIKE @SearchTerm ESCAPE '\\'",
                                str5, ")", str4, ")"
                            };
                            stringBuilder.Append(string.Concat(strArrays));
                        }

                        if (parameters.IncludeSites)
                        {
                            stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                            stringBuilder.Append("(d.Type='2' and D.LeafName LIKE @SearchTerm ESCAPE '\\')");
                        }

                        if (stringBuilder.Length > 0)
                        {
                            stringBuilder.Append(")");
                            string str9 = stringBuilder.ToString();
                            dataTable1 = new DataTable("Path");
                            if (!parameters.Recursive)
                            {
                                str =
                                    "Select cp.IDPath, cp.Path, cd.WebUrl, w.Id, w.FullUrl from ((Webs w JOIN CatDef cd ON  ('*' + w.FullUrl) = cd.webUrl) JOIN CatPath cp ON (cd.CatID = cp.CatID)) where w.Id=@WebId";
                            }
                            else
                            {
                                str = "Declare @IDPath nvarchar(1254)\n";
                                str = string.Concat(str,
                                    "Select @IDPath = IDPath from ((Webs w JOIN CatDef cd ON  ('*' + w.FullUrl) = cd.webUrl) JOIN CatPath cp ON (cd.CatID = cp.CatID)) where w.Id=@WebId\n");
                                str = string.Concat(str,
                                    "Select cp.IDPath, cp.Path, cd.WebUrl, w.Id, w.FullUrl from  ((Webs w JOIN CatDef cd ON  ('*' + w.FullUrl) = cd.webUrl) JOIN CatPath cp ON (cd.CatID = cp.CatID)) where cp.IDPath Like (@IDPath + '%') order by cp.IDPath");
                            }

                            sqlCommand1 = this.GetSqlCommand(str, sqlConnection);
                            sqlCommand1.Parameters.Add(new SqlParameter("WebId", this.WebID));
                            sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1);
                            sqlDataAdapter1.Fill(dataTable1);
                            StringBuilder stringBuilder1 = new StringBuilder("(", dataTable1.Rows.Count * 37 + 2);
                            StringBuilder stringBuilder2 = new StringBuilder();
                            Hashtable hashtables = new Hashtable();
                            List<string> strs = new List<string>();
                            if (dataTable1.Rows.Count != 0)
                            {
                                foreach (DataRow row in dataTable1.Rows)
                                {
                                    string str10 = row["IDPath"].ToString();
                                    chrArray = new char[] { ':' };
                                    string str11 = str10.Trim(chrArray);
                                    chrArray = new char[] { ':' };
                                    strArrays1 = str11.Split(chrArray);
                                    for (i = 0; i < (int)strArrays1.Length; i++)
                                    {
                                        string str12 = strArrays1[i];
                                        if (!hashtables.ContainsKey(str12))
                                        {
                                            hashtables.Add(str12.ToUpper(), null);
                                            if (stringBuilder1.Length > 1)
                                            {
                                                stringBuilder1.Append(",");
                                            }

                                            stringBuilder1.Append(string.Concat("'", str12, "'"));
                                        }
                                    }

                                    if (stringBuilder2.Length > 0)
                                    {
                                        stringBuilder2.Append(" OR ");
                                    }

                                    strs.Add(string.Concat(row["FullUrl"].ToString(), "%"));
                                    stringBuilder2.Append(string.Concat("DirName LIKE @DirName", strs.Count));
                                }

                                stringBuilder1.Append(")");
                                dataTable2 = new DataTable("UrlTable");
                                string str13 =
                                    string.Concat("Select FullUrl, Id as WebId, ParentWebId from Webs where Id in ",
                                        stringBuilder1.ToString());
                                sqlCommand2 = this.GetSqlCommand(str13, sqlConnection);
                                sqlDataAdapter2 = new SqlDataAdapter(sqlCommand2);
                                sqlDataAdapter2.Fill(dataTable2);
                                bool flag = true;
                                foreach (DataRow dataRow in dataTable2.Rows)
                                {
                                    string str14 = dataRow["WebId"].ToString();
                                    string nameFromURL =
                                        Metalogix.SharePoint.Adapters.Utils.GetNameFromURL(
                                            dataRow["FullUrl"].ToString());
                                    hashtables[str14.ToUpper()] = nameFromURL;
                                    if (dataRow["ParentWebId"].GetType() != typeof(DBNull) || !(str14 == this.WebID))
                                    {
                                        continue;
                                    }

                                    flag = false;
                                }

                                StringBuilder stringBuilder3 = new StringBuilder();
                                if (parameters.CreatedBefore != DateTime.MinValue)
                                {
                                    stringBuilder3.Append(" and d.TimeCreated<=@CreatedBefore");
                                }

                                if (parameters.CreatedAfter != DateTime.MinValue)
                                {
                                    stringBuilder3.Append(" and d.TimeCreated>=@CreatedAfter");
                                }

                                if (parameters.ModifiedBefore != DateTime.MinValue)
                                {
                                    stringBuilder3.Append(" and d.TimeLastModified<=@ModifiedBefore");
                                }

                                if (parameters.ModifiedAfter != DateTime.MinValue)
                                {
                                    stringBuilder3.Append(" and d.TimeLastModified>=@ModifiedAfter");
                                }

                                string str15 =
                                    " Docs d left join ((UserData U join UserInfo I on U.tp_SiteId=I.tp_SiteId and U.tp_Author=I.tp_Id) join UserInfo I2 on U.tp_SiteId=I2.tp_SiteId and U.tp_Editor=I2.tp_Id) on d.SiteId=U.tp_SiteId and d.ListId=U.tp_ListId and d.DocLibRowId=U.tp_Id ";
                                if (parameters.IncludeLists)
                                {
                                    str15 = string.Concat(str15,
                                        "left join Lists L on D.Id=L.tp_RootFolder left join UserInfo I3 on D.SiteId=I3.tp_SiteId and L.tp_Author=I3.tp_Id");
                                }

                                string str16 = string.Concat(
                                    "CASE WHEN d.Type='2' THEN (Select Title from Webs where d.WebId=Id) WHEN d.DocLibRowId is not null and d.Type='0' and d.Size is not null THEN U.nvarchar7",
                                    (parameters.IncludeLists
                                        ? " WHEN d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder THEN L.tp_Title"
                                        : ""), " ELSE U.nvarchar1 END as Title, ");
                                string str17 = string.Concat(
                                    (parameters.IncludeLists
                                        ? "CASE WHEN d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder THEN I3.tp_Title ELSE I.tp_Title END"
                                        : "I.tp_Title"), " as Author");
                                strArrays = new string[]
                                {
                                    "d.DirName as Path, d.LeafName as FileName, ", str16, "d.DocLibRowId as Id, ",
                                    str17,
                                    ", I2.tp_Title as Editor, d.TimeCreated as Created, d.TimeLastModified as Modified, d.Id as GUID, d.Type as Type, (Select tp_Title from Lists where d.ListId=tp_ID) as ListTitle, (Select tp_ServerTemplate from Lists where d.ListId=tp_ID) as ListTemplate, (Select Title from Webs where d.WebId=Id) as WebTitle,  (Select FullUrl from Webs where d.WebId=Id) as WebPath, d.ListId, d.WebId, d.SiteId"
                                };
                                string str18 = string.Concat(strArrays);
                                strArrays = new string[]
                                    { "Select ", str18, " from", str15, " where D.SiteId=@SiteId", null, null, null };
                                strArrays[5] = (flag ? string.Concat(" and (", stringBuilder2.ToString(), ")") : "");
                                strArrays[6] = str9;
                                strArrays[7] = stringBuilder3.ToString();
                                string str19 = string.Concat(strArrays);
                                str1 = string.Concat(str1,
                                    (flag ? string.Concat(" and (", stringBuilder2.ToString(), ")") : ""),
                                    stringBuilder3.ToString());
                                if (parameters.ListID != null)
                                {
                                    str19 = string.Concat(str19, " and ListId=@ListId");
                                    str1 = string.Concat(str1, " and ListId=@ListId");
                                }

                                sqlCommand = this.GetSqlCommand(str19, sqlConnection);
                                sqlCommand.Parameters.Add(new SqlParameter("SearchTerm", sSearchTerm));
                                sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                                if (parameters.ListID != null)
                                {
                                    sqlCommand.Parameters.Add(new SqlParameter("ListId", parameters.ListID));
                                }

                                if (parameters.CreatedBefore != DateTime.MinValue)
                                {
                                    sqlCommand.Parameters.Add(new SqlParameter("CreatedBefore",
                                        (object)parameters.CreatedBefore));
                                }

                                if (parameters.CreatedAfter != DateTime.MinValue)
                                {
                                    sqlCommand.Parameters.Add(new SqlParameter("CreatedAfter",
                                        (object)parameters.CreatedAfter));
                                }

                                if (parameters.ModifiedBefore != DateTime.MinValue)
                                {
                                    sqlCommand.Parameters.Add(new SqlParameter("ModifiedBefore",
                                        (object)parameters.ModifiedBefore));
                                }

                                if (parameters.ModifiedAfter != DateTime.MinValue)
                                {
                                    sqlCommand.Parameters.Add(new SqlParameter("ModifiedAfter",
                                        (object)parameters.ModifiedAfter));
                                }

                                if (flag)
                                {
                                    int num = 1;
                                    foreach (string str20 in strs)
                                    {
                                        sqlCommand.Parameters.Add(
                                            new SqlParameter(string.Concat("DirName", num.ToString()), str20));
                                        num++;
                                    }
                                }

                                sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                                sqlDataAdapter.Fill(dataTable);
                                Hashtable hashtables1 = new Hashtable();
                                foreach (DataRow row1 in dataTable.Rows)
                                {
                                    string upper = row1["WebId"].ToString().ToUpper();
                                    if ((int)dataTable1.Select(string.Concat("Id='", upper, "'")).Length == 0)
                                    {
                                        continue;
                                    }

                                    xmlWriter.WriteStartElement("Result");
                                    foreach (DataColumn column in dataTable.Columns)
                                    {
                                        if (column.ColumnName == "Path" || column.ColumnName == "WebPath")
                                        {
                                            if (!hashtables1.ContainsKey(upper))
                                            {
                                                string str21 = "";
                                                DataRow dataRow1 =
                                                    dataTable1.Select(string.Concat("Id='", upper, "'"))[0];
                                                string str22 = dataRow1["IDPath"].ToString();
                                                chrArray = new char[] { ':' };
                                                string str23 = str22.Trim(chrArray);
                                                chrArray = new char[] { ':' };
                                                strArrays1 = str23.Split(chrArray);
                                                for (i = 0; i < (int)strArrays1.Length; i++)
                                                {
                                                    string str24 = strArrays1[i];
                                                    str21 = string.Concat(str21, hashtables[str24.ToUpper()], "/");
                                                }

                                                hashtables1.Add(upper.ToUpper(), str21);
                                            }

                                            string str25 = row1[column].ToString();
                                            string str26 = null;
                                            if (column.ColumnName != "Path")
                                            {
                                                str26 = hashtables1[upper].ToString();
                                            }
                                            else
                                            {
                                                string str27 = "";
                                                string str28 = hashtables[upper].ToString();
                                                bool flag1 = false;
                                                chrArray = new char[] { '/' };
                                                strArrays1 = str25.Split(chrArray);
                                                for (i = 0; i < (int)strArrays1.Length; i++)
                                                {
                                                    string str29 = strArrays1[i];
                                                    if (str29 == str28)
                                                    {
                                                        flag1 = true;
                                                    }

                                                    if (flag1)
                                                    {
                                                        str27 = string.Concat(str29, "/");
                                                    }
                                                }

                                                str26 = string.Concat(hashtables1[upper].ToString(), str27);
                                            }

                                            xmlWriter.WriteAttributeString(column.ColumnName, str26);
                                        }
                                        else
                                        {
                                            this.WriteDataRowColumn(row1, column, column.ColumnName, xmlWriter);
                                        }
                                    }

                                    xmlWriter.WriteEndElement();
                                }

                                if (parameters.IncludeItems)
                                {
                                    dataTable3 = new DataTable("Results");
                                    sqlCommand3 = this.GetSqlCommand(str1, sqlConnection);
                                    foreach (SqlParameter parameter in sqlCommand.Parameters)
                                    {
                                        sqlCommand3.Parameters.Add(new SqlParameter(parameter.ParameterName,
                                            parameter.Value));
                                    }

                                    sqlDataAdapter3 = new SqlDataAdapter(sqlCommand3);
                                    sqlDataAdapter3.Fill(dataTable3);
                                    foreach (DataRow row2 in dataTable3.Rows)
                                    {
                                        string upper1 = row2["WebId"].ToString().ToUpper();
                                        if ((int)dataTable1.Select(string.Concat("Id='", upper1, "'")).Length == 0)
                                        {
                                            continue;
                                        }

                                        xmlWriter.WriteStartElement("Result");
                                        foreach (DataColumn dataColumn in dataTable3.Columns)
                                        {
                                            if (dataColumn.ColumnName == "Path" || dataColumn.ColumnName == "WebPath")
                                            {
                                                if (!hashtables1.ContainsKey(upper1))
                                                {
                                                    string str30 = "";
                                                    DataRow dataRow2 =
                                                        dataTable1.Select(string.Concat("Id='", upper1, "'"))[0];
                                                    string str31 = dataRow2["IDPath"].ToString();
                                                    chrArray = new char[] { ':' };
                                                    string str32 = str31.Trim(chrArray);
                                                    chrArray = new char[] { ':' };
                                                    strArrays1 = str32.Split(chrArray);
                                                    for (i = 0; i < (int)strArrays1.Length; i++)
                                                    {
                                                        string str33 = strArrays1[i];
                                                        str30 = string.Concat(str30, hashtables[str33.ToUpper()], "/");
                                                    }

                                                    hashtables1.Add(upper1.ToUpper(), str30);
                                                }

                                                string str34 = row2[dataColumn].ToString();
                                                string str35 = null;
                                                if (dataColumn.ColumnName != "Path")
                                                {
                                                    str35 = hashtables1[upper1].ToString();
                                                }
                                                else
                                                {
                                                    string str36 = "";
                                                    string str37 = hashtables[upper1].ToString();
                                                    bool flag2 = false;
                                                    chrArray = new char[] { '/' };
                                                    strArrays1 = str34.Split(chrArray);
                                                    for (i = 0; i < (int)strArrays1.Length; i++)
                                                    {
                                                        string str38 = strArrays1[i];
                                                        if (str38 == str37)
                                                        {
                                                            flag2 = true;
                                                        }

                                                        if (flag2)
                                                        {
                                                            str36 = string.Concat(str38, "/");
                                                        }
                                                    }

                                                    str35 = string.Concat(hashtables1[upper1].ToString(), str36);
                                                }

                                                xmlWriter.WriteAttributeString(dataColumn.ColumnName, str35);
                                            }
                                            else
                                            {
                                                this.WriteDataRowColumn(row2, dataColumn, dataColumn.ColumnName,
                                                    xmlWriter);
                                            }
                                        }

                                        xmlWriter.WriteEndElement();
                                    }
                                }
                            }
                            else
                            {
                                this.SearchWSS2(sSearchTerm, parameters, xmlWriter);
                                return;
                            }
                        }
                    }
                    catch (Exception exception)
                    {
                        string message = exception.Message;
                    }
                }
                finally
                {
                    if (sqlCommand != null)
                    {
                        sqlCommand.Dispose();
                    }

                    if (sqlDataAdapter != null)
                    {
                        sqlDataAdapter.Dispose();
                    }

                    if (dataTable != null)
                    {
                        dataTable.Dispose();
                    }

                    if (sqlCommand1 != null)
                    {
                        sqlCommand1.Dispose();
                    }

                    if (sqlDataAdapter1 != null)
                    {
                        sqlDataAdapter1.Dispose();
                    }

                    if (dataTable1 != null)
                    {
                        dataTable1.Dispose();
                    }

                    if (sqlCommand2 != null)
                    {
                        sqlCommand2.Dispose();
                    }

                    if (sqlDataAdapter2 != null)
                    {
                        sqlDataAdapter2.Dispose();
                    }

                    if (dataTable2 != null)
                    {
                        dataTable2.Dispose();
                    }

                    if (dataTable3 != null)
                    {
                        dataTable3.Dispose();
                    }

                    if (sqlDataAdapter3 != null)
                    {
                        sqlDataAdapter3.Dispose();
                    }

                    if (sqlCommand3 != null)
                    {
                        sqlCommand3.Dispose();
                    }

                    sqlConnection.Close();
                }
            }
        }

        private void SearchWSS2(string sSearchTerm, SPSearchParameters parameters, XmlTextWriter xmlWriter)
        {
            DataTable dataTable = new DataTable("Results");
            SqlCommand sqlCommand = null;
            SqlDataAdapter sqlDataAdapter = null;
            DataTable dataTable1 = null;
            SqlCommand sqlCommand1 = null;
            SqlDataAdapter sqlDataAdapter1 = null;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                try
                {
                    StringBuilder stringBuilder = new StringBuilder();
                    string str = "";
                    string str1 = string.Concat(
                        (parameters.CreatedBy != null
                            ? string.Format(
                                " and (I.tp_Title LIKE '{0}' ESCAPE '\\' or I.tp_Login LIKE '{0}' ESCAPE '\\')",
                                parameters.CreatedBy)
                            : ""),
                        (parameters.ModifiedBy != null
                            ? string.Format(
                                " and (I2.tp_Title LIKE '{0}' ESCAPE '\\' or I2.tp_Login LIKE '{0}' ESCAPE '\\')",
                                parameters.ModifiedBy)
                            : ""));
                    string str2 = string.Concat(
                        (parameters.CreatedBy == null
                            ? string.Format(" or (I.tp_Title LIKE '{0}' ESCAPE '\\' or I.tp_Login='{0}')", sSearchTerm)
                            : ""),
                        (parameters.ModifiedBy == null
                            ? string.Format(" or (I2.tp_Title LIKE '{0}' ESCAPE '\\' or I2.tp_Login='{0}')",
                                sSearchTerm)
                            : ""));
                    string str3 = (parameters.CreatedBy != null
                        ? string.Format(
                            " and (I3.tp_Title LIKE '{0}' ESCAPE '\\' or I3.tp_Login LIKE '{0}' ESCAPE '\\')",
                            parameters.CreatedBy)
                        : "");
                    string str4 = (parameters.CreatedBy == null
                        ? string.Format(" or (I3.tp_Title LIKE '{0}' ESCAPE '\\' or I3.tp_Login='{0}')", sSearchTerm)
                        : "");
                    if (parameters.IncludeDocuments)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays = new string[]
                        {
                            "(d.DocLibRowId is not null and d.Type='0' and d.Size is not null and U.tp_IsCurrent='1' and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or U.nvarchar7 LIKE @SearchTerm ESCAPE '\\'",
                            str2, ")", str1, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays));
                    }

                    if (parameters.IncludeItems)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        stringBuilder.Append("(d.SiteId is null)");
                        string str5 =
                            "Userdata U Join Lists L on L.tp_ID=U.tp_ListId join Docs D on L.tp_RootFolder=D.Id and L.tp_Id=D.ListId join UserInfo I on U.tp_Author=I.tp_Id and U.tp_SiteId=I.tp_SiteId join UserInfo I2 on U.tp_Author=I2.tp_Id and U.tp_SiteId=I2.tp_SiteId left join Docs D2 on d2.SiteId=U.tp_SiteId and d2.ListId=U.tp_ListId and d2.DocLibRowId=U.tp_Id";
                        string str6 =
                            "(D.DirName + '/' + D.LeafName )as Path, ('ItemID=''' + CAST(U.tp_Id as nvarchar(8)) + '''') as FileName, U.nvarchar1 as Title, U.tp_Id as Id, U.tp_GUID as GUID, I.tp_Title as Author, I2.tp_Title as Editor, U.tp_Created as Created, U.tp_Modified as Modified,  L.tp_Title as ListTitle, L.tp_ServerTemplate as ListTemplate, (Select Title from Webs where Id=D.WebId) as WebTitle, (Select FullUrl from Webs where Id=D.WebId) as WebPath, '0' as Type, U.tp_ListId as ListId, d.WebId as WebId, U.tp_SiteId as SiteId";
                        string[] strArrays1 = new string[]
                        {
                            "(d2.SiteId is null and (U.tp_Id LIKE @SearchTerm ESCAPE '\\' or U.nvarchar1 LIKE @SearchTerm ESCAPE '\\'",
                            str2, ")", str1, ") "
                        };
                        string str7 = string.Concat(strArrays1);
                        string[] strArrays2 = new string[]
                        {
                            "Select ", str6, " from ", str5, " where d.DirName LIKE @DirName and d.SiteId=@SiteId and ",
                            str7
                        };
                        str = string.Concat(strArrays2);
                    }

                    if (parameters.IncludeFolders)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays3 = new string[]
                        {
                            "(d.DocLibRowId is not null and d.Type='1' and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or U.nvarchar7 LIKE @SearchTerm ESCAPE '\\'",
                            str2, ")", str1, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays3));
                    }

                    if (parameters.IncludeLists)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        string[] strArrays4 = new string[]
                        {
                            "(d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder and (d.LeafName LIKE @SearchTerm ESCAPE '\\' or L.tp_Title LIKE @SearchTerm ESCAPE '\\'",
                            str4, ")", str3, ")"
                        };
                        stringBuilder.Append(string.Concat(strArrays4));
                    }

                    if (parameters.IncludeSites)
                    {
                        stringBuilder.Append((stringBuilder.Length == 0 ? " and (" : " or "));
                        stringBuilder.Append("(d.Type='2' and d.LeafName LIKE @SearchTerm ESCAPE '\\')");
                    }

                    if (stringBuilder.Length > 0)
                    {
                        stringBuilder.Append(")");
                        StringBuilder stringBuilder1 = new StringBuilder();
                        if (parameters.CreatedBefore != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeCreated<=@CreatedBefore");
                        }

                        if (parameters.CreatedAfter != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeCreated>=@CreatedAfter");
                        }

                        if (parameters.ModifiedBefore != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeLastModified<=@ModifiedBefore");
                        }

                        if (parameters.ModifiedAfter != DateTime.MinValue)
                        {
                            stringBuilder1.Append(" and d.TimeLastModified>=@ModifiedAfter");
                        }

                        string str8 = stringBuilder.ToString();
                        string str9 = string.Concat(" Docs d ", (parameters.IncludeItems ? "full outer" : "left"),
                            " join ((UserData U join UserInfo I on U.tp_SiteId=I.tp_SiteId and U.tp_Author=I.tp_Id) join UserInfo I2 on U.tp_SiteId=I2.tp_SiteId and U.tp_Editor=I2.tp_Id) on d.SiteId=U.tp_SiteId and d.ListId=U.tp_ListId and d.DocLibRowId=U.tp_Id ");
                        if (parameters.IncludeLists)
                        {
                            str9 = string.Concat(str9,
                                "left join Lists L on D.Id=L.tp_RootFolder left join UserInfo I3 on D.SiteId=I3.tp_SiteId and L.tp_Author=I3.tp_Id");
                        }

                        string str10 = string.Concat(
                            "CASE WHEN d.Type='2' THEN (Select Title from Webs where d.WebId=Id) WHEN d.DocLibRowId is not null and d.Type='0' and d.Size is not null THEN U.nvarchar7",
                            (parameters.IncludeLists
                                ? " WHEN d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder THEN L.tp_Title"
                                : ""), " ELSE U.nvarchar1 END as Title, ");
                        string str11 =
                            string.Concat(
                                (parameters.IncludeLists
                                    ? "CASE WHEN d.DocLibRowId is null and d.ListID is not null and d.Type='1' and D.Id=L.tp_RootFolder THEN I3.tp_Title ELSE I.tp_Title END"
                                    : "I.tp_Title"), " as Author");
                        string str12 =
                            "Declare @DirName as nvarchar(255)\nSelect @DirName = (FullUrl+'%') from Webs w where Id=@WebId\n";
                        string[] strArrays5 = new string[]
                        {
                            "d.DirName as Path, d.LeafName as FileName, ", str10, "d.DocLibRowId as Id, ", str11,
                            ", I2.tp_Title as Editor, d.TimeCreated as Created, d.TimeLastModified as Modified, d.Id as GUID, d.Type as Type, (Select tp_Title from Lists where d.ListId=tp_ID) as ListTitle, (Select tp_ServerTemplate from Lists where d.ListId=tp_ID) as ListTemplate, (Select Title from Webs where d.WebId=Id) as WebTitle,  (Select FullUrl from Webs where d.WebId=Id) as WebPath, d.ListId, d.WebId, d.SiteId"
                        };
                        string str13 = string.Concat(strArrays5);
                        string[] strArrays6 = new string[]
                        {
                            str12, "Select ", str13, " from ", str9,
                            " where d.DirName LIKE @DirName and d.SiteId=@SiteId", str8, stringBuilder1.ToString(), null
                        };
                        strArrays6[8] = (parameters.Recursive ? "" : " and d.WebId=@WebId");
                        string str14 = string.Concat(strArrays6);
                        str = string.Concat(str12, str, stringBuilder1.ToString());
                        if (parameters.ListID != null)
                        {
                            str14 = string.Concat(str14, " and ListId=@ListId");
                            str = string.Concat(str, " and ListId=@ListId");
                        }

                        sqlCommand = this.GetSqlCommand(str14, sqlConnection);
                        sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                        sqlCommand.Parameters.Add(new SqlParameter("SearchTerm", sSearchTerm));
                        sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                        if (parameters.ListID != null)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ListId", parameters.ListID));
                        }

                        if (parameters.CreatedBefore != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("CreatedBefore",
                                (object)parameters.CreatedBefore));
                        }

                        if (parameters.CreatedAfter != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("CreatedAfter",
                                (object)parameters.CreatedAfter));
                        }

                        if (parameters.ModifiedBefore != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ModifiedBefore",
                                (object)parameters.ModifiedBefore));
                        }

                        if (parameters.ModifiedAfter != DateTime.MinValue)
                        {
                            sqlCommand.Parameters.Add(new SqlParameter("ModifiedAfter",
                                (object)parameters.ModifiedAfter));
                        }

                        sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                        sqlDataAdapter.Fill(dataTable);
                        foreach (DataRow row in dataTable.Rows)
                        {
                            xmlWriter.WriteStartElement("Result");
                            foreach (DataColumn column in dataTable.Columns)
                            {
                                this.WriteDataRowColumn(row, column, column.ColumnName, xmlWriter);
                            }

                            xmlWriter.WriteEndElement();
                        }

                        if (parameters.IncludeItems)
                        {
                            dataTable1 = new DataTable("Results");
                            sqlCommand1 = this.GetSqlCommand(str, sqlConnection);
                            foreach (SqlParameter parameter in sqlCommand.Parameters)
                            {
                                sqlCommand1.Parameters.Add(new SqlParameter(parameter.ParameterName, parameter.Value));
                            }

                            sqlDataAdapter1 = new SqlDataAdapter(sqlCommand1);
                            sqlDataAdapter1.Fill(dataTable1);
                            foreach (DataRow dataRow in dataTable1.Rows)
                            {
                                xmlWriter.WriteStartElement("Result");
                                foreach (DataColumn dataColumn in dataTable1.Columns)
                                {
                                    this.WriteDataRowColumn(dataRow, dataColumn, dataColumn.ColumnName, xmlWriter);
                                }

                                xmlWriter.WriteEndElement();
                            }
                        }
                    }
                }
                finally
                {
                    if (dataTable != null)
                    {
                        dataTable.Dispose();
                    }

                    if (sqlDataAdapter != null)
                    {
                        sqlDataAdapter.Dispose();
                    }

                    if (sqlCommand != null)
                    {
                        sqlCommand.Dispose();
                    }

                    if (dataTable1 != null)
                    {
                        dataTable1.Dispose();
                    }

                    if (sqlDataAdapter1 != null)
                    {
                        sqlDataAdapter1.Dispose();
                    }

                    if (sqlCommand1 != null)
                    {
                        sqlCommand1.Dispose();
                    }

                    sqlConnection.Close();
                }
            }
        }

        public bool SetCustomTemplatePath(string sCustomTemplatePath)
        {
            if (!(new DirectoryInfo(sCustomTemplatePath)).Exists)
            {
                return false;
            }

            this.m_sCustomTemplateLocation = sCustomTemplatePath;
            return true;
        }

        public bool SetLinkName(string sHostName)
        {
            if (!Uri.IsWellFormedUriString(sHostName, UriKind.Absolute))
            {
                return false;
            }

            this.m_sLinkName = sHostName;
            return true;
        }

        public string StoragePointAvailable(string inputXml)
        {
            return bool.FalseString;
        }

        public string StoragePointProfileConfigured(string sSharePointPath)
        {
            throw new NotSupportedException("This method is not supported on DB connections");
        }

        private byte[] StringToSid(string Sid)
        {
            byte[] numArray;
            try
            {
                SecurityIdentifier securityIdentifier = new SecurityIdentifier(Sid);
                byte[] numArray1 = new byte[securityIdentifier.BinaryLength];
                securityIdentifier.GetBinaryForm(numArray1, 0);
                numArray = numArray1;
            }
            catch
            {
                numArray = null;
            }

            return numArray;
        }

        public override string ToXML()
        {
            StringWriter stringWriter = new StringWriter(new StringBuilder(1024));
            XmlTextWriter xmlTextWriter = new XmlTextWriter(stringWriter);
            xmlTextWriter.WriteStartElement("SharePointAdapter");
            this.ToXML(xmlTextWriter);
            xmlTextWriter.WriteEndElement();
            return stringWriter.ToString();
        }

        public override void ToXML(XmlTextWriter xmlWriter)
        {
            xmlWriter.WriteAttributeString("AdapterType", this.AdapterShortName);
            xmlWriter.WriteAttributeString("Server", this.m_sServer);
            xmlWriter.WriteAttributeString("Database", this.m_sDatabase);
            xmlWriter.WriteAttributeString("Url", this.m_sServerRelativeUrl);
            if (this.m_sLinkName != null)
            {
                xmlWriter.WriteAttributeString("LinkName", this.m_sLinkName);
            }

            if (this.m_sHostHeader != null)
            {
                xmlWriter.WriteAttributeString("HostHeader", this.m_sHostHeader);
            }

            if (!string.IsNullOrEmpty(this.m_sCustomTemplateLocation))
            {
                xmlWriter.WriteAttributeString("TemplateLocation", this.m_sCustomTemplateLocation);
            }

            this.Credentials.ToXML(xmlWriter);
        }

        private byte[] UnshredDocuments(string documentId, int fileLevel, int uiVersion)
        {
            BlobUnshredderArgsBuilder blobUnshredderArgsBuilder = new BlobUnshredderArgsBuilder()
            {
                ConnectionString = this.ConnectionString,
                DocumentId = new Guid(documentId),
                Level = (FileLevel)fileLevel,
                UIVersion = uiVersion,
                SaveFileName = Path.GetTempFileName(),
                ChunkSize = AdapterConfigurationVariables.ChunkSizeForUnshredding
            };
            return UtilityLauncher.LaunchBlobUnshredder(blobUnshredderArgsBuilder);
        }

        public int UpdateAvailableItemID(string sListGUID, int iNewAvailableID)
        {
            int num = -1;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                string[] strArrays = new string[] { "Declare @OldAvailableID int\n", null, null, null, null };
                strArrays[1] = (base.SharePointVersion.IsSharePoint2007OrEarlier
                    ? "Select @OldAvailableID=tp_NextAvailableId from AllLists with (rowlock) where tp_WebId=@WebId and tp_ID=@ListId\n"
                    : "Select @OldAvailableID=NextAvailableId from AllListsAux with (rowlock) where ListId=@ListId\n");
                strArrays[2] = "Begin Tran IdUpdate\nif @OldAvailableID<>@NewID\nBegin\n";
                strArrays[3] = (base.SharePointVersion.IsSharePoint2007OrEarlier
                    ? "Update alllists with (rowlock)\nSet tp_NextAvailableId=@NewId where tp_WebId=@WebId and tp_ID=@ListId\n"
                    : "Update alllistsaux with (rowlock)\nSet NextAvailableId=@NewId where ListId=@ListId\n");
                strArrays[4] = "End\nCommit Tran IdUpdate\nSelect @OldAvailableID";
                using (SqlCommand sqlCommand = this.GetSqlCommand(string.Concat(strArrays), sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("NewId", (object)iNewAvailableID));
                    sqlCommand.Parameters.Add(new SqlParameter("SiteId", this.SiteID));
                    sqlCommand.Parameters.Add(new SqlParameter("WebId", this.WebID));
                    sqlCommand.Parameters.Add(new SqlParameter("ListId", sListGUID));
                    num = (int)sqlCommand.ExecuteScalar();
                }
            }

            return num;
        }

        public bool UpdateDocstreamContent(Guid docId, int iUIVersion, int iDocFlags, long lFileSize, byte[] content,
            byte[] rbsId)
        {
            bool flag;
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                if (base.SharePointVersion.IsSharePoint2007)
                {
                    flag = this.UpdateDocstreamContent2007(docId, iUIVersion, iDocFlags, lFileSize, content,
                        sqlConnection);
                }
                else if (!base.SharePointVersion.IsSharePoint2010)
                {
                    flag = (!base.SharePointVersion.IsSharePoint2013OrLater ? false : false);
                }
                else
                {
                    flag = this.UpdateDocstreamContent2010(docId, iUIVersion, iDocFlags, lFileSize, content, rbsId,
                        sqlConnection);
                }
            }

            return flag;
        }

        public bool UpdateDocstreamContent2007(Guid docId, int iUIVersion, int iDocFlags, long lFileSize,
            byte[] content, SqlConnection conn)
        {
            using (SqlCommand sqlCommand = this.GetSqlCommand(
                       "Declare @Level int\nSelect @Level = (Select Level from AllDocs with (rowlock) where Id=@DocId and UIVersion=@UIVersion)\nbegin tran ContentUpdating\nUpdate AllDocs with (rowlock)\nSet DocFlags = @DocFlags, Size = @FileSize\nWhere Id=@DocId and UIVersion=@UIVersion\nUpdate AllDocStreams with (rowlock)\nSet Content = @Content,\nSize = @FileSize\nWhere Id=@DocId and Level=@Level\ncommit tran ContentUpdating",
                       conn))
            {
                sqlCommand.Parameters.Add(new SqlParameter("DocId", (object)docId));
                sqlCommand.Parameters.Add(new SqlParameter("UIVersion", (object)iUIVersion));
                sqlCommand.Parameters.Add(new SqlParameter("DocFlags", (object)iDocFlags));
                sqlCommand.Parameters.Add(new SqlParameter("FileSize", (object)lFileSize));
                if (content != null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("Content", content));
                }
                else
                {
                    SqlParameter sqlParameter = new SqlParameter("Content", SqlDbType.VarBinary)
                    {
                        Value = DBNull.Value
                    };
                    sqlCommand.Parameters.Add(sqlParameter);
                }
            }

            return true;
        }

        public bool UpdateDocstreamContent2010(Guid docId, int iUIVersion, int iDocFlags, long lFileSize,
            byte[] content, byte[] rbsId, SqlConnection conn)
        {
            long num;
            int num1;
            bool flag;
            long item = (long)0;
            int item1 = 0;
            int item2 = 0;
            byte[] numArray = null;
            bool flag1 = false;
            bool flag2 = false;
            using (SqlCommand sqlCommand = this.GetSqlCommand(
                       "\r\n                                DECLARE @blobRow TABLE\r\n                                (\r\n                                   blob_number bigint,\r\n                                   collection_id int,\r\n                                   blob_store_id int,\r\n                                   store_pool_id varbinary(255),\r\n                                   already_exists bit\r\n                                )\r\n\r\n                                --If the RBS tables exist, do the RBS data fetching\r\n                                IF EXISTS (SELECT 1 from INFORMATION_SCHEMA.TABLES \r\n                                            WHERE TABLE_SCHEMA='mssqlrbs_resources' and TABLE_NAME = 'rbs_internal_blobs')\r\n                                    BEGIN\r\n                                        --Get a row with all the necessary data to rebuild the RBS Id for the existing value\r\n                                        INSERT INTO @blobRow (blob_number, collection_id, blob_store_id, store_pool_id, already_exists)\r\n                                            SELECT [blob_number], [collection_id], [blob_store_id], [store_pool_id],1 FROM mssqlrbs_resources.rbs_internal_blobs\r\n\t\t                                        WHERE store_blob_id = @blobRef\r\n                                        --If we don't have the row, get the necessary info to generate a new blob id, except for the\r\n                                        --actual number.\r\n                                        IF ((SELECT COUNT(*) FROM @blobRow) = 0)\r\n\t                                        BEGIN\r\n\t\t                                        DECLARE @collection_id int\r\n\t\t                                        DECLARE @blob_store_id int\r\n\t\t                                        SELECT @collection_id = ric.collection_id FROM mssqlrbs_resources.rbs_internal_collections ric INNER JOIN mssqlrbs_resources.rbs_internal_pools rip ON ric.collection_id = rip.collection_id WHERE owning_application='Microsoft.SharePoint' AND rip.can_store_new_blobs = 1\r\n\t\t                                        SELECT @blob_store_id = blob_store_id FROM mssqlrbs_resources.rbs_internal_blob_stores WHERE blob_store_name='StoragePointRBS'\r\n\t\t                                        INSERT INTO @blobRow (blob_number, collection_id, blob_store_id, store_pool_id, already_exists)\r\n\t\t\t                                        SELECT 0, @collection_id, @blob_store_id, (SELECT TOP 1 store_pool_id FROM mssqlrbs_resources.rbs_internal_pools WHERE collection_id = @collection_id AND blob_store_id = @blob_store_id AND can_store_new_blobs=1), 0\r\n\t                                        END\r\n                                    END\r\n                                ELSE\r\n                                    --Otherwise, we just blank out the return values to indicate an EBS shallow copy.\r\n                                    BEGIN\r\n                                        INSERT INTO @blobRow (blob_number, collection_id, blob_store_id, store_pool_id, already_exists)\r\n\t\t\t                                SELECT 0, null, null, null, 0\r\n\t                                END\r\n                                SELECT * FROM @blobRow",
                       conn))
            {
                if (content != null)
                {
                    sqlCommand.Parameters.Add(new SqlParameter("blobRef", content));
                }
                else
                {
                    SqlParameter sqlParameter = new SqlParameter("blobRef", SqlDbType.VarBinary)
                    {
                        Value = DBNull.Value
                    };
                    sqlCommand.Parameters.Add(sqlParameter);
                }

                using (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())
                {
                    if (!sqlDataReader.Read())
                    {
                        flag = false;
                        return flag;
                    }
                    else if (sqlDataReader["blob_store_id"] == DBNull.Value ||
                             sqlDataReader["collection_id"] == DBNull.Value)
                    {
                        flag2 = false;
                    }
                    else
                    {
                        flag2 = true;
                        flag1 = (bool)sqlDataReader["already_exists"];
                        if (sqlDataReader["store_pool_id"] == DBNull.Value)
                        {
                            throw new ArgumentNullException("store_pool_id",
                                "There is no pool available to store new blob references.");
                        }

                        item = (long)sqlDataReader["blob_number"];
                        item1 = (int)sqlDataReader["collection_id"];
                        item2 = (int)sqlDataReader["blob_store_id"];
                        numArray = (byte[])sqlDataReader["store_pool_id"];
                    }
                }
            }

            if (!flag2)
            {
                using (SqlCommand sqlCommand1 = this.GetSqlCommand(
                           "\r\n                                          Declare @InternalVersion int\r\n                                          Select @InternalVersion = (Select InternalVersion from AllDocs with (rowlock) where Id=@DocId and UIVersion=@UIVersion)\r\n                                          begin tran ContentUpdating\r\n                                          Update AllDocs with (rowlock)\r\n                                          Set DocFlags = @DocFlags | 65536, Size = @FileSize\r\n                                          Where Id=@DocId and UIVersion=@UIVersion\r\n                                          Update AllDocStreams with (rowlock)\r\n                                          Set Content = @Content, RbsId = null\r\n                                          Where Id=@DocId and InternalVersion=@InternalVersion\r\n                                          commit tran ContentUpdating",
                           conn))
                {
                    sqlCommand1.Parameters.Add(new SqlParameter("DocId", (object)docId));
                    sqlCommand1.Parameters.Add(new SqlParameter("UIVersion", (object)iUIVersion));
                    sqlCommand1.Parameters.Add(new SqlParameter("DocFlags", (object)iDocFlags));
                    sqlCommand1.Parameters.Add(new SqlParameter("FileSize", (object)lFileSize));
                    if (content != null)
                    {
                        sqlCommand1.Parameters.Add(new SqlParameter("Content", content));
                    }
                    else
                    {
                        SqlParameter sqlParameter1 = new SqlParameter("Content", SqlDbType.VarBinary)
                        {
                            Value = DBNull.Value
                        };
                        sqlCommand1.Parameters.Add(sqlParameter1);
                    }

                    flag = sqlCommand1.ExecuteNonQuery() == 2;
                }
            }
            else if (!flag1)
            {
                byte[] numArray1 = new byte[] { 0, 0, 0, 0, 0, 2 };
                for (int i = 0; i < 4; i++)
                {
                    numArray1[i] = (byte)((double)item1 / Math.Pow(256, (double)(3 - i)));
                }

                using (SqlCommand sqlCommand2 = this.GetSqlCommand(
                           "\r\n                                  Declare @InternalVersion int\r\n                                  Declare @BlobNumber bigint\r\n                                  Declare @RbsId binary(14)\r\n\r\n                                  Select @InternalVersion = (Select InternalVersion from AllDocs with (rowlock) where Id=@DocId and UIVersion=@UIVersion)\r\n                                  begin tran ContentUpdating\r\n                                          \r\n                                  Declare @charPartialRbsId char(6)\r\n                                  Declare @binBlobNumber binary(8)\r\n                                  Declare @charBlobNumber char(8)\r\n                                          \r\n                                  Select @BlobNumber = 1 + \r\n                                  (Select top 1 blob_number from mssqlrbs_resources.rbs_internal_blobs \r\n                                  Where collection_id = @CollectionId and blob_store_id = @BlobStoreId\r\n                                  Order by blob_number desc)\r\n                                          \r\n                                  Select @binBlobNumber = @BlobNumber\r\n                                  Select @charPartialRbsId = Convert(char(6), @PartialRbsId)\r\n                                  Select @charBlobNumber = Convert(char(8), @binBlobNumber)\r\n                                  Select @RbsId = Convert(binary(14), @charBlobNumber + @charPartialRbsId)\r\n                   \r\n                                  SET IDENTITY_INSERT mssqlrbs_resources.rbs_internal_blobs  ON\r\n\r\n                                  INSERT INTO mssqlrbs_resources.rbs_internal_blobs \r\n                                  (blob_number, collection_id, blob_store_id, store_pool_id, store_blob_id, create_time, length)\r\n                                  SELECT @BlobNumber, @CollectionId, @BlobStoreId, @PoolId, @BlobRef, GetDate(), @FileSize\r\n                                            \r\n                                  SET IDENTITY_INSERT mssqlrbs_resources.rbs_internal_blobs  OFF\r\n\r\n                                  Update AllDocs with (rowlock)\r\n                                  Set DocFlags = @DocFlags & ~65536, Size = @FileSize\r\n                                  Where Id=@DocId and UIVersion=@UIVersion\r\n                                  Update AllDocStreams with (rowlock)\r\n                                  Set Content = null, RbsId = @RbsId\r\n                                  Where Id=@DocId and InternalVersion=@InternalVersion\r\n                                  commit tran ContentUpdating",
                           conn))
                {
                    sqlCommand2.Parameters.Add(new SqlParameter("DocId", (object)docId));
                    sqlCommand2.Parameters.Add(new SqlParameter("UIVersion", (object)iUIVersion));
                    sqlCommand2.Parameters.Add(new SqlParameter("DocFlags", (object)iDocFlags));
                    sqlCommand2.Parameters.Add(new SqlParameter("FileSize", (object)lFileSize));
                    sqlCommand2.Parameters.Add(new SqlParameter("PartialRbsId", numArray1));
                    sqlCommand2.Parameters.Add(new SqlParameter("CollectionId", (object)item1));
                    sqlCommand2.Parameters.Add(new SqlParameter("BlobStoreId", (object)item2));
                    sqlCommand2.Parameters.Add(new SqlParameter("PoolId", numArray));
                    if (content != null)
                    {
                        sqlCommand2.Parameters.Add(new SqlParameter("BlobRef", content));
                    }
                    else
                    {
                        SqlParameter sqlParameter2 = new SqlParameter("BlobRef", SqlDbType.VarBinary)
                        {
                            Value = DBNull.Value
                        };
                        sqlCommand2.Parameters.Add(sqlParameter2);
                    }

                    flag = sqlCommand2.ExecuteNonQuery() == 1;
                }
            }
            else
            {
                bool flag3 = false;
                if (rbsId != null)
                {
                    this.DecodeRbsBlobReference(rbsId, out num, out num1);
                    if (num != item || num1 != item1)
                    {
                        flag3 = true;
                    }
                }
                else
                {
                    flag3 = true;
                }

                if (flag3)
                {
                    rbsId = this.EncodeRbsBlobReference(item, item1);
                }

                using (SqlCommand sqlCommand3 = this.GetSqlCommand(
                           "\r\n                                          Declare @InternalVersion int\r\n                                          Select @InternalVersion = (Select InternalVersion from AllDocs with (rowlock) where Id=@DocId and UIVersion=@UIVersion)\r\n                                          begin tran ContentUpdating\r\n                                          Update AllDocs with (rowlock)\r\n                                          Set DocFlags = @DocFlags & ~65536, Size = @FileSize\r\n                                          Where Id=@DocId and UIVersion=@UIVersion\r\n                                          Update AllDocStreams with (rowlock)\r\n                                          Set Content = null, RbsId = @RbsId\r\n                                          Where Id=@DocId and InternalVersion=@InternalVersion\r\n                                          commit tran ContentUpdating",
                           conn))
                {
                    sqlCommand3.Parameters.Add(new SqlParameter("DocId", (object)docId));
                    sqlCommand3.Parameters.Add(new SqlParameter("UIVersion", (object)iUIVersion));
                    sqlCommand3.Parameters.Add(new SqlParameter("DocFlags", (object)iDocFlags));
                    sqlCommand3.Parameters.Add(new SqlParameter("FileSize", (object)lFileSize));
                    sqlCommand3.Parameters.Add(new SqlParameter("RbsId", rbsId));
                    flag = sqlCommand3.ExecuteNonQuery() == 2;
                }
            }

            return flag;
        }

        public bool UpdateWorkflowAssociationModifiedTime(string sWorkflowAssociationID, string sCreatedTime,
            string sModifiedTime)
        {
            DateTime dateTime;
            DateTime dateTime1;
            bool flag;
            if (!DateTime.TryParse(sModifiedTime, out dateTime) || !DateTime.TryParse(sCreatedTime, out dateTime1))
            {
                return false;
            }

            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                sqlConnection.Open();
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "Update WorkflowAssociation set Modified = @Modified, Created = @Created where Id = @WorkflowAssociationID",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("Modified", (object)dateTime));
                    sqlCommand.Parameters.Add(new SqlParameter("Created", (object)dateTime1));
                    sqlCommand.Parameters.Add(new SqlParameter("WorkflowAssociationID", sWorkflowAssociationID));
                    sqlCommand.ExecuteNonQuery();
                }

                flag = true;
            }

            return flag;
        }

        private bool WorkflowIsEnabled(DataRow dr)
        {
            if (((WorkflowAssociationConfiguration)Enum.Parse(typeof(WorkflowAssociationConfiguration),
                     dr["Configuration"].ToString()) &
                 (WorkflowAssociationConfiguration.NoNewWorkflows | WorkflowAssociationConfiguration.MarkedForDelete |
                  WorkflowAssociationConfiguration.GloballyDisabled)) != WorkflowAssociationConfiguration.None)
            {
                return false;
            }

            return true;
        }

        private void WriteAllEventData(DataRow dr, XmlWriter xmlWriter)
        {
            DataTable dataTable = new DataTable("ScheduledWorkItems");
            using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
            {
                using (SqlCommand sqlCommand = this.GetSqlCommand(
                           "select *, (select DeliveryDate from ScheduledWorkItems where Id = @WorkflowID) as WorkItemDeliveryDate, (select BatchId from ScheduledWorkItems where Id = @WorkflowID) as WorkItemBatchId from EventReceivers where ContextCollectionId = @WorkflowIDByteArray",
                           sqlConnection))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("WorkflowID", (object)(new Guid(dr["Id"].ToString()))));
                    SqlParameterCollection parameters = sqlCommand.Parameters;
                    Guid guid = new Guid(dr["Id"].ToString());
                    parameters.Add(new SqlParameter("WorkflowIDByteArray", guid.ToByteArray()));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dataTable.Rows.Count != 0)
                {
                    xmlWriter.WriteAttributeString("EventDeliveryDate",
                        dataTable.Rows[0]["WorkItemDeliveryDate"].ToString());
                    xmlWriter.WriteAttributeString("EventBatchId", dataTable.Rows[0]["WorkItemBatchId"].ToString());
                    this.WriteGranularEventData(sqlConnection, dataTable, xmlWriter, new List<string>());
                }
            }
        }

        private void WriteAssociatedGroupData(string sMetaInfo, XmlWriter xmlWriter)
        {
            try
            {
                StringBuilder stringBuilder = new StringBuilder();
                int num = sMetaInfo.IndexOf("vti_associateownergroup:SW|");
                int num1 = sMetaInfo.IndexOf("vti_associatemembergroup:SW|");
                int num2 = sMetaInfo.IndexOf("vti_associatevisitorgroup:SW|");
                int num3 = sMetaInfo.IndexOf("vti_associategroups:SW|");
                string str = "";
                if (num >= 0)
                {
                    int length = num + "vti_associateownergroup:SW|".Length;
                    string str1 = sMetaInfo.Substring(length, sMetaInfo.IndexOf("\r\n", length) - length);
                    stringBuilder.Append(str1);
                    num = int.Parse(str1);
                }

                if (num1 >= 0)
                {
                    if (num >= 0)
                    {
                        stringBuilder.Append(", ");
                    }

                    int length1 = num1 + "vti_associatemembergroup:SW|".Length;
                    string str2 = sMetaInfo.Substring(length1, sMetaInfo.IndexOf("\r\n", length1) - length1);
                    stringBuilder.Append(str2);
                    num1 = int.Parse(str2);
                }

                if (num2 >= 0)
                {
                    if (num >= 0 || num1 >= 0)
                    {
                        stringBuilder.Append(", ");
                    }

                    int length2 = num2 + "vti_associatevisitorgroup:SW|".Length;
                    string str3 = sMetaInfo.Substring(length2, sMetaInfo.IndexOf("\r\n", length2) - length2);
                    stringBuilder.Append(str3);
                    num2 = int.Parse(str3);
                }

                if (num3 >= 0)
                {
                    if (num >= 0 || num1 >= 0 || num2 >= 0)
                    {
                        stringBuilder.Append(", ");
                    }

                    int length3 = num3 + "vti_associategroups:SW|".Length;
                    string str4 = sMetaInfo.Substring(length3, sMetaInfo.IndexOf("\r\n", length3) - length3);
                    stringBuilder.Append(str4.Replace(";", ", "));
                    str = str4;
                }

                DataTable dataTable = null;
                if (stringBuilder.Length > 0)
                {
                    string str5 = string.Concat("Select ID, Title from Groups where SiteId=@SiteId and ID in ( ",
                        stringBuilder.ToString(), ")");
                    using (SqlConnection sqlConnection = new SqlConnection(this.ConnectionString))
                    {
                        SqlCommand sqlCommand = this.GetSqlCommand(str5, sqlConnection);
                        sqlCommand.Parameters.Add(new SqlParameter("SiteID", this.SiteID));
                        SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand);
                        dataTable = new DataTable();
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                this.WriteGroupValue("OwnerGroup", num, dataTable, xmlWriter);
                this.WriteGroupValue("MemberGroup", num1, dataTable, xmlWriter);
                this.WriteGroupValue("VisitorGroup", num2, dataTable, xmlWriter);
                this.WriteAssociateGroupValue("AssociateGroups", str, dataTable, xmlWriter);
            }
            catch (Exception exception)
            {
            }
        }

        private void WriteAssociateGroupValue(string sAttributeName, string iGroupIDs, DataTable dtGroups,
            XmlWriter xmlWriter)
        {
            string str = null;
            if (!string.IsNullOrEmpty(iGroupIDs))
            {
                string str1 = iGroupIDs.Trim();
                char[] chrArray = new char[] { ';' };
                string[] strArrays = str1.TrimEnd(chrArray).Split(new char[] { ';' });
                if (dtGroups != null)
                {
                    string[] strArrays1 = strArrays;
                    for (int i = 0; i < (int)strArrays1.Length; i++)
                    {
                        string str2 = strArrays1[i];
                        foreach (DataRow row in dtGroups.Rows)
                        {
                            if ((int)row["ID"] != int.Parse(str2))
                            {
                                continue;
                            }

                            str = string.Concat(str, row["Title"].ToString(), ';');
                        }
                    }
                }
            }

            if (str != null)
            {
                xmlWriter.WriteAttributeString(sAttributeName, str);
                return;
            }

            xmlWriter.WriteAttributeString(sAttributeName, "");
        }

        internal void WriteDataRowColumn(DataRow dr, DataColumn c, XmlWriter xmlWriter)
        {
            this.WriteDataRowColumn(dr, c, xmlWriter, false, false);
        }

        internal void WriteDataRowColumn(DataRow dr, DataColumn c, XmlWriter xmlWriter, bool bIsMultiValueField,
            bool bIsSIDField)
        {
            if (c == null)
            {
                return;
            }

            this.WriteDataRowColumn(dr, c, c.ColumnName, xmlWriter, bIsMultiValueField, bIsSIDField, null);
        }

        internal void WriteDataRowColumn(DataRow dr, DataColumn c, string sColumnName, XmlWriter xmlWriter)
        {
            this.WriteDataRowColumn(dr, c, sColumnName, xmlWriter, false, false, null);
        }

        internal void WriteDataRowColumn(DataRow dr, DataColumn c, string sColumnName, XmlWriter xmlWriter,
            bool bIsMultiValueField, bool bIsSIDField, Dictionary<string, string> taxonomyFields)
        {
            if (c == null)
            {
                return;
            }

            string str = XmlUtility.EncodeNameStartChars(sColumnName);
            if (dr[c] is DBNull)
            {
                xmlWriter.WriteAttributeString(str, "");
                return;
            }

            if (c.DataType == typeof(byte[]))
            {
                object item = dr[c];
                string str1 = null;
                if (bIsSIDField)
                {
                    try
                    {
                        str1 = Metalogix.SharePoint.Adapters.Utils.SidToString((byte[])item);
                    }
                    catch
                    {
                    }
                }

                if (string.IsNullOrEmpty(str1))
                {
                    StringBuilder stringBuilder = new StringBuilder(100);
                    stringBuilder.Append("0x");
                    byte[] numArray = (byte[])item;
                    for (int i = 0; i < (int)numArray.Length; i++)
                    {
                        byte num = numArray[i];
                        stringBuilder.Append(string.Format("{0:X2}", num));
                    }

                    str1 = stringBuilder.ToString();
                }

                xmlWriter.WriteAttributeString(str, str1);
                return;
            }

            if (c.DataType == typeof(DateTime) || dr[c] is DateTime)
            {
                DateTime dateTime = Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)dr[c]);
                xmlWriter.WriteAttributeString(str, Metalogix.SharePoint.Adapters.Utils.FormatDate(dateTime));
                return;
            }

            if (c.DataType == typeof(double))
            {
                xmlWriter.WriteAttributeString(str,
                    DBAdapter.s_DoubleConverter.ConvertToString(null, DBAdapter.s_CultureInfo, dr[c]));
                return;
            }

            if (bIsMultiValueField)
            {
                string fieldValue = this.GetFieldValue(dr, c, taxonomyFields);
                if (!string.IsNullOrEmpty(fieldValue))
                {
                    fieldValue = fieldValue.Trim(new char[] { ',', ';', '#' });
                }

                xmlWriter.WriteAttributeString(str, fieldValue);
                return;
            }

            string empty = this.GetFieldValue(dr, c, taxonomyFields);
            empty = XmlExtensions.ReplaceInvalidEscapeCharInXmlAttributeValue(empty);
            if (!XmlExtensions.IsValidXmlAttributeValue(empty))
            {
                empty = string.Empty;
            }

            xmlWriter.WriteAttributeString(str, empty);
        }

        internal void WriteDataRowValues(DataRow dr, XmlWriter xmlWriter)
        {
            this.WriteDataRowValues(dr, xmlWriter, null, null, null, null);
        }

        internal void WriteDataRowValues(DataRow dr, XmlWriter xmlWriter,
            Dictionary<string, string> columnNameMappingDictionary, List<string> multiValueFields,
            List<string> sidFields, Dictionary<string, string> taxonomyFields)
        {
            foreach (DataColumn column in dr.Table.Columns)
            {
                string columnName = column.ColumnName;
                if (columnNameMappingDictionary != null && columnNameMappingDictionary.ContainsKey(columnName))
                {
                    columnName = columnNameMappingDictionary[columnName];
                }

                if (column.ColumnName == "_VersionModified" || column.ColumnName == "_VersionModifiedBy" ||
                    column.ColumnName == "_VersionMetaInfo" || column.ColumnName == "_VersionSize")
                {
                    continue;
                }

                if (base.SharePointVersion.IsSharePoint2003 && column.ColumnName == "_VersionNumber")
                {
                    int num = Convert.ToInt32(dr["_VersionNumber"]) * 512;
                    xmlWriter.WriteAttributeString("_VersionNumber", num.ToString());
                }
                else if (!base.SharePointVersion.IsSharePoint2003 || !(column.ColumnName == "_VersionString"))
                {
                    bool flag = false;
                    if (multiValueFields != null)
                    {
                        flag = multiValueFields.Contains(column.ColumnName);
                    }

                    bool flag1 = false;
                    if (sidFields != null)
                    {
                        flag1 = sidFields.Contains(column.ColumnName);
                    }

                    this.WriteDataRowColumn(dr, column, columnName, xmlWriter, flag, flag1, taxonomyFields);
                }
                else
                {
                    xmlWriter.WriteAttributeString("_VersionString", string.Concat(dr[column].ToString(), ".0"));
                }
            }
        }

        private void WriteGranularEventData(SqlConnection conn, DataTable dt, XmlWriter xmlWriter,
            List<string> AddedEvents)
        {
            bool flag = false;
            foreach (DataRow row in dt.Rows)
            {
                if (AddedEvents.Contains(row["Id"].ToString()))
                {
                    continue;
                }

                xmlWriter.WriteStartElement("Event");
                xmlWriter.WriteAttributeString("Id", row["Id"].ToString());
                xmlWriter.WriteAttributeString("Name", row["Name"].ToString());
                xmlWriter.WriteAttributeString("ItemId", "1");
                xmlWriter.WriteAttributeString("HostId", row["HostId"].ToString());
                xmlWriter.WriteAttributeString("HostType", row["HostType"].ToString());
                xmlWriter.WriteAttributeString("DirName", row["DirName"].ToString());
                xmlWriter.WriteAttributeString("LeafName", row["LeafName"].ToString());
                xmlWriter.WriteAttributeString("Type", row["Type"].ToString());
                xmlWriter.WriteAttributeString("SequenceNumber", row["SequenceNumber"].ToString());
                xmlWriter.WriteAttributeString("Assembly", row["Assembly"].ToString());
                xmlWriter.WriteAttributeString("Class", row["Class"].ToString());
                xmlWriter.WriteAttributeString("Data", row["Data"].ToString());
                xmlWriter.WriteAttributeString("Filter", row["Filter"].ToString());
                xmlWriter.WriteAttributeString("SourceId", row["SourceId"].ToString());
                xmlWriter.WriteAttributeString("SourceType", row["SourceType"].ToString());
                xmlWriter.WriteAttributeString("Credential", row["Credential"].ToString());
                xmlWriter.WriteAttributeString("SiteId", null);
                xmlWriter.WriteAttributeString("WebId", null);
                if (!(row["ContextType"] is DBNull))
                {
                    Guid guid = new Guid((byte[])row["ContextType"]);
                    xmlWriter.WriteAttributeString("ContextType", guid.ToString());
                }

                if (!(row["ContextEventType"] is DBNull))
                {
                    Guid guid1 = new Guid((byte[])row["ContextEventType"]);
                    xmlWriter.WriteAttributeString("ContextEventType", guid1.ToString());
                }

                if (!(row["ContextId"] is DBNull))
                {
                    Guid guid2 = new Guid((byte[])row["ContextId"]);
                    xmlWriter.WriteAttributeString("ContextId", guid2.ToString());
                }

                if (!(row["ContextObjectId"] is DBNull))
                {
                    Guid guid3 = new Guid((byte[])row["ContextObjectId"]);
                    xmlWriter.WriteAttributeString("ContextObjectId", guid3.ToString());
                    flag = true;
                }

                if (!(row["ContextCollectionId"] is DBNull))
                {
                    Guid guid4 = new Guid((byte[])row["ContextCollectionId"]);
                    xmlWriter.WriteAttributeString("ContextCollectionId", guid4.ToString());
                }

                xmlWriter.WriteEndElement();
                AddedEvents.Add(row["Id"].ToString());
                if (!flag)
                {
                    continue;
                }

                string str = "select * from EventReceivers where ContextCollectionId = @ObjectIDByteArray";
                DataTable dataTable = new DataTable("WorkflowEvents");
                using (SqlCommand sqlCommand = this.GetSqlCommand(str, conn))
                {
                    sqlCommand.Parameters.Add(new SqlParameter("ObjectIDByteArray", (byte[])row["ContextObjectId"]));
                    using (SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(sqlCommand))
                    {
                        sqlDataAdapter.Fill(dataTable);
                    }
                }

                if (dt.Rows.Count != 0)
                {
                    this.WriteGranularEventData(conn, dataTable, xmlWriter, AddedEvents);
                }
                else
                {
                    return;
                }
            }
        }

        private void WriteGroupValue(string sAttributeName, int iGroupID, DataTable dtGroups, XmlWriter xmlWriter)
        {
            string str = null;
            if (dtGroups != null)
            {
                foreach (DataRow row in dtGroups.Rows)
                {
                    if ((int)row["ID"] != iGroupID)
                    {
                        continue;
                    }

                    str = row["Title"].ToString();
                }
            }

            if (str != null)
            {
                xmlWriter.WriteAttributeString(sAttributeName, str);
                return;
            }

            xmlWriter.WriteAttributeString(sAttributeName, "");
        }

        private void WriteNavNodeXml(DataRow nodeRow, ref List<DataRow> unwrittenRows, bool bOnGlobalNav,
            bool bOnCurrentNav, Guid[] hiddenGlobalNav, Guid[] hiddenCurrentNav, string sWebUrl, XmlWriter writer)
        {
            object item = nodeRow["Eid"];
            object obj = nodeRow["Name"];
            object item1 = nodeRow["Url"];
            object obj1 = nodeRow["DocUrl"];
            object item2 = nodeRow["DateLastModified"];
            object obj2 = nodeRow["NodeMetainfo"];
            bool navNodeIsVisible = true;
            if (bOnGlobalNav)
            {
                navNodeIsVisible = this.GetNavNodeIsVisible(nodeRow, hiddenGlobalNav);
            }
            else if (bOnCurrentNav)
            {
                navNodeIsVisible = this.GetNavNodeIsVisible(nodeRow, hiddenCurrentNav);
            }

            bool flag = false;
            if (!(item1 is DBNull))
            {
                flag = true;
            }

            string str = null;
            if (!flag)
            {
                str = obj1.ToString();
                if (!string.IsNullOrEmpty(sWebUrl) && str.StartsWith(sWebUrl))
                {
                    str = str.Remove(0, sWebUrl.Length);
                    str = str.TrimStart(new char[] { '/' });
                }
            }

            string str1 = (obj2 is DBNull ? "" : Encoding.UTF8.GetString((byte[])obj2));
            Dictionary<string, string> strs = new Dictionary<string, string>();
            string[] strArrays = str1.Split(new char[] { '\n' });
            for (int i = 0; i < (int)strArrays.Length; i++)
            {
                string str2 = strArrays[i];
                int num = str2.IndexOf(':');
                if (num >= 0)
                {
                    string str3 = str2.Substring(0, num);
                    string str4 = str2.Substring(num + 1);
                    int num1 = str4.IndexOf('|');
                    if (num1 >= 0)
                    {
                        str4 = (num1 == str4.Length - 1 ? "" : str4.Substring(num1 + 1));
                        str4 = str4.Trim();
                        if (strs.ContainsKey(str3))
                        {
                            strs[str3] = str4;
                        }
                        else
                        {
                            strs.Add(str3, str4);
                        }
                    }
                }
            }

            writer.WriteStartElement("NavNode");
            writer.WriteAttributeString("ID", item.ToString());
            writer.WriteAttributeString("Title", (obj is DBNull ? "" : obj.ToString()));
            writer.WriteAttributeString("Url", (flag ? item1.ToString() : str));
            writer.WriteAttributeString("IsVisible", navNodeIsVisible.ToString());
            writer.WriteAttributeString("IsExternal", flag.ToString());
            writer.WriteAttributeString("LastModified",
                Metalogix.SharePoint.Adapters.Utils.FormatDate((item2 is DBNull
                    ? DateTime.UtcNow
                    : Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)item2))));
            foreach (string key in strs.Keys)
            {
                if (string.IsNullOrEmpty(key))
                {
                    continue;
                }

                string str5 = key;
                if (str5 == "LastModifiedDate" || str5 == "CreatedDate")
                {
                    continue;
                }

                object item3 = strs[key];
                writer.WriteAttributeString(str5, (item3 == null ? "" : item3.ToString()));
            }

            List<DataRow> dataRows = new List<DataRow>();
            string str6 = item.ToString();
            foreach (DataRow unwrittenRow in unwrittenRows)
            {
                object obj3 = unwrittenRow["EidParent"];
                if (unwrittenRow["EidParent"].ToString() != str6)
                {
                    continue;
                }

                dataRows.Add(unwrittenRow);
            }

            foreach (DataRow dataRow in dataRows)
            {
                unwrittenRows.Remove(dataRow);
            }

            foreach (DataRow dataRow1 in dataRows)
            {
                this.WriteNavNodeXml(dataRow1, ref unwrittenRows, (bOnGlobalNav ? true : (int)item == 1002),
                    (bOnCurrentNav ? true : (int)item == 1025), hiddenGlobalNav, hiddenCurrentNav, sWebUrl, writer);
            }

            writer.WriteEndElement();
        }

        private void WritePortalListingData(DataTable listingTable, XmlWriter writer)
        {
            string str;
            writer.WriteStartElement("PortalListings");
            Type type = typeof(DateTime);
            foreach (DataRow row in listingTable.Rows)
            {
                writer.WriteStartElement("Listing");
                foreach (DataColumn column in row.Table.Columns)
                {
                    string columnName = column.ColumnName;
                    object item = row[column];
                    if (item == null || item == DBNull.Value)
                    {
                        str = "";
                    }
                    else if (columnName.Equals("PersonSID", StringComparison.OrdinalIgnoreCase))
                    {
                        try
                        {
                            str = Metalogix.SharePoint.Adapters.Utils.SidToString((byte[])item);
                        }
                        catch
                        {
                            str = "";
                        }
                    }
                    else if (columnName.Equals("ApprovalStatus", StringComparison.OrdinalIgnoreCase))
                    {
                        if (item == null || item == DBNull.Value)
                        {
                            str = "";
                        }
                        else
                        {
                            str = item.ToString();
                            switch ((byte)item)
                            {
                                case 0:
                                {
                                    str = "Pending";
                                    break;
                                }
                                case 1:
                                {
                                    str = "Approved";
                                    break;
                                }
                                case 2:
                                {
                                    str = "Rejected";
                                    break;
                                }
                                default:
                                {
                                    str = "Archived";
                                    break;
                                }
                            }
                        }
                    }
                    else if (!type.IsAssignableFrom(column.DataType))
                    {
                        str = item.ToString();
                    }
                    else
                    {
                        DateTime dateTime = Metalogix.SharePoint.Adapters.Utils.MakeTrueUTCDateTime((DateTime)item);
                        str = (dateTime.Year == 1753 || dateTime.Year == 9999
                            ? ""
                            : Metalogix.SharePoint.Adapters.Utils.FormatDate(dateTime));
                    }

                    writer.WriteAttributeString(columnName, str);
                }

                writer.WriteEndElement();
            }

            writer.WriteEndElement();
            writer.Flush();
        }

        private void WriteWebPartRow(DataRow wpRow, string sPersonalizationsXml, XmlTextWriter xmlWriter)
        {
            xmlWriter.WriteStartElement("WebPart");
            this.WriteDataRowValues(wpRow, xmlWriter);
            if (sPersonalizationsXml != null)
            {
                xmlWriter.WriteRaw(sPersonalizationsXml);
            }

            xmlWriter.WriteEndElement();
        }

        private class CompressedXmlReader : XmlReader
        {
            private const int ATTRIBUTE_NIL = -1;

            private bool _needToPopScope;

            private ArrayList attributes;

            private BinaryReader br;

            private int depth;

            private bool eof;

            private byte[] @global;

            private int iAttribute;

            private string localName;

            private DBAdapter.WebPartNameTable nameTable;

            private string ns;

            private XmlNamespaceManager nsManager;

            private byte[] personal;

            private string text;

            private XmlNodeType type;

            private bool usePersonal;

            public override int AttributeCount
            {
                get { return this.attributes.Count; }
            }

            public override string BaseURI
            {
                get { return string.Empty; }
            }

            public override int Depth
            {
                get { return this.depth; }
            }

            public override bool EOF
            {
                get { return this.eof; }
            }

            public override bool HasValue
            {
                get { throw new NotImplementedException(); }
            }

            public override bool IsDefault
            {
                get { return false; }
            }

            public override bool IsEmptyElement
            {
                get { return false; }
            }

            public override string this[string name]
            {
                get { throw new NotImplementedException(); }
            }

            public override string this[int i]
            {
                get { throw new NotImplementedException(); }
            }

            public override string this[string name, string ns]
            {
                get { throw new NotImplementedException(); }
            }

            public override string LocalName
            {
                get
                {
                    switch (this.type)
                    {
                        case XmlNodeType.Element:
                        {
                            return this.localName;
                        }
                        case XmlNodeType.Attribute:
                        {
                            return ((DBAdapter.CompressedXmlReader.WebPartXmlAttribute)this.attributes[this.iAttribute])
                                .localName;
                        }
                    }

                    return null;
                }
            }

            public override string Name
            {
                get
                {
                    if (this.Prefix.Length == 0)
                    {
                        return this.LocalName;
                    }

                    return string.Concat(this.Prefix, ":", this.LocalName);
                }
            }

            public override string NamespaceURI
            {
                get
                {
                    string empty = string.Empty;
                    switch (this.type)
                    {
                        case XmlNodeType.Element:
                        {
                            empty = this.ns;
                            break;
                        }
                        case XmlNodeType.Attribute:
                        {
                            empty =
                                ((DBAdapter.CompressedXmlReader.WebPartXmlAttribute)this.attributes[this.iAttribute])
                                .ns;
                            break;
                        }
                    }

                    if (empty.Length != 0)
                    {
                        return empty;
                    }

                    if (this.Prefix.Length <= 0)
                    {
                        return this.nsManager.DefaultNamespace;
                    }

                    return this.LookupNamespace(this.Prefix);
                }
            }

            public override XmlNameTable NameTable
            {
                get { return this.nameTable; }
            }

            public override XmlNodeType NodeType
            {
                get { return this.type; }
            }

            public override string Prefix
            {
                get
                {
                    if (this.type != XmlNodeType.Attribute)
                    {
                        return string.Empty;
                    }

                    return ((DBAdapter.CompressedXmlReader.WebPartXmlAttribute)this.attributes[this.iAttribute]).prefix;
                }
            }

            public override char QuoteChar
            {
                get { throw new NotImplementedException(); }
            }

            public override ReadState ReadState
            {
                get
                {
                    if (!this.eof)
                    {
                        return ReadState.Interactive;
                    }

                    return ReadState.EndOfFile;
                }
            }

            public override string Value
            {
                get
                {
                    switch (this.type)
                    {
                        case XmlNodeType.Element:
                        {
                            return this.text;
                        }
                        case XmlNodeType.Attribute:
                        {
                            return ((DBAdapter.CompressedXmlReader.WebPartXmlAttribute)this.attributes[this.iAttribute])
                                .val;
                        }
                        case XmlNodeType.Text:
                        {
                            if (this.iAttribute < 0)
                            {
                                return this.text;
                            }

                            return ((DBAdapter.CompressedXmlReader.WebPartXmlAttribute)this.attributes[this.iAttribute])
                                .val;
                        }
                        case XmlNodeType.CDATA:
                        {
                            if (this.text.StartsWith("<![CDATA[") && this.text.EndsWith("]]>"))
                            {
                                this.text = this.text.Substring(9, this.text.Length - 12);
                            }

                            return this.text;
                        }
                    }

                    return null;
                }
            }

            public override string XmlLang
            {
                get { throw new NotImplementedException(); }
            }

            public override XmlSpace XmlSpace
            {
                get { throw new NotImplementedException(); }
            }

            public CompressedXmlReader(XmlNamespaceManager nsManager, byte[] personal, byte[] global)
            {
                this.personal = personal;
                this.@global = global;
                this.nameTable = DBAdapter.WebPartNameTable.GlobalNameTable();
                this.nsManager = nsManager;
                this.SetBinaryReader(personal != null);
            }

            public override void Close()
            {
                this.br.Close();
            }

            public override string GetAttribute(int i)
            {
                throw new NotImplementedException();
            }

            public override string GetAttribute(string name)
            {
                throw new NotImplementedException();
            }

            public override string GetAttribute(string name, string ns)
            {
                DBAdapter.CompressedXmlReader.WebPartXmlAttribute current;
                IEnumerator enumerator = this.attributes.GetEnumerator();
                do
                {
                    if (!enumerator.MoveNext())
                    {
                        return null;
                    }

                    current = (DBAdapter.CompressedXmlReader.WebPartXmlAttribute)enumerator.Current;
                } while (!(current.localName == name) || !(current.ns == ns));

                return current.val;
            }

            public override string LookupNamespace(string prefix)
            {
                return this.nsManager.LookupNamespace(this.nameTable.Get(prefix));
            }

            public override void MoveToAttribute(int i)
            {
                throw new NotImplementedException();
            }

            public override bool MoveToAttribute(string name)
            {
                throw new NotImplementedException();
            }

            public override bool MoveToAttribute(string name, string ns)
            {
                throw new NotImplementedException();
            }

            public override bool MoveToElement()
            {
                bool flag = false;
                if (this.iAttribute < 0)
                {
                    return flag;
                }

                this.PopToElement();
                return true;
            }

            public override bool MoveToFirstAttribute()
            {
                this.iAttribute = -1;
                if (this.type == XmlNodeType.Element)
                {
                    if (this.attributes.Count > 0)
                    {
                        this.depth++;
                        this.type = XmlNodeType.Attribute;
                        this.iAttribute = 0;
                        return true;
                    }
                }

                return false;
            }

            public override bool MoveToNextAttribute()
            {
                DBAdapter.CompressedXmlReader compressedXmlReader;
                switch (this.type)
                {
                    case XmlNodeType.Element:
                    {
                        return this.MoveToFirstAttribute();
                    }
                    case XmlNodeType.Attribute:
                    {
                        if (this.iAttribute + 1 >= this.attributes.Count)
                        {
                            return false;
                        }

                        compressedXmlReader = this;
                        compressedXmlReader.iAttribute++;
                        return true;
                    }
                    case XmlNodeType.Text:
                    {
                        this.depth--;
                        this.type = XmlNodeType.Attribute;
                        if (this.iAttribute + 1 >= this.attributes.Count)
                        {
                            return false;
                        }

                        compressedXmlReader = this;
                        compressedXmlReader.iAttribute++;
                        return true;
                    }
                }

                return false;
            }

            private XmlNodeType PeekNodeType()
            {
                return (XmlNodeType)this.br.PeekChar();
            }

            private void PopToElement()
            {
                switch (this.type)
                {
                    case XmlNodeType.Attribute:
                    {
                        this.depth--;
                        break;
                    }
                    case XmlNodeType.Text:
                    {
                        this.depth -= 2;
                        break;
                    }
                }

                this.type = XmlNodeType.Element;
            }

            public override bool Read()
            {
                if (this.eof)
                {
                    return false;
                }

                if (this._needToPopScope)
                {
                    this._needToPopScope = false;
                    this.nsManager.PopScope();
                }
                else if (this.iAttribute >= 0)
                {
                    this.PopToElement();
                    this.iAttribute = -1;
                    this.attributes.Clear();
                }

                XmlNodeType xmlNodeType = (XmlNodeType)this.br.ReadByte();
                XmlNodeType xmlNodeType1 = xmlNodeType;
                switch (xmlNodeType1)
                {
                    case XmlNodeType.None:
                    case XmlNodeType.Attribute:
                    {
                        this.type = xmlNodeType;
                        return true;
                    }
                    case XmlNodeType.Element:
                    {
                        this.nsManager.PushScope();
                        this.localName = this.ReadPredefinedString();
                        this.ns = this.ReadPredefinedString();
                        if (this.ns.Length > 0)
                        {
                            this.nsManager.AddNamespace(string.Empty, this.ns);
                        }

                        this.text = null;
                        this.depth++;
                        this.ReadAttributes();
                        this.type = xmlNodeType;
                        return true;
                    }
                    case XmlNodeType.Text:
                    {
                        this.text = this.ReadPredefinedString(false);
                        this.type = xmlNodeType;
                        return true;
                    }
                    case XmlNodeType.CDATA:
                    {
                        this.text = this.ReadPredefinedString(false);
                        this.type = xmlNodeType;
                        return true;
                    }
                    default:
                    {
                        if (xmlNodeType1 == XmlNodeType.EndElement)
                        {
                            this.depth--;
                            this._needToPopScope = true;
                            if (this.depth != 0)
                            {
                                this.type = xmlNodeType;
                                return true;
                            }

                            this.br = null;
                            if (!this.usePersonal || this.@global == null)
                            {
                                this.eof = true;
                                this.type = xmlNodeType;
                                return true;
                            }
                            else
                            {
                                this.type = XmlNodeType.None;
                                this.SetBinaryReader(false);
                                this.MoveToContent();
                                this.Read();
                                xmlNodeType = this.type;
                                this.type = xmlNodeType;
                                return true;
                            }
                        }
                        else
                        {
                            this.type = xmlNodeType;
                            return true;
                        }
                    }
                }
            }

            private void ReadAttributes()
            {
                this.attributes.Clear();
                while (this.PeekNodeType() == XmlNodeType.Attribute)
                {
                    this.br.ReadByte();
                    DBAdapter.CompressedXmlReader.WebPartXmlAttribute webPartXmlAttribute =
                        new DBAdapter.CompressedXmlReader.WebPartXmlAttribute()
                        {
                            prefix = this.ReadPredefinedString(),
                            localName = this.ReadPredefinedString(),
                            ns = this.ReadPredefinedString()
                        };
                    DBAdapter.CompressedXmlReader.WebPartXmlAttribute webPartXmlAttribute1 = webPartXmlAttribute;
                    this.text = null;
                    while (this.Read() && this.type != XmlNodeType.None)
                    {
                    }

                    webPartXmlAttribute1.val = this.text;
                    if (webPartXmlAttribute1.prefix == "xmlns")
                    {
                        this.nsManager.AddNamespace(webPartXmlAttribute1.localName, webPartXmlAttribute1.val);
                    }

                    this.attributes.Add(webPartXmlAttribute1);
                }

                this.iAttribute = -1;
            }

            public override bool ReadAttributeValue()
            {
                bool flag = false;
                if (this.type != XmlNodeType.Attribute)
                {
                    return flag;
                }

                this.depth++;
                this.type = XmlNodeType.Text;
                return true;
            }

            public static string ReadCompressedXML(byte[] personal, byte[] global)
            {
                StringBuilder stringBuilder = new StringBuilder();
                XmlTextWriter xmlTextWriter = new XmlTextWriter(new StringWriter(stringBuilder));
                XmlNamespaceManager xmlNamespaceManagers = new XmlNamespaceManager((new XmlDocument()).NameTable);
                XmlReader compressedXmlReader =
                    new DBAdapter.CompressedXmlReader(xmlNamespaceManagers, personal, global);
                while (compressedXmlReader.Read())
                {
                    if (compressedXmlReader.NodeType == XmlNodeType.Element)
                    {
                        xmlTextWriter.WriteStartElement(compressedXmlReader.Name, compressedXmlReader.NamespaceURI);
                        for (int i = 0; i < compressedXmlReader.AttributeCount; i++)
                        {
                            compressedXmlReader.MoveToNextAttribute();
                            xmlTextWriter.WriteAttributeString(compressedXmlReader.Name, compressedXmlReader.Value);
                        }
                    }
                    else if (compressedXmlReader.NodeType == XmlNodeType.Attribute)
                    {
                        xmlTextWriter.WriteAttributeString(compressedXmlReader.Name, compressedXmlReader.Value);
                    }
                    else if (compressedXmlReader.NodeType == XmlNodeType.Text)
                    {
                        xmlTextWriter.WriteString(compressedXmlReader.Value);
                    }
                    else if (compressedXmlReader.NodeType != XmlNodeType.CDATA)
                    {
                        if (compressedXmlReader.NodeType != XmlNodeType.EndElement)
                        {
                            continue;
                        }

                        xmlTextWriter.WriteEndElement();
                    }
                    else
                    {
                        xmlTextWriter.WriteCData(compressedXmlReader.Value);
                    }
                }

                return stringBuilder.ToString();
            }

            public override string ReadInnerXml()
            {
                throw new NotImplementedException();
            }

            public override string ReadOuterXml()
            {
                throw new NotImplementedException();
            }

            private string ReadPredefinedString()
            {
                return this.ReadPredefinedString(true);
            }

            private string ReadPredefinedString(bool addToNameTable)
            {
                string str = null;
                ushort num = this.br.ReadUInt16();
                if (num == 65535)
                {
                    if (!addToNameTable)
                    {
                        return this.br.ReadString();
                    }

                    return this.nameTable.Add(this.br.ReadString());
                }

                str = this.nameTable.LookupPredefinedString(num);
                if (str != null)
                {
                    return str;
                }

                if (num == 97)
                {
                    return "http://schemas.microsoft.com/WebPart/v2/PivotView";
                }

                if (num != 49)
                {
                    return str;
                }

                return "CaptureMethod";
            }

            public override string ReadString()
            {
                string str = "";
                while (this.type != XmlNodeType.EndElement)
                {
                    if (this.type == XmlNodeType.Text)
                    {
                        str = string.Concat(str, this.text);
                    }

                    if (this.Read())
                    {
                        continue;
                    }

                    return str;
                }

                return str;
            }

            public override void ResolveEntity()
            {
                throw new NotImplementedException();
            }

            private void SetBinaryReader(bool usePersonal)
            {
                byte[] numArray = this.personal;
                this.usePersonal = usePersonal;
                if (!usePersonal)
                {
                    numArray = this.@global;
                }

                this.br = new BinaryReader(new MemoryStream(numArray));
            }

            private class WebPartXmlAttribute
            {
                public string localName;

                public string ns;

                public string prefix;

                public string val;

                public WebPartXmlAttribute()
                {
                }
            }
        }

        [Flags]
        public enum GroupFlags : long
        {
            OnlyAllowMembersViewMembership = 1,
            AllowMembersEditMembership = 2,
            AllowRequestToJoinLeave = 4,
            AutoAcceptRequestToJoinLeave = 8
        }

        private class ObjectCollectionDeserializer
        {
            public ObjectCollectionDeserializer()
            {
            }

            private static Dictionary<string, object> ConvertObjectSet(object[] collection)
            {
                Dictionary<string, object> strs = new Dictionary<string, object>();
                int num = 2;
                if ((int)collection.Length >= 2 && collection[1] != null &&
                    !int.TryParse(collection[1].ToString(), out num))
                {
                    num = 2;
                }

                DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator =
                    new DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator(collection);
                while (objectSetIterator.GetNextSegment())
                {
                    if (objectSetIterator.SegType == DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator
                            .SegmentType.PersonalizableProperties ||
                        objectSetIterator.SegType == DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator
                            .SegmentType.NonPersonalizableProperties ||
                        objectSetIterator.SegType == DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator
                            .SegmentType.IPersonalizableProperties || objectSetIterator.SegType ==
                        DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType.AttachedProperties)
                    {
                        for (int i = objectSetIterator.ObjectCount(); i > 0; i -= 2)
                        {
                            string str =
                                DBAdapter.ObjectCollectionDeserializer.ConvertTokenizedString(
                                    objectSetIterator.GetNextObject(), num);
                            strs.Add(str, objectSetIterator.GetNextObject());
                        }
                    }
                    else
                    {
                        objectSetIterator.SkipSegment();
                    }
                }

                return strs;
            }

            private static string ConvertTokenizedString(object value, int serializationMinorVersion)
            {
                bool flag = false;
                int num = -1;
                try
                {
                    num = int.Parse(value.ToString());
                    flag = true;
                }
                catch
                {
                }

                if (flag)
                {
                    return DBAdapter.WebPartNameTable.GlobalNameTable()
                        .LookupPredefinedString(Convert.ToUInt16(num, CultureInfo.InvariantCulture));
                }

                if (serializationMinorVersion != 2 || !(value is IndexedString))
                {
                    return (string)value;
                }

                return ((IndexedString)value).Value;
            }

            // Metalogix.SharePoint.Adapters.DB.DBAdapter.ObjectCollectionDeserializer
            public static Dictionary<string, object> DeserializeObjectData(byte[] data)
            {
                if (data == null || data.Length == 0)
                {
                    return null;
                }

                ObjectStateFormatter objectStateFormatter = new ObjectStateFormatter();
                MemoryStream memoryStream = new MemoryStream(data);
                while (memoryStream.Position < memoryStream.Length &&
                       data[(int)(checked((IntPtr)memoryStream.Position))] != 255)
                {
                    memoryStream.ReadByte();
                }

                object obj = objectStateFormatter.Deserialize(memoryStream);
                object[] collection = (object[])obj;
                return DBAdapter.ObjectCollectionDeserializer.ConvertObjectSet(collection);
            }

            public static void WriteOutProps(Dictionary<string, object> props, XmlTextWriter xmlWriter)
            {
                if (props == null)
                {
                    return;
                }

                foreach (string key in props.Keys)
                {
                    if (key == "FrameType" || key == "ImportErrorMessage")
                    {
                        continue;
                    }

                    object item = props[key];
                    if (item != null && item is IList)
                    {
                        continue;
                    }

                    xmlWriter.WriteStartElement("property");
                    xmlWriter.WriteAttributeString("name", key);
                    if (item == null)
                    {
                        xmlWriter.WriteAttributeString("type", typeof(string).ToString());
                        xmlWriter.WriteValue("");
                    }
                    else
                    {
                        xmlWriter.WriteAttributeString("type", item.GetType().ToString());
                        xmlWriter.WriteValue(item.ToString());
                    }

                    xmlWriter.WriteEndElement();
                }
            }

            private class ObjectSetIterator
            {
                private int idx;

                private object[] @set;

                private int m_count;

                private DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType m_type;

                public DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType SegType
                {
                    get { return this.m_type; }
                }

                public ObjectSetIterator(object[] collection)
                {
                    this.@set = collection;
                }

                private int GetInt(object value)
                {
                    return int.Parse(value.ToString());
                }

                internal object GetNextObject()
                {
                    object[] objArray = this.@set;
                    DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator = this;
                    int num = objectSetIterator.idx;
                    int num1 = num;
                    objectSetIterator.idx = num + 1;
                    return objArray[num1];
                }

                public bool GetNextSegment()
                {
                    object num;
                    object obj;
                    if (this.@set != null && this.idx >= (int)this.@set.Length)
                    {
                        return false;
                    }

                    if (this.@set[this.idx] is DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType)
                    {
                        object[] objArray = this.@set;
                        DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator = this;
                        int num1 = objectSetIterator.idx;
                        int num2 = num1;
                        objectSetIterator.idx = num1 + 1;
                        num = this.GetShort(
                            (DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType)objArray[num2]);
                    }
                    else
                    {
                        object[] objArray1 = this.@set;
                        DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator1 = this;
                        int num3 = objectSetIterator1.idx;
                        int num4 = num3;
                        objectSetIterator1.idx = num3 + 1;
                        num = this.GetShort(objArray1[num4]);
                    }

                    this.m_type = (DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType)((byte)num);
                    while (this.m_type >= DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType.Unknown)
                    {
                        DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator2 = this;
                        objectSetIterator2.idx = objectSetIterator2.idx + 1 + this.GetInt(this.@set[this.idx]);
                        if (this.idx >= (int)this.@set.Length)
                        {
                            return false;
                        }

                        if (this.@set[this.idx] is DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType)
                        {
                            object[] objArray2 = this.@set;
                            DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator3 = this;
                            int num5 = objectSetIterator3.idx;
                            int num6 = num5;
                            objectSetIterator3.idx = num5 + 1;
                            obj = this.GetShort(
                                (DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType)objArray2[num6]);
                        }
                        else
                        {
                            object[] objArray3 = this.@set;
                            DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator4 = this;
                            int num7 = objectSetIterator4.idx;
                            int num8 = num7;
                            objectSetIterator4.idx = num7 + 1;
                            obj = this.GetShort(objArray3[num8]);
                        }

                        this.m_type = (DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator.SegmentType)((byte)obj);
                    }

                    return true;
                }

                private short GetShort(object value)
                {
                    return short.Parse(value.ToString());
                }

                public int ObjectCount()
                {
                    object[] objArray = this.@set;
                    DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator objectSetIterator = this;
                    int num = objectSetIterator.idx;
                    int num1 = num;
                    objectSetIterator.idx = num + 1;
                    this.m_count = this.GetInt(objArray[num1]);
                    return this.m_count;
                }

                public void SkipSegment()
                {
                    DBAdapter.ObjectCollectionDeserializer.ObjectSetIterator num = this;
                    num.idx = num.idx + 1 + this.GetInt(this.@set[this.idx]);
                }

                public enum SegmentType : byte
                {
                    PersonalizableProperties,
                    NonPersonalizableProperties,
                    IPersonalizableProperties,
                    AttachedProperties,
                    LinkMap,
                    Unknown
                }
            }
        }

        internal enum SitesBitFlags : uint
        {
            writeLock = 1,
            readLock = 2,
            otherLock = 4,
            diskLock = 8,
            bandwidthLock = 16,
            nonpaymentLock = 32,
            violationLock = 64,
            diskLockMsgSent = 128,
            bandwidthLockMsgSent = 256,
            userLockMsgSent = 512,
            diskWarningSent = 1024,
            bandwidthWarningSent = 2048,
            recycleBinDisabled = 4096,
            syndicationDisabled = 8192,
            emailDisabled = 16384,
            mayHaveSiteAlerts = 32768,
            trimAuditLog = 65536,
            readOnlyLock = 131072,
            prescanned = 262144,
            userAccountRestriction = 524288,
            userSolutionActivated = 1048576,
            resourceWarnSent = 2097152,
            resourceMaxSent = 4194304,
            resourceMaxLock = 8388608,
            hasSiteScopedUserCustomActions = 16777216,
            uiVersionConfigurationEnabled = 33554432,
            tenantAdministrationSite = 134217728,
            userDefinedWorkflowsDisabled = 268435456,
            httpsHostHeaderSiteUrlScheme = 536870912,
            Invalid = 4294967295
        }

        public enum SPViewScope
        {
            Default = 0,
            RecursiveAll = 4096,
            FilesOnly = 2097152,
            Recursive = 2101248
        }

        public enum SPViewSetting
        {
            MobileView = 8388608,
            MobileDefaultView = 16777216
        }

        public enum SPViewType
        {
            Html = 1,
            Grid = 2048,
            Recurrence = 8193,
            Chart = 131072,
            Calendar = 524288,
            Gantt = 67108864
        }

        [Flags]
        public enum ViewFlags : long
        {
            HideViewFromEnumeration = 8
        }

        private class WebPartNameTable : XmlNameTable
        {
            private static Hashtable _table;

            private static string[] predefinedStrings;

            private static DBAdapter.WebPartNameTable m_table;

            static WebPartNameTable()
            {
                DBAdapter.WebPartNameTable._table = new Hashtable();
                DBAdapter.WebPartNameTable.predefinedStrings = new string[150];
                DBAdapter.WebPartNameTable.m_table = new DBAdapter.WebPartNameTable();
            }

            private WebPartNameTable()
            {
                DBAdapter.WebPartNameTable.AddPredefinedString(0, "http://schemas.microsoft.com/WebPart/v2");
                DBAdapter.WebPartNameTable.AddPredefinedString(1, "Dir");
                DBAdapter.WebPartNameTable.AddPredefinedString(2, "Description");
                DBAdapter.WebPartNameTable.AddPredefinedString(3, "Encoding");
                DBAdapter.WebPartNameTable.AddPredefinedString(4, "Title");
                DBAdapter.WebPartNameTable.AddPredefinedString(5, "WebPart");
                DBAdapter.WebPartNameTable.AddPredefinedString(6, "IsIncluded");
                DBAdapter.WebPartNameTable.AddPredefinedString(7, "Zone");
                DBAdapter.WebPartNameTable.AddPredefinedString(8, "ZoneID");
                DBAdapter.WebPartNameTable.AddPredefinedString(9, "PartOrder");
                DBAdapter.WebPartNameTable.AddPredefinedString(10, "NumberLimit");
                DBAdapter.WebPartNameTable.AddPredefinedString(11, "FrameState");
                DBAdapter.WebPartNameTable.AddPredefinedString(12, "Height");
                DBAdapter.WebPartNameTable.AddPredefinedString(13, "Width");
                DBAdapter.WebPartNameTable.AddPredefinedString(14, "Toolbar");
                DBAdapter.WebPartNameTable.AddPredefinedString(15, "ContentLink");
                DBAdapter.WebPartNameTable.AddPredefinedString(16, "DisplayName");
                DBAdapter.WebPartNameTable.AddPredefinedString(17, "DataFields");
                DBAdapter.WebPartNameTable.AddPredefinedString(18, "DataQuery");
                DBAdapter.WebPartNameTable.AddPredefinedString(19, "XSLLink");
                DBAdapter.WebPartNameTable.AddPredefinedString(20, "XSL");
                DBAdapter.WebPartNameTable.AddPredefinedString(21, "AllowRemove");
                DBAdapter.WebPartNameTable.AddPredefinedString(22, "AllowMinimize");
                DBAdapter.WebPartNameTable.AddPredefinedString(23, "IsVisible");
                DBAdapter.WebPartNameTable.AddPredefinedString(24, "Namespace");
                DBAdapter.WebPartNameTable.AddPredefinedString(25, "ViewFlag");
                DBAdapter.WebPartNameTable.AddPredefinedString(26, "DetailLink");
                DBAdapter.WebPartNameTable.AddPredefinedString(27, "HelpLink");
                DBAdapter.WebPartNameTable.AddPredefinedString(28, "PartStorage");
                DBAdapter.WebPartNameTable.AddPredefinedString(29, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(30, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(31, "PartImageSmall");
                DBAdapter.WebPartNameTable.AddPredefinedString(32, "PartImageLarge");
                DBAdapter.WebPartNameTable.AddPredefinedString(33, "Assembly");
                DBAdapter.WebPartNameTable.AddPredefinedString(34, "TypeName");
                DBAdapter.WebPartNameTable.AddPredefinedString(35, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(36, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(37, "FrameType");
                DBAdapter.WebPartNameTable.AddPredefinedString(38, "Connections");
                DBAdapter.WebPartNameTable.AddPredefinedString(39, "MissingAssembly");
                DBAdapter.WebPartNameTable.AddPredefinedString(40, "Name");
                DBAdapter.WebPartNameTable.AddPredefinedString(41, "");
                DBAdapter.WebPartNameTable.AddPredefinedString(42, "xmlns");
                DBAdapter.WebPartNameTable.AddPredefinedString(43, "AllowZoneChange");
                DBAdapter.WebPartNameTable.AddPredefinedString(44, "ParamBindings");
                DBAdapter.WebPartNameTable.AddPredefinedString(45, "FireInitialRow");
                DBAdapter.WebPartNameTable.AddPredefinedString(46, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(47, "ImageLink");
                DBAdapter.WebPartNameTable.AddPredefinedString(48, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(49, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(50, "PostData");
                DBAdapter.WebPartNameTable.AddPredefinedString(51, "Tags");
                DBAdapter.WebPartNameTable.AddPredefinedString(52, "TagIndexes");
                DBAdapter.WebPartNameTable.AddPredefinedString(53, "RenderTags");
                DBAdapter.WebPartNameTable.AddPredefinedString(54, "RenderTagIndexes");
                DBAdapter.WebPartNameTable.AddPredefinedString(55, "LastUpdated");
                DBAdapter.WebPartNameTable.AddPredefinedString(56, "RefreshInterval");
                DBAdapter.WebPartNameTable.AddPredefinedString(57, "LastCached");
                DBAdapter.WebPartNameTable.AddPredefinedString(58, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(59, "Content");
                DBAdapter.WebPartNameTable.AddPredefinedString(60, "ConnectionID");
                DBAdapter.WebPartNameTable.AddPredefinedString(61, "http://www.w3.org/2001/XMLSchema");
                DBAdapter.WebPartNameTable.AddPredefinedString(62, "http://www.w3.org/2001/XMLSchema-instance");
                DBAdapter.WebPartNameTable.AddPredefinedString(63, "Normal");
                DBAdapter.WebPartNameTable.AddPredefinedString(64, "Minimized");
                DBAdapter.WebPartNameTable.AddPredefinedString(65, "Default");
                DBAdapter.WebPartNameTable.AddPredefinedString(66, "LeftToRight");
                DBAdapter.WebPartNameTable.AddPredefinedString(67, "RightToLeft");
                DBAdapter.WebPartNameTable.AddPredefinedString(68, "None");
                DBAdapter.WebPartNameTable.AddPredefinedString(69, "Standard");
                DBAdapter.WebPartNameTable.AddPredefinedString(70, "TitleBarOnly");
                DBAdapter.WebPartNameTable.AddPredefinedString(71, "true");
                DBAdapter.WebPartNameTable.AddPredefinedString(72, "false");
                DBAdapter.WebPartNameTable.AddPredefinedString(73, "xsi");
                DBAdapter.WebPartNameTable.AddPredefinedString(74, "xsd");
                DBAdapter.WebPartNameTable.AddPredefinedString(75, "NoDefaultStyle");
                DBAdapter.WebPartNameTable.AddPredefinedString(76, "VerticalAlignment");
                DBAdapter.WebPartNameTable.AddPredefinedString(77, "HorizontalAlignment");
                DBAdapter.WebPartNameTable.AddPredefinedString(78, "BackgroundColor");
                DBAdapter.WebPartNameTable.AddPredefinedString(79, "IsIncludedFilter");
                DBAdapter.WebPartNameTable.AddPredefinedString(80, "XML");
                DBAdapter.WebPartNameTable.AddPredefinedString(81, "XMLLink");
                DBAdapter.WebPartNameTable.AddPredefinedString(82, "HeaderCaption");
                DBAdapter.WebPartNameTable.AddPredefinedString(83, "HeaderTitle");
                DBAdapter.WebPartNameTable.AddPredefinedString(84, "HeaderDescription");
                DBAdapter.WebPartNameTable.AddPredefinedString(85, "Image");
                DBAdapter.WebPartNameTable.AddPredefinedString(86, "ContentHasToken");
                DBAdapter.WebPartNameTable.AddPredefinedString(87, "ExportControlledProperties");
                DBAdapter.WebPartNameTable.AddPredefinedString(88, "SourceType");
                DBAdapter.WebPartNameTable.AddPredefinedString(89, "Fields");
                DBAdapter.WebPartNameTable.AddPredefinedString(90,
                    "http://schemas.microsoft.com/WebPart/v2/ContentEditor");
                DBAdapter.WebPartNameTable.AddPredefinedString(91,
                    "http://schemas.microsoft.com/WebPart/v2/PageViewer");
                DBAdapter.WebPartNameTable.AddPredefinedString(92, "http://schemas.microsoft.com/WebPart/v2/Image");
                DBAdapter.WebPartNameTable.AddPredefinedString(93, "http://schemas.microsoft.com/WebPart/v2/Xml");
                DBAdapter.WebPartNameTable.AddPredefinedString(94, "http://schemas.microsoft.com/WebPart/v2/DataView");
                DBAdapter.WebPartNameTable.AddPredefinedString(95, "http://schemas.microsoft.com/WebPart/v2/ListForm");
                DBAdapter.WebPartNameTable.AddPredefinedString(96, "http://schemas.microsoft.com/WebPart/v2/ListView");
                DBAdapter.WebPartNameTable.AddPredefinedString(97, null);
                DBAdapter.WebPartNameTable.AddPredefinedString(98, "http://schemas.microsoft.com/WebPart/v2/TitleBar");
                DBAdapter.WebPartNameTable.AddPredefinedString(99,
                    "http://schemas.microsoft.com/WebPart/v2/SimpleForm");
                DBAdapter.WebPartNameTable.AddPredefinedString(100, "http://schemas.microsoft.com/WebPart/v2/Members");
                DBAdapter.WebPartNameTable.AddPredefinedString(101, "CacheDataStorage");
                DBAdapter.WebPartNameTable.AddPredefinedString(102, "CacheDataTimeout");
                DBAdapter.WebPartNameTable.AddPredefinedString(103, "CacheXslStorage");
                DBAdapter.WebPartNameTable.AddPredefinedString(104, "AlternativeText");
                DBAdapter.WebPartNameTable.AddPredefinedString(105, "DataSourceBindings");
                DBAdapter.WebPartNameTable.AddPredefinedString(106, "Template");
                DBAdapter.WebPartNameTable.AddPredefinedString(107, "http://schemas.microsoft.com/WebPart/v3");
                DBAdapter.WebPartNameTable.AddPredefinedString(108, "ID");
                DBAdapter.WebPartNameTable.AddPredefinedString(109, "AttachedPropertiesShared");
                DBAdapter.WebPartNameTable.AddPredefinedString(110, "AttachedPropertiesUser");
                DBAdapter.WebPartNameTable.AddPredefinedString(111, "AllowConnect");
                DBAdapter.WebPartNameTable.AddPredefinedString(112, "AllowEdit");
                DBAdapter.WebPartNameTable.AddPredefinedString(113, "AllowHide");
                DBAdapter.WebPartNameTable.AddPredefinedString(114, "HelpMode");
                DBAdapter.WebPartNameTable.AddPredefinedString(115,
                    "http://schemas.microsoft.com/WebPart/v2/UserTasks");
                DBAdapter.WebPartNameTable.AddPredefinedString(116, "http://schemas.microsoft.com/WebPart/v2/UserDocs");
                DBAdapter.WebPartNameTable.AddPredefinedString(117,
                    "http://schemas.microsoft.com/WebPart/v2/Aggregation");
                DBAdapter.WebPartNameTable.AddPredefinedString(118, "QuerySiteCollection");
                DBAdapter.WebPartNameTable.AddPredefinedString(119, "MaxItemsShown");
                DBAdapter.WebPartNameTable.AddPredefinedString(120, "QueryLastModifiedBy");
                DBAdapter.WebPartNameTable.AddPredefinedString(121, "QueryCreatedBy");
                DBAdapter.WebPartNameTable.AddPredefinedString(122, "QueryCheckedOutBy");
                DBAdapter.WebPartNameTable.AddPredefinedString(123, "DisplayFolderColumn");
                DBAdapter.WebPartNameTable.AddPredefinedString(124, "DisplayItemLinkColumn");
                DBAdapter.WebPartNameTable.AddPredefinedString(125, "TitleUrl");
                DBAdapter.WebPartNameTable.AddPredefinedString(126, "DisplayType");
                DBAdapter.WebPartNameTable.AddPredefinedString(127, "MembershipGroupId");
                DBAdapter.WebPartNameTable.AddPredefinedString(128, "AllowClose");
                DBAdapter.WebPartNameTable.AddPredefinedString(129, "AuthorizationFilter");
                DBAdapter.WebPartNameTable.AddPredefinedString(130, "CatalogIconImageUrl");
                DBAdapter.WebPartNameTable.AddPredefinedString(131, "ChromeState");
                DBAdapter.WebPartNameTable.AddPredefinedString(132, "ChromeType");
                DBAdapter.WebPartNameTable.AddPredefinedString(133, "Direction");
                DBAdapter.WebPartNameTable.AddPredefinedString(134, "ExportMode");
                DBAdapter.WebPartNameTable.AddPredefinedString(135, "HelpUrl");
                DBAdapter.WebPartNameTable.AddPredefinedString(136, "Hidden");
                DBAdapter.WebPartNameTable.AddPredefinedString(137, "ImportErrorMessage");
                DBAdapter.WebPartNameTable.AddPredefinedString(138, "IsClosed");
                DBAdapter.WebPartNameTable.AddPredefinedString(139, "TitleIconImageUrl");
                DBAdapter.WebPartNameTable.AddPredefinedString(140, "ZoneIndex");
                DBAdapter.WebPartNameTable.AddPredefinedString(141, "PersonalizableProperties");
                DBAdapter.WebPartNameTable.AddPredefinedString(142, "NonPersonalizableProperties");
                DBAdapter.WebPartNameTable.AddPredefinedString(143, "IPersonalizableProperties");
                DBAdapter.WebPartNameTable.AddPredefinedString(144, "AttachedProperties");
                DBAdapter.WebPartNameTable.AddPredefinedString(145, "LinkMap");
                DBAdapter.WebPartNameTable.AddPredefinedString(146, "Unknown");
                DBAdapter.WebPartNameTable.AddPredefinedString(147, "ViewContentTypeId");
                DBAdapter.WebPartNameTable.AddPredefinedString(148, "CssStyleSheet");
                DBAdapter.WebPartNameTable.AddPredefinedString(149, "ListName");
            }

            public override string Add(string array)
            {
                string str;
                string str1 = this.Get(array);
                if (str1 != null)
                {
                    return str1;
                }

                lock (DBAdapter.WebPartNameTable._table)
                {
                    str1 = this.Get(array);
                    if (str1 == null)
                    {
                        DBAdapter.WebPartNameTable._table[array] = new DBAdapter.WebPartNameTable.StringEntry(array);
                        str = array;
                    }
                    else
                    {
                        str = str1;
                    }
                }

                return str;
            }

            public override string Add(char[] array, int offset, int length)
            {
                return this.Add(new string(array, offset, length));
            }

            private static void AddPredefinedString(ushort us, string s)
            {
                if (s != null)
                {
                    DBAdapter.WebPartNameTable.predefinedStrings[us] = s;
                    DBAdapter.WebPartNameTable._table[s] = new DBAdapter.WebPartNameTable.StringEntry(s, us);
                }
            }

            public override string Get(string array)
            {
                DBAdapter.WebPartNameTable.StringEntry item =
                    (DBAdapter.WebPartNameTable.StringEntry)DBAdapter.WebPartNameTable._table[array];
                if (item == null)
                {
                    return null;
                }

                return item._s;
            }

            public override string Get(char[] array, int offset, int length)
            {
                return this.Get(new string(array, offset, length));
            }

            public static DBAdapter.WebPartNameTable GlobalNameTable()
            {
                return DBAdapter.WebPartNameTable.m_table;
            }

            public string LookupPredefinedString(ushort us)
            {
                if (us >= (int)DBAdapter.WebPartNameTable.predefinedStrings.Length)
                {
                    return "";
                }

                return DBAdapter.WebPartNameTable.predefinedStrings[us];
            }

            public class StringEntry
            {
                public readonly ushort _predefinedConstant;

                public readonly string _s;

                public StringEntry(string s)
                {
                    this._s = s;
                    this._predefinedConstant = 65535;
                }

                public StringEntry(string s, ushort predefinedConstant) : this(s)
                {
                    this._predefinedConstant = predefinedConstant;
                }
            }
        }
    }
}