using Metalogix.Actions;
using Metalogix.Commands;
using Metalogix.DataStructures;
using Metalogix.SharePoint.Actions.Migration;
using Metalogix.SharePoint.Options;
using Metalogix.SharePoint.Options.Migration;
using System;
using System.Management.Automation;

namespace Metalogix.SharePoint.Migration.Commands
{
	[Cmdlet("Copy", "MLSharePointNavigation")]
	public class CopyNavigationCmdlet : ActionCmdlet
	{
		protected override Type ActionType
		{
			get
			{
				return typeof(PasteNavigationAction);
			}
		}

		[Parameter(HelpMessage="Indicates that the navigation copy should include the quick launch.")]
		public SwitchParameter CopyQuickLaunch
		{
			get
			{
				return this.PasteNavigationOptions.CopyCurrentNavigation;
			}
			set
			{
				this.PasteNavigationOptions.CopyCurrentNavigation = value;
			}
		}

		[Parameter(HelpMessage="Indicates whether the copy should be run for all sub sites in addition to the copy source.")]
		public SwitchParameter CopySubSiteNavigation
		{
			get
			{
				return this.PasteNavigationOptions.Recursive;
			}
			set
			{
				this.PasteNavigationOptions.Recursive = value;
			}
		}

		[Parameter(HelpMessage="Indicates that the navigation copy should include the top navigation bar.")]
		public SwitchParameter CopyTopNavigationBar
		{
			get
			{
				return this.PasteNavigationOptions.CopyGlobalNavigation;
			}
			set
			{
				this.PasteNavigationOptions.CopyGlobalNavigation = value;
			}
		}

		[Parameter(HelpMessage="Forces a refresh of the source and target nodes prior to copying to ensure that all cached data is up to date.")]
		public SwitchParameter ForceRefresh
		{
			get
			{
				return this.PasteNavigationOptions.ForceRefresh;
			}
			set
			{
				this.PasteNavigationOptions.ForceRefresh = value;
			}
		}

		[Parameter(HelpMessage="Enabled the mapping of audiences during a copy.")]
		public SwitchParameter MapAudiences
		{
			get
			{
				return this.PasteNavigationOptions.MapAudiences;
			}
			set
			{
				this.PasteNavigationOptions.MapAudiences = value;
			}
		}

		protected virtual Metalogix.SharePoint.Options.Migration.PasteNavigationOptions PasteNavigationOptions
		{
			get
			{
				return base.Action.Options as Metalogix.SharePoint.Options.Migration.PasteNavigationOptions;
			}
		}

		[Parameter(Mandatory=false, HelpMessage="When set, any dynamically created link correction or GUID mappings will be persisted to the global mappings store. If the global mappings already contain an entry for a particular source GUID, it will be overwritten with the value dynamically generated by the action.")]
		public SwitchParameter PersistMappings
		{
			get
			{
				return this.PasteNavigationOptions.PersistMappings;
			}
			set
			{
				this.PasteNavigationOptions.PersistMappings = value;
			}
		}

		[Parameter(Mandatory=false, HelpMessage="Defines a collection of transformation tasks, such as renaming, to be used during link correction to correct links pointing to locations in renamed sites and lists.")]
		public TransformationTaskCollection TaskCollection
		{
			get
			{
				return this.PasteNavigationOptions.TaskCollection;
			}
			set
			{
				if (value == null || value.Count == 0)
				{
					this.PasteNavigationOptions.RenameSpecificNodes = false;
				}
				else
				{
					this.PasteNavigationOptions.RenameSpecificNodes = true;
				}
				this.PasteNavigationOptions.TaskCollection = value;
			}
		}

		[Parameter(HelpMessage="Indicates whether link correction mapping generation is performed before the migration or as the migration occurs.")]
		public SwitchParameter UseComprehensiveLinkCorrection
		{
			get
			{
				return this.PasteNavigationOptions.UseComprehensiveLinkCorrection;
			}
			set
			{
				this.PasteNavigationOptions.UseComprehensiveLinkCorrection = value;
			}
		}

		[Parameter(Mandatory=false, HelpMessage="Enables verbose logging.")]
		public SwitchParameter VerboseLog
		{
			get
			{
				return this.PasteNavigationOptions.Verbose;
			}
			set
			{
				this.PasteNavigationOptions.Verbose = value;
			}
		}

		public CopyNavigationCmdlet()
		{
		}

		protected override bool ProcessParameters()
		{
			if (base.Source == null)
			{
				base.ThrowTerminatingError(new ErrorRecord(new ArgumentException("The source of the copy is null, please initialize a proper source node."), "ArgumentError", ErrorCategory.InvalidArgument, base.Target));
			}
			else if (base.Target == null)
			{
				base.ThrowTerminatingError(new ErrorRecord(new ArgumentException("The target of the copy is null, please initialize a proper target node."), "ArgumentError", ErrorCategory.InvalidArgument, base.Target));
			}
			if (!this.CopyQuickLaunch && !this.CopyTopNavigationBar)
			{
				base.ThrowTerminatingError(new ErrorRecord(new ArgumentException("The copy must include the top navigation bar, the quick launch, or both. Please include at least one of these options."), "ArgumentError", ErrorCategory.InvalidArgument, base.Target));
			}
			return base.ProcessParameters();
		}
	}
}